main ()
{
  Adc_Ip_StatusType adcStatus;
  Clock_Ip_StatusType clockStatus;
  int D.6559;
  <unnamed type> _1;
  short unsigned int _2;
  short unsigned int data.2_3;
  long unsigned int _4;
  short unsigned int _5;
  short unsigned int data.3_6;
  long unsigned int _7;

  <bb 2> :
  clockStatus_16 = Clock_Ip_Init (&Mcu_aClockConfigPB[0]);
  goto <bb 4>; [INV]

  <bb 3> :
  clockStatus_42 = Clock_Ip_Init (&Mcu_aClockConfigPB[0]);

  <bb 4> :
  # clockStatus_8 = PHI <clockStatus_16(2), clockStatus_42(3)>
  if (clockStatus_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :

  <bb 6> :
  _1 = Clock_Ip_GetPllStatus ();
  if (_1 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Clock_Ip_DistributePll ();
  Port_Init (0B);
  Lpspi_Ip_Init (&Lpspi_Ip_PhyUnitConfig_SpiPhyUnit_0_BOARD_InitPeripherals);
  GB_ST7789_Init ();
  TestDelay (700000);
  ST7789_Fill_Color (63488);
  TestDelay (700000);
  ST7789_Fill_Color (0);
  Adc_Ip_Init (0, &AdcHwUnit_0_BOARD_INITPERIPHERALS);
  adcStatus_28 = Adc_Ip_DoCalibration (0);
  goto <bb 9>; [INV]

  <bb 8> :
  adcStatus_40 = Adc_Ip_DoCalibration (0);

  <bb 9> :
  # adcStatus_9 = PHI <adcStatus_28(7), adcStatus_40(8)>
  if (adcStatus_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  ST7789_WriteString (5, 200, "ADC Value(Ref = 3.3V)", Font_11x18, 53241, 63488);
  ST7789_WriteString (15, 80, "ADC Value(Ref = 5V)", Font_11x18, 65535, 31);

  <bb 11> :
  Adc_Ip_StartConversion (0, 12, 0);
  _2 = Adc_Ip_GetConvData (0, 0);
  data ={v} _2;
  data.2_3 ={v} data;
  _4 = (long unsigned int) data.2_3;
  ST7789_WriteDec (70, 150, _4, Font_16x26, 53241, 0);
  Adc_Ip_StartConversion (0, 10, 0);
  _5 = Adc_Ip_GetConvData (0, 0);
  data ={v} _5;
  data.3_6 ={v} data;
  _7 = (long unsigned int) data.3_6;
  ST7789_WriteDec (70, 250, _7, Font_16x26, 53241, 0);
  goto <bb 11>; [INV]

}


TestDelay (uint32 delay)
{
  static volatile uint32 DelayTimer = 0;
  long unsigned int DelayTimer.0_1;
  long unsigned int _2;
  long unsigned int DelayTimer.1_3;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  DelayTimer.0_1 ={v} DelayTimer;
  _2 = DelayTimer.0_1 + 1;
  DelayTimer ={v} _2;

  <bb 4> :
  DelayTimer.1_3 ={v} DelayTimer;
  if (delay_6(D) > DelayTimer.1_3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DelayTimer ={v} 0;
  return;

}


