ADC_SetSoftwarePretrigger_TrustedCall (const uint32 Instance, const uint8 SoftwarePretrigger)
{
  uint32 Reg;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  struct SIM_Type * _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31 ();
  # DEBUG BEGIN_STMT
  _1 = 1074036736B;
  Reg_12 ={v} _1->ADCOPT;
  # DEBUG Reg => Reg_12
  # DEBUG BEGIN_STMT
  switch (Instance_13(D)) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Reg_17 = Reg_12 & 4294967281;
  # DEBUG Reg => Reg_17
  # DEBUG BEGIN_STMT
  _2 = (long unsigned int) SoftwarePretrigger_15(D);
  _3 = _2 << 1;
  _4 = _3 & 14;
  Reg_18 = Reg_17 | _4;
  # DEBUG Reg => Reg_18
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Reg_14 = Reg_12 & 4294963711;
  # DEBUG Reg => Reg_14
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) SoftwarePretrigger_15(D);
  _6 = _5 << 9;
  _7 = _6 & 3584;
  Reg_16 = Reg_14 | _7;
  # DEBUG Reg => Reg_16
  # DEBUG BEGIN_STMT

  <bb 5> :
  # Reg_9 = PHI <Reg_18(3), Reg_16(4), Reg_12(2)>
<L4>:
  # DEBUG Reg => Reg_9
  # DEBUG BEGIN_STMT
  _8 = 1074036736B;
  _8->ADCOPT ={v} Reg_9;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31 ();
  return;

}


ADC_SetPretriggerSourceSelect_TrustedCall (const uint32 Instance, const uint8 PretriggerSource)
{
  uint32 Reg;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  struct SIM_Type * _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1074036736B;
  Reg_11 ={v} _1->ADCOPT;
  # DEBUG Reg => Reg_11
  # DEBUG BEGIN_STMT
  switch (Instance_12(D)) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Reg_16 = Reg_11 & 4294967247;
  # DEBUG Reg => Reg_16
  # DEBUG BEGIN_STMT
  _2 = (long unsigned int) PretriggerSource_14(D);
  _3 = _2 << 4;
  _4 = _3 & 48;
  Reg_17 = Reg_16 | _4;
  # DEBUG Reg => Reg_17
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Reg_13 = Reg_11 & 4294955007;
  # DEBUG Reg => Reg_13
  # DEBUG BEGIN_STMT
  _5 = (long unsigned int) PretriggerSource_14(D);
  _6 = _5 << 12;
  _7 = _6 & 12288;
  Reg_15 = Reg_13 | _7;
  # DEBUG Reg => Reg_15
  # DEBUG BEGIN_STMT

  <bb 5> :
  # Reg_9 = PHI <Reg_17(3), Reg_15(4), Reg_11(2)>
<L4>:
  # DEBUG Reg => Reg_9
  # DEBUG BEGIN_STMT
  _8 = 1074036736B;
  _8->ADCOPT ={v} Reg_9;
  return;

}


ADC_SetPretriggerSourceSelect (const uint32 Instance, const uint8 PretriggerSource)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  ADC_SetPretriggerSourceSelect_TrustedCall (Instance_2(D), PretriggerSource_3(D));
  return;

}


ADC_SetTriggerSourceSelect_TrustedCall (const uint32 Instance, const uint8 TriggerSource)
{
  uint32 Reg;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  struct SIM_Type * _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1074036736B;
  Reg_10 ={v} _1->ADCOPT;
  # DEBUG Reg => Reg_10
  # DEBUG BEGIN_STMT
  switch (Instance_11(D)) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  Reg_15 = Reg_10 & 4294967294;
  # DEBUG Reg => Reg_15
  # DEBUG BEGIN_STMT
  _2 = (long unsigned int) TriggerSource_13(D);
  _3 = _2 & 1;
  Reg_16 = Reg_15 | _3;
  # DEBUG Reg => Reg_16
  # DEBUG BEGIN_STMT
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  Reg_12 = Reg_10 & 4294967039;
  # DEBUG Reg => Reg_12
  # DEBUG BEGIN_STMT
  _4 = (long unsigned int) TriggerSource_13(D);
  _5 = _4 << 8;
  _6 = _5 & 256;
  Reg_14 = Reg_12 | _6;
  # DEBUG Reg => Reg_14
  # DEBUG BEGIN_STMT

  <bb 5> :
  # Reg_8 = PHI <Reg_16(3), Reg_14(4), Reg_10(2)>
<L4>:
  # DEBUG Reg => Reg_8
  # DEBUG BEGIN_STMT
  _7 = 1074036736B;
  _7->ADCOPT ={v} Reg_8;
  return;

}


ADC_SetTriggerSourceSelect (const uint32 Instance, const uint8 TriggerSource)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  ADC_SetTriggerSourceSelect_TrustedCall (Instance_2(D), TriggerSource_3(D));
  return;

}


Adc_Ip_IRQHandler (const uint32 Instance)
{
  boolean ChanCocoFlag;
  boolean ChanIntFlag;
  uint8 ControlChanIdx;
  uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  _Bool _1;
  void (*<T4df>) (const uint8) _2;
  int _3;
  void (*<T4df>) (const uint8) _4;
  int _5;
  <unnamed type> _6;
  unsigned char ControlChanIdx.11_7;
  unsigned char ControlChanIdx.12_8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_17 = AdcBase[Instance_16(D)];
  # DEBUG Base => Base_17
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ChanIntFlag_18 = 0;
  # DEBUG ChanIntFlag => ChanIntFlag_18
  # DEBUG BEGIN_STMT
  ChanCocoFlag_19 = 0;
  # DEBUG ChanCocoFlag => ChanCocoFlag_19
  # DEBUG BEGIN_STMT
  _1 = AdcIpState[Instance_16(D)].Init;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  _2 = AdcIpState[Instance_16(D)].ConversionCompleteNotification;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  ControlChanIdx_20 = 0;
  # DEBUG ControlChanIdx => ControlChanIdx_20
  goto <bb 12>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _3 = (int) ControlChanIdx_9;
  Sc1Reg_21 ={v} Base_17->SC1[_3];
  # DEBUG Sc1Reg => Sc1Reg_21
  # DEBUG BEGIN_STMT
  ChanIntFlag_23 = Adc_HwAcc_GetAIEN (Sc1Reg_21);
  # DEBUG ChanIntFlag => ChanIntFlag_23
  # DEBUG BEGIN_STMT
  ChanCocoFlag_25 = Adc_HwAcc_GetCOCO (Sc1Reg_21);
  # DEBUG ChanCocoFlag => ChanCocoFlag_25
  # DEBUG BEGIN_STMT
  if (ChanIntFlag_23 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChanCocoFlag_25 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _4 = AdcIpState[Instance_16(D)].ConversionCompleteNotification;
  _4 (ControlChanIdx_9);
  goto <bb 11>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _5 = (int) ControlChanIdx_9;
  _6 = AdcIpState[Instance_16(D)].ChannelConfig[_5];
  if (_6 == 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (ChanCocoFlag_25 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  # DEBUG BEGIN_STMT
  Adc_HwAcc_GetData (Base_17, ControlChanIdx_9);

  <bb 11> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ControlChanIdx.11_7 = ControlChanIdx_9;
  ControlChanIdx_28 = ControlChanIdx.11_7 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_28

  <bb 12> :
  # ControlChanIdx_9 = PHI <ControlChanIdx_20(4), ControlChanIdx_28(11)>
  # DEBUG ControlChanIdx => ControlChanIdx_9
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_9 <= 15)
    goto <bb 5>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  # DEBUG BEGIN_STMT
  ControlChanIdx_29 = 0;
  # DEBUG ControlChanIdx => ControlChanIdx_29
  goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  Adc_HwAcc_GetData (Base_17, ControlChanIdx_10);
  # DEBUG BEGIN_STMT
  ControlChanIdx.12_8 = ControlChanIdx_10;
  ControlChanIdx_31 = ControlChanIdx.12_8 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_31

  <bb 15> :
  # ControlChanIdx_10 = PHI <ControlChanIdx_29(13), ControlChanIdx_31(14)>
  # DEBUG ControlChanIdx => ControlChanIdx_10
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_10 <= 15)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  return;

}


Adc_Ip_SetSoftwarePretrigger (const uint32 Instance, const Adc_Ip_SoftwarePretriggerType SoftwarePretrigger)
{
  unsigned char _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) SoftwarePretrigger_2(D);
  ADC_SetSoftwarePretrigger_TrustedCall (Instance_4(D), _1);
  return;

}


Adc_Ip_GetChanData (const uint32 Instance, const Adc_Ip_InputChannelType Channel, uint16 * const Result)
{
  boolean Found;
  uint8 ControlChanIdx;
  uint16 Temp;
  Adc_Ip_StatusType Status;
  const struct ADC_Type * const Base;
  int _1;
  <unnamed type> _2;
  unsigned char ControlChanIdx.10_3;
  int _4;
  long unsigned int _5;
  Adc_Ip_StatusType _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_12 = AdcBase[Instance_11(D)];
  # DEBUG Base => Base_12
  # DEBUG BEGIN_STMT
  Status_13 = 0;
  # DEBUG Status => Status_13
  # DEBUG BEGIN_STMT
  Temp_14 = 0;
  # DEBUG Temp => Temp_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Found_15 = 0;
  # DEBUG Found => Found_15
  # DEBUG BEGIN_STMT
  ControlChanIdx_16 = 0;
  # DEBUG ControlChanIdx => ControlChanIdx_16
  goto <bb 6>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_8;
  _2 = AdcIpState[Instance_11(D)].ChannelConfig[_1];
  if (Channel_17(D) == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Found_19 = 1;
  # DEBUG Found => Found_19
  # DEBUG BEGIN_STMT
  goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  ControlChanIdx.10_3 = ControlChanIdx_8;
  ControlChanIdx_18 = ControlChanIdx.10_3 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_18

  <bb 6> :
  # ControlChanIdx_8 = PHI <ControlChanIdx_16(2), ControlChanIdx_18(5)>
  # DEBUG ControlChanIdx => ControlChanIdx_8
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_8 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # Found_9 = PHI <Found_19(4), Found_15(6)>
  # DEBUG Found => Found_9
  # DEBUG BEGIN_STMT
  if (Found_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  _4 = (int) ControlChanIdx_8;
  _5 ={v} Base_12->R[_4];
  Temp_21 = (uint16) _5;
  # DEBUG Temp => Temp_21
  # DEBUG BEGIN_STMT
  Temp_22 = Temp_21 & 4095;
  # DEBUG Temp => Temp_22
  goto <bb 10>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  Status_20 = 1;
  # DEBUG Status => Status_20

  <bb 10> :
  # Status_6 = PHI <Status_13(8), Status_20(9)>
  # Temp_7 = PHI <Temp_22(8), Temp_14(9)>
  # DEBUG Temp => Temp_7
  # DEBUG Status => Status_6
  # DEBUG BEGIN_STMT
  *Result_23(D) = Temp_7;
  # DEBUG BEGIN_STMT
  _25 = Status_6;
  return _25;

}


Adc_Ip_GetDataAddress (const uint32 Instance, const uint8 Index)
{
  struct ADC_Type * _1;
  int _2;
  const uint32_t * _3;
  uint32 _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = AdcBase[Instance_5(D)];
  _2 = (int) Index_6(D);
  _3 = &_1->R[_2];
  _7 = (uint32) _3;
  return _7;

}


Adc_Ip_GetTrigErrReg (const uint32 Instance)
{
  const struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  uint32 _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 >> 24;
  _6 = _2 & 15;
  return _6;

}


Adc_Ip_ClearTrigErrReg (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 | 251658240;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25 ();
  return;

}


Adc_Ip_DisableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_7 = AdcBase[Instance_6(D)];
  # DEBUG Base => Base_7
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_9(D);
  _2 ={v} Base_7->SC1[_1];
  _3 = (int) ControlChanIdx_9(D);
  _4 = _2 & 4294967231;
  Base_7->SC1[_3] ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20 ();
  return;

}


Adc_Ip_EnableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_7 = AdcBase[Instance_6(D)];
  # DEBUG Base => Base_7
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19 ();
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_9(D);
  _2 ={v} Base_7->SC1[_1];
  _3 = (int) ControlChanIdx_9(D);
  _4 = _2 | 64;
  Base_7->SC1[_3] ={v} _4;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19 ();
  return;

}


Adc_Ip_ClearLatchedTriggers (const uint32 Instance)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _22;
  Adc_Ip_StatusType _25;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_11 = AdcBase[Instance_10(D)];
  # DEBUG Base => Base_11
  # DEBUG BEGIN_STMT
  Status_12 = 0;
  # DEBUG Status => Status_12
  # DEBUG BEGIN_STMT
  TimeoutTicks_14 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_14
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  ElapsedTicks_17 = 0;
  # DEBUG ElapsedTicks => ElapsedTicks_17
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _2 ={v} Base_11->CFG1;
  _3 = _2 | 256;
  Base_11->CFG1 ={v} _3;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _22 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_23 = _22 + ElapsedTicks_7;
  # DEBUG ElapsedTicks => ElapsedTicks_23

  <bb 4> :
  # ElapsedTicks_7 = PHI <ElapsedTicks_17(2), ElapsedTicks_23(3)>
  # DEBUG ElapsedTicks => ElapsedTicks_7
  # DEBUG BEGIN_STMT
  _4 ={v} Base_11->SC2;
  _5 = _4 & 983040;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks_7 < TimeoutTicks_14)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ElapsedTicks_7 >= TimeoutTicks_14)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_24 = 2;
  # DEBUG Status => Status_24

  <bb 8> :
  # Status_6 = PHI <Status_12(6), Status_24(7)>
  # DEBUG Status => Status_6
  # DEBUG BEGIN_STMT
  _25 = Status_6;
  CurrentTicks ={v} {CLOBBER};
  return _25;

}


Adc_Ip_DoCalibration (const uint32 Instance)
{
  struct Adc_Ip_ClockConfigType CalClockConfig;
  struct Adc_Ip_ClockConfigType PreClockConfig;
  uint32 Reg;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_TrigType TriggerMode;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  int _4;
  _Bool _5;
  <unnamed type> _6;
  unsigned char _7;
  long unsigned int _8;
  <unnamed type> _9;
  <unnamed type> _10;
  <unnamed type> _11;
  <unnamed type> _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _60;
  long unsigned int vol.9_64;
  Adc_Ip_StatusType _65;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_20 = AdcBase[Instance_19(D)];
  # DEBUG Base => Base_20
  # DEBUG BEGIN_STMT
  Status_21 = 0;
  # DEBUG Status => Status_21
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks_23 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_23
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  ElapsedTicks_26 = 0;
  # DEBUG ElapsedTicks => ElapsedTicks_26
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Reg_27 ={v} Base_20->SC3;
  # DEBUG Reg => Reg_27
  # DEBUG BEGIN_STMT
  _2 = Reg_27 >> 2;
  _3 = (int) _2;
  _4 = _3 & 1;
  _5 = _4 != 0;
  PreClockConfig.AvgEn = _5;
  # DEBUG BEGIN_STMT
  _6 = Adc_HwAcc_GetAverageSelect (Reg_27);
  PreClockConfig.AvgSel = _6;
  # DEBUG BEGIN_STMT
  Reg_31 ={v} Base_20->CFG2;
  # DEBUG Reg => Reg_31
  # DEBUG BEGIN_STMT
  _7 = (unsigned char) Reg_31;
  PreClockConfig.SampleTime = _7;
  # DEBUG BEGIN_STMT
  _8 ={v} Base_20->SC2;
  TriggerMode_34 = Adc_HwAcc_GetTriggerMode (_8);
  # DEBUG TriggerMode => TriggerMode_34
  # DEBUG BEGIN_STMT
  Reg_35 ={v} Base_20->CFG1;
  # DEBUG Reg => Reg_35
  # DEBUG BEGIN_STMT
  _9 = Adc_HwAcc_GetClockDivide (Reg_35);
  PreClockConfig.ClockDivide = _9;
  # DEBUG BEGIN_STMT
  _10 = Adc_HwAcc_GetInputClock (Reg_35);
  PreClockConfig.InputClock = _10;
  # DEBUG BEGIN_STMT
  CalClockConfig.AvgEn = 1;
  # DEBUG BEGIN_STMT
  CalClockConfig.AvgSel = 3;
  # DEBUG BEGIN_STMT
  CalClockConfig.SampleTime = 12;
  # DEBUG BEGIN_STMT
  _11 = AdcIpState[Instance_19(D)].CalibrationClockDivide;
  CalClockConfig.ClockDivide = _11;
  # DEBUG BEGIN_STMT
  _12 = PreClockConfig.InputClock;
  CalClockConfig.InputClock = _12;
  # DEBUG BEGIN_STMT
  Adc_DoCalibration_SetParams (Base_20, &CalClockConfig, 0);
  # DEBUG BEGIN_STMT
  Base_20->CLPS ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLP3 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLP2 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLP1 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLP0 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLPX ={v} 0;
  # DEBUG BEGIN_STMT
  Base_20->CLP9 ={v} 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  Reg_54 ={v} Base_20->SC3;
  # DEBUG Reg => Reg_54
  # DEBUG BEGIN_STMT
  Reg_55 = Reg_54 & 4294967167;
  # DEBUG Reg => Reg_55
  # DEBUG BEGIN_STMT
  Reg_56 = Reg_55 | 128;
  # DEBUG Reg => Reg_56
  # DEBUG BEGIN_STMT
  Base_20->SC3 ={v} Reg_56;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _60 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_61 = _60 + ElapsedTicks_16;
  # DEBUG ElapsedTicks => ElapsedTicks_61

  <bb 4> :
  # ElapsedTicks_16 = PHI <ElapsedTicks_26(2), ElapsedTicks_61(3)>
  # DEBUG ElapsedTicks => ElapsedTicks_16
  # DEBUG BEGIN_STMT
  _13 ={v} Base_20->SC3;
  _14 = _13 & 128;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks_16 < TimeoutTicks_23)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ElapsedTicks_16 >= TimeoutTicks_23)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_62 = 2;
  # DEBUG Status => Status_62

  <bb 8> :
  # Status_15 = PHI <Status_21(6), Status_62(7)>
  # DEBUG Status => Status_15
  # DEBUG BEGIN_STMT
  Adc_DoCalibration_SetParams (Base_20, &PreClockConfig, TriggerMode_34);
  # DEBUG BEGIN_STMT
  vol.9_64 ={v} Base_20->R[0];
  # DEBUG BEGIN_STMT
  _65 = Status_15;
  CurrentTicks ={v} {CLOBBER};
  PreClockConfig ={v} {CLOBBER};
  CalClockConfig ={v} {CLOBBER};
  return _65;

}


Adc_Ip_GetConvData (const uint32 Instance, const uint8 ControlChanIdx)
{
  const struct ADC_Type * const Base;
  uint16 _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  _6 = Adc_HwAcc_GetData (Base_3, ControlChanIdx_4(D));
  return _6;

}


Adc_Ip_GetConvCompleteFlag (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  int _1;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_5(D);
  Sc1Reg_6 ={v} Base_4->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_6
  # DEBUG BEGIN_STMT
  _8 = Adc_HwAcc_GetCOCO (Sc1Reg_6);
  return _8;

}


Adc_Ip_GetChanInterrupt (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  int _1;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_5(D);
  Sc1Reg_6 ={v} Base_4->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_6
  # DEBUG BEGIN_STMT
  _8 = Adc_HwAcc_GetAIEN (Sc1Reg_6);
  return _8;

}


Adc_Ip_GetConvActiveFlag (const uint32 Instance)
{
  uint32 Sc2Reg;
  const struct ADC_Type * const Base;
  long unsigned int _1;
  boolean _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  Sc2Reg_5 ={v} Base_4->SC2;
  # DEBUG Sc2Reg => Sc2Reg_5
  # DEBUG BEGIN_STMT
  _1 = Sc2Reg_5 >> 7;
  Sc2Reg_6 = _1 & 1;
  # DEBUG Sc2Reg => Sc2Reg_6
  # DEBUG BEGIN_STMT
  _7 = Sc2Reg_6 != 0;
  return _7;

}


Adc_Ip_StartConversion (const uint32 Instance, Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  struct ADC_Type * const Base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetChannel (Base_3, 0, InputChannel_5(D), InterruptEnable_6(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18 ();
  return;

}


Adc_Ip_SetDisabledChannel (const uint32 Instance, const uint8 ControlChanIdx, const boolean WithTimeout)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _28;
  Adc_Ip_StatusType _31;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_15 = AdcBase[Instance_14(D)];
  # DEBUG Base => Base_15
  # DEBUG BEGIN_STMT
  Status_16 = 0;
  # DEBUG Status => Status_16
  # DEBUG BEGIN_STMT
  TimeoutTicks_18 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_18
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  ElapsedTicks_21 = 0;
  # DEBUG ElapsedTicks => ElapsedTicks_21
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  _2 = (int) ControlChanIdx_23(D);
  _3 ={v} Base_15->SC1[_2];
  _4 = (int) ControlChanIdx_23(D);
  _5 = _3 | 31;
  Base_15->SC1[_4] ={v} _5;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  if (WithTimeout_26(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _28 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_29 = _28 + ElapsedTicks_10;
  # DEBUG ElapsedTicks => ElapsedTicks_29

  <bb 4> :
  # ElapsedTicks_10 = PHI <ElapsedTicks_21(2), ElapsedTicks_29(3)>
  # DEBUG ElapsedTicks => ElapsedTicks_10
  # DEBUG BEGIN_STMT
  _6 = (int) ControlChanIdx_23(D);
  _7 ={v} Base_15->SC1[_6];
  _8 = _7 & 31;
  if (_8 != 31)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks_10 < TimeoutTicks_18)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  if (ElapsedTicks_10 >= TimeoutTicks_18)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  Status_30 = 2;
  # DEBUG Status => Status_30

  <bb 8> :
  # Status_9 = PHI <Status_16(2), Status_16(6), Status_30(7)>
  # DEBUG Status => Status_9
  # DEBUG BEGIN_STMT
  _31 = Status_9;
  CurrentTicks ={v} {CLOBBER};
  return _31;

}


Adc_Ip_ConfigChannel (const uint32 Instance, const struct Adc_Ip_ChanConfigType * const ChanConfig)
{
  Adc_Ip_InputChannelType InputChanDemapped;
  struct ADC_Type * const Base;
  unsigned char _1;
  _Bool _2;
  unsigned char _3;
  int _4;
  <unnamed type> _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_8 = AdcBase[Instance_7(D)];
  # DEBUG Base => Base_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  InputChanDemapped_10 = ChanConfig_9(D)->Channel;
  # DEBUG InputChanDemapped => InputChanDemapped_10
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21 ();
  # DEBUG BEGIN_STMT
  _1 = ChanConfig_9(D)->ChnIdx;
  _2 = ChanConfig_9(D)->InterruptEnable;
  Adc_HwAcc_SetChannel (Base_8, _1, InputChanDemapped_10, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21 ();
  # DEBUG BEGIN_STMT
  _3 = ChanConfig_9(D)->ChnIdx;
  _4 = (int) _3;
  _5 = ChanConfig_9(D)->Channel;
  AdcIpState[Instance_7(D)].ChannelConfig[_4] = _5;
  return;

}


Adc_Ip_SetClockMode (const uint32 Instance, const struct Adc_Ip_ClockConfigType * const Config)
{
  struct ADC_Type * const Base;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  _Bool _4;
  <unnamed type> _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_8 = AdcBase[Instance_7(D)];
  # DEBUG Base => Base_8
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _1 = Config_10(D)->ClockDivide;
  _2 = Config_10(D)->InputClock;
  Adc_HwAcc_SetClock (Base_8, _1, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  _3 = Config_10(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_8, _3);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28 ();
  # DEBUG BEGIN_STMT
  _4 = Config_10(D)->AvgEn;
  _5 = Config_10(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_8, _4, _5);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28 ();
  return;

}


Adc_Ip_SetResolution (const uint32 Instance, const Adc_Ip_ResolutionType Resolution)
{
  uint32 Cfg1Reg;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  Cfg1Reg_7 ={v} Base_5->CFG1;
  # DEBUG Cfg1Reg => Cfg1Reg_7
  # DEBUG BEGIN_STMT
  Cfg1Reg_8 = Cfg1Reg_7 & 4294967283;
  # DEBUG Cfg1Reg => Cfg1Reg_8
  # DEBUG BEGIN_STMT
  _1 = Resolution_9(D) << 2;
  _2 = _1 & 12;
  Cfg1Reg_10 = Cfg1Reg_8 | _2;
  # DEBUG Cfg1Reg => Cfg1Reg_10
  # DEBUG BEGIN_STMT
  Base_5->CFG1 ={v} Cfg1Reg_10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10 ();
  return;

}


Adc_Ip_SetContinuousMode (const uint32 Instance, const boolean ContinuousModeEnable)
{
  uint32 Sc3Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.7_1;
  long unsigned int iftmp.7_9;
  long unsigned int iftmp.7_10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30 ();
  # DEBUG BEGIN_STMT
  Sc3Reg_6 ={v} Base_4->SC3;
  # DEBUG Sc3Reg => Sc3Reg_6
  # DEBUG BEGIN_STMT
  Sc3Reg_7 = Sc3Reg_6 & 4294967287;
  # DEBUG Sc3Reg => Sc3Reg_7
  # DEBUG BEGIN_STMT
  if (ContinuousModeEnable_8(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_10 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_9 = 0;

  <bb 5> :
  # iftmp.7_1 = PHI <iftmp.7_10(3), iftmp.7_9(4)>
  Sc3Reg_11 = iftmp.7_1 | Sc3Reg_7;
  # DEBUG Sc3Reg => Sc3Reg_11
  # DEBUG BEGIN_STMT
  Base_4->SC3 ={v} Sc3Reg_11;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30 ();
  return;

}


Adc_Ip_SetTriggerMode (const uint32 Instance, const Adc_Ip_TrigType TriggerMode)
{
  struct ADC_Type * const Base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetTriggerMode (Base_3, TriggerMode_5(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23 ();
  return;

}


Adc_Ip_DisableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 & 4294967291;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22 ();
  return;

}


Adc_Ip_EnableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 | 4;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26 ();
  return;

}


Adc_Ip_SetSampleTime (const uint32 Instance, const uint8 SampleTime)
{
  struct ADC_Type * const Base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetSampleTime (Base_3, SampleTime_5(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16 ();
  return;

}


Adc_Ip_SetAveraging (const uint32 Instance, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  struct ADC_Type * const Base;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetAveraging (Base_3, AvgEn_5(D), AvgSel_6(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27 ();
  return;

}


Adc_Ip_DeInit (const uint32 Instance)
{
  uint8 Index;
  struct Adc_Ip_ChanConfigType ChannelConfigs[16];
  struct Adc_Ip_ConfigType DefaultConfig;
  int _1;
  int _2;
  int _3;
  unsigned char Index.6_4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DefaultConfig.ClockDivide = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CalibrationClockDivide = 3;
  # DEBUG BEGIN_STMT
  DefaultConfig.InputClock = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.SampleTime = 12;
  # DEBUG BEGIN_STMT
  DefaultConfig.AvgEn = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.AvgSel = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.Resolution = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.TriggerMode = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.PretriggerSel = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.TriggerSel = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.DmaEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.VoltageRef = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.ContinuousConvEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareGreaterThanEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareRangeFuncEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompVal1 = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompVal2 = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.UsrGain = 4;
  # DEBUG BEGIN_STMT
  DefaultConfig.UsrOffset = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.NumChannels = 16;
  # DEBUG BEGIN_STMT
  Index_29 = 0;
  # DEBUG Index => Index_29
  goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _1 = (int) Index_5;
  ChannelConfigs[_1].ChnIdx = Index_5;
  # DEBUG BEGIN_STMT
  _2 = (int) Index_5;
  ChannelConfigs[_2].Channel = 31;
  # DEBUG BEGIN_STMT
  _3 = (int) Index_5;
  ChannelConfigs[_3].InterruptEnable = 0;
  # DEBUG BEGIN_STMT
  Index.6_4 = Index_5;
  Index_40 = Index.6_4 + 1;
  # DEBUG Index => Index_40

  <bb 4> :
  # Index_5 = PHI <Index_29(2), Index_40(3)>
  # DEBUG Index => Index_5
  # DEBUG BEGIN_STMT
  if (Index_5 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  DefaultConfig.ChannelConfigs = &ChannelConfigs;
  # DEBUG BEGIN_STMT
  DefaultConfig.ConversionCompleteNotification = 0B;
  # DEBUG BEGIN_STMT
  Adc_Ip_Init (Instance_32(D), &DefaultConfig);
  # DEBUG BEGIN_STMT
  AdcIpState[Instance_32(D)].Init = 0;
  DefaultConfig ={v} {CLOBBER};
  ChannelConfigs ={v} {CLOBBER};
  return;

}


Adc_Ip_Init (const uint32 Instance, const struct Adc_Ip_ConfigType * const Config)
{
  uint8 Index;
  uint32 SC2ClearMask;
  uint32 SC2Reg;
  struct ADC_Type * const Base;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  _Bool _4;
  <unnamed type> _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  <unnamed type> _9;
  unsigned char _10;
  <unnamed type> _11;
  long unsigned int _12;
  long unsigned int _13;
  _Bool _14;
  <unnamed type> _15;
  long unsigned int _16;
  _Bool _17;
  _Bool _18;
  _Bool _19;
  short unsigned int _20;
  long unsigned int _21;
  short unsigned int _22;
  long unsigned int _23;
  short unsigned int _24;
  short unsigned int _25;
  _Bool _26;
  const struct Adc_Ip_ChanConfigType * _27;
  const struct Adc_Ip_ChanConfigType * _28;
  unsigned int _29;
  unsigned int _30;
  const struct Adc_Ip_ChanConfigType * _31;
  unsigned char Index.3_32;
  unsigned char _33;
  void (*<T4df>) (const uint8) _34;
  <unnamed type> _35;
  <unnamed type> _36;
  long unsigned int iftmp.0_40;
  long unsigned int iftmp.1_41;
  long unsigned int iftmp.2_42;
  long unsigned int iftmp.0_64;
  long unsigned int iftmp.0_65;
  long unsigned int iftmp.1_67;
  long unsigned int iftmp.1_68;
  long unsigned int iftmp.2_70;
  long unsigned int iftmp.2_71;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Base_47 = AdcBase[Instance_46(D)];
  # DEBUG Base => Base_47
  # DEBUG BEGIN_STMT
  SC2Reg_48 = 0;
  # DEBUG SC2Reg => SC2Reg_48
  # DEBUG BEGIN_STMT
  SC2ClearMask_49 = 0;
  # DEBUG SC2ClearMask => SC2ClearMask_49
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_50(D)->ClockDivide;
  _2 = Config_50(D)->InputClock;
  Adc_HwAcc_SetClock (Base_47, _1, _2);
  # DEBUG BEGIN_STMT
  _3 = Config_50(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_47, _3);
  # DEBUG BEGIN_STMT
  _4 = Config_50(D)->AvgEn;
  _5 = Config_50(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_47, _4, _5);
  # DEBUG BEGIN_STMT
  _6 = Config_50(D)->Resolution;
  Adc_Ip_SetResolution (Instance_46(D), _6);
  # DEBUG BEGIN_STMT
  _7 = Config_50(D)->TriggerSel;
  _8 = (unsigned char) _7;
  ADC_SetTriggerSourceSelect (Instance_46(D), _8);
  # DEBUG BEGIN_STMT
  _9 = Config_50(D)->PretriggerSel;
  _10 = (unsigned char) _9;
  ADC_SetPretriggerSourceSelect (Instance_46(D), _10);
  # DEBUG BEGIN_STMT
  SC2ClearMask_57 = SC2ClearMask_49 | 64;
  # DEBUG SC2ClearMask => SC2ClearMask_57
  # DEBUG BEGIN_STMT
  _11 = Config_50(D)->TriggerMode;
  _12 = _11 << 6;
  _13 = _12 & 64;
  SC2Reg_58 = SC2Reg_48 | _13;
  # DEBUG SC2Reg => SC2Reg_58
  # DEBUG BEGIN_STMT
  _14 = Config_50(D)->DmaEnable;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  SC2Reg_60 = SC2Reg_58 | 4;
  # DEBUG SC2Reg => SC2Reg_60
  goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SC2ClearMask_59 = SC2ClearMask_57 | 4;
  # DEBUG SC2ClearMask => SC2ClearMask_59

  <bb 5> :
  # SC2Reg_37 = PHI <SC2Reg_60(3), SC2Reg_58(4)>
  # SC2ClearMask_38 = PHI <SC2ClearMask_57(3), SC2ClearMask_59(4)>
  # DEBUG SC2ClearMask => SC2ClearMask_38
  # DEBUG SC2Reg => SC2Reg_37
  # DEBUG BEGIN_STMT
  SC2ClearMask_61 = SC2ClearMask_38 | 3;
  # DEBUG SC2ClearMask => SC2ClearMask_61
  # DEBUG BEGIN_STMT
  _15 = Config_50(D)->VoltageRef;
  _16 = _15 & 3;
  SC2Reg_62 = SC2Reg_37 | _16;
  # DEBUG SC2Reg => SC2Reg_62
  # DEBUG BEGIN_STMT
  SC2ClearMask_63 = SC2ClearMask_61 | 56;
  # DEBUG SC2ClearMask => SC2ClearMask_63
  # DEBUG BEGIN_STMT
  _17 = Config_50(D)->CompareEnable;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0_65 = 32;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.0_64 = 0;

  <bb 8> :
  # iftmp.0_40 = PHI <iftmp.0_65(6), iftmp.0_64(7)>
  SC2Reg_66 = iftmp.0_40 | SC2Reg_62;
  # DEBUG SC2Reg => SC2Reg_66
  # DEBUG BEGIN_STMT
  _18 = Config_50(D)->CompareGreaterThanEnable;
  if (_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1_68 = 16;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.1_67 = 0;

  <bb 11> :
  # iftmp.1_41 = PHI <iftmp.1_68(9), iftmp.1_67(10)>
  SC2Reg_69 = iftmp.1_41 | SC2Reg_66;
  # DEBUG SC2Reg => SC2Reg_69
  # DEBUG BEGIN_STMT
  _19 = Config_50(D)->CompareRangeFuncEnable;
  if (_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.2_71 = 8;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2_70 = 0;

  <bb 14> :
  # iftmp.2_42 = PHI <iftmp.2_71(12), iftmp.2_70(13)>
  SC2Reg_72 = iftmp.2_42 | SC2Reg_69;
  # DEBUG SC2Reg => SC2Reg_72
  # DEBUG BEGIN_STMT
  _20 = Config_50(D)->CompVal1;
  _21 = (long unsigned int) _20;
  Base_47->CV[0] ={v} _21;
  # DEBUG BEGIN_STMT
  _22 = Config_50(D)->CompVal2;
  _23 = (long unsigned int) _22;
  Base_47->CV[1] ={v} _23;
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetSC2Reg (Base_47, SC2ClearMask_63, SC2Reg_72);
  # DEBUG BEGIN_STMT
  _24 = Config_50(D)->UsrGain;
  _25 = Config_50(D)->UsrOffset;
  Adc_HwAcc_SetUserGainAndOffset (Base_47, _24, _25);
  # DEBUG BEGIN_STMT
  _26 = Config_50(D)->ContinuousConvEnable;
  Adc_Ip_SetContinuousMode (Instance_46(D), _26);
  # DEBUG BEGIN_STMT
  _27 = Config_50(D)->ChannelConfigs;
  if (_27 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  # DEBUG BEGIN_STMT
  Index_78 = 0;
  # DEBUG Index => Index_78
  goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _28 = Config_50(D)->ChannelConfigs;
  _29 = (unsigned int) Index_39;
  _30 = _29 * 12;
  _31 = _28 + _30;
  Adc_Ip_ConfigChannel (Instance_46(D), _31);
  # DEBUG BEGIN_STMT
  Index.3_32 = Index_39;
  Index_80 = Index.3_32 + 1;
  # DEBUG Index => Index_80

  <bb 17> :
  # Index_39 = PHI <Index_78(15), Index_80(16)>
  # DEBUG Index => Index_39
  # DEBUG BEGIN_STMT
  _33 = Config_50(D)->NumChannels;
  if (Index_39 < _33)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # DEBUG BEGIN_STMT
  _34 = Config_50(D)->ConversionCompleteNotification;
  AdcIpState[Instance_46(D)].ConversionCompleteNotification = _34;
  # DEBUG BEGIN_STMT
  _35 = Config_50(D)->CalibrationClockDivide;
  AdcIpState[Instance_46(D)].CalibrationClockDivide = _35;
  # DEBUG BEGIN_STMT
  AdcIpState[Instance_46(D)].Init = 1;
  # DEBUG BEGIN_STMT
  _36 = Config_50(D)->PretriggerSel;
  AdcIpState[Instance_46(D)].PretriggerSel = _36;
  return;

}


Adc_DoCalibration_SetParams (struct ADC_Type * const Base, const struct Adc_Ip_ClockConfigType * const Config, const Adc_Ip_TrigType TriggerMode)
{
  _Bool _1;
  <unnamed type> _2;
  unsigned char _3;
  <unnamed type> _4;
  <unnamed type> _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->AvgEn;
  _2 = Config_8(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_9(D), _1, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetTriggerMode (Base_9(D), TriggerMode_13(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  _3 = Config_8(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_9(D), _3);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _4 = Config_8(D)->ClockDivide;
  _5 = Config_8(D)->InputClock;
  Adc_HwAcc_SetClock (Base_9(D), _4, _5);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13 ();
  return;

}


Adc_HwAcc_GetData (const struct ADC_Type * const Base, const uint8 ChnIdx)
{
  uint16 Result;
  int _1;
  long unsigned int _2;
  uint16 _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) ChnIdx_3(D);
  _2 ={v} Base_5(D)->R[_1];
  Result_6 = (uint16) _2;
  # DEBUG Result => Result_6
  # DEBUG BEGIN_STMT
  Result_7 = Result_6 & 4095;
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  _8 = Result_7;
  return _8;

}


Adc_HwAcc_GetCOCO (const uint32 Reg)
{
  long unsigned int _1;
  int _2;
  int _3;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) >> 7;
  _2 = (int) _1;
  _3 = _2 & 1;
  _5 = _3 != 0;
  return _5;

}


Adc_HwAcc_GetAIEN (const uint32 Reg)
{
  long unsigned int _1;
  int _2;
  int _3;
  boolean _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) >> 6;
  _2 = (int) _1;
  _3 = _2 & 1;
  _5 = _3 != 0;
  return _5;

}


Adc_HwAcc_SetUserGainAndOffset (struct ADC_Type * const Base, const uint16 UsrGain, const uint16 UsrOffset)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) UsrOffset_5(D);
  _2 = _1 & 255;
  Base_7(D)->USR_OFS ={v} _2;
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) UsrGain_9(D);
  _4 = _3 & 1023;
  Base_7(D)->UG ={v} _4;
  return;

}


Adc_HwAcc_SetChannel (struct ADC_Type * const Base, const uint8 ChnIdx, const Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  uint32 Sc1Reg;
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int iftmp.8_4;
  long unsigned int iftmp.8_13;
  long unsigned int iftmp.8_14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) ChnIdx_5(D);
  Sc1Reg_8 ={v} Base_7(D)->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_8
  # DEBUG BEGIN_STMT
  Sc1Reg_9 = Sc1Reg_8 & 4294967200;
  # DEBUG Sc1Reg => Sc1Reg_9
  # DEBUG BEGIN_STMT
  _2 = InputChannel_10(D) & 31;
  Sc1Reg_11 = Sc1Reg_9 | _2;
  # DEBUG Sc1Reg => Sc1Reg_11
  # DEBUG BEGIN_STMT
  if (InterruptEnable_12(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8_14 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_13 = 0;

  <bb 5> :
  # iftmp.8_4 = PHI <iftmp.8_14(3), iftmp.8_13(4)>
  Sc1Reg_15 = iftmp.8_4 | Sc1Reg_11;
  # DEBUG Sc1Reg => Sc1Reg_15
  # DEBUG BEGIN_STMT
  _3 = (int) ChnIdx_5(D);
  Base_7(D)->SC1[_3] ={v} Sc1Reg_15;
  return;

}


Adc_HwAcc_GetTriggerMode (const uint32 Reg)
{
  Adc_Ip_TrigType ReturnValue;
  long unsigned int _1;
  Adc_Ip_TrigType _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_3 = 0;
  # DEBUG ReturnValue => ReturnValue_3
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) & 64;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ReturnValue_5 = 1;
  # DEBUG ReturnValue => ReturnValue_5

  <bb 4> :
  # ReturnValue_2 = PHI <ReturnValue_3(2), ReturnValue_5(3)>
  # DEBUG ReturnValue => ReturnValue_2
  # DEBUG BEGIN_STMT
  _6 = ReturnValue_2;
  return _6;

}


Adc_HwAcc_SetTriggerMode (struct ADC_Type * const Base, const Adc_Ip_TrigType TriggerMode)
{
  uint32 Sc2Reg;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Sc2Reg_5 ={v} Base_4(D)->SC2;
  # DEBUG Sc2Reg => Sc2Reg_5
  # DEBUG BEGIN_STMT
  Sc2Reg_6 = Sc2Reg_5 & 4294967231;
  # DEBUG Sc2Reg => Sc2Reg_6
  # DEBUG BEGIN_STMT
  _1 = TriggerMode_7(D) << 6;
  _2 = _1 & 64;
  Sc2Reg_8 = Sc2Reg_6 | _2;
  # DEBUG Sc2Reg => Sc2Reg_8
  # DEBUG BEGIN_STMT
  Base_4(D)->SC2 ={v} Sc2Reg_8;
  return;

}


Adc_HwAcc_GetAverageSelect (const uint32 Reg)
{
  Adc_Ip_AvgSelectType ReturnValue;
  long unsigned int _1;
  Adc_Ip_AvgSelectType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_3 = 0;
  # DEBUG ReturnValue => ReturnValue_3
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) & 3;
  switch (_1) <default: <L6> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ReturnValue_7 = 1;
  # DEBUG ReturnValue => ReturnValue_7
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  ReturnValue_6 = 2;
  # DEBUG ReturnValue => ReturnValue_6
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ReturnValue_5 = 3;
  # DEBUG ReturnValue => ReturnValue_5
  # DEBUG BEGIN_STMT

  <bb 6> :
  # ReturnValue_2 = PHI <ReturnValue_7(3), ReturnValue_6(4), ReturnValue_5(5), ReturnValue_3(2)>
<L6>:
  # DEBUG ReturnValue => ReturnValue_2
  # DEBUG BEGIN_STMT
  _8 = ReturnValue_2;
  return _8;

}


Adc_HwAcc_SetAveraging (struct ADC_Type * const Base, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  uint32 Sc3Reg;
  long unsigned int _1;
  long unsigned int iftmp.5_2;
  long unsigned int iftmp.5_8;
  long unsigned int iftmp.5_9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Sc3Reg_5 ={v} Base_4(D)->SC3;
  # DEBUG Sc3Reg => Sc3Reg_5
  # DEBUG BEGIN_STMT
  Sc3Reg_6 = Sc3Reg_5 & 4294967288;
  # DEBUG Sc3Reg => Sc3Reg_6
  # DEBUG BEGIN_STMT
  if (AvgEn_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_9 = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_8 = 0;

  <bb 5> :
  # iftmp.5_2 = PHI <iftmp.5_9(3), iftmp.5_8(4)>
  Sc3Reg_10 = iftmp.5_2 | Sc3Reg_6;
  # DEBUG Sc3Reg => Sc3Reg_10
  # DEBUG BEGIN_STMT
  _1 = AvgSel_11(D) & 3;
  Sc3Reg_12 = Sc3Reg_10 | _1;
  # DEBUG Sc3Reg => Sc3Reg_12
  # DEBUG BEGIN_STMT
  Base_4(D)->SC3 ={v} Sc3Reg_12;
  return;

}


Adc_HwAcc_SetSampleTime (struct ADC_Type * const Base, const uint8 SampleTime)
{
  uint32 Cfg2Reg;
  uint8 ClippedSampleTime;
  long unsigned int _1;
  unsigned char iftmp.4_2;
  unsigned char iftmp.4_4;
  unsigned char iftmp.4_5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (SampleTime_3(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4_5 = SampleTime_3(D);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_4 = 1;

  <bb 5> :
  # iftmp.4_2 = PHI <iftmp.4_5(3), iftmp.4_4(4)>
  ClippedSampleTime_6 = iftmp.4_2;
  # DEBUG ClippedSampleTime => ClippedSampleTime_6
  # DEBUG BEGIN_STMT
  Cfg2Reg_9 ={v} Base_8(D)->CFG2;
  # DEBUG Cfg2Reg => Cfg2Reg_9
  # DEBUG BEGIN_STMT
  Cfg2Reg_10 = Cfg2Reg_9 & 4294967040;
  # DEBUG Cfg2Reg => Cfg2Reg_10
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) ClippedSampleTime_6;
  Cfg2Reg_11 = Cfg2Reg_10 | _1;
  # DEBUG Cfg2Reg => Cfg2Reg_11
  # DEBUG BEGIN_STMT
  Base_8(D)->CFG2 ={v} Cfg2Reg_11;
  return;

}


Adc_HwAcc_GetInputClock (const uint32 Reg)
{
  Adc_Ip_ClkSourceType ReturnValue;
  long unsigned int _1;
  Adc_Ip_ClkSourceType _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_3 = 0;
  # DEBUG ReturnValue => ReturnValue_3
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) & 3;
  switch (_1) <default: <L6> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ReturnValue_7 = 1;
  # DEBUG ReturnValue => ReturnValue_7
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  ReturnValue_6 = 2;
  # DEBUG ReturnValue => ReturnValue_6
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ReturnValue_5 = 3;
  # DEBUG ReturnValue => ReturnValue_5
  # DEBUG BEGIN_STMT

  <bb 6> :
  # ReturnValue_2 = PHI <ReturnValue_7(3), ReturnValue_6(4), ReturnValue_5(5), ReturnValue_3(2)>
<L6>:
  # DEBUG ReturnValue => ReturnValue_2
  # DEBUG BEGIN_STMT
  _8 = ReturnValue_2;
  return _8;

}


Adc_HwAcc_GetClockDivide (const uint32 Reg)
{
  Adc_Ip_ClockSelType ReturnValue;
  long unsigned int _1;
  long unsigned int _2;
  Adc_Ip_ClockSelType _9;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ReturnValue_4 = 0;
  # DEBUG ReturnValue => ReturnValue_4
  # DEBUG BEGIN_STMT
  _1 = Reg_5(D) >> 5;
  _2 = _1 & 3;
  switch (_2) <default: <L6> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  # DEBUG BEGIN_STMT
  ReturnValue_8 = 1;
  # DEBUG ReturnValue => ReturnValue_8
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  # DEBUG BEGIN_STMT
  ReturnValue_7 = 2;
  # DEBUG ReturnValue => ReturnValue_7
  # DEBUG BEGIN_STMT
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  ReturnValue_6 = 3;
  # DEBUG ReturnValue => ReturnValue_6
  # DEBUG BEGIN_STMT

  <bb 6> :
  # ReturnValue_3 = PHI <ReturnValue_8(3), ReturnValue_7(4), ReturnValue_6(5), ReturnValue_4(2)>
<L6>:
  # DEBUG ReturnValue => ReturnValue_3
  # DEBUG BEGIN_STMT
  _9 = ReturnValue_3;
  return _9;

}


Adc_HwAcc_SetClock (struct ADC_Type * const Base, const Adc_Ip_ClockSelType ClockDivide, const Adc_Ip_ClkSourceType InputClock)
{
  uint32 Cfg1Reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Cfg1Reg_6 ={v} Base_5(D)->CFG1;
  # DEBUG Cfg1Reg => Cfg1Reg_6
  # DEBUG BEGIN_STMT
  Cfg1Reg_7 = Cfg1Reg_6 & 4294967196;
  # DEBUG Cfg1Reg => Cfg1Reg_7
  # DEBUG BEGIN_STMT
  _1 = ClockDivide_8(D) << 5;
  _2 = _1 & 96;
  Cfg1Reg_9 = Cfg1Reg_7 | _2;
  # DEBUG Cfg1Reg => Cfg1Reg_9
  # DEBUG BEGIN_STMT
  _3 = InputClock_10(D) & 3;
  Cfg1Reg_11 = Cfg1Reg_9 | _3;
  # DEBUG Cfg1Reg => Cfg1Reg_11
  # DEBUG BEGIN_STMT
  Base_5(D)->CFG1 ={v} Cfg1Reg_11;
  return;

}


Adc_HwAcc_SetSC2Reg (struct ADC_Type * const Base, const uint32 ClearMask, const uint32 Value)
{
  uint32 Sc2Reg;
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Sc2Reg_4 ={v} Base_3(D)->SC2;
  # DEBUG Sc2Reg => Sc2Reg_4
  # DEBUG BEGIN_STMT
  _1 = ~ClearMask_5(D);
  Sc2Reg_6 = Sc2Reg_4 & _1;
  # DEBUG Sc2Reg => Sc2Reg_6
  # DEBUG BEGIN_STMT
  Sc2Reg_8 = Sc2Reg_6 | Value_7(D);
  # DEBUG Sc2Reg => Sc2Reg_8
  # DEBUG BEGIN_STMT
  Base_3(D)->SC2 ={v} Sc2Reg_8;
  return;

}


