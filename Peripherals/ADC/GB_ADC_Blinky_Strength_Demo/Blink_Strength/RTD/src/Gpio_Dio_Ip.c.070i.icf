Parsed function:Gpio_Dio_Ip_ReadPin
Parsed function:Gpio_Dio_Ip_ReadPins
Parsed function:Gpio_Dio_Ip_TogglePins
Parsed function:Gpio_Dio_Ip_ClearPins
Parsed function:Gpio_Dio_Ip_SetPins
Parsed function:Gpio_Dio_Ip_GetPinsOutput
Parsed function:Gpio_Dio_Ip_WritePins
Parsed function:Gpio_Dio_Ip_WritePin
Dump after hash based groups
Congruence classes: 4 (unique hash values: 4), with total: 8 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes
[2]: 1 classes
[4]: 1 classes


Dump after WPA based types groups
Congruence classes: 4 (unique hash values: 4), with total: 8 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes
[2]: 1 classes
[4]: 1 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Dump after callgraph-based congruence reduction
Congruence classes: 4 (unique hash values: 4), with total: 8 items
Class size histogram [num of members]: number of classe number of classess
[1]: 2 classes
[2]: 1 classes
[4]: 1 classes


Init called for 6 items (75.00%).
Dump after full equality comparison of groups
Congruence classes: 8 (unique hash values: 4), with total: 8 items
Class size histogram [num of members]: number of classe number of classess
[1]: 8 classes


Worklist has been filled with: 0
Address reference subdivision created: 0 new classes.
Congruence classes: 8 (unique hash values: 4), with total: 8 items
Class size histogram [num of members]: number of classe number of classess
[1]: 8 classes



Item count: 8
Congruent classes before: 8, after: 8
Average class size before: 1.00, after: 1.00
Average non-singular class size: 0.00, count: 0
Equal symbols: 0
Fraction of visited symbols: 0.00%

Gpio_Dio_Ip_ReadPin (const struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
  Gpio_Dio_Ip_PinsLevelType returnValue;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG returnValue => 0
  # DEBUG BEGIN_STMT
  _1 ={v} base_6(D)->PDIR;
  _2 = 1 << pin_7(D);
  _3 = _1 & _2;
  _4 = _3 >> pin_7(D);
  returnValue_8 = (Gpio_Dio_Ip_PinsLevelType) _4;
  # DEBUG returnValue => returnValue_8
  # DEBUG BEGIN_STMT
  return returnValue_8;

}


Gpio_Dio_Ip_ReadPins (const struct GPIO_Type * const base)
{
  Gpio_Dio_Ip_PinsChannelType returnValue;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG returnValue => 0
  # DEBUG BEGIN_STMT
  returnValue_3 ={v} base_2(D)->PDIR;
  # DEBUG returnValue => returnValue_3
  # DEBUG BEGIN_STMT
  return returnValue_3;

}


Gpio_Dio_Ip_TogglePins (struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pins)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  base_2(D)->PTOR ={v} pins_3(D);
  return;

}


Gpio_Dio_Ip_ClearPins (struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pins)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  base_2(D)->PCOR ={v} pins_3(D);
  return;

}


Gpio_Dio_Ip_SetPins (struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pins)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  base_2(D)->PSOR ={v} pins_3(D);
  return;

}


Gpio_Dio_Ip_GetPinsOutput (const struct GPIO_Type * const base)
{
  Gpio_Dio_Ip_PinsChannelType returnValue;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG returnValue => 0
  # DEBUG BEGIN_STMT
  returnValue_3 ={v} base_2(D)->PDOR;
  # DEBUG returnValue => returnValue_3
  # DEBUG BEGIN_STMT
  return returnValue_3;

}


Gpio_Dio_Ip_WritePins (struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pins)
{
  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  base_2(D)->PDOR ={v} pins_3(D);
  return;

}


Gpio_Dio_Ip_WritePin (struct GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin, Gpio_Dio_Ip_PinsLevelType value)
{
  Gpio_Dio_Ip_PinsChannelType pinsValues;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00 ();
  # DEBUG BEGIN_STMT
  pinsValues_8 ={v} base_7(D)->PDOR;
  # DEBUG pinsValues => pinsValues_8
  # DEBUG BEGIN_STMT
  _1 = 1 << pin_9(D);
  _2 = ~_1;
  pinsValues_10 = _2 & pinsValues_8;
  # DEBUG pinsValues => pinsValues_10
  # DEBUG BEGIN_STMT
  _3 = (long unsigned int) value_11(D);
  _4 = _3 << pin_9(D);
  pinsValues_12 = _4 | pinsValues_10;
  # DEBUG pinsValues => pinsValues_12
  # DEBUG BEGIN_STMT
  base_7(D)->PDOR ={v} pinsValues_12;
  # DEBUG BEGIN_STMT
  SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00 ();
  return;

}


