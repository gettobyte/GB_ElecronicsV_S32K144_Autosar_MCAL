Adc_Ip_IRQHandler (const uint32 Instance)
{
  uint8 ControlChanIdx;
  uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  _Bool _1;
  void (*<T4d9>) (const uint8) _2;
  int _3;
  void (*<T4d9>) (const uint8) _4;
  <unnamed type> _5;
  _Bool _17;
  long unsigned int _18;
  long unsigned int _22;
  _Bool _23;
  long unsigned int _24;
  int _25;
  long unsigned int _26;

  <bb 2> [local count: 97132339]:
  # DEBUG BEGIN_STMT
  Base_14 = AdcBase[Instance_13(D)];
  # DEBUG Base => Base_14
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG ChanIntFlag => 0
  # DEBUG BEGIN_STMT
  # DEBUG ChanCocoFlag => 0
  # DEBUG BEGIN_STMT
  _1 = AdcIpState[Instance_13(D)].Init;
  if (_1 != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 63136020]:
  # ControlChanIdx_15 = PHI <0(2), 0(4)>
  goto <bb 14>; [100.00%]

  <bb 4> [local count: 48566169]:
  _2 = AdcIpState[Instance_13(D)].ConversionCompleteNotification;
  if (_2 != 0B)
    goto <bb 16>; [70.00%]
  else
    goto <bb 3>; [30.00%]

  <bb 16> [local count: 33996319]:
  goto <bb 12>; [100.00%]

  <bb 5> [local count: 544172357]:
  # DEBUG BEGIN_STMT
  _3 = (int) ControlChanIdx_6;
  Sc1Reg_16 ={v} Base_14->SC1[_3];
  # DEBUG Sc1Reg => Sc1Reg_16
  # DEBUG BEGIN_STMT
  # DEBUG Reg => Sc1Reg_16
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetAIEN
  # DEBUG BEGIN_STMT
  _22 = Sc1Reg_16 >> 6;
  _23 = (_Bool) _22;
  # DEBUG Reg => NULL
  # DEBUG ChanIntFlag => _23
  # DEBUG BEGIN_STMT
  # DEBUG Reg => Sc1Reg_16
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetCOCO
  # DEBUG BEGIN_STMT
  _18 = Sc1Reg_16 >> 7;
  _17 = (_Bool) _18;
  # DEBUG Reg => NULL
  # DEBUG ChanCocoFlag => _17
  # DEBUG BEGIN_STMT
  if (_23 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 6> [local count: 272086178]:
  if (_17 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 136043089]:
  # DEBUG BEGIN_STMT
  _4 = AdcIpState[Instance_13(D)].ConversionCompleteNotification;
  _4 (ControlChanIdx_6);
  goto <bb 11>; [100.00%]

  <bb 8> [local count: 408129267]:
  # DEBUG BEGIN_STMT
  _5 = AdcIpState[Instance_13(D)].ChannelConfig[_3];
  if (_5 == 31)
    goto <bb 9>; [34.00%]
  else
    goto <bb 11>; [66.00%]

  <bb 9> [local count: 138763951]:
  if (_17 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 11>; [50.00%]

  <bb 10> [local count: 69381975]:
  # DEBUG BEGIN_STMT
  # DEBUG Base => Base_14
  # DEBUG ChnIdx => ControlChanIdx_6
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetData
  # DEBUG BEGIN_STMT
  _24 ={v} Base_14->R[_3];
  # DEBUG D#1 => (uint16) _24
  # DEBUG Result => D#1
  # DEBUG BEGIN_STMT
  # DEBUG Result => D#1 & 4095
  # DEBUG BEGIN_STMT

  <bb 11> [local count: 544172357]:
  # DEBUG Base => NULL
  # DEBUG ChnIdx => NULL
  # DEBUG Result => NULL
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  ControlChanIdx_20 = ControlChanIdx_6 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_20

  <bb 12> [local count: 578168676]:
  # ControlChanIdx_6 = PHI <ControlChanIdx_20(11), 0(16)>
  # DEBUG ControlChanIdx => ControlChanIdx_6
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_6 != 16)
    goto <bb 5>; [94.12%]
  else
    goto <bb 15>; [5.88%]

  <bb 13> [local count: 1010605806]:
  # DEBUG BEGIN_STMT
  # DEBUG Base => Base_14
  # DEBUG ChnIdx => ControlChanIdx_7
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetData
  # DEBUG BEGIN_STMT
  _25 = (int) ControlChanIdx_7;
  _26 ={v} Base_14->R[_25];
  # DEBUG D#2 => (uint16) _26
  # DEBUG Result => D#2
  # DEBUG BEGIN_STMT
  # DEBUG Result => D#2 & 4095
  # DEBUG BEGIN_STMT
  # DEBUG Base => NULL
  # DEBUG ChnIdx => NULL
  # DEBUG Result => NULL
  # DEBUG BEGIN_STMT
  ControlChanIdx_21 = ControlChanIdx_7 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_21

  <bb 14> [local count: 1073741824]:
  # ControlChanIdx_7 = PHI <ControlChanIdx_15(3), ControlChanIdx_21(13)>
  # DEBUG ControlChanIdx => ControlChanIdx_7
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_7 != 16)
    goto <bb 13>; [94.12%]
  else
    goto <bb 15>; [5.88%]

  <bb 15> [local count: 97132337]:
  return;

}


Adc_Ip_GetChanData (const uint32 Instance, const Adc_Ip_InputChannelType Channel, uint16 * const Result)
{
  boolean Found;
  uint8 ControlChanIdx;
  uint16 Temp;
  Adc_Ip_StatusType Status;
  const struct ADC_Type * const Base;
  int _1;
  <unnamed type> _2;
  int _4;
  long unsigned int _5;

  <bb 2> [local count: 118719338]:
  # DEBUG BEGIN_STMT
  Base_12 = AdcBase[Instance_11(D)];
  # DEBUG Base => Base_12
  # DEBUG BEGIN_STMT
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  # DEBUG Temp => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG Found => 0
  # DEBUG BEGIN_STMT
  # DEBUG ControlChanIdx => 0
  goto <bb 5>; [100.00%]

  <bb 3> [local count: 1010605805]:
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_8;
  _2 = AdcIpState[Instance_11(D)].ChannelConfig[_1];
  if (_2 == Channel_13(D))
    goto <bb 6>; [5.50%]
  else
    goto <bb 4>; [94.50%]

  <bb 4> [local count: 955022485]:
  # DEBUG BEGIN_STMT
  ControlChanIdx_14 = ControlChanIdx_8 + 1;
  # DEBUG ControlChanIdx => ControlChanIdx_14

  <bb 5> [local count: 1073741824]:
  # ControlChanIdx_8 = PHI <0(2), ControlChanIdx_14(4)>
  # DEBUG ControlChanIdx => ControlChanIdx_8
  # DEBUG BEGIN_STMT
  if (ControlChanIdx_8 != 16)
    goto <bb 3>; [94.12%]
  else
    goto <bb 6>; [5.88%]

  <bb 6> [local count: 118719339]:
  # Found_9 = PHI <1(3), 0(5)>
  # ControlChanIdx_3 = PHI <ControlChanIdx_8(3), ControlChanIdx_8(5)>
  # DEBUG Found => Found_9
  # DEBUG BEGIN_STMT
  if (Found_9 != 0)
    goto <bb 7>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 7> [local count: 59359669]:
  # DEBUG BEGIN_STMT
  _4 = (int) ControlChanIdx_3;
  _5 ={v} Base_12->R[_4];
  Temp_15 = (uint16) _5;
  # DEBUG Temp => Temp_15
  # DEBUG BEGIN_STMT
  Temp_16 = Temp_15 & 4095;
  # DEBUG Temp => Temp_16

  <bb 8> [local count: 118719339]:
  # Status_6 = PHI <0(7), 1(6)>
  # Temp_7 = PHI <Temp_16(7), 0(6)>
  # DEBUG Temp => Temp_7
  # DEBUG Status => Status_6
  # DEBUG BEGIN_STMT
  *Result_17(D) = Temp_7;
  # DEBUG BEGIN_STMT
  return Status_6;

}


Adc_Ip_GetDataAddress (const uint32 Instance, const uint8 Index)
{
  struct ADC_Type * _1;
  int _2;
  const uint32_t * _3;
  uint32 _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = AdcBase[Instance_5(D)];
  _2 = (int) Index_6(D);
  _3 = &_1->R[_2];
  _7 = (uint32) _3;
  return _7;

}


Adc_Ip_GetTrigErrReg (const uint32 Instance)
{
  const struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  uint32 _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 >> 24;
  _6 = _2 & 15;
  return _6;

}


Adc_Ip_ClearTrigErrReg (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 | 251658240;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25 ();
  return;

}


Adc_Ip_DisableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_6 = AdcBase[Instance_5(D)];
  # DEBUG Base => Base_6
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20 ();
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_8(D);
  _2 ={v} Base_6->SC1[_1];
  _3 = _2 & 4294967231;
  Base_6->SC1[_1] ={v} _3;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20 ();
  return;

}


Adc_Ip_EnableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_6 = AdcBase[Instance_5(D)];
  # DEBUG Base => Base_6
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19 ();
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_8(D);
  _2 ={v} Base_6->SC1[_1];
  _3 = _2 | 64;
  Base_6->SC1[_1] ={v} _3;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19 ();
  return;

}


Adc_Ip_ClearLatchedTriggers (const uint32 Instance)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _20;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  Base_11 = AdcBase[Instance_10(D)];
  # DEBUG Base => Base_11
  # DEBUG BEGIN_STMT
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  TimeoutTicks_13 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_13
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  # DEBUG ElapsedTicks => 0
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _2 ={v} Base_11->CFG1;
  _3 = _2 | 256;
  Base_11->CFG1 ={v} _3;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 958878293]:
  # DEBUG BEGIN_STMT
  _20 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_21 = ElapsedTicks_7 + _20;
  # DEBUG ElapsedTicks => ElapsedTicks_21

  <bb 4> [local count: 1073741824]:
  # ElapsedTicks_7 = PHI <0(2), ElapsedTicks_21(3)>
  # DEBUG ElapsedTicks => ElapsedTicks_7
  # DEBUG BEGIN_STMT
  _4 ={v} Base_11->SC2;
  _5 = _4 & 983040;
  if (_5 != 0)
    goto <bb 5>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 5> [local count: 1014686025]:
  if (ElapsedTicks_7 < TimeoutTicks_13)
    goto <bb 3>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 6> [local count: 114863532]:
  # ElapsedTicks_22 = PHI <ElapsedTicks_7(4), ElapsedTicks_7(5)>
  # DEBUG BEGIN_STMT
  if (TimeoutTicks_13 <= ElapsedTicks_22)
    goto <bb 7>; [35.00%]
  else
    goto <bb 8>; [65.00%]

  <bb 7> [local count: 40202236]:
  # DEBUG BEGIN_STMT
  # DEBUG Status => 2

  <bb 8> [local count: 114863532]:
  # Status_6 = PHI <0(6), 2(7)>
  # DEBUG Status => Status_6
  # DEBUG BEGIN_STMT
  CurrentTicks ={v} {CLOBBER};
  return Status_6;

}


Adc_Ip_DoCalibration (const uint32 Instance)
{
  Adc_Ip_TrigType ReturnValue;
  struct Adc_Ip_ClockConfigType CalClockConfig;
  struct Adc_Ip_ClockConfigType PreClockConfig;
  uint32 Reg;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  <unnamed type> _4;
  unsigned char _5;
  long unsigned int _6;
  <unnamed type> _7;
  <unnamed type> _8;
  <unnamed type> _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _31;
  long unsigned int _53;
  long unsigned int vol.9_56;

  <bb 2> [local count: 114863532]:
  # DEBUG BEGIN_STMT
  Base_17 = AdcBase[Instance_16(D)];
  # DEBUG Base => Base_17
  # DEBUG BEGIN_STMT
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  TimeoutTicks_19 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_19
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  # DEBUG ElapsedTicks => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Reg_22 ={v} Base_17->SC3;
  # DEBUG Reg => Reg_22
  # DEBUG BEGIN_STMT
  _2 = Reg_22 >> 2;
  _3 = (_Bool) _2;
  PreClockConfig.AvgEn = _3;
  # DEBUG BEGIN_STMT
  _4 = Adc_HwAcc_GetAverageSelect (Reg_22);
  PreClockConfig.AvgSel = _4;
  # DEBUG BEGIN_STMT
  Reg_25 ={v} Base_17->CFG2;
  # DEBUG Reg => Reg_25
  # DEBUG BEGIN_STMT
  _5 = (unsigned char) Reg_25;
  PreClockConfig.SampleTime = _5;
  # DEBUG BEGIN_STMT
  _6 ={v} Base_17->SC2;
  # DEBUG Reg => _6
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetTriggerMode
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  _31 = _6 & 64;
  if (_31 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 57431766]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 1

  <bb 4> [local count: 114863532]:
  # ReturnValue_29 = PHI <0(2), 1(3)>
  # DEBUG ReturnValue => ReturnValue_29
  # DEBUG BEGIN_STMT
  # DEBUG Reg => NULL
  # DEBUG ReturnValue => NULL
  # DEBUG TriggerMode => ReturnValue_29
  # DEBUG BEGIN_STMT
  Reg_28 ={v} Base_17->CFG1;
  # DEBUG Reg => Reg_28
  # DEBUG BEGIN_STMT
  _7 = Adc_HwAcc_GetClockDivide (Reg_28);
  PreClockConfig.ClockDivide = _7;
  # DEBUG BEGIN_STMT
  _8 = Adc_HwAcc_GetInputClock (Reg_28);
  PreClockConfig.InputClock = _8;
  # DEBUG BEGIN_STMT
  CalClockConfig.AvgEn = 1;
  # DEBUG BEGIN_STMT
  CalClockConfig.AvgSel = 3;
  # DEBUG BEGIN_STMT
  CalClockConfig.SampleTime = 12;
  # DEBUG BEGIN_STMT
  _9 = AdcIpState[Instance_16(D)].CalibrationClockDivide;
  CalClockConfig.ClockDivide = _9;
  # DEBUG BEGIN_STMT
  CalClockConfig.InputClock = _8;
  # DEBUG BEGIN_STMT
  Adc_DoCalibration_SetParams (Base_17, &CalClockConfig, 0);
  # DEBUG BEGIN_STMT
  Base_17->CLPS ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLP3 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLP2 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLP1 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLP0 ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLPX ={v} 0;
  # DEBUG BEGIN_STMT
  Base_17->CLP9 ={v} 0;
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  Reg_47 ={v} Base_17->SC3;
  # DEBUG Reg => Reg_47
  # DEBUG BEGIN_STMT
  Reg_48 = Reg_47 & 4294967167;
  # DEBUG Reg => Reg_48
  # DEBUG BEGIN_STMT
  Reg_49 = Reg_48 | 128;
  # DEBUG Reg => Reg_49
  # DEBUG BEGIN_STMT
  Base_17->SC3 ={v} Reg_49;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 958878293]:
  # DEBUG BEGIN_STMT
  _53 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_54 = ElapsedTicks_13 + _53;
  # DEBUG ElapsedTicks => ElapsedTicks_54

  <bb 6> [local count: 1073741824]:
  # ElapsedTicks_13 = PHI <0(4), ElapsedTicks_54(5)>
  # DEBUG ElapsedTicks => ElapsedTicks_13
  # DEBUG BEGIN_STMT
  _10 ={v} Base_17->SC3;
  _11 = _10 & 128;
  if (_11 != 0)
    goto <bb 7>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 7> [local count: 1014686025]:
  if (ElapsedTicks_13 < TimeoutTicks_19)
    goto <bb 5>; [94.50%]
  else
    goto <bb 8>; [5.50%]

  <bb 8> [local count: 114863532]:
  # ElapsedTicks_27 = PHI <ElapsedTicks_13(6), ElapsedTicks_13(7)>
  # DEBUG BEGIN_STMT
  if (TimeoutTicks_19 <= ElapsedTicks_27)
    goto <bb 9>; [35.00%]
  else
    goto <bb 10>; [65.00%]

  <bb 9> [local count: 40202236]:
  # DEBUG BEGIN_STMT
  # DEBUG Status => 2

  <bb 10> [local count: 114863532]:
  # Status_12 = PHI <0(8), 2(9)>
  # DEBUG Status => Status_12
  # DEBUG BEGIN_STMT
  Adc_DoCalibration_SetParams (Base_17, &PreClockConfig, ReturnValue_29);
  # DEBUG BEGIN_STMT
  vol.9_56 ={v} Base_17->R[0];
  # DEBUG BEGIN_STMT
  CurrentTicks ={v} {CLOBBER};
  PreClockConfig ={v} {CLOBBER};
  CalClockConfig ={v} {CLOBBER};
  return Status_12;

}


Adc_Ip_GetConvData (const uint32 Instance, const uint8 ControlChanIdx)
{
  uint16 Result;
  const struct ADC_Type * const Base;
  int _5;
  long unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  # DEBUG Base => Base_3
  # DEBUG ChnIdx => ControlChanIdx_4(D)
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetData
  # DEBUG BEGIN_STMT
  _5 = (int) ControlChanIdx_4(D);
  _6 ={v} Base_3->R[_5];
  Result_7 = (uint16) _6;
  # DEBUG Result => Result_7
  # DEBUG BEGIN_STMT
  Result_8 = Result_7 & 4095;
  # DEBUG Result => Result_8
  # DEBUG BEGIN_STMT
  # DEBUG Base => NULL
  # DEBUG ChnIdx => NULL
  # DEBUG Result => NULL
  return Result_8;

}


Adc_Ip_GetConvCompleteFlag (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  int _1;
  long unsigned int _7;
  _Bool _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_5(D);
  Sc1Reg_6 ={v} Base_4->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_6
  # DEBUG BEGIN_STMT
  # DEBUG Reg => Sc1Reg_6
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetCOCO
  # DEBUG BEGIN_STMT
  _7 = Sc1Reg_6 >> 7;
  _8 = (_Bool) _7;
  # DEBUG Reg => NULL
  return _8;

}


Adc_Ip_GetChanInterrupt (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  int _1;
  long unsigned int _7;
  _Bool _8;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  _1 = (int) ControlChanIdx_5(D);
  Sc1Reg_6 ={v} Base_4->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_6
  # DEBUG BEGIN_STMT
  # DEBUG Reg => Sc1Reg_6
  # DEBUG INLINE_ENTRY Adc_HwAcc_GetAIEN
  # DEBUG BEGIN_STMT
  _7 = Sc1Reg_6 >> 6;
  _8 = (_Bool) _7;
  # DEBUG Reg => NULL
  return _8;

}


Adc_Ip_GetConvActiveFlag (const uint32 Instance)
{
  uint32 Sc2Reg;
  const struct ADC_Type * const Base;
  long unsigned int _1;
  boolean _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  Sc2Reg_5 ={v} Base_4->SC2;
  # DEBUG Sc2Reg => Sc2Reg_5
  # DEBUG BEGIN_STMT
  _1 = Sc2Reg_5 >> 7;
  # DEBUG Sc2Reg => _1 & 1
  # DEBUG BEGIN_STMT
  _6 = (boolean) _1;
  return _6;

}


Adc_Ip_StartConversion (const uint32 Instance, Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  struct ADC_Type * const Base;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetChannel (Base_3, 0, InputChannel_5(D), InterruptEnable_6(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18 ();
  return;

}


Adc_Ip_SetDisabledChannel (const uint32 Instance, const uint8 ControlChanIdx, const boolean WithTimeout)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _25;

  <bb 2> [local count: 229727064]:
  # DEBUG BEGIN_STMT
  Base_14 = AdcBase[Instance_13(D)];
  # DEBUG Base => Base_14
  # DEBUG BEGIN_STMT
  # DEBUG Status => 0
  # DEBUG BEGIN_STMT
  TimeoutTicks_16 = OsIf_MicrosToTicks (10000, 0);
  # DEBUG TimeoutTicks => TimeoutTicks_16
  # DEBUG BEGIN_STMT
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  # DEBUG BEGIN_STMT
  # DEBUG ElapsedTicks => 0
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  _2 = (int) ControlChanIdx_20(D);
  _3 ={v} Base_14->SC1[_2];
  _5 = _3 | 31;
  Base_14->SC1[_2] ={v} _5;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17 ();
  # DEBUG BEGIN_STMT
  if (WithTimeout_23(D) != 0)
    goto <bb 9>; [50.00%]
  else
    goto <bb 8>; [50.00%]

  <bb 9> [local count: 114863532]:
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 958878293]:
  # DEBUG BEGIN_STMT
  _25 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_26 = ElapsedTicks_9 + _25;
  # DEBUG ElapsedTicks => ElapsedTicks_26

  <bb 4> [local count: 1073741824]:
  # ElapsedTicks_9 = PHI <ElapsedTicks_26(3), 0(9)>
  # DEBUG ElapsedTicks => ElapsedTicks_9
  # DEBUG BEGIN_STMT
  _6 ={v} Base_14->SC1[_2];
  _7 = _6 & 31;
  if (_7 != 31)
    goto <bb 5>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 5> [local count: 1014686025]:
  if (ElapsedTicks_9 < TimeoutTicks_16)
    goto <bb 3>; [94.50%]
  else
    goto <bb 6>; [5.50%]

  <bb 6> [local count: 114863532]:
  # ElapsedTicks_4 = PHI <ElapsedTicks_9(4), ElapsedTicks_9(5)>
  # DEBUG BEGIN_STMT
  if (ElapsedTicks_4 >= TimeoutTicks_16)
    goto <bb 7>; [35.00%]
  else
    goto <bb 8>; [65.00%]

  <bb 7> [local count: 40202236]:
  # DEBUG BEGIN_STMT
  # DEBUG Status => 2

  <bb 8> [local count: 229727064]:
  # Status_8 = PHI <0(2), 0(6), 2(7)>
  # DEBUG Status => Status_8
  # DEBUG BEGIN_STMT
  CurrentTicks ={v} {CLOBBER};
  return Status_8;

}


Adc_Ip_ConfigChannel (const uint32 Instance, const struct Adc_Ip_ChanConfigType * const ChanConfig)
{
  Adc_Ip_InputChannelType InputChanDemapped;
  struct ADC_Type * const Base;
  unsigned char _1;
  _Bool _2;
  unsigned char _3;
  int _4;
  <unnamed type> _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_8 = AdcBase[Instance_7(D)];
  # DEBUG Base => Base_8
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  InputChanDemapped_10 = ChanConfig_9(D)->Channel;
  # DEBUG InputChanDemapped => InputChanDemapped_10
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21 ();
  # DEBUG BEGIN_STMT
  _1 = ChanConfig_9(D)->ChnIdx;
  _2 = ChanConfig_9(D)->InterruptEnable;
  Adc_HwAcc_SetChannel (Base_8, _1, InputChanDemapped_10, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21 ();
  # DEBUG BEGIN_STMT
  _3 = ChanConfig_9(D)->ChnIdx;
  _4 = (int) _3;
  _5 = ChanConfig_9(D)->Channel;
  AdcIpState[Instance_7(D)].ChannelConfig[_4] = _5;
  return;

}


Adc_Ip_SetClockMode (const uint32 Instance, const struct Adc_Ip_ClockConfigType * const Config)
{
  struct ADC_Type * const Base;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  _Bool _4;
  <unnamed type> _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_8 = AdcBase[Instance_7(D)];
  # DEBUG Base => Base_8
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _1 = Config_10(D)->ClockDivide;
  _2 = Config_10(D)->InputClock;
  Adc_HwAcc_SetClock (Base_8, _1, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  _3 = Config_10(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_8, _3);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28 ();
  # DEBUG BEGIN_STMT
  _4 = Config_10(D)->AvgEn;
  _5 = Config_10(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_8, _4, _5);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28 ();
  return;

}


Adc_Ip_SetResolution (const uint32 Instance, const Adc_Ip_ResolutionType Resolution)
{
  uint32 Cfg1Reg;
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  Cfg1Reg_7 ={v} Base_5->CFG1;
  # DEBUG Cfg1Reg => Cfg1Reg_7
  # DEBUG BEGIN_STMT
  Cfg1Reg_8 = Cfg1Reg_7 & 4294967283;
  # DEBUG Cfg1Reg => Cfg1Reg_8
  # DEBUG BEGIN_STMT
  _1 = Resolution_9(D) << 2;
  _2 = _1 & 12;
  Cfg1Reg_10 = _2 | Cfg1Reg_8;
  # DEBUG Cfg1Reg => Cfg1Reg_10
  # DEBUG BEGIN_STMT
  Base_5->CFG1 ={v} Cfg1Reg_10;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10 ();
  return;

}


Adc_Ip_SetContinuousMode (const uint32 Instance, const boolean ContinuousModeEnable)
{
  uint32 Sc3Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.7_1;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_4 = AdcBase[Instance_3(D)];
  # DEBUG Base => Base_4
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30 ();
  # DEBUG BEGIN_STMT
  Sc3Reg_6 ={v} Base_4->SC3;
  # DEBUG Sc3Reg => Sc3Reg_6
  # DEBUG BEGIN_STMT
  Sc3Reg_7 = Sc3Reg_6 & 4294967287;
  # DEBUG Sc3Reg => Sc3Reg_7
  # DEBUG BEGIN_STMT
  if (ContinuousModeEnable_8(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:

  <bb 4> [local count: 1073741824]:
  # iftmp.7_1 = PHI <8(2), 0(3)>
  Sc3Reg_9 = iftmp.7_1 | Sc3Reg_7;
  # DEBUG Sc3Reg => Sc3Reg_9
  # DEBUG BEGIN_STMT
  Base_4->SC3 ={v} Sc3Reg_9;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30 ();
  return;

}


Adc_Ip_SetTriggerMode (const uint32 Instance, const Adc_Ip_TrigType TriggerMode)
{
  struct ADC_Type * const Base;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetTriggerMode (Base_3, TriggerMode_5(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23 ();
  return;

}


Adc_Ip_DisableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 & 4294967291;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22 ();
  return;

}


Adc_Ip_EnableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_5 = AdcBase[Instance_4(D)];
  # DEBUG Base => Base_5
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26 ();
  # DEBUG BEGIN_STMT
  _1 ={v} Base_5->SC2;
  _2 = _1 | 4;
  Base_5->SC2 ={v} _2;
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26 ();
  return;

}


Adc_Ip_SetSampleTime (const uint32 Instance, const uint8 SampleTime)
{
  struct ADC_Type * const Base;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetSampleTime (Base_3, SampleTime_5(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16 ();
  return;

}


Adc_Ip_SetAveraging (const uint32 Instance, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  struct ADC_Type * const Base;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Base_3 = AdcBase[Instance_2(D)];
  # DEBUG Base => Base_3
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetAveraging (Base_3, AvgEn_5(D), AvgSel_6(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27 ();
  return;

}


Adc_Ip_DeInit (const uint32 Instance)
{
  uint8 Index;
  struct Adc_Ip_ChanConfigType ChannelConfigs[16];
  struct Adc_Ip_ConfigType DefaultConfig;
  int _1;

  <bb 2> [local count: 63136020]:
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  DefaultConfig.ClockDivide = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CalibrationClockDivide = 3;
  # DEBUG BEGIN_STMT
  DefaultConfig.InputClock = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.SampleTime = 12;
  # DEBUG BEGIN_STMT
  DefaultConfig.AvgEn = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.AvgSel = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.Resolution = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.TriggerMode = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.DmaEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.VoltageRef = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.ContinuousConvEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareGreaterThanEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompareRangeFuncEnable = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompVal1 = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.CompVal2 = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.UsrGain = 4;
  # DEBUG BEGIN_STMT
  DefaultConfig.UsrOffset = 0;
  # DEBUG BEGIN_STMT
  DefaultConfig.NumChannels = 16;
  # DEBUG BEGIN_STMT
  # DEBUG Index => 0
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 1010605805]:
  # DEBUG BEGIN_STMT
  _1 = (int) Index_2;
  ChannelConfigs[_1].ChnIdx = Index_2;
  # DEBUG BEGIN_STMT
  ChannelConfigs[_1].Channel = 31;
  # DEBUG BEGIN_STMT
  ChannelConfigs[_1].InterruptEnable = 0;
  # DEBUG BEGIN_STMT
  Index_34 = Index_2 + 1;
  # DEBUG Index => Index_34

  <bb 4> [local count: 1073741824]:
  # Index_2 = PHI <0(2), Index_34(3)>
  # DEBUG Index => Index_2
  # DEBUG BEGIN_STMT
  if (Index_2 != 16)
    goto <bb 3>; [94.12%]
  else
    goto <bb 5>; [5.88%]

  <bb 5> [local count: 63136019]:
  # DEBUG BEGIN_STMT
  DefaultConfig.ChannelConfigs = &ChannelConfigs;
  # DEBUG BEGIN_STMT
  DefaultConfig.ConversionCompleteNotification = 0B;
  # DEBUG BEGIN_STMT
  Adc_Ip_Init (Instance_26(D), &DefaultConfig);
  # DEBUG BEGIN_STMT
  AdcIpState[Instance_26(D)].Init = 0;
  DefaultConfig ={v} {CLOBBER};
  ChannelConfigs ={v} {CLOBBER};
  return;

}


Adc_Ip_Init (const uint32 Instance, const struct Adc_Ip_ConfigType * const Config)
{
  uint32 Sc2Reg;
  uint8 Index;
  uint32 SC2ClearMask;
  uint32 SC2Reg;
  struct ADC_Type * const Base;
  <unnamed type> _1;
  <unnamed type> _2;
  unsigned char _3;
  _Bool _4;
  <unnamed type> _5;
  <unnamed type> _6;
  <unnamed type> _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  <unnamed type> _11;
  long unsigned int _12;
  _Bool _13;
  _Bool _14;
  _Bool _15;
  short unsigned int _16;
  long unsigned int _17;
  short unsigned int _18;
  long unsigned int _19;
  short unsigned int _20;
  short unsigned int _21;
  _Bool _22;
  const struct Adc_Ip_ChanConfigType * _23;
  const struct Adc_Ip_ChanConfigType * _24;
  unsigned int _25;
  unsigned int _26;
  const struct Adc_Ip_ChanConfigType * _27;
  unsigned char _28;
  void (*<T4d9>) (const uint8) _29;
  <unnamed type> _30;
  long unsigned int iftmp.0_34;
  long unsigned int iftmp.1_35;
  long unsigned int iftmp.2_36;
  short unsigned int _61;
  long unsigned int _62;
  short unsigned int _63;
  long unsigned int _64;
  long unsigned int _66;

  <bb 2> [local count: 168730857]:
  # DEBUG BEGIN_STMT
  Base_41 = AdcBase[Instance_40(D)];
  # DEBUG Base => Base_41
  # DEBUG BEGIN_STMT
  # DEBUG SC2Reg => 0
  # DEBUG BEGIN_STMT
  # DEBUG SC2ClearMask => 0
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = Config_42(D)->ClockDivide;
  _2 = Config_42(D)->InputClock;
  Adc_HwAcc_SetClock (Base_41, _1, _2);
  # DEBUG BEGIN_STMT
  _3 = Config_42(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_41, _3);
  # DEBUG BEGIN_STMT
  _4 = Config_42(D)->AvgEn;
  _5 = Config_42(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_41, _4, _5);
  # DEBUG BEGIN_STMT
  _6 = Config_42(D)->Resolution;
  Adc_Ip_SetResolution (Instance_40(D), _6);
  # DEBUG BEGIN_STMT
  # DEBUG SC2ClearMask => 64
  # DEBUG BEGIN_STMT
  _7 = Config_42(D)->TriggerMode;
  _8 = _7 << 6;
  _9 = _8 & 64;
  # DEBUG SC2Reg => _9
  # DEBUG BEGIN_STMT
  _10 = Config_42(D)->DmaEnable;
  if (_10 != 0)
    goto <bb 3>; [50.00%]
  else
    goto <bb 4>; [50.00%]

  <bb 3> [local count: 84365429]:
  # DEBUG BEGIN_STMT
  SC2Reg_47 = _9 | 4;
  # DEBUG SC2Reg => SC2Reg_47

  <bb 4> [local count: 168730857]:
  # SC2Reg_31 = PHI <SC2Reg_47(3), _9(2)>
  # SC2ClearMask_32 = PHI <64(3), 68(2)>
  # DEBUG SC2ClearMask => SC2ClearMask_32
  # DEBUG SC2Reg => SC2Reg_31
  # DEBUG BEGIN_STMT
  # DEBUG SC2ClearMask => SC2ClearMask_32 | 3
  # DEBUG BEGIN_STMT
  _11 = Config_42(D)->VoltageRef;
  _12 = _11 & 3;
  SC2Reg_48 = _12 | SC2Reg_31;
  # DEBUG SC2Reg => SC2Reg_48
  # DEBUG BEGIN_STMT
  SC2ClearMask_49 = SC2ClearMask_32 | 59;
  # DEBUG SC2ClearMask => SC2ClearMask_49
  # DEBUG BEGIN_STMT
  _13 = Config_42(D)->CompareEnable;
  if (_13 != 0)
    goto <bb 6>; [50.00%]
  else
    goto <bb 5>; [50.00%]

  <bb 5> [local count: 84365429]:

  <bb 6> [local count: 168730857]:
  # iftmp.0_34 = PHI <32(4), 0(5)>
  SC2Reg_50 = iftmp.0_34 | SC2Reg_48;
  # DEBUG SC2Reg => SC2Reg_50
  # DEBUG BEGIN_STMT
  _14 = Config_42(D)->CompareGreaterThanEnable;
  if (_14 != 0)
    goto <bb 8>; [50.00%]
  else
    goto <bb 7>; [50.00%]

  <bb 7> [local count: 84365429]:

  <bb 8> [local count: 168730857]:
  # iftmp.1_35 = PHI <16(6), 0(7)>
  SC2Reg_51 = iftmp.1_35 | SC2Reg_50;
  # DEBUG SC2Reg => SC2Reg_51
  # DEBUG BEGIN_STMT
  _15 = Config_42(D)->CompareRangeFuncEnable;
  if (_15 != 0)
    goto <bb 10>; [50.00%]
  else
    goto <bb 9>; [50.00%]

  <bb 9> [local count: 84365429]:

  <bb 10> [local count: 168730857]:
  # iftmp.2_36 = PHI <8(8), 0(9)>
  SC2Reg_52 = iftmp.2_36 | SC2Reg_51;
  # DEBUG SC2Reg => SC2Reg_52
  # DEBUG BEGIN_STMT
  _16 = Config_42(D)->CompVal1;
  _17 = (long unsigned int) _16;
  Base_41->CV[0] ={v} _17;
  # DEBUG BEGIN_STMT
  _18 = Config_42(D)->CompVal2;
  _19 = (long unsigned int) _18;
  Base_41->CV[1] ={v} _19;
  # DEBUG BEGIN_STMT
  # DEBUG Base => Base_41
  # DEBUG ClearMask => SC2ClearMask_49
  # DEBUG Value => SC2Reg_52
  # DEBUG INLINE_ENTRY Adc_HwAcc_SetSC2Reg
  # DEBUG BEGIN_STMT
  Sc2Reg_65 ={v} Base_41->SC2;
  # DEBUG Sc2Reg => Sc2Reg_65
  # DEBUG BEGIN_STMT
  _66 = ~SC2ClearMask_49;
  Sc2Reg_67 = Sc2Reg_65 & _66;
  # DEBUG Sc2Reg => Sc2Reg_67
  # DEBUG BEGIN_STMT
  Sc2Reg_68 = SC2Reg_52 | Sc2Reg_67;
  # DEBUG Sc2Reg => Sc2Reg_68
  # DEBUG BEGIN_STMT
  Base_41->SC2 ={v} Sc2Reg_68;
  # DEBUG Base => NULL
  # DEBUG ClearMask => NULL
  # DEBUG Value => NULL
  # DEBUG Sc2Reg => NULL
  # DEBUG BEGIN_STMT
  _20 = Config_42(D)->UsrGain;
  _21 = Config_42(D)->UsrOffset;
  # DEBUG Base => Base_41
  # DEBUG UsrGain => _20
  # DEBUG UsrOffset => _21
  # DEBUG INLINE_ENTRY Adc_HwAcc_SetUserGainAndOffset
  # DEBUG BEGIN_STMT
  _61 = _21 & 255;
  _62 = (long unsigned int) _61;
  Base_41->USR_OFS ={v} _62;
  # DEBUG BEGIN_STMT
  _63 = _20 & 1023;
  _64 = (long unsigned int) _63;
  Base_41->UG ={v} _64;
  # DEBUG Base => NULL
  # DEBUG UsrGain => NULL
  # DEBUG UsrOffset => NULL
  # DEBUG BEGIN_STMT
  _22 = Config_42(D)->ContinuousConvEnable;
  Adc_Ip_SetContinuousMode (Instance_40(D), _22);
  # DEBUG BEGIN_STMT
  _23 = Config_42(D)->ChannelConfigs;
  if (_23 != 0B)
    goto <bb 14>; [70.00%]
  else
    goto <bb 13>; [30.00%]

  <bb 14> [local count: 118111600]:
  goto <bb 12>; [100.00%]

  <bb 11> [local count: 955630225]:
  # DEBUG BEGIN_STMT
  _24 = Config_42(D)->ChannelConfigs;
  _25 = (unsigned int) Index_33;
  _26 = _25 * 12;
  _27 = _24 + _26;
  Adc_Ip_ConfigChannel (Instance_40(D), _27);
  # DEBUG BEGIN_STMT
  Index_57 = Index_33 + 1;
  # DEBUG Index => Index_57

  <bb 12> [local count: 1073741824]:
  # Index_33 = PHI <Index_57(11), 0(14)>
  # DEBUG Index => Index_33
  # DEBUG BEGIN_STMT
  _28 = Config_42(D)->NumChannels;
  if (_28 > Index_33)
    goto <bb 11>; [89.00%]
  else
    goto <bb 13>; [11.00%]

  <bb 13> [local count: 168730858]:
  # DEBUG BEGIN_STMT
  _29 = Config_42(D)->ConversionCompleteNotification;
  AdcIpState[Instance_40(D)].ConversionCompleteNotification = _29;
  # DEBUG BEGIN_STMT
  _30 = Config_42(D)->CalibrationClockDivide;
  AdcIpState[Instance_40(D)].CalibrationClockDivide = _30;
  # DEBUG BEGIN_STMT
  AdcIpState[Instance_40(D)].Init = 1;
  return;

}


Adc_DoCalibration_SetParams (struct ADC_Type * const Base, const struct Adc_Ip_ClockConfigType * const Config, const Adc_Ip_TrigType TriggerMode)
{
  _Bool _1;
  <unnamed type> _2;
  unsigned char _3;
  <unnamed type> _4;
  <unnamed type> _5;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  _1 = Config_8(D)->AvgEn;
  _2 = Config_8(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_9(D), _1, _2);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24 ();
  # DEBUG BEGIN_STMT
  Adc_HwAcc_SetTriggerMode (Base_9(D), TriggerMode_13(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  _3 = Config_8(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_9(D), _3);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _4 = Config_8(D)->ClockDivide;
  _5 = Config_8(D)->InputClock;
  Adc_HwAcc_SetClock (Base_9(D), _4, _5);
  # DEBUG BEGIN_STMT
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13 ();
  return;

}


Adc_HwAcc_SetChannel (struct ADC_Type * const Base, const uint8 ChnIdx, const Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  uint32 Sc1Reg;
  int _1;
  long unsigned int _2;
  long unsigned int iftmp.8_3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  _1 = (int) ChnIdx_4(D);
  Sc1Reg_7 ={v} Base_6(D)->SC1[_1];
  # DEBUG Sc1Reg => Sc1Reg_7
  # DEBUG BEGIN_STMT
  Sc1Reg_8 = Sc1Reg_7 & 4294967200;
  # DEBUG Sc1Reg => Sc1Reg_8
  # DEBUG BEGIN_STMT
  _2 = InputChannel_9(D) & 31;
  Sc1Reg_10 = _2 | Sc1Reg_8;
  # DEBUG Sc1Reg => Sc1Reg_10
  # DEBUG BEGIN_STMT
  if (InterruptEnable_11(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:

  <bb 4> [local count: 1073741824]:
  # iftmp.8_3 = PHI <64(2), 0(3)>
  Sc1Reg_12 = iftmp.8_3 | Sc1Reg_10;
  # DEBUG Sc1Reg => Sc1Reg_12
  # DEBUG BEGIN_STMT
  Base_6(D)->SC1[_1] ={v} Sc1Reg_12;
  return;

}


Adc_HwAcc_SetTriggerMode (struct ADC_Type * const Base, const Adc_Ip_TrigType TriggerMode)
{
  uint32 Sc2Reg;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Sc2Reg_5 ={v} Base_4(D)->SC2;
  # DEBUG Sc2Reg => Sc2Reg_5
  # DEBUG BEGIN_STMT
  Sc2Reg_6 = Sc2Reg_5 & 4294967231;
  # DEBUG Sc2Reg => Sc2Reg_6
  # DEBUG BEGIN_STMT
  _1 = TriggerMode_7(D) << 6;
  _2 = _1 & 64;
  Sc2Reg_8 = _2 | Sc2Reg_6;
  # DEBUG Sc2Reg => Sc2Reg_8
  # DEBUG BEGIN_STMT
  Base_4(D)->SC2 ={v} Sc2Reg_8;
  return;

}


Adc_HwAcc_SetAveraging (struct ADC_Type * const Base, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  uint32 Sc3Reg;
  long unsigned int _1;
  long unsigned int iftmp.5_2;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Sc3Reg_5 ={v} Base_4(D)->SC3;
  # DEBUG Sc3Reg => Sc3Reg_5
  # DEBUG BEGIN_STMT
  Sc3Reg_6 = Sc3Reg_5 & 4294967288;
  # DEBUG Sc3Reg => Sc3Reg_6
  # DEBUG BEGIN_STMT
  if (AvgEn_7(D) != 0)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:

  <bb 4> [local count: 1073741824]:
  # iftmp.5_2 = PHI <4(2), 0(3)>
  Sc3Reg_8 = iftmp.5_2 | Sc3Reg_6;
  # DEBUG Sc3Reg => Sc3Reg_8
  # DEBUG BEGIN_STMT
  _1 = AvgSel_9(D) & 3;
  Sc3Reg_10 = _1 | Sc3Reg_8;
  # DEBUG Sc3Reg => Sc3Reg_10
  # DEBUG BEGIN_STMT
  Base_4(D)->SC3 ={v} Sc3Reg_10;
  return;

}


Adc_HwAcc_SetSampleTime (struct ADC_Type * const Base, const uint8 SampleTime)
{
  uint32 Cfg2Reg;
  long unsigned int _1;
  unsigned char iftmp.4_3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  iftmp.4_3 = MAX_EXPR <1, SampleTime_2(D)>;
  # DEBUG ClippedSampleTime => iftmp.4_3
  # DEBUG BEGIN_STMT
  Cfg2Reg_6 ={v} Base_5(D)->CFG2;
  # DEBUG Cfg2Reg => Cfg2Reg_6
  # DEBUG BEGIN_STMT
  Cfg2Reg_7 = Cfg2Reg_6 & 4294967040;
  # DEBUG Cfg2Reg => Cfg2Reg_7
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) iftmp.4_3;
  Cfg2Reg_8 = _1 | Cfg2Reg_7;
  # DEBUG Cfg2Reg => Cfg2Reg_8
  # DEBUG BEGIN_STMT
  Base_5(D)->CFG2 ={v} Cfg2Reg_8;
  return;

}


Adc_HwAcc_GetInputClock (const uint32 Reg)
{
  Adc_Ip_ClkSourceType ReturnValue;
  long unsigned int _1;
  unsigned int _6;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  _1 = Reg_4(D) & 3;
  _6 = _1 + 4294967295;
  if (_6 <= 2)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
<L7>:
  ReturnValue_5 = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
<L8>:
  ReturnValue_3 = _1;

  <bb 5> [local count: 1073741824]:
  # ReturnValue_2 = PHI <ReturnValue_3(4), ReturnValue_5(3)>
<L9>:
<L6>:
  # DEBUG ReturnValue => ReturnValue_2
  # DEBUG BEGIN_STMT
  return ReturnValue_2;

}


Adc_HwAcc_GetClockDivide (const uint32 Reg)
{
  Adc_Ip_ClockSelType ReturnValue;
  long unsigned int _1;
  long unsigned int _2;
  unsigned int _7;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  # DEBUG ReturnValue => 0
  # DEBUG BEGIN_STMT
  _1 = Reg_5(D) >> 5;
  _2 = _1 & 3;
  _7 = _2 + 4294967295;
  if (_7 <= 2)
    goto <bb 4>; [50.00%]
  else
    goto <bb 3>; [50.00%]

  <bb 3> [local count: 536870913]:
<L7>:
  ReturnValue_6 = 0;
  goto <bb 5>; [100.00%]

  <bb 4> [local count: 536870913]:
<L8>:
  ReturnValue_4 = _2;

  <bb 5> [local count: 1073741824]:
  # ReturnValue_3 = PHI <ReturnValue_4(4), ReturnValue_6(3)>
<L9>:
<L6>:
  # DEBUG ReturnValue => ReturnValue_3
  # DEBUG BEGIN_STMT
  return ReturnValue_3;

}


Adc_HwAcc_SetClock (struct ADC_Type * const Base, const Adc_Ip_ClockSelType ClockDivide, const Adc_Ip_ClkSourceType InputClock)
{
  uint32 Cfg1Reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> [local count: 1073741824]:
  # DEBUG BEGIN_STMT
  Cfg1Reg_6 ={v} Base_5(D)->CFG1;
  # DEBUG Cfg1Reg => Cfg1Reg_6
  # DEBUG BEGIN_STMT
  Cfg1Reg_7 = Cfg1Reg_6 & 4294967196;
  # DEBUG Cfg1Reg => Cfg1Reg_7
  # DEBUG BEGIN_STMT
  _1 = ClockDivide_8(D) << 5;
  _2 = _1 & 96;
  Cfg1Reg_9 = _2 | Cfg1Reg_7;
  # DEBUG Cfg1Reg => Cfg1Reg_9
  # DEBUG BEGIN_STMT
  _3 = InputClock_10(D) & 3;
  Cfg1Reg_11 = _3 | Cfg1Reg_9;
  # DEBUG Cfg1Reg => Cfg1Reg_11
  # DEBUG BEGIN_STMT
  Base_5(D)->CFG1 ={v} Cfg1Reg_11;
  return;

}


