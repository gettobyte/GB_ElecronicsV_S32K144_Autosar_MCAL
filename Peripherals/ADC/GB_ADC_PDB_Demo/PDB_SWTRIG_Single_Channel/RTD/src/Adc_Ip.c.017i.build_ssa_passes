ADC_SetSoftwarePretrigger_TrustedCall (const uint32 Instance, const uint8 SoftwarePretrigger)
{
  uint32 Reg;

  <bb 2> :
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31 ();
  _1 = 1074036736B;
  Reg = _1->ADCOPT;
  switch (Instance) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  Reg = Reg & 4294967281;
  _2 = (long unsigned int) SoftwarePretrigger;
  _3 = _2 << 1;
  _4 = _3 & 14;
  Reg = Reg | _4;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  Reg = Reg & 4294963711;
  _5 = (long unsigned int) SoftwarePretrigger;
  _6 = _5 << 9;
  _7 = _6 & 3584;
  Reg = Reg | _7;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  _8 = 1074036736B;
  _8->ADCOPT = Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31 ();
  return;

}


ADC_SetPretriggerSourceSelect_TrustedCall (const uint32 Instance, const uint8 PretriggerSource)
{
  uint32 Reg;

  <bb 2> :
  _1 = 1074036736B;
  Reg = _1->ADCOPT;
  switch (Instance) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  Reg = Reg & 4294967247;
  _2 = (long unsigned int) PretriggerSource;
  _3 = _2 << 4;
  _4 = _3 & 48;
  Reg = Reg | _4;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  Reg = Reg & 4294955007;
  _5 = (long unsigned int) PretriggerSource;
  _6 = _5 << 12;
  _7 = _6 & 12288;
  Reg = Reg | _7;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  _8 = 1074036736B;
  _8->ADCOPT = Reg;
  return;

}


ADC_SetPretriggerSourceSelect (const uint32 Instance, const uint8 PretriggerSource)
{
  <bb 2> :
  ADC_SetPretriggerSourceSelect_TrustedCall (Instance, PretriggerSource);
  return;

}


ADC_SetTriggerSourceSelect_TrustedCall (const uint32 Instance, const uint8 TriggerSource)
{
  uint32 Reg;

  <bb 2> :
  _1 = 1074036736B;
  Reg = _1->ADCOPT;
  switch (Instance) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  Reg = Reg & 4294967294;
  _2 = (long unsigned int) TriggerSource;
  _3 = _2 & 1;
  Reg = Reg | _3;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  Reg = Reg & 4294967039;
  _4 = (long unsigned int) TriggerSource;
  _5 = _4 << 8;
  _6 = _5 & 256;
  Reg = Reg | _6;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  _7 = 1074036736B;
  _7->ADCOPT = Reg;
  return;

}


ADC_SetTriggerSourceSelect (const uint32 Instance, const uint8 TriggerSource)
{
  <bb 2> :
  ADC_SetTriggerSourceSelect_TrustedCall (Instance, TriggerSource);
  return;

}


Adc_Ip_IRQHandler (const uint32 Instance)
{
  boolean ChanCocoFlag;
  boolean ChanIntFlag;
  uint8 ControlChanIdx;
  uint32 Sc1Reg;
  const struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  ChanIntFlag = 0;
  ChanCocoFlag = 0;
  _1 = AdcIpState[Instance].Init;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _2 = AdcIpState[Instance].ConversionCompleteNotification;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  ControlChanIdx = 0;
  goto <bb 12>; [INV]

  <bb 5> :
  _3 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_3];
  ChanIntFlag = Adc_HwAcc_GetAIEN (Sc1Reg);
  ChanCocoFlag = Adc_HwAcc_GetCOCO (Sc1Reg);
  if (ChanIntFlag != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChanCocoFlag != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _4 = AdcIpState[Instance].ConversionCompleteNotification;
  _4 (ControlChanIdx);
  goto <bb 11>; [INV]

  <bb 8> :
  _5 = (int) ControlChanIdx;
  _6 = AdcIpState[Instance].ChannelConfig[_5];
  if (_6 == 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (ChanCocoFlag != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_HwAcc_GetData (Base, ControlChanIdx);

  <bb 11> :
  ControlChanIdx.11_7 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.11_7 + 1;

  <bb 12> :
  if (ControlChanIdx <= 15)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  goto <bb 17>; [INV]

  <bb 14> :
  ControlChanIdx = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  Adc_HwAcc_GetData (Base, ControlChanIdx);
  ControlChanIdx.12_8 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.12_8 + 1;

  <bb 16> :
  if (ControlChanIdx <= 15)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  return;

}


Adc_Ip_SetSoftwarePretrigger (const uint32 Instance, const Adc_Ip_SoftwarePretriggerType SoftwarePretrigger)
{
  <bb 2> :
  _1 = (unsigned char) SoftwarePretrigger;
  ADC_SetSoftwarePretrigger_TrustedCall (Instance, _1);
  return;

}


Adc_Ip_GetChanData (const uint32 Instance, const Adc_Ip_InputChannelType Channel, uint16 * const Result)
{
  boolean Found;
  uint8 ControlChanIdx;
  uint16 Temp;
  Adc_Ip_StatusType Status;
  const struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6490;

  <bb 2> :
  Base = AdcBase[Instance];
  Status = 0;
  Temp = 0;
  Found = 0;
  ControlChanIdx = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (int) ControlChanIdx;
  _2 = AdcIpState[Instance].ChannelConfig[_1];
  if (Channel == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Found = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  ControlChanIdx.10_3 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.10_3 + 1;

  <bb 6> :
  if (ControlChanIdx <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (Found != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _4 = (int) ControlChanIdx;
  _5 = Base->R[_4];
  Temp = (uint16) _5;
  Temp = Temp & 4095;
  goto <bb 10>; [INV]

  <bb 9> :
  Status = 1;

  <bb 10> :
  *Result = Temp;
  D.6490 = Status;

  <bb 11> :
<L8>:
  return D.6490;

}


Adc_Ip_GetDataAddress (const uint32 Instance, const uint8 Index)
{
  uint32 D.6483;

  <bb 2> :
  _1 = AdcBase[Instance];
  _2 = (int) Index;
  _3 = &_1->R[_2];
  D.6483 = (uint32) _3;

  <bb 3> :
<L0>:
  return D.6483;

}


Adc_Ip_GetTrigErrReg (const uint32 Instance)
{
  const struct ADC_Type * const Base;
  uint32 D.6481;

  <bb 2> :
  Base = AdcBase[Instance];
  _1 = Base->SC2;
  _2 = _1 >> 24;
  D.6481 = _2 & 15;

  <bb 3> :
<L0>:
  return D.6481;

}


Adc_Ip_ClearTrigErrReg (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25 ();
  _1 = Base->SC2;
  _2 = _1 | 251658240;
  Base->SC2 = _2;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25 ();
  return;

}


Adc_Ip_DisableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20 ();
  _1 = (int) ControlChanIdx;
  _2 = Base->SC1[_1];
  _3 = (int) ControlChanIdx;
  _4 = _2 & 4294967231;
  Base->SC1[_3] = _4;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20 ();
  return;

}


Adc_Ip_EnableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19 ();
  _1 = (int) ControlChanIdx;
  _2 = Base->SC1[_1];
  _3 = (int) ControlChanIdx;
  _4 = _2 | 64;
  Base->SC1[_3] = _4;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19 ();
  return;

}


Adc_Ip_ClearLatchedTriggers (const uint32 Instance)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6478;
  long unsigned int D.6474;

  <bb 2> :
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  ElapsedTicks = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12 ();
  _2 = Base->CFG1;
  _3 = _2 | 256;
  Base->CFG1 = _3;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12 ();
  goto <bb 4>; [INV]

  <bb 3> :
  D.6474 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6474 + ElapsedTicks;

  <bb 4> :
  _4 = Base->SC2;
  _5 = _4 & 983040;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 2;

  <bb 8> :
  D.6478 = Status;
  CurrentTicks = {CLOBBER};

  <bb 9> :
<L7>:
  return D.6478;

}


Adc_Ip_DoCalibration (const uint32 Instance)
{
  struct Adc_Ip_ClockConfigType CalClockConfig;
  struct Adc_Ip_ClockConfigType PreClockConfig;
  uint32 Reg;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_TrigType TriggerMode;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6461;
  long unsigned int vol.9;
  long unsigned int D.6456;

  <bb 2> :
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  ElapsedTicks = 0;
  Reg = Base->SC3;
  _2 = Reg >> 2;
  _3 = (int) _2;
  _4 = _3 & 1;
  _5 = _4 != 0;
  PreClockConfig.AvgEn = _5;
  _6 = Adc_HwAcc_GetAverageSelect (Reg);
  PreClockConfig.AvgSel = _6;
  Reg = Base->CFG2;
  _7 = (unsigned char) Reg;
  PreClockConfig.SampleTime = _7;
  _8 = Base->SC2;
  TriggerMode = Adc_HwAcc_GetTriggerMode (_8);
  Reg = Base->CFG1;
  _9 = Adc_HwAcc_GetClockDivide (Reg);
  PreClockConfig.ClockDivide = _9;
  _10 = Adc_HwAcc_GetInputClock (Reg);
  PreClockConfig.InputClock = _10;
  CalClockConfig.AvgEn = 1;
  CalClockConfig.AvgSel = 3;
  CalClockConfig.SampleTime = 12;
  _11 = AdcIpState[Instance].CalibrationClockDivide;
  CalClockConfig.ClockDivide = _11;
  _12 = PreClockConfig.InputClock;
  CalClockConfig.InputClock = _12;
  Adc_DoCalibration_SetParams (Base, &CalClockConfig, 0);
  Base->CLPS = 0;
  Base->CLP3 = 0;
  Base->CLP2 = 0;
  Base->CLP1 = 0;
  Base->CLP0 = 0;
  Base->CLPX = 0;
  Base->CLP9 = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  Reg = Base->SC3;
  Reg = Reg & 4294967167;
  Reg = Reg | 128;
  Base->SC3 = Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  goto <bb 4>; [INV]

  <bb 3> :
  D.6456 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6456 + ElapsedTicks;

  <bb 4> :
  _13 = Base->SC3;
  _14 = _13 & 128;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 2;

  <bb 8> :
  Adc_DoCalibration_SetParams (Base, &PreClockConfig, TriggerMode);
  vol.9 = Base->R[0];
  D.6461 = Status;
  CurrentTicks = {CLOBBER};
  PreClockConfig = {CLOBBER};
  CalClockConfig = {CLOBBER};

  <bb 9> :
<L7>:
  return D.6461;

}


Adc_Ip_GetConvData (const uint32 Instance, const uint8 ControlChanIdx)
{
  const struct ADC_Type * const Base;
  uint16 D.6452;

  <bb 2> :
  Base = AdcBase[Instance];
  D.6452 = Adc_HwAcc_GetData (Base, ControlChanIdx);

  <bb 3> :
<L0>:
  return D.6452;

}


Adc_Ip_GetConvCompleteFlag (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6448;

  <bb 2> :
  Base = AdcBase[Instance];
  _1 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_1];
  D.6448 = Adc_HwAcc_GetCOCO (Sc1Reg);

  <bb 3> :
<L0>:
  return D.6448;

}


Adc_Ip_GetChanInterrupt (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6444;

  <bb 2> :
  Base = AdcBase[Instance];
  _1 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_1];
  D.6444 = Adc_HwAcc_GetAIEN (Sc1Reg);

  <bb 3> :
<L0>:
  return D.6444;

}


Adc_Ip_GetConvActiveFlag (const uint32 Instance)
{
  uint32 Sc2Reg;
  const struct ADC_Type * const Base;
  boolean D.6442;

  <bb 2> :
  Base = AdcBase[Instance];
  Sc2Reg = Base->SC2;
  _1 = Sc2Reg >> 7;
  Sc2Reg = _1 & 1;
  D.6442 = Sc2Reg != 0;

  <bb 3> :
<L0>:
  return D.6442;

}


Adc_Ip_StartConversion (const uint32 Instance, Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18 ();
  Adc_HwAcc_SetChannel (Base, 0, InputChannel, InterruptEnable);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18 ();
  return;

}


Adc_Ip_SetDisabledChannel (const uint32 Instance, const uint8 ControlChanIdx, const boolean WithTimeout)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6439;
  long unsigned int D.6435;

  <bb 2> :
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _1 = OsIf_GetCounter (0);
  CurrentTicks = _1;
  ElapsedTicks = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17 ();
  _2 = (int) ControlChanIdx;
  _3 = Base->SC1[_2];
  _4 = (int) ControlChanIdx;
  _5 = _3 | 31;
  Base->SC1[_4] = _5;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17 ();
  if (WithTimeout != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 5>; [INV]

  <bb 4> :
  D.6435 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6435 + ElapsedTicks;

  <bb 5> :
  _6 = (int) ControlChanIdx;
  _7 = Base->SC1[_6];
  _8 = _7 & 31;
  if (_8 != 31)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Status = 2;

  <bb 9> :
  D.6439 = Status;
  CurrentTicks = {CLOBBER};

  <bb 10> :
<L9>:
  return D.6439;

}


Adc_Ip_ConfigChannel (const uint32 Instance, const struct Adc_Ip_ChanConfigType * const ChanConfig)
{
  Adc_Ip_InputChannelType InputChanDemapped;
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  InputChanDemapped = ChanConfig->Channel;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _1 = ChanConfig->ChnIdx;
  _2 = ChanConfig->InterruptEnable;
  Adc_HwAcc_SetChannel (Base, _1, InputChanDemapped, _2);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _3 = ChanConfig->ChnIdx;
  _4 = (int) _3;
  _5 = ChanConfig->Channel;
  AdcIpState[Instance].ChannelConfig[_4] = _5;
  return;

}


Adc_Ip_SetClockMode (const uint32 Instance, const struct Adc_Ip_ClockConfigType * const Config)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11 ();
  _1 = Config->ClockDivide;
  _2 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _1, _2);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14 ();
  _3 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _3);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28 ();
  _4 = Config->AvgEn;
  _5 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _4, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28 ();
  return;

}


Adc_Ip_SetResolution (const uint32 Instance, const Adc_Ip_ResolutionType Resolution)
{
  uint32 Cfg1Reg;
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10 ();
  Cfg1Reg = Base->CFG1;
  Cfg1Reg = Cfg1Reg & 4294967283;
  _1 = Resolution << 2;
  _2 = _1 & 12;
  Cfg1Reg = Cfg1Reg | _2;
  Base->CFG1 = Cfg1Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10 ();
  return;

}


Adc_Ip_SetContinuousMode (const uint32 Instance, const boolean ContinuousModeEnable)
{
  uint32 Sc3Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.7;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30 ();
  Sc3Reg = Base->SC3;
  Sc3Reg = Sc3Reg & 4294967287;
  if (ContinuousModeEnable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 0;

  <bb 5> :
  Sc3Reg = iftmp.7 | Sc3Reg;
  Base->SC3 = Sc3Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30 ();
  return;

}


Adc_Ip_SetTriggerMode (const uint32 Instance, const Adc_Ip_TrigType TriggerMode)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23 ();
  Adc_HwAcc_SetTriggerMode (Base, TriggerMode);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23 ();
  return;

}


Adc_Ip_DisableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22 ();
  _1 = Base->SC2;
  _2 = _1 & 4294967291;
  Base->SC2 = _2;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22 ();
  return;

}


Adc_Ip_EnableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26 ();
  _1 = Base->SC2;
  _2 = _1 | 4;
  Base->SC2 = _2;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26 ();
  return;

}


Adc_Ip_SetSampleTime (const uint32 Instance, const uint8 SampleTime)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16 ();
  Adc_HwAcc_SetSampleTime (Base, SampleTime);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16 ();
  return;

}


Adc_Ip_SetAveraging (const uint32 Instance, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  struct ADC_Type * const Base;

  <bb 2> :
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27 ();
  Adc_HwAcc_SetAveraging (Base, AvgEn, AvgSel);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27 ();
  return;

}


Adc_Ip_DeInit (const uint32 Instance)
{
  uint8 Index;
  struct Adc_Ip_ChanConfigType ChannelConfigs[16];
  struct Adc_Ip_ConfigType DefaultConfig;

  <bb 2> :
  DefaultConfig.ClockDivide = 0;
  DefaultConfig.CalibrationClockDivide = 3;
  DefaultConfig.InputClock = 0;
  DefaultConfig.SampleTime = 12;
  DefaultConfig.AvgEn = 0;
  DefaultConfig.AvgSel = 0;
  DefaultConfig.Resolution = 0;
  DefaultConfig.TriggerMode = 0;
  DefaultConfig.PretriggerSel = 0;
  DefaultConfig.TriggerSel = 0;
  DefaultConfig.DmaEnable = 0;
  DefaultConfig.VoltageRef = 0;
  DefaultConfig.ContinuousConvEnable = 0;
  DefaultConfig.CompareEnable = 0;
  DefaultConfig.CompareGreaterThanEnable = 0;
  DefaultConfig.CompareRangeFuncEnable = 0;
  DefaultConfig.CompVal1 = 0;
  DefaultConfig.CompVal2 = 0;
  DefaultConfig.UsrGain = 4;
  DefaultConfig.UsrOffset = 0;
  DefaultConfig.NumChannels = 16;
  Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) Index;
  ChannelConfigs[_1].ChnIdx = Index;
  _2 = (int) Index;
  ChannelConfigs[_2].Channel = 31;
  _3 = (int) Index;
  ChannelConfigs[_3].InterruptEnable = 0;
  Index.6_4 = Index;
  Index = Index.6_4 + 1;

  <bb 4> :
  if (Index <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DefaultConfig.ChannelConfigs = &ChannelConfigs;
  DefaultConfig.ConversionCompleteNotification = 0B;
  Adc_Ip_Init (Instance, &DefaultConfig);
  AdcIpState[Instance].Init = 0;
  DefaultConfig = {CLOBBER};
  ChannelConfigs = {CLOBBER};
  return;

}


Adc_Ip_Init (const uint32 Instance, const struct Adc_Ip_ConfigType * const Config)
{
  uint8 Index;
  uint32 SC2ClearMask;
  uint32 SC2Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.2;
  long unsigned int iftmp.1;
  long unsigned int iftmp.0;

  <bb 2> :
  Base = AdcBase[Instance];
  SC2Reg = 0;
  SC2ClearMask = 0;
  _1 = Config->ClockDivide;
  _2 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _1, _2);
  _3 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _3);
  _4 = Config->AvgEn;
  _5 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _4, _5);
  _6 = Config->Resolution;
  Adc_Ip_SetResolution (Instance, _6);
  _7 = Config->TriggerSel;
  _8 = (unsigned char) _7;
  ADC_SetTriggerSourceSelect (Instance, _8);
  _9 = Config->PretriggerSel;
  _10 = (unsigned char) _9;
  ADC_SetPretriggerSourceSelect (Instance, _10);
  SC2ClearMask = SC2ClearMask | 64;
  _11 = Config->TriggerMode;
  _12 = _11 << 6;
  _13 = _12 & 64;
  SC2Reg = SC2Reg | _13;
  _14 = Config->DmaEnable;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SC2Reg = SC2Reg | 4;
  goto <bb 5>; [INV]

  <bb 4> :
  SC2ClearMask = SC2ClearMask | 4;

  <bb 5> :
  SC2ClearMask = SC2ClearMask | 3;
  _15 = Config->VoltageRef;
  _16 = _15 & 3;
  SC2Reg = SC2Reg | _16;
  SC2ClearMask = SC2ClearMask | 56;
  _17 = Config->CompareEnable;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0 = 32;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.0 = 0;

  <bb 8> :
  SC2Reg = iftmp.0 | SC2Reg;
  _18 = Config->CompareGreaterThanEnable;
  if (_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1 = 16;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.1 = 0;

  <bb 11> :
  SC2Reg = iftmp.1 | SC2Reg;
  _19 = Config->CompareRangeFuncEnable;
  if (_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.2 = 8;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2 = 0;

  <bb 14> :
  SC2Reg = iftmp.2 | SC2Reg;
  _20 = Config->CompVal1;
  _21 = (long unsigned int) _20;
  Base->CV[0] = _21;
  _22 = Config->CompVal2;
  _23 = (long unsigned int) _22;
  Base->CV[1] = _23;
  Adc_HwAcc_SetSC2Reg (Base, SC2ClearMask, SC2Reg);
  _24 = Config->UsrGain;
  _25 = Config->UsrOffset;
  Adc_HwAcc_SetUserGainAndOffset (Base, _24, _25);
  _26 = Config->ContinuousConvEnable;
  Adc_Ip_SetContinuousMode (Instance, _26);
  _27 = Config->ChannelConfigs;
  if (_27 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  Index = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _28 = Config->ChannelConfigs;
  _29 = (unsigned int) Index;
  _30 = _29 * 12;
  _31 = _28 + _30;
  Adc_Ip_ConfigChannel (Instance, _31);
  Index.3_32 = Index;
  Index = Index.3_32 + 1;

  <bb 17> :
  _33 = Config->NumChannels;
  if (Index < _33)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _34 = Config->ConversionCompleteNotification;
  AdcIpState[Instance].ConversionCompleteNotification = _34;
  _35 = Config->CalibrationClockDivide;
  AdcIpState[Instance].CalibrationClockDivide = _35;
  AdcIpState[Instance].Init = 1;
  _36 = Config->PretriggerSel;
  AdcIpState[Instance].PretriggerSel = _36;
  return;

}


Adc_DoCalibration_SetParams (struct ADC_Type * const Base, const struct Adc_Ip_ClockConfigType * const Config, const Adc_Ip_TrigType TriggerMode)
{
  <bb 2> :
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  _1 = Config->AvgEn;
  _2 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _1, _2);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24 ();
  Adc_HwAcc_SetTriggerMode (Base, TriggerMode);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15 ();
  _3 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _3);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13 ();
  _4 = Config->ClockDivide;
  _5 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _4, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13 ();
  return;

}


Adc_HwAcc_GetData (const struct ADC_Type * const Base, const uint8 ChnIdx)
{
  uint16 Result;
  uint16 D.6454;

  <bb 2> :
  _1 = (int) ChnIdx;
  _2 = Base->R[_1];
  Result = (uint16) _2;
  Result = Result & 4095;
  D.6454 = Result;

  <bb 3> :
<L0>:
  return D.6454;

}


Adc_HwAcc_GetCOCO (const uint32 Reg)
{
  boolean D.6450;

  <bb 2> :
  _1 = Reg >> 7;
  _2 = (int) _1;
  _3 = _2 & 1;
  D.6450 = _3 != 0;

  <bb 3> :
<L0>:
  return D.6450;

}


Adc_HwAcc_GetAIEN (const uint32 Reg)
{
  boolean D.6446;

  <bb 2> :
  _1 = Reg >> 6;
  _2 = (int) _1;
  _3 = _2 & 1;
  D.6446 = _3 != 0;

  <bb 3> :
<L0>:
  return D.6446;

}


Adc_HwAcc_SetUserGainAndOffset (struct ADC_Type * const Base, const uint16 UsrGain, const uint16 UsrOffset)
{
  <bb 2> :
  _1 = (long unsigned int) UsrOffset;
  _2 = _1 & 255;
  Base->USR_OFS = _2;
  _3 = (long unsigned int) UsrGain;
  _4 = _3 & 1023;
  Base->UG = _4;
  return;

}


Adc_HwAcc_SetChannel (struct ADC_Type * const Base, const uint8 ChnIdx, const Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  uint32 Sc1Reg;
  long unsigned int iftmp.8;

  <bb 2> :
  _1 = (int) ChnIdx;
  Sc1Reg = Base->SC1[_1];
  Sc1Reg = Sc1Reg & 4294967200;
  _2 = InputChannel & 31;
  Sc1Reg = Sc1Reg | _2;
  if (InterruptEnable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8 = 0;

  <bb 5> :
  Sc1Reg = iftmp.8 | Sc1Reg;
  _3 = (int) ChnIdx;
  Base->SC1[_3] = Sc1Reg;
  return;

}


Adc_HwAcc_GetTriggerMode (const uint32 Reg)
{
  Adc_Ip_TrigType ReturnValue;
  Adc_Ip_TrigType D.6468;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 64;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue = 1;

  <bb 4> :
  D.6468 = ReturnValue;

  <bb 5> :
<L2>:
  return D.6468;

}


Adc_HwAcc_SetTriggerMode (struct ADC_Type * const Base, const Adc_Ip_TrigType TriggerMode)
{
  uint32 Sc2Reg;

  <bb 2> :
  Sc2Reg = Base->SC2;
  Sc2Reg = Sc2Reg & 4294967231;
  _1 = TriggerMode << 6;
  _2 = _1 & 64;
  Sc2Reg = Sc2Reg | _2;
  Base->SC2 = Sc2Reg;
  return;

}


Adc_HwAcc_GetAverageSelect (const uint32 Reg)
{
  Adc_Ip_AvgSelectType ReturnValue;
  Adc_Ip_AvgSelectType D.6464;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6464 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6464;

}


Adc_HwAcc_SetAveraging (struct ADC_Type * const Base, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  uint32 Sc3Reg;
  long unsigned int iftmp.5;

  <bb 2> :
  Sc3Reg = Base->SC3;
  Sc3Reg = Sc3Reg & 4294967288;
  if (AvgEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5 = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 0;

  <bb 5> :
  Sc3Reg = iftmp.5 | Sc3Reg;
  _1 = AvgSel & 3;
  Sc3Reg = Sc3Reg | _1;
  Base->SC3 = Sc3Reg;
  return;

}


Adc_HwAcc_SetSampleTime (struct ADC_Type * const Base, const uint8 SampleTime)
{
  uint32 Cfg2Reg;
  uint8 ClippedSampleTime;
  unsigned char iftmp.4;

  <bb 2> :
  if (SampleTime != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4 = SampleTime;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4 = 1;

  <bb 5> :
  ClippedSampleTime = iftmp.4;
  Cfg2Reg = Base->CFG2;
  Cfg2Reg = Cfg2Reg & 4294967040;
  _1 = (long unsigned int) ClippedSampleTime;
  Cfg2Reg = Cfg2Reg | _1;
  Base->CFG2 = Cfg2Reg;
  return;

}


Adc_HwAcc_GetInputClock (const uint32 Reg)
{
  Adc_Ip_ClkSourceType ReturnValue;
  Adc_Ip_ClkSourceType D.6472;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6472 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6472;

}


Adc_HwAcc_GetClockDivide (const uint32 Reg)
{
  Adc_Ip_ClockSelType ReturnValue;
  Adc_Ip_ClockSelType D.6470;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg >> 5;
  _2 = _1 & 3;
  switch (_2) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6470 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6470;

}


Adc_HwAcc_SetClock (struct ADC_Type * const Base, const Adc_Ip_ClockSelType ClockDivide, const Adc_Ip_ClkSourceType InputClock)
{
  uint32 Cfg1Reg;

  <bb 2> :
  Cfg1Reg = Base->CFG1;
  Cfg1Reg = Cfg1Reg & 4294967196;
  _1 = ClockDivide << 5;
  _2 = _1 & 96;
  Cfg1Reg = Cfg1Reg | _2;
  _3 = InputClock & 3;
  Cfg1Reg = Cfg1Reg | _3;
  Base->CFG1 = Cfg1Reg;
  return;

}


Adc_HwAcc_SetSC2Reg (struct ADC_Type * const Base, const uint32 ClearMask, const uint32 Value)
{
  uint32 Sc2Reg;

  <bb 2> :
  Sc2Reg = Base->SC2;
  _1 = ~ClearMask;
  Sc2Reg = Sc2Reg & _1;
  Sc2Reg = Sc2Reg | Value;
  Base->SC2 = Sc2Reg;
  return;

}


