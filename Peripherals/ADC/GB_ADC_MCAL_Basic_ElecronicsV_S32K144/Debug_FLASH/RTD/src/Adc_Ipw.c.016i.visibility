
Marking local functions: Adc_Ipw_StopConversionCheckTimeout Adc_Ipw_ConfigurePdbConversion Adc_Ipw_ConfigurePdbChannels Adc_Ipw_WriteDataBuffer Adc_Ipw_ReadGroupNoInt Adc_Ipw_ReadGroupConvData


Marking externally visible functions: Adc_GetCoreID Adc_Ipw_Calibrate Adc_Ipw_SetClockMode Adc_Ipw_CheckConversionValuesInRange Adc_Ipw_GetConvData Adc_Ipw_ReadGroup Adc_Ipw_CheckValidConversion Adc_Ipw_StopCurrentConversion Adc_Ipw_StartNormalConversion Adc_Ipw_DeInit Adc_Ipw_Init Adc_Ipw_ConfigureConversion Adc_Ipw_CalculateNumsBitShift


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Adc_Ip_DoCalibration/44 (Adc_Ip_DoCalibration) @064580e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_Calibrate/17 
  Calls: 
Adc_Ip_SetClockMode/43 (Adc_Ip_SetClockMode) @05ed2ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_SetClockMode/16 Adc_Ipw_SetClockMode/16 
  Calls: 
Adc_Ip_GetChanData/42 (Adc_Ip_GetChanData) @05ed2a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_GetConvData/14 
  Calls: 
Adc_Ip_GetConvCompleteFlag/41 (Adc_Ip_GetConvCompleteFlag) @05ed2460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckValidConversion/12 
  Calls: 
Adc_Ip_SetContinuousMode/40 (Adc_Ip_SetContinuousMode) @05ed22a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_StopConversionCheckTimeout/5 
  Calls: 
Pdb_Adc_Ip_DisableAndClearPdb/39 (Pdb_Adc_Ip_DisableAndClearPdb) @05ed21c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_StopConversionCheckTimeout/5 
  Calls: 
Adc_Ip_SetDisabledChannel/38 (Adc_Ip_SetDisabledChannel) @05ed2000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_StopConversionCheckTimeout/5 Adc_Ipw_StopCurrentConversion/11 
  Calls: 
Adc_Ip_SetTriggerMode/37 (Adc_Ip_SetTriggerMode) @05ec1c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_StartNormalConversion/10 
  Calls: 
Adc_Ip_GetConvData/36 (Adc_Ip_GetConvData) @05ec1380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ReadGroupConvData/0 Adc_Ipw_StopCurrentConversion/11 Adc_Ipw_StartNormalConversion/10 
  Calls: 
Pdb_Adc_Ip_SetContinuousMode/35 (Pdb_Adc_Ip_SetContinuousMode) @05ec1ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_StartNormalConversion/10 
  Calls: 
Pdb_Adc_Ip_DeInit/34 (Pdb_Adc_Ip_DeInit) @05ec1b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_DeInit/9 
  Calls: 
Adc_Ip_DeInit/33 (Adc_Ip_DeInit) @05ec1a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_DeInit/9 
  Calls: 
Pdb_Adc_Ip_Init/32 (Pdb_Adc_Ip_Init) @05ec18c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_Init/8 
  Calls: 
Adc_Ip_Init/31 (Adc_Ip_Init) @05ec17e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_Init/8 
  Calls: 
Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 (Pdb_Adc_Ip_SetAdcPretriggerDelayValue) @05ec1620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbChannels/3 
  Calls: 
Pdb_Adc_Ip_SwTrigger/29 (Pdb_Adc_Ip_SwTrigger) @05ec12a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Pdb_Adc_Ip_ConfigAdcPretriggers/28 (Pdb_Adc_Ip_ConfigAdcPretriggers) @05ec11c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Pdb_Adc_Ip_LoadRegValues/27 (Pdb_Adc_Ip_LoadRegValues) @05ec10e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbChannels/3 Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Pdb_Adc_Ip_SetModulus/26 (Pdb_Adc_Ip_SetModulus) @05ec1000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Pdb_Adc_Ip_SetTriggerInput/25 (Pdb_Adc_Ip_SetTriggerInput) @06449ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Pdb_Adc_Ip_Enable/24 (Pdb_Adc_Ip_Enable) @064498c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigurePdbConversion/4 
  Calls: 
Adc_aUnitStatus/23 (Adc_aUnitStatus) @05ebb240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_ConfigureConversion/7 (write)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (write)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StopCurrentConversion/11 (read)Adc_Ipw_StopConversionCheckTimeout/5 (read)Adc_Ipw_ReadGroup/13 (read)
  Availability: not_available
  Varpool flags:
Adc_Ip_ConfigChannel/22 (Adc_Ip_ConfigChannel) @06449380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_ConfigureConversion/7 Adc_Ipw_ConfigureConversion/7 Adc_Ipw_ConfigureConversion/7 
  Calls: 
Adc_aRuntimeGroupChannel/21 (Adc_aRuntimeGroupChannel) @05ebb120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigurePdbConversion/4 (read)Adc_Ipw_ConfigurePdbChannels/3 (read)Adc_Ipw_ConfigurePdbChannels/3 (read)Adc_Ipw_DeInit/9 (write)Adc_Ipw_DeInit/9 (write)Adc_Ipw_DeInit/9 (write)Adc_Ipw_DeInit/9 (write)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (write)Adc_Ipw_ReadGroupNoInt/1 (read)Adc_Ipw_ReadGroupConvData/0 (read)Adc_Ipw_ReadGroupConvData/0 (read)Adc_Ipw_ReadGroupConvData/0 (read)Adc_Ipw_WriteDataBuffer/2 (read)
  Availability: not_available
  Varpool flags:
Adc_aGroupStatus/20 (Adc_aGroupStatus) @05ebb0d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigurePdbConversion/4 (read)Adc_Ipw_ConfigurePdbConversion/4 (read)Adc_Ipw_ConfigurePdbConversion/4 (write)Adc_Ipw_ConfigurePdbChannels/3 (read)Adc_Ipw_DeInit/9 (write)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (write)Adc_Ipw_StopCurrentConversion/11 (write)Adc_Ipw_ReadGroup/13 (read)Adc_Ipw_ReadGroupConvData/0 (write)Adc_Ipw_ReadGroupConvData/0 (write)Adc_Ipw_WriteDataBuffer/2 (read)Adc_Ipw_WriteDataBuffer/2 (read)
  Availability: not_available
  Varpool flags:
Adc_pCfgPtr/19 (Adc_pCfgPtr) @05ebb090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigureConversion/7 (read)Adc_Ipw_ConfigurePdbConversion/4 (read)Adc_Ipw_ConfigurePdbChannels/3 (read)Adc_Ipw_DeInit/9 (read)Adc_Ipw_DeInit/9 (read)Adc_Ipw_DeInit/9 (read)Adc_Ipw_DeInit/9 (read)Adc_Ipw_DeInit/9 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StartNormalConversion/10 (read)Adc_Ipw_StopCurrentConversion/11 (read)Adc_Ipw_StopConversionCheckTimeout/5 (read)Adc_Ipw_StopConversionCheckTimeout/5 (read)Adc_Ipw_StopConversionCheckTimeout/5 (read)Adc_Ipw_StopConversionCheckTimeout/5 (read)Adc_Ipw_ReadGroup/13 (read)Adc_Ipw_ReadGroup/13 (read)Adc_Ipw_ReadGroupNoInt/1 (read)Adc_Ipw_ReadGroupConvData/0 (read)Adc_Ipw_ReadGroupConvData/0 (read)Adc_Ipw_WriteDataBuffer/2 (read)Adc_Ipw_WriteDataBuffer/2 (read)Adc_Ipw_GetConvData/14 (read)Adc_Ipw_CheckConversionValuesInRange/15 (read)Adc_Ipw_SetClockMode/16 (read)Adc_Ipw_SetClockMode/16 (read)Adc_Ipw_SetClockMode/16 (read)Adc_Ipw_SetClockMode/16 (read)Adc_Ipw_Calibrate/17 (read)
  Availability: not_available
  Varpool flags:
Adc_GetCoreID/18 (Adc_GetCoreID) @06449a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Adc_Ipw_Calibrate/17 (Adc_Ipw_Calibrate) @064497e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ip_DoCalibration/44 
Adc_Ipw_SetClockMode/16 (Adc_Ipw_SetClockMode) @06449540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ip_SetClockMode/43 Adc_Ip_SetClockMode/43 
Adc_Ipw_CheckConversionValuesInRange/15 (Adc_Ipw_CheckConversionValuesInRange) @064492a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ipw_ReadGroupConvData/0 
  Calls: 
Adc_Ipw_GetConvData/14 (Adc_Ipw_GetConvData) @06449000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ip_GetChanData/42 
Adc_Ipw_ReadGroup/13 (Adc_Ipw_ReadGroup) @06437b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aUnitStatus/23 (read)Adc_aGroupStatus/20 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ipw_WriteDataBuffer/2 Adc_Ipw_ReadGroupNoInt/1 
Adc_Ipw_CheckValidConversion/12 (Adc_Ipw_CheckValidConversion) @06437620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ipw_ReadGroupNoInt/1 
  Calls: Adc_Ip_GetConvCompleteFlag/41 
Adc_Ipw_StopCurrentConversion/11 (Adc_Ipw_StopCurrentConversion) @064370e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)Adc_aUnitStatus/23 (read)Adc_aGroupStatus/20 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ipw_StopConversionCheckTimeout/5 Adc_Ip_GetConvData/36 Adc_Ip_SetDisabledChannel/38 
Adc_Ipw_StartNormalConversion/10 (Adc_Ipw_StartNormalConversion) @06437d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_aUnitStatus/23 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aUnitStatus/23 (read)Adc_aGroupStatus/20 (read)Adc_aGroupStatus/20 (write)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aUnitStatus/23 (read)Adc_aUnitStatus/23 (write)Adc_aUnitStatus/23 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ipw_ConfigureConversion/7 Adc_Ip_SetTriggerMode/37 Adc_Ip_GetConvData/36 Pdb_Adc_Ip_SetContinuousMode/35 
Adc_Ipw_DeInit/9 (Adc_Ipw_DeInit) @06437a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (write)Adc_aRuntimeGroupChannel/21 (write)Adc_aRuntimeGroupChannel/21 (write)Adc_aRuntimeGroupChannel/21 (write)Adc_aGroupStatus/20 (write)Adc_pCfgPtr/19 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pdb_Adc_Ip_DeInit/34 Adc_Ip_DeInit/33 
Adc_Ipw_Init/8 (Adc_Ipw_Init) @064377e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Pdb_Adc_Ip_Init/32 Adc_Ip_Init/31 
Adc_Ipw_ConfigureConversion/7 (Adc_Ipw_ConfigureConversion) @06437540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aGroupStatus/20 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aUnitStatus/23 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ipw_StartNormalConversion/10 
  Calls: Adc_Ipw_ConfigurePdbConversion/4 Adc_Ip_ConfigChannel/22 Adc_Ip_ConfigChannel/22 Adc_Ip_ConfigChannel/22 
Adc_Ipw_CalculateNumsBitShift/6 (Adc_Ipw_CalculateNumsBitShift) @064372a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ipw_ReadGroupConvData/0 
  Calls: 
Adc_Ipw_StopConversionCheckTimeout/5 (Adc_Ipw_StopConversionCheckTimeout) @06437000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aUnitStatus/23 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_StopCurrentConversion/11 
  Calls: Adc_Ip_SetDisabledChannel/38 Adc_Ip_SetContinuousMode/40 Pdb_Adc_Ip_DisableAndClearPdb/39 
Adc_Ipw_ConfigurePdbConversion/4 (Adc_Ipw_ConfigurePdbConversion) @05d83a80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aGroupStatus/20 (read)Adc_aGroupStatus/20 (read)Adc_aGroupStatus/20 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_ConfigureConversion/7 
  Calls: Pdb_Adc_Ip_SwTrigger/29 Pdb_Adc_Ip_ConfigAdcPretriggers/28 Pdb_Adc_Ip_LoadRegValues/27 Pdb_Adc_Ip_SetModulus/26 Adc_Ipw_ConfigurePdbChannels/3 Pdb_Adc_Ip_SetTriggerInput/25 Pdb_Adc_Ip_Enable/24 
Adc_Ipw_ConfigurePdbChannels/3 (Adc_Ipw_ConfigurePdbChannels) @05d83540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aGroupStatus/20 (read)Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_ConfigurePdbConversion/4 
  Calls: Pdb_Adc_Ip_ConfigAdcPretriggers/28 Pdb_Adc_Ip_LoadRegValues/27 Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 Pdb_Adc_Ip_SetAdcPretriggerDelayValue/30 
Adc_Ipw_WriteDataBuffer/2 (Adc_Ipw_WriteDataBuffer) @05d83c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aGroupStatus/20 (read)Adc_aGroupStatus/20 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_ReadGroup/13 
  Calls: 
Adc_Ipw_ReadGroupNoInt/1 (Adc_Ipw_ReadGroupNoInt) @05d839a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_ReadGroup/13 
  Calls: Adc_Ipw_ReadGroupConvData/0 Adc_Ipw_CheckValidConversion/12 
Adc_Ipw_ReadGroupConvData/0 (Adc_Ipw_ReadGroupConvData) @05d83700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/19 (read)Adc_pCfgPtr/19 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aRuntimeGroupChannel/21 (read)Adc_aGroupStatus/20 (write)Adc_aGroupStatus/20 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_ReadGroupNoInt/1 
  Calls: Adc_Ipw_CheckConversionValuesInRange/15 Adc_Ip_GetConvData/36 Adc_Ipw_CalculateNumsBitShift/6 
Adc_GetCoreID ()
{
  uint32 D.6609;

  <bb 2> :
  D.6609 = 0;

  <bb 3> :
<L0>:
  return D.6609;

}


Adc_Ipw_Calibrate (Adc_HwUnitType Unit, struct Adc_CalibrationStatusType * Status, uint32 u32CoreId)
{
  const Adc_HwUnitType PhysicalHwUnitId;
  Adc_Ip_StatusType IpStatus;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  Status->Adc_UnitSelfTestStatus = 0;
  _4 = (long unsigned int) PhysicalHwUnitId;
  IpStatus = Adc_Ip_DoCalibration (_4);
  if (IpStatus != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status->Adc_UnitSelfTestStatus = 1;

  <bb 4> :
  return;

}


Adc_Ipw_SetClockMode (Adc_SelectPrescalerType Prescaler, uint32 u32CoreId)
{
  const struct Adc_Ip_ConfigType * pAdc;
  struct Adc_Ip_ClockConfigType AdcNormalClockConfig;
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType D.6604;

  <bb 2> :
  LogicalHwUnitId = 0;
  PhysicalHwUnitId = 0;
  LogicalHwUnitId = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId;
  _4 = _2->Mapping.au8Adc_HwUnit[_3];
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _5 = Adc_pCfgPtr[u32CoreId];
  _6 = _5->pAdcIpwConfig;
  _7 = (int) LogicalHwUnitId;
  PhysicalHwUnitId = _6->aAdcPhysicalId[_7];
  _8 = Adc_pCfgPtr[u32CoreId];
  _9 = _8->pAdcIpwConfig;
  _10 = (int) LogicalHwUnitId;
  pAdc = _9->apAdcConfig[_10];
  if (Prescaler == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _11 = pAdc->ClockDivide;
  AdcNormalClockConfig.ClockDivide = _11;
  _12 = pAdc->InputClock;
  AdcNormalClockConfig.InputClock = _12;
  _13 = pAdc->SampleTime;
  AdcNormalClockConfig.SampleTime = _13;
  _14 = pAdc->AvgEn;
  AdcNormalClockConfig.AvgEn = _14;
  _15 = pAdc->AvgSel;
  AdcNormalClockConfig.AvgSel = _15;
  _16 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_SetClockMode (_16, &AdcNormalClockConfig);
  goto <bb 7>; [INV]

  <bb 6> :
  _17 = (long unsigned int) PhysicalHwUnitId;
  _18 = Adc_pCfgPtr[u32CoreId];
  _19 = _18->pAdcIpwConfig;
  _20 = (int) LogicalHwUnitId;
  _21 = _19->apAdcAltClockConfig[_20];
  Adc_Ip_SetClockMode (_17, _21);

  <bb 7> :
  LogicalHwUnitId.19_22 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.19_22 + 1;

  <bb 8> :
  if (LogicalHwUnitId == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.6604 = 0;
  AdcNormalClockConfig = {CLOBBER};

  <bb 10> :
<L9>:
  return D.6604;

}


Adc_Ipw_CheckConversionValuesInRange (Adc_ValueGroupType Value, Adc_HwUnitType LogicalHwUnitId, Adc_ChannelType ChannelIndex, uint32 u32CoreId)
{
  const Adc_ValueGroupType HighLimit;
  const Adc_ValueGroupType LowLimit;
  const Adc_ChannelRangeSelectType eChRange;
  boolean bValInRange;
  const struct Adc_ChannelLimitCheckingType * const pChannelLimitCheckingCfg;
  boolean D.6597;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId;
  _4 = _2->ChannelLimitCheckingConfigs[_3];
  _5 = (unsigned int) ChannelIndex;
  _6 = _5 * 12;
  pChannelLimitCheckingCfg = _4 + _6;
  bValInRange = 0;
  eChRange = pChannelLimitCheckingCfg->eChannelRange;
  LowLimit = pChannelLimitCheckingCfg->ChannelLowLimit;
  HighLimit = pChannelLimitCheckingCfg->ChannelHighLimit;
  switch (eChRange) <default: <L22> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L6> [INV], case 3: <L10> [INV], case 4: <L13> [INV], case 5: <L16> [INV], case 6: <L19> [INV]>

  <bb 3> :
<L0>:
  bValInRange = 1;
  goto <bb 25>; [INV]

  <bb 4> :
<L1>:
  if (Value > LowLimit)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (Value <= HighLimit)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  bValInRange = 1;

  <bb 7> :
  goto <bb 25>; [INV]

  <bb 8> :
<L6>:
  if (Value > HighLimit)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (Value <= LowLimit)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  bValInRange = 1;

  <bb 11> :
  goto <bb 25>; [INV]

  <bb 12> :
<L10>:
  if (Value <= HighLimit)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  bValInRange = 1;

  <bb 14> :
  goto <bb 25>; [INV]

  <bb 15> :
<L13>:
  if (Value > LowLimit)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  bValInRange = 1;

  <bb 17> :
  goto <bb 25>; [INV]

  <bb 18> :
<L16>:
  if (Value > HighLimit)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  bValInRange = 1;

  <bb 20> :
  goto <bb 25>; [INV]

  <bb 21> :
<L19>:
  if (Value <= LowLimit)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  bValInRange = 1;

  <bb 23> :
  goto <bb 25>; [INV]

  <bb 24> :
<L22>:

  <bb 25> :
  D.6597 = bValInRange;

  <bb 26> :
<L24>:
  return D.6597;

}


Adc_Ipw_GetConvData (Adc_HwUnitType Unit, Adc_ChannelType Channel, uint32 u32CoreId, uint16 * Result)
{
  Std_ReturnType Status;
  const Adc_HwUnitType PhysicalHwUnitId;
  Std_ReturnType D.6580;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  Status = 1;
  *Result = 0;
  _4 = (long unsigned int) PhysicalHwUnitId;
  _5 = (<unnamed type>) Channel;
  _6 = Adc_Ip_GetChanData (_4, _5, Result);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status = 0;

  <bb 4> :
  D.6580 = Status;

  <bb 5> :
<L2>:
  return D.6580;

}


Adc_Ipw_ReadGroup (const Adc_GroupType Group, Adc_ValueGroupType * pDataPtr, boolean * pFlag, uint32 u32CoreId)
{
  const Adc_HwUnitType LogicalHwUnitId;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  Std_ReturnType ReadGroupRet;
  Std_ReturnType D.6559;

  <bb 2> :
  ReadGroupRet = 0;
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex;
  _9 = _8 * 60;
  GroupPtr = _7 + _9;
  LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
  _10 = GroupPtr->u8AdcWithoutInterrupt;
  if (_10 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _11 = GroupPtr->eType;
  if (_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _12 = GroupPtr->eTriggerSource;
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _13 = (int) LogicalHwUnitId;
  _14 = Adc_aUnitStatus[_13].SwNormalQueue[0];
  if (Group != _14)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  ReadGroupRet = 1;

  <bb 7> :
  if (ReadGroupRet == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  ReadGroupRet = Adc_Ipw_ReadGroupNoInt (GroupPtr, pDataPtr, pFlag, u32CoreId);
  goto <bb 13>; [INV]

  <bb 9> :
  _15 = (int) Group;
  _16 = Adc_aGroupStatus[_15].eConversion;
  if (_16 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  ReadGroupRet = 1;

  <bb 11> :
  if (ReadGroupRet == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Adc_Ipw_WriteDataBuffer (Group, pDataPtr, u32CoreId);

  <bb 13> :
  D.6559 = ReadGroupRet;

  <bb 14> :
<L15>:
  return D.6559;

}


Adc_Ipw_CheckValidConversion (Adc_HwUnitType PhysicalHwUnitId, Adc_ChannelIndexType StartIndex, Adc_ChannelIndexType EndIndex)
{
  boolean ValidConversion;
  Adc_ChannelIndexType Index;
  boolean D.6542;

  <bb 2> :
  ValidConversion = 1;
  Index = StartIndex;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (long unsigned int) PhysicalHwUnitId;
  _2 = Index - StartIndex;
  ValidConversion = Adc_Ip_GetConvCompleteFlag (_1, _2);
  _3 = ~ValidConversion;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  Index.16_4 = Index;
  Index = Index.16_4 + 1;

  <bb 6> :
  if (Index < EndIndex)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.6542 = ValidConversion;

  <bb 8> :
<L5>:
  return D.6542;

}


Adc_Ipw_StopCurrentConversion (Adc_HwUnitType Unit, Adc_GroupType Group, uint32 u32CoreId)
{
  uint8 ChIndex;
  const Adc_HwUnitType PhysicalHwUnitId;
  Std_ReturnType Status;
  Std_ReturnType D.6530;

  <bb 2> :
  Status = 0;
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  ChIndex = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_SetDisabledChannel (_4, ChIndex, 0);
  _5 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_GetConvData (_5, ChIndex);
  ChIndex.14_6 = ChIndex;
  ChIndex = ChIndex.14_6 + 1;

  <bb 4> :
  _7 = (int) Unit;
  _8 = Adc_aUnitStatus[_7].u8Sc1Used;
  if (ChIndex < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _9 = (int) Group;
  Adc_aGroupStatus[_9].CurrentChannel = 0;
  Status = Adc_Ipw_StopConversionCheckTimeout (Unit, Group, u32CoreId);
  D.6530 = Status;

  <bb 6> :
<L3>:
  return D.6530;

}


Adc_Ipw_StartNormalConversion (Adc_HwUnitType Unit, uint32 u32CoreId)
{
  boolean PdbMode;
  uint8 ChIndex;
  uint8 NumChannel;
  const Adc_HwUnitType PhysicalHwUnitId;
  const struct Adc_GroupConfigurationType * GroupPtr;
  Adc_GroupType GroupIndex;
  Adc_GroupType Group;
  int iftmp.12;
  unsigned char iftmp.11;

  <bb 2> :
  _1 = (int) Unit;
  Group = Adc_aUnitStatus[_1].SwNormalQueue[0];
  _2 = Adc_pCfgPtr[u32CoreId];
  _3 = _2->pGroupIdToIndexMap;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = Adc_pCfgPtr[u32CoreId];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex;
  _10 = _9 * 60;
  GroupPtr = _8 + _10;
  _11 = Adc_pCfgPtr[u32CoreId];
  _12 = _11->pAdcIpwConfig;
  _13 = (int) Unit;
  PhysicalHwUnitId = _12->aAdcPhysicalId[_13];
  _14 = (int) Unit;
  _15 = Adc_aUnitStatus[_14].SwNormalQueueIndex;
  if (_15 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _16 = (int) Group;
  _17 = Adc_aGroupStatus[_16].bLimitCheckFailed;
  _18 = ~_17;
  if (_18 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 4> :
  _19 = GroupPtr->eMode;
  if (_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 5> :
  _20 = (int) Group;
  Adc_aGroupStatus[_20].CurrentChannel = 0;
  _21 = (int) Group;
  _22 = Adc_aRuntimeGroupChannel[_21].ChannelCount;
  if (_22 <= 15)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _23 = (int) Group;
  _24 = Adc_aRuntimeGroupChannel[_23].ChannelCount;
  iftmp.11 = _24 & 15;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.11 = 16;

  <bb 8> :
  NumChannel = iftmp.11;
  _25 = (int) Unit;
  _26 = Adc_aUnitStatus[_25].u8Sc1Used;
  if (_26 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _27 = (int) Unit;
  Adc_aUnitStatus[_27].u8Sc1Used = NumChannel;

  <bb 10> :
  _28 = GroupPtr->eMode;
  if (_28 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _29 = GroupPtr->u8AdcWithoutInterrupt;
  if (_29 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.12 = 1;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.12 = 0;

  <bb 14> :
  PdbMode = (boolean) iftmp.12;
  _30 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetContinuousMode (_30, PdbMode);
  ChIndex = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  _31 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_GetConvData (_31, ChIndex);
  ChIndex.13_32 = ChIndex;
  ChIndex = ChIndex.13_32 + 1;

  <bb 16> :
  _33 = (int) Unit;
  _34 = Adc_aUnitStatus[_33].u8Sc1Used;
  if (ChIndex < _34)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _35 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_SetTriggerMode (_35, 1);
  Adc_Ipw_ConfigureConversion (Unit, Group, 15, NumChannel, u32CoreId);
  _36 = (int) Group;
  _37 = Adc_aRuntimeGroupChannel[_36].bRuntimeUpdated;
  if (_37 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _38 = (int) Group;
  Adc_aRuntimeGroupChannel[_38].bRuntimeUpdated = 0;

  <bb 19> :
  return;

}


Adc_Ipw_DeInit (uint32 u32CoreId)
{
  Std_ReturnType ReturnStatus;
  Adc_GroupType GroupIter;
  Adc_GroupType GroupId;
  Adc_HwUnitType LogicalHwUnitId;
  Adc_HwUnitType PhysicalHwUnitId;
  Std_ReturnType D.6511;

  <bb 2> :
  PhysicalHwUnitId = 0;
  LogicalHwUnitId = 0;
  GroupId = 0;
  GroupIter = 0;
  ReturnStatus = 0;
  LogicalHwUnitId = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId;
  _4 = _2->Mapping.au8Adc_HwUnit[_3];
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = Adc_pCfgPtr[u32CoreId];
  _6 = _5->pAdcIpwConfig;
  _7 = (int) LogicalHwUnitId;
  PhysicalHwUnitId = _6->aAdcPhysicalId[_7];
  _8 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_DeInit (_8);
  _9 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_DeInit (_9);

  <bb 5> :
  LogicalHwUnitId.9_10 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.9_10 + 1;

  <bb 6> :
  if (LogicalHwUnitId == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  GroupIter = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _11 = Adc_pCfgPtr[u32CoreId];
  _12 = _11->pGroups;
  _13 = (unsigned int) GroupIter;
  _14 = _13 * 60;
  _15 = _12 + _14;
  GroupId = _15->GroupId;
  _16 = Adc_pCfgPtr[u32CoreId];
  _17 = _16->pGroups;
  _18 = (unsigned int) GroupIter;
  _19 = _18 * 60;
  _20 = _17 + _19;
  _21 = _20->pResultsBufferPtr;
  _22 = (unsigned int) GroupId;
  _23 = _22 * 4;
  _24 = _21 + _23;
  *_24 = 0B;
  _25 = (int) GroupId;
  Adc_aRuntimeGroupChannel[_25].pChannel = 0B;
  _26 = (int) GroupId;
  Adc_aRuntimeGroupChannel[_26].ChannelCount = 0;
  _27 = (int) GroupId;
  Adc_aRuntimeGroupChannel[_27].bRuntimeUpdated = 0;
  _28 = (int) GroupId;
  Adc_aRuntimeGroupChannel[_28].bAdcRuntimeGroupLimitcheck = 0;
  _29 = (int) GroupId;
  Adc_aGroupStatus[_29].eNotification = 0;
  GroupIter.10_30 = GroupIter;
  GroupIter = GroupIter.10_30 + 1;

  <bb 9> :
  _31 = Adc_pCfgPtr[u32CoreId];
  _32 = _31->GroupCount;
  if (GroupIter < _32)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  D.6511 = ReturnStatus;

  <bb 11> :
<L8>:
  return D.6511;

}


Adc_Ipw_Init (const struct Adc_Ipw_Config * pIpwCfg, const uint32 u32CoreId)
{
  Std_ReturnType TimeOutStatus;
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType D.6507;

  <bb 2> :
  LogicalHwUnitId = 0;
  PhysicalHwUnitId = 0;
  TimeOutStatus = 0;
  LogicalHwUnitId = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (int) LogicalHwUnitId;
  _2 = pIpwCfg->Mapping.au8Adc_HwUnit[_1];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (int) LogicalHwUnitId;
  PhysicalHwUnitId = pIpwCfg->aAdcPhysicalId[_3];
  _4 = (long unsigned int) PhysicalHwUnitId;
  _5 = (int) LogicalHwUnitId;
  _6 = pIpwCfg->apAdcConfig[_5];
  Adc_Ip_Init (_4, _6);
  _7 = (long unsigned int) PhysicalHwUnitId;
  _8 = (int) LogicalHwUnitId;
  _9 = pIpwCfg->apPdbConfig[_8];
  Pdb_Adc_Ip_Init (_7, _9);

  <bb 5> :
  LogicalHwUnitId.8_10 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.8_10 + 1;

  <bb 6> :
  if (LogicalHwUnitId == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.6507 = TimeOutStatus;

  <bb 8> :
<L5>:
  return D.6507;

}


Adc_Ipw_ConfigureConversion (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_HwTriggerTimerType Trigger, uint8 NumChannel, uint32 u32CoreId)
{
  uint32 TempMask;
  const Adc_GroupDefType * ChannelsDefinition;
  Adc_Ip_InputChannelType Channel;
  const Adc_HwUnitType PhysicalHwUnitId;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  struct Adc_Ip_ChanConfigType ChannelConfig;
  Adc_ChannelIndexType CurrentChannel;
  uint8 ChIndex;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex;
  _9 = _8 * 60;
  GroupPtr = _7 + _9;
  _10 = Adc_pCfgPtr[u32CoreId];
  _11 = _10->pAdcIpwConfig;
  _12 = (int) Unit;
  PhysicalHwUnitId = _11->aAdcPhysicalId[_12];
  ChannelsDefinition = 0B;
  _13 = (int) Group;
  CurrentChannel = Adc_aGroupStatus[_13].CurrentChannel;
  _14 = (int) Group;
  TempMask = Adc_aRuntimeGroupChannel[_14].u32Mask;
  _15 = (int) Group;
  ChannelsDefinition = Adc_aRuntimeGroupChannel[_15].pChannel;
  ChIndex = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _16 = Adc_pCfgPtr[u32CoreId];
  _17 = _16->pAdcIpwConfig;
  _18 = (int) Unit;
  _19 = _17->apAdcConfig[_18];
  _20 = _19->ChannelConfigs;
  _21 = (int) CurrentChannel;
  _22 = (int) ChIndex;
  _23 = _21 + _22;
  _24 = (unsigned int) _23;
  _25 = _24 * 2;
  _26 = ChannelsDefinition + _25;
  _27 = *_26;
  _28 = (unsigned int) _27;
  _29 = _28 * 12;
  _30 = _20 + _29;
  Channel = _30->Channel;
  _31 = TempMask & 1;
  if (_31 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ChannelConfig.ChnIdx = ChIndex;
  ChannelConfig.Channel = Channel;
  ChannelConfig.InterruptEnable = 0;
  _32 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_ConfigChannel (_32, &ChannelConfig);

  <bb 5> :
  TempMask = TempMask >> 1;
  if (TempMask == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  goto <bb 9>; [INV]

  <bb 7> :
  ChIndex.0_33 = ChIndex;
  ChIndex = ChIndex.0_33 + 1;

  <bb 8> :
  _34 = (unsigned int) ChIndex;
  _35 = (unsigned int) NumChannel;
  _36 = _35 + 4294967295;
  if (_34 < _36)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _37 = TempMask & 1;
  if (_37 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _38 = Adc_pCfgPtr[u32CoreId];
  _39 = _38->pAdcIpwConfig;
  _40 = (int) Unit;
  _41 = _39->apAdcConfig[_40];
  _42 = _41->ChannelConfigs;
  _43 = (int) CurrentChannel;
  _44 = (int) ChIndex;
  _45 = _43 + _44;
  _46 = (unsigned int) _45;
  _47 = _46 * 2;
  _48 = ChannelsDefinition + _47;
  _49 = *_48;
  _50 = (unsigned int) _49;
  _51 = _50 * 12;
  _52 = _42 + _51;
  Channel = _52->Channel;
  ChannelConfig.ChnIdx = ChIndex;
  ChannelConfig.Channel = Channel;
  _53 = GroupPtr->u8AdcWithoutInterrupt;
  if (_53 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  ChannelConfig.InterruptEnable = 1;
  goto <bb 13>; [INV]

  <bb 12> :
  ChannelConfig.InterruptEnable = 0;

  <bb 13> :
  _54 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_ConfigChannel (_54, &ChannelConfig);

  <bb 14> :
  ChIndex = NumChannel;
  goto <bb 16>; [INV]

  <bb 15> :
  ChannelConfig.ChnIdx = ChIndex;
  ChannelConfig.Channel = 31;
  ChannelConfig.InterruptEnable = 0;
  _55 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_ConfigChannel (_55, &ChannelConfig);
  ChIndex.1_56 = ChIndex;
  ChIndex = ChIndex.1_56 + 1;

  <bb 16> :
  if (ChIndex <= 15)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _57 = (int) Unit;
  Adc_aUnitStatus[_57].u8Sc1Used = NumChannel;
  Adc_Ipw_ConfigurePdbConversion (Unit, Group, GroupPtr, Trigger, NumChannel);
  ChannelConfig = {CLOBBER};
  return;

}


Adc_Ipw_CalculateNumsBitShift (Adc_Ip_ResolutionType Resolution)
{
  uint8 NumsBitShift;
  uint8 D.6444;

  <bb 2> :
  NumsBitShift = 0;
  D.6444 = NumsBitShift;

  <bb 3> :
<L0>:
  return D.6444;

}


Adc_Ipw_StopConversionCheckTimeout (Adc_HwUnitType Unit, Adc_GroupType Group, uint32 u32CoreId)
{
  uint8 ChIndex;
  Adc_Ip_StatusType IPLStatus;
  Std_ReturnType Status;
  const Adc_HwUnitType PhysicalHwUnitId;
  const Adc_GroupType GroupIndex;
  Std_ReturnType D.6538;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pAdcIpwConfig;
  _8 = (int) Unit;
  PhysicalHwUnitId = _7->aAdcPhysicalId[_8];
  Status = 0;
  _9 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_DisableAndClearPdb (_9);
  _10 = Adc_pCfgPtr[u32CoreId];
  _11 = _10->pGroups;
  _12 = (unsigned int) GroupIndex;
  _13 = _12 * 60;
  _14 = _11 + _13;
  _15 = _14->u8AdcWithoutInterrupt;
  if (_15 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _16 = Adc_pCfgPtr[u32CoreId];
  _17 = _16->pGroups;
  _18 = (unsigned int) GroupIndex;
  _19 = _18 * 60;
  _20 = _17 + _19;
  _21 = _20->eMode;
  if (_21 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _22 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_SetContinuousMode (_22, 0);

  <bb 5> :
  ChIndex = 0;
  goto <bb 9>; [INV]

  <bb 6> :
  _23 = (long unsigned int) PhysicalHwUnitId;
  IPLStatus = Adc_Ip_SetDisabledChannel (_23, ChIndex, 1);
  if (IPLStatus == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 1;

  <bb 8> :
  ChIndex.15_24 = ChIndex;
  ChIndex = ChIndex.15_24 + 1;

  <bb 9> :
  _25 = (int) Unit;
  _26 = Adc_aUnitStatus[_25].u8Sc1Used;
  if (ChIndex < _26)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  D.6538 = Status;

  <bb 11> :
<L9>:
  return D.6538;

}


Adc_Ipw_ConfigurePdbConversion (Adc_HwUnitType Unit, Adc_GroupType Group, const struct Adc_GroupConfigurationType * GroupPtr, Adc_HwTriggerTimerType Trigger, uint8 NumChannel)
{
  Adc_HwUnitType PhysicalHwUnitId;
  struct Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
  const uint16 * GroupDelay;
  uint16 PdbPeriod;
  uint8 PdbChannelUsed;
  uint8 PdbIndex;
  unsigned char iftmp.2;

  <bb 2> :
  PdbPeriod = 0;
  GroupDelay = 0B;
  _1 = Adc_pCfgPtr[0];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  _4 = NumChannel & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = NumChannel / 8;
  iftmp.2 = _5 + 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2 = NumChannel / 8;

  <bb 5> :
  PdbChannelUsed = iftmp.2;
  _6 = (int) Group;
  GroupDelay = Adc_aRuntimeGroupChannel[_6].pu16Delays;
  _7 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_Enable (_7);
  _8 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetTriggerInput (_8, Trigger);
  PdbIndex = Adc_Ipw_ConfigurePdbChannels (Unit, Group, GroupPtr, NumChannel);
  _9 = GroupPtr->eMode;
  if (_9 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _10 = GroupPtr->u8AdcWithoutInterrupt;
  if (_10 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 = GroupPtr->pAdcIpwGroupConfig;
  PdbPeriod = _11->PdbPeriod;
  goto <bb 13>; [INV]

  <bb 8> :
  _12 = GroupPtr->pAdcIpwGroupConfig;
  _13 = _12->AdcGroupEnableChannelDelays;
  if (_13 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  _14 = GroupPtr->pAdcIpwGroupConfig;
  _15 = _14->AdcGroupEnableBackToBack;
  _16 = ~_15;
  if (_16 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _17 = (int) Group;
  _18 = Adc_aGroupStatus[_17].CurrentChannel;
  _19 = (int) _18;
  _20 = (int) NumChannel;
  _21 = _19 + _20;
  _22 = (sizetype) _21;
  _23 = _22 + 2147483647;
  _24 = _23 * 2;
  _25 = GroupDelay + _24;
  PdbPeriod = *_25;
  goto <bb 13>; [INV]

  <bb 11> :
  _26 = *GroupDelay;
  _27 = GroupPtr->pAdcIpwGroupConfig;
  _28 = _27->PdbDelay;
  _29 = (unsigned int) PdbChannelUsed;
  _30 = _29 + 4294967295;
  _31 = (short unsigned int) _30;
  _32 = _28 * _31;
  PdbPeriod = _26 + _32;
  goto <bb 13>; [INV]

  <bb 12> :
  _33 = GroupPtr->pAdcIpwGroupConfig;
  _34 = _33->PdbDelay;
  _35 = (unsigned int) PdbChannelUsed;
  _36 = _35 + 4294967295;
  _37 = (short unsigned int) _36;
  PdbPeriod = _34 * _37;

  <bb 13> :
  _38 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetModulus (_38, PdbPeriod);
  _39 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_LoadRegValues (_39);
  PdbPretriggsConfig.EnableMask = 0;
  PdbPretriggsConfig.EnableDelayMask = 0;
  PdbPretriggsConfig.BackToBackEnableMask = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  _40 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_ConfigAdcPretriggers (_40, PdbIndex, &PdbPretriggsConfig);
  PdbIndex.3_41 = PdbIndex;
  PdbIndex = PdbIndex.3_41 + 1;

  <bb 15> :
  if (PdbIndex <= 1)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _42 = (int) Group;
  _43 = Adc_aGroupStatus[_42].CurrentChannel;
  _44 = (int) Group;
  _45 = NumChannel + _43;
  Adc_aGroupStatus[_44].CurrentChannel = _45;
  if (Trigger == 15)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _46 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SwTrigger (_46);

  <bb 18> :
  PdbPretriggsConfig = {CLOBBER};
  return;

}


Adc_Ipw_ConfigurePdbChannels (Adc_HwUnitType Unit, Adc_GroupType Group, const struct Adc_GroupConfigurationType * GroupPtr, uint8 NumChannel)
{
  uint32 TempMask;
  Adc_HwUnitType PhysicalHwUnitId;
  struct Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
  uint16 CurrentCh;
  const uint16 * GroupDelay;
  uint16 PdbDelay;
  uint8 PdbChannelUsed;
  uint8 LeftChannel;
  uint8 ChUsed;
  uint8 PreTriggerCtr;
  uint8 PdbIndex;
  uint8 D.6502;
  uint8 iftmp.5;
  unsigned char iftmp.4;

  <bb 2> :
  LeftChannel = NumChannel;
  _1 = NumChannel & 7;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = NumChannel / 8;
  iftmp.4 = _2 + 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4 = NumChannel / 8;

  <bb 5> :
  PdbChannelUsed = iftmp.4;
  GroupDelay = 0B;
  _3 = (int) Group;
  _4 = Adc_aGroupStatus[_3].CurrentChannel;
  CurrentCh = (uint16) _4;
  _5 = Adc_pCfgPtr[0];
  _6 = _5->pAdcIpwConfig;
  _7 = (int) Unit;
  PhysicalHwUnitId = _6->aAdcPhysicalId[_7];
  _8 = (int) Group;
  TempMask = Adc_aRuntimeGroupChannel[_8].u32Mask;
  _9 = (int) Group;
  GroupDelay = Adc_aRuntimeGroupChannel[_9].pu16Delays;
  PdbIndex = 0;
  goto <bb 33>; [INV]

  <bb 6> :
  _10 = LeftChannel >> 3;
  if (_10 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.5 = LeftChannel;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.5 = 8;

  <bb 9> :
  ChUsed = iftmp.5;
  _11 = GroupPtr->pAdcIpwGroupConfig;
  _12 = _11->AdcGroupEnableChannelDelays;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 10> :
  if (GroupDelay != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 11> :
  _13 = GroupPtr->pAdcIpwGroupConfig;
  _14 = _13->AdcGroupEnableBackToBack;
  _15 = ~_14;
  if (_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 12> :
  _16 = (unsigned int) ChUsed;
  _17 = 8 - _16;
  _18 = 255 >> _17;
  _19 = (unsigned char) _18;
  PdbPretriggsConfig.EnableDelayMask = _19;
  PreTriggerCtr = 0;
  goto <bb 18>; [INV]

  <bb 13> :
  _20 = TempMask & 1;
  if (_20 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _21 = (long unsigned int) PhysicalHwUnitId;
  _22 = (int) CurrentCh;
  _23 = (int) PreTriggerCtr;
  _24 = _22 + _23;
  _25 = (unsigned int) _24;
  _26 = _25 * 2;
  _27 = GroupDelay + _26;
  _28 = *_27;
  Pdb_Adc_Ip_SetAdcPretriggerDelayValue (_21, PdbIndex, PreTriggerCtr, _28);

  <bb 15> :
  TempMask = TempMask >> 1;
  if (TempMask == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  goto <bb 19>; [INV]

  <bb 17> :
  PreTriggerCtr.6_29 = PreTriggerCtr;
  PreTriggerCtr = PreTriggerCtr.6_29 + 1;

  <bb 18> :
  if (PreTriggerCtr < ChUsed)
    goto <bb 13>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  goto <bb 23>; [INV]

  <bb 20> :
  if (PdbIndex == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  PdbPretriggsConfig.EnableDelayMask = 1;
  PdbDelay = *GroupDelay;
  _30 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetAdcPretriggerDelayValue (_30, PdbIndex, 0, PdbDelay);
  goto <bb 23>; [INV]

  <bb 22> :
  PdbPretriggsConfig.EnableDelayMask = 1;
  _31 = GroupPtr->pAdcIpwGroupConfig;
  _32 = _31->PdbDelay;
  _33 = (short unsigned int) PdbIndex;
  PdbDelay = _32 * _33;
  _34 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetAdcPretriggerDelayValue (_34, PdbIndex, 0, PdbDelay);

  <bb 23> :
  goto <bb 27>; [INV]

  <bb 24> :
  if (PdbIndex == 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  PdbPretriggsConfig.EnableDelayMask = 1;
  _35 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetAdcPretriggerDelayValue (_35, PdbIndex, 0, 0);
  goto <bb 27>; [INV]

  <bb 26> :
  PdbPretriggsConfig.EnableDelayMask = 1;
  _36 = GroupPtr->pAdcIpwGroupConfig;
  _37 = _36->PdbDelay;
  _38 = (short unsigned int) PdbIndex;
  PdbDelay = _37 * _38;
  _39 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SetAdcPretriggerDelayValue (_39, PdbIndex, 0, PdbDelay);

  <bb 27> :
  _40 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_LoadRegValues (_40);
  LeftChannel = LeftChannel - ChUsed;
  _41 = (short unsigned int) ChUsed;
  CurrentCh = CurrentCh + _41;
  _42 = GroupPtr->pAdcIpwGroupConfig;
  _43 = _42->AdcGroupEnableBackToBack;
  if (_43 != 0)
    goto <bb 28>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 28> :
  if (PdbIndex == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  _44 = (unsigned int) ChUsed;
  _45 = 8 - _44;
  _46 = 255 >> _45;
  _47 = (unsigned char) _46;
  _48 = _47 + 255;
  PdbPretriggsConfig.BackToBackEnableMask = _48;
  goto <bb 32>; [INV]

  <bb 30> :
  _49 = (unsigned int) ChUsed;
  _50 = 8 - _49;
  _51 = 255 >> _50;
  _52 = (unsigned char) _51;
  _53 = _52 + 255;
  PdbPretriggsConfig.BackToBackEnableMask = _53;
  goto <bb 32>; [INV]

  <bb 31> :
  PdbPretriggsConfig.BackToBackEnableMask = 0;

  <bb 32> :
  _54 = (unsigned int) ChUsed;
  _55 = 8 - _54;
  _56 = 255 >> _55;
  _57 = (unsigned char) _56;
  PdbPretriggsConfig.EnableMask = _57;
  _58 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_ConfigAdcPretriggers (_58, PdbIndex, &PdbPretriggsConfig);
  PdbIndex.7_59 = PdbIndex;
  PdbIndex = PdbIndex.7_59 + 1;

  <bb 33> :
  if (PdbIndex < PdbChannelUsed)
    goto <bb 6>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 34> :
  D.6502 = PdbIndex;
  PdbPretriggsConfig = {CLOBBER};

  <bb 35> :
<L36>:
  return D.6502;

}


Adc_Ipw_WriteDataBuffer (const Adc_GroupType Group, Adc_ValueGroupType * pDataPtr, uint32 u32CoreId)
{
  Adc_StreamNumSampleType ResultIndex;
  Adc_ValueGroupType * pResultPtr;
  const Adc_ChannelIndexType ChannelCount;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  uint16 ResultOffset;
  uint8 Index;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex;
  _9 = _8 * 60;
  GroupPtr = _7 + _9;
  _10 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_10].ChannelCount;
  pResultPtr = 0B;
  ResultIndex = 0;
  _11 = (int) Group;
  _12 = Adc_aGroupStatus[_11].ResultIndex;
  ResultIndex = _12 + 65535;
  _13 = (int) Group;
  _14 = Adc_aGroupStatus[_13].ResultIndex;
  if (_14 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _15 = GroupPtr->NumSamples;
  ResultIndex = _15 + 65535;

  <bb 4> :
  _16 = GroupPtr->pResultsBufferPtr;
  _17 = (unsigned int) Group;
  _18 = _17 * 4;
  _19 = _16 + _18;
  _20 = *_19;
  _21 = (unsigned int) ResultIndex;
  _22 = _21 * 2;
  pResultPtr = _20 + _22;
  ResultOffset = GroupPtr->NumSamples;
  Index = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _23 = (unsigned int) Index;
  _24 = _23 * 2;
  _25 = pDataPtr + _24;
  _26 = *pResultPtr;
  *_25 = _26;
  _27 = (unsigned int) ResultOffset;
  _28 = _27 * 2;
  pResultPtr = pResultPtr + _28;
  Index.18_29 = Index;
  Index = Index.18_29 + 1;

  <bb 6> :
  if (Index < ChannelCount)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Adc_Ipw_ReadGroupNoInt (const struct Adc_GroupConfigurationType * pGroupPtr, Adc_ValueGroupType * pDataPtr, boolean * pFlag, uint32 u32CoreId)
{
  const Adc_GroupType Group;
  const Adc_HwUnitType PhysicalHwUnitId;
  const Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType ReadGroupRet;
  boolean ValidConversion;
  Adc_ChannelIndexType ChannelCount;
  Std_ReturnType D.6564;

  <bb 2> :
  ValidConversion = 1;
  ReadGroupRet = 0;
  LogicalHwUnitId = pGroupPtr->AdcLogicalUnitId;
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  Group = pGroupPtr->GroupId;
  _4 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_4].ChannelCount;
  ValidConversion = Adc_Ipw_CheckValidConversion (PhysicalHwUnitId, 0, ChannelCount);
  if (ValidConversion != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReadGroupRet = Adc_Ipw_ReadGroupConvData (pGroupPtr, pDataPtr, pFlag, u32CoreId);
  goto <bb 5>; [INV]

  <bb 4> :
  ReadGroupRet = 1;

  <bb 5> :
  D.6564 = ReadGroupRet;

  <bb 6> :
<L3>:
  return D.6564;

}


Adc_Ipw_ReadGroupConvData (const struct Adc_GroupConfigurationType * pGroupPtr, Adc_ValueGroupType * pDataPtr, boolean * pFlag, uint32 u32CoreId)
{
  const Adc_ChannelIndexType ChannelCount;
  boolean bWriteFlag;
  Adc_ChannelType ChIndex;
  const Adc_GroupType Group;
  const uint8 NumsBitShift;
  const Adc_HwUnitType PhysicalHwUnitId;
  const Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType ReadGroupRet;
  Adc_ValueGroupType AdcResult;
  uint8 Channel;
  Std_ReturnType D.6574;

  <bb 2> :
  ReadGroupRet = 0;
  LogicalHwUnitId = pGroupPtr->AdcLogicalUnitId;
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  _4 = Adc_pCfgPtr[u32CoreId];
  _5 = _4->pAdcIpwConfig;
  _6 = (int) LogicalHwUnitId;
  _7 = _5->apAdcConfig[_6];
  _8 = _7->Resolution;
  NumsBitShift = Adc_Ipw_CalculateNumsBitShift (_8);
  Group = pGroupPtr->GroupId;
  bWriteFlag = 1;
  _9 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_9].ChannelCount;
  Channel = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  _10 = (long unsigned int) PhysicalHwUnitId;
  AdcResult = Adc_Ip_GetConvData (_10, Channel);
  _11 = (int) AdcResult;
  _12 = (int) NumsBitShift;
  _13 = _11 << _12;
  AdcResult = (Adc_ValueGroupType) _13;
  _14 = pGroupPtr->bAdcGroupLimitcheck;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _15 = (int) Group;
  _16 = Adc_aRuntimeGroupChannel[_15].bAdcRuntimeGroupLimitcheck;
  if (_16 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _17 = (int) Group;
  _18 = Adc_aRuntimeGroupChannel[_17].pChannel;
  _19 = (unsigned int) Channel;
  _20 = _19 * 2;
  _21 = _18 + _20;
  ChIndex = *_21;
  _22 = Adc_Ipw_CheckConversionValuesInRange (AdcResult, LogicalHwUnitId, ChIndex, u32CoreId);
  *pFlag = _22;
  _23 = *pFlag;
  _24 = ~_23;
  if (_24 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _25 = (int) Group;
  Adc_aGroupStatus[_25].bLimitCheckFailed = 1;
  ReadGroupRet = 1;
  bWriteFlag = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _26 = (int) Group;
  Adc_aGroupStatus[_26].bLimitCheckFailed = 0;

  <bb 8> :
  if (bWriteFlag != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _27 = (unsigned int) Channel;
  _28 = _27 * 2;
  _29 = pDataPtr + _28;
  *_29 = AdcResult;

  <bb 10> :
  Channel.17_30 = Channel;
  Channel = Channel.17_30 + 1;

  <bb 11> :
  if (Channel < ChannelCount)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  D.6574 = ReadGroupRet;

  <bb 13> :
<L11>:
  return D.6574;

}


