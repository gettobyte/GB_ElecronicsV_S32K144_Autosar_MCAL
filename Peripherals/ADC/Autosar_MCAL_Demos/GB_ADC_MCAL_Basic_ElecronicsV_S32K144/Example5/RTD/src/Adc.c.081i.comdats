Adc_SetChannel (const Adc_GroupType Group, const Adc_GroupDefType * Channel, const uint16 * Delays, const uint32 ChannelUpdateMask, const Adc_ChannelIndexType NumberOfChannel)
{
  Std_ReturnType StatusChecks;
  uint32 Index;
  uint32 u32CoreIdTemp;
  Adc_GroupType GroupIndex;
  Adc_HwUnitType LogicalHwUnitId;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.80_2;
  long unsigned int u32CoreId.81_3;
  const struct Adc_ConfigType * _4;
  const uint16 * _5;
  unsigned int _6;
  unsigned int _7;
  const uint16 * _8;
  long unsigned int u32CoreId.82_9;
  const struct Adc_ConfigType * _10;
  const struct Adc_GroupConfigurationType * _11;
  unsigned int _12;
  unsigned int _13;
  const struct Adc_GroupConfigurationType * _14;
  unsigned char _15;
  long unsigned int _16;
  const Adc_GroupDefType * _17;
  short unsigned int _18;
  const struct Adc_ConfigType * _19;
  const struct Adc_Ipw_Config * _20;
  int _21;
  short unsigned int _22;
  const struct Adc_ConfigType * _23;
  const struct Adc_Ipw_Config * _24;
  int _25;
  const struct Adc_ChannelLimitCheckingType * _26;
  long unsigned int _27;
  const Adc_GroupDefType * _28;
  short unsigned int _29;
  unsigned int _30;
  unsigned int _31;
  const struct Adc_ChannelLimitCheckingType * _32;
  _Bool _33;
  long unsigned int _34;
  int _35;
  int _36;
  int _37;
  long unsigned int u32CoreId.83_38;
  const struct Adc_ConfigType * _39;
  const struct Adc_Ipw_Config * _40;
  int _41;
  const struct Adc_ChannelLimitCheckingType * _42;
  short unsigned int _43;
  unsigned int _44;
  unsigned int _45;
  const struct Adc_ChannelLimitCheckingType * _46;
  int _47;
  _Bool _48;
  int _49;
  int _50;
  int _51;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  LogicalHwUnitId_60 = 0;
  GroupIndex_61 = 0;
  u32CoreIdTemp_62 ={v} u32CoreId;
  Index_63 = 0;
  u32CoreId.80_2 ={v} u32CoreId;
  StatusChecks_66 = Adc_ValidateCallAndGroup (48, Group_64(D), u32CoreId.80_2);
  if (StatusChecks_66 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  u32CoreId.81_3 ={v} u32CoreId;
  _4 = Adc_pCfgPtr[u32CoreId.81_3];
  _5 = _4->pGroupIdToIndexMap;
  _6 = (unsigned int) Group_64(D);
  _7 = _6 * 2;
  _8 = _5 + _7;
  GroupIndex_67 = *_8;
  u32CoreId.82_9 ={v} u32CoreId;
  _10 = Adc_pCfgPtr[u32CoreId.82_9];
  _11 = _10->pGroups;
  _12 = (unsigned int) GroupIndex_67;
  _13 = _12 * 68;
  _14 = _11 + _13;
  LogicalHwUnitId_68 = _14->AdcLogicalUnitId;
  _15 = Adc_ValidatePtr (48, Channel_69(D));
  if (_15 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  StatusChecks_75 = Adc_CheckSetChannelParams (Group_64(D), Delays_71(D), ChannelUpdateMask_72(D), NumberOfChannel_73(D));
  Index_76 = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  _16 = Index_53 * 2;
  _17 = Channel_69(D) + _16;
  _18 = *_17;
  _19 = Adc_pCfgPtr[u32CoreIdTemp_62];
  _20 = _19->pAdcIpwConfig;
  _21 = (int) LogicalHwUnitId_68;
  _22 = _20->Mapping.aAdc_Channels[_21];
  if (_18 >= _22)
    goto <bb 8>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (NumberOfChannel_73(D) > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _23 = Adc_pCfgPtr[u32CoreIdTemp_62];
  _24 = _23->pAdcIpwConfig;
  _25 = (int) LogicalHwUnitId_68;
  _26 = _24->ChannelLimitCheckingConfigs[_25];
  _27 = Index_53 * 2;
  _28 = Channel_69(D) + _27;
  _29 = *_28;
  _30 = (unsigned int) _29;
  _31 = _30 * 12;
  _32 = _26 + _31;
  _33 = _32->bChannelLimitCheckEnabled;
  if (_33 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetError (48, 42);
  StatusChecks_79 = 1;
  goto <bb 11>; [INV]

  <bb 9> :
  Index_77 = Index_53 + 1;

  <bb 10> :
  # Index_53 = PHI <Index_76(4), Index_77(9)>
  _34 = (long unsigned int) NumberOfChannel_73(D);
  if (Index_53 < _34)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # LogicalHwUnitId_52 = PHI <LogicalHwUnitId_60(2), LogicalHwUnitId_68(3), LogicalHwUnitId_68(8), LogicalHwUnitId_68(10)>
  # StatusChecks_54 = PHI <StatusChecks_66(2), StatusChecks_66(3), StatusChecks_79(8), StatusChecks_75(10)>
  if (StatusChecks_54 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  _35 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_35].pChannel = Channel_69(D);
  _36 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_36].ChannelCount = NumberOfChannel_73(D);
  _37 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_37].bRuntimeUpdated = 1;
  u32CoreId.83_38 ={v} u32CoreId;
  _39 = Adc_pCfgPtr[u32CoreId.83_38];
  _40 = _39->pAdcIpwConfig;
  _41 = (int) LogicalHwUnitId_52;
  _42 = _40->ChannelLimitCheckingConfigs[_41];
  _43 = *Channel_69(D);
  _44 = (unsigned int) _43;
  _45 = _44 * 12;
  _46 = _42 + _45;
  _47 = (int) Group_64(D);
  _48 = _46->bChannelLimitCheckEnabled;
  Adc_aRuntimeGroupChannel[_47].bAdcRuntimeGroupLimitcheck = _48;
  _49 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_49].pu16Delays = Delays_71(D);
  if (NumberOfChannel_73(D) <= 16)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _50 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_50].u32Mask = ChannelUpdateMask_72(D);
  goto <bb 15>; [INV]

  <bb 14> :
  _51 = (int) Group_64(D);
  Adc_aRuntimeGroupChannel[_51].u32Mask = 4294967295;

  <bb 15> :
  return;

}


Adc_SetClockMode (Adc_SelectPrescalerType Prescaler)
{
  uint32 u32CoreIdTemp;
  Std_ReturnType ErrorFound;
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType Ret;
  volatile uint32 u32CoreId;
  Std_ReturnType D.7511;
  long unsigned int _1;
  _Bool _2;
  long unsigned int u32CoreId.76_3;
  const struct Adc_ConfigType * _4;
  const struct Adc_Ipw_Config * _5;
  int _6;
  unsigned char _7;
  unsigned char LogicalHwUnitId.77_8;
  long unsigned int u32CoreId.78_9;
  unsigned char _10;
  long unsigned int u32CoreId.79_11;
  Std_ReturnType _36;

  <bb 2> :
  Ret_21 = 1;
  ErrorFound_22 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreIdTemp_26 ={v} u32CoreId;
  _2 = Adc_CheckSetClockModeCoreAndParam (Prescaler_27(D), u32CoreIdTemp_26);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  LogicalHwUnitId_29 = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  u32CoreId.76_3 ={v} u32CoreId;
  _4 = Adc_pCfgPtr[u32CoreId.76_3];
  _5 = _4->pAdcIpwConfig;
  _6 = (int) LogicalHwUnitId_13;
  _7 = _5->Mapping.au8Adc_HwUnit[_6];
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  ErrorFound_31 = Adc_ValidateNotBusyNoQueue (LogicalHwUnitId_13, 37);
  if (ErrorFound_31 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  goto <bb 9>; [INV]

  <bb 7> :
  # ErrorFound_14 = PHI <ErrorFound_15(4), ErrorFound_31(5)>
  LogicalHwUnitId.77_8 = LogicalHwUnitId_13;
  LogicalHwUnitId_32 = LogicalHwUnitId.77_8 + 1;

  <bb 8> :
  # LogicalHwUnitId_13 = PHI <LogicalHwUnitId_29(3), LogicalHwUnitId_32(7)>
  # ErrorFound_15 = PHI <ErrorFound_22(3), ErrorFound_14(7)>
  if (LogicalHwUnitId_13 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # ErrorFound_16 = PHI <ErrorFound_31(6), ErrorFound_15(8)>
  if (ErrorFound_16 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  u32CoreId.78_9 ={v} u32CoreId;
  _10 = Adc_ValidateCheckGroupNotConversion (37, u32CoreId.78_9);
  if (_10 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  u32CoreId.79_11 ={v} u32CoreId;
  Ret_35 = Adc_Ipw_SetClockMode (Prescaler_27(D), u32CoreId.79_11);

  <bb 12> :
  # Ret_12 = PHI <Ret_21(2), Ret_21(9), Ret_21(10), Ret_35(11)>
  _36 = Ret_12;

  <bb 13> :
<L13>:
  return _36;

}


Adc_Calibrate (Adc_HwUnitType Unit, struct Adc_CalibrationStatusType * pStatus)
{
  boolean isCalibrateCalled;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.73_2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  long unsigned int u32CoreId.74_6;
  unsigned char _7;
  long unsigned int u32CoreId.75_8;
  unsigned char _9;

  <bb 2> :
  isCalibrateCalled_13 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.73_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndUnit (41, Unit_17(D), u32CoreId.73_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (41, pStatus_19(D));
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  pStatus_19(D)->Adc_UnitSelfTestStatus = 1;
  _5 = Adc_ValidateNotBusyNoQueue (Unit_17(D), 41);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  u32CoreId.74_6 ={v} u32CoreId;
  _7 = Adc_ValidateCheckGroupNotConversion (41, u32CoreId.74_6);
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  u32CoreId.75_8 ={v} u32CoreId;
  Adc_Ipw_Calibrate (Unit_17(D), pStatus_19(D), u32CoreId.75_8);
  isCalibrateCalled_25 = 1;

  <bb 7> :
  # isCalibrateCalled_10 = PHI <isCalibrateCalled_13(4), isCalibrateCalled_13(5), isCalibrateCalled_25(6)>
  if (isCalibrateCalled_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _9 = pStatus_19(D)->Adc_UnitSelfTestStatus;
  if (_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Adc_ReportDetRuntimeError (41, 43);

  <bb 10> :
  return;

}


Adc_ReadRawData (Adc_HwUnitType Unit, const Adc_ChannelType * const ChansArray, uint8 NumItems, Adc_ValueGroupType * const DataBufferPtr)
{
  Std_ReturnType Status;
  const uint32 u32CoreId;
  uint8 i;
  long unsigned int _1;
  long unsigned int u32CoreId.70_2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  unsigned int _6;
  unsigned int _7;
  const Adc_ChannelType * _8;
  short unsigned int _9;
  unsigned int _10;
  unsigned int _11;
  const Adc_ChannelType * _12;
  short unsigned int _13;
  long unsigned int u32CoreId.71_14;
  unsigned int _15;
  unsigned int _16;
  Adc_ValueGroupType * _17;
  unsigned char i.72_18;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.70_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndUnit (66, Unit_28(D), u32CoreId.70_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (66, DataBufferPtr_30(D));
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  _5 = Adc_ValidatePtr (66, ChansArray_32(D));
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  if (NumItems_34(D) <= 16)
    goto <bb 6>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 6> :
  i_36 = 0;
  goto <bb 13>; [INV]

  <bb 7> :
  Status_37 = 0;
  _6 = (unsigned int) i_19;
  _7 = _6 * 2;
  _8 = ChansArray_32(D) + _7;
  _9 = *_8;
  if (_9 <= 29)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = (unsigned int) i_19;
  _11 = _10 * 2;
  _12 = ChansArray_32(D) + _11;
  _13 = *_12;
  u32CoreId.71_14 ={v} u32CoreId;
  _15 = (unsigned int) i_19;
  _16 = _15 * 2;
  _17 = DataBufferPtr_30(D) + _16;
  Status_40 = Adc_Ipw_GetConvData (Unit_28(D), _13, u32CoreId.71_14, _17);
  goto <bb 10>; [INV]

  <bb 9> :
  Status_38 = 1;

  <bb 10> :
  # Status_20 = PHI <Status_40(8), Status_38(9)>
  if (Status_20 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_ReportDetError (66, 14);

  <bb 12> :
  i.72_18 = i_19;
  i_42 = i.72_18 + 1;

  <bb 13> :
  # i_19 = PHI <i_36(6), i_42(12)>
  if (i_19 < NumItems_34(D))
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Adc_ReportDetError (66, 14);

  <bb 15> :
  return;

}


Adc_GetVersionInfo (struct Std_VersionInfoType * versioninfo)
{
  unsigned char _1;

  <bb 2> :
  _1 = Adc_ValidatePtr (10, versioninfo_4(D));
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  versioninfo_4(D)->vendorID = 43;
  versioninfo_4(D)->moduleID = 123;
  versioninfo_4(D)->sw_major_version = 1;
  versioninfo_4(D)->sw_minor_version = 0;
  versioninfo_4(D)->sw_patch_version = 0;

  <bb 4> :
  return;

}


Adc_GetStreamLastPointer (Adc_GroupType Group, Adc_ValueGroupType * * PtrToSamplePtr)
{
  Std_ReturnType ValidStatus;
  Adc_StreamNumSampleType ResultIndex;
  Adc_StreamNumSampleType NumberOfResults;
  const struct Adc_GroupConfigurationType * pGroupPtr;
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  Adc_StreamNumSampleType D.7440;
  long unsigned int _1;
  long unsigned int u32CoreId.63_2;
  long unsigned int u32CoreId.64_3;
  const struct Adc_ConfigType * _4;
  const struct Adc_GroupConfigurationType * _5;
  unsigned int _6;
  unsigned int _7;
  long unsigned int u32CoreId.65_8;
  unsigned char _9;
  int _10;
  <unnamed type> _11;
  int _12;
  <unnamed type> _13;
  long unsigned int u32CoreId.66_14;
  const struct Adc_ConfigType * _15;
  const uint16 * _16;
  unsigned int _17;
  unsigned int _18;
  const uint16 * _19;
  int _20;
  short unsigned int _21;
  long unsigned int u32CoreId.67_22;
  const struct Adc_ConfigType * _23;
  const struct Adc_GroupConfigurationType * _24;
  unsigned int _25;
  unsigned int _26;
  const struct Adc_GroupConfigurationType * _27;
  short unsigned int _28;
  long unsigned int u32CoreId.68_29;
  const struct Adc_ConfigType * _30;
  const struct Adc_GroupConfigurationType * _31;
  unsigned int _32;
  unsigned int _33;
  const struct Adc_GroupConfigurationType * _34;
  int _35;
  short unsigned int _36;
  int _37;
  Adc_ValueGroupType * * _38;
  unsigned int _39;
  unsigned int _40;
  Adc_ValueGroupType * * _41;
  Adc_ValueGroupType * _42;
  unsigned int _43;
  unsigned int _44;
  Adc_ValueGroupType * _45;
  long unsigned int u32CoreId.69_46;
  Adc_StreamNumSampleType _73;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  GroupIndex_54 = 0;
  NumberOfResults_55 = 0;
  ResultIndex_56 = 0;
  u32CoreId.63_2 ={v} u32CoreId;
  ValidStatus_59 = Adc_ValidateCallAndGroup (11, Group_57(D), u32CoreId.63_2);
  if (ValidStatus_59 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  u32CoreId.64_3 ={v} u32CoreId;
  _4 = Adc_pCfgPtr[u32CoreId.64_3];
  _5 = _4->pGroups;
  _6 = (unsigned int) GroupIndex_54;
  _7 = _6 * 68;
  pGroupPtr_62 = _5 + _7;
  u32CoreId.65_8 ={v} u32CoreId;
  _9 = Adc_ValidateStateNotIdle (11, Group_57(D), u32CoreId.65_8);
  if (_9 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  *PtrToSamplePtr_60(D) = 0B;
  _10 = (int) Group_57(D);
  _11 ={v} Adc_aGroupStatus[_10].eConversion;
  if (_11 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _12 = (int) Group_57(D);
  _13 ={v} Adc_aGroupStatus[_12].eConversion;
  if (_13 != 1)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  u32CoreId.66_14 ={v} u32CoreId;
  _15 = Adc_pCfgPtr[u32CoreId.66_14];
  _16 = _15->pGroupIdToIndexMap;
  _17 = (unsigned int) Group_57(D);
  _18 = _17 * 2;
  _19 = _16 + _18;
  GroupIndex_66 = *_19;
  _20 = (int) Group_57(D);
  _21 ={v} Adc_aGroupStatus[_20].ResultIndex;
  if (_21 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  u32CoreId.67_22 ={v} u32CoreId;
  _23 = Adc_pCfgPtr[u32CoreId.67_22];
  _24 = _23->pGroups;
  _25 = (unsigned int) GroupIndex_66;
  _26 = _25 * 68;
  _27 = _24 + _26;
  _28 = _27->NumSamples;
  ResultIndex_69 = _28 + 65535;
  u32CoreId.68_29 ={v} u32CoreId;
  _30 = Adc_pCfgPtr[u32CoreId.68_29];
  _31 = _30->pGroups;
  _32 = (unsigned int) GroupIndex_66;
  _33 = _32 * 68;
  _34 = _31 + _33;
  NumberOfResults_70 = _34->NumSamples;
  goto <bb 9>; [INV]

  <bb 8> :
  _35 = (int) Group_57(D);
  _36 ={v} Adc_aGroupStatus[_35].ResultIndex;
  ResultIndex_67 = _36 + 65535;
  _37 = (int) Group_57(D);
  NumberOfResults_68 ={v} Adc_aGroupStatus[_37].ResultIndex;

  <bb 9> :
  # NumberOfResults_47 = PHI <NumberOfResults_70(7), NumberOfResults_68(8)>
  # ResultIndex_49 = PHI <ResultIndex_69(7), ResultIndex_67(8)>
  _38 = pGroupPtr_62->pResultsBufferPtr;
  _39 = (unsigned int) Group_57(D);
  _40 = _39 * 4;
  _41 = _38 + _40;
  _42 = *_41;
  _43 = (unsigned int) ResultIndex_49;
  _44 = _43 * 2;
  _45 = _42 + _44;
  *PtrToSamplePtr_60(D) = _45;
  u32CoreId.69_46 ={v} u32CoreId;
  Adc_UpdateStatusAfterGetStream (Group_57(D), u32CoreId.69_46);
  goto <bb 12>; [INV]

  <bb 10> :
  *PtrToSamplePtr_60(D) = 0B;
  goto <bb 12>; [INV]

  <bb 11> :
  *PtrToSamplePtr_60(D) = 0B;

  <bb 12> :
  # NumberOfResults_48 = PHI <NumberOfResults_55(10), NumberOfResults_55(11), NumberOfResults_55(5), NumberOfResults_47(9), NumberOfResults_55(4)>
  _73 = NumberOfResults_48;

  <bb 13> :
<L13>:
  return _73;

}


Adc_GetGroupStatus (Adc_GroupType Group)
{
  Adc_StatusType eTempReturn;
  volatile uint32 u32CoreId;
  Adc_StatusType D.7425;
  long unsigned int _1;
  long unsigned int u32CoreId.62_2;
  unsigned char _3;
  int _4;
  Adc_StatusType _13;

  <bb 2> :
  eTempReturn_6 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.62_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (9, Group_10(D), u32CoreId.62_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) Group_10(D);
  eTempReturn_12 ={v} Adc_aGroupStatus[_4].eConversion;

  <bb 4> :
  # eTempReturn_5 = PHI <eTempReturn_6(2), eTempReturn_12(3)>
  _13 = eTempReturn_5;

  <bb 5> :
<L2>:
  return _13;

}


Adc_DisableGroupNotification (Adc_GroupType Group)
{
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.60_2;
  unsigned char _3;
  long unsigned int u32CoreId.61_4;
  unsigned char _5;
  int _6;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.60_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (8, Group_11(D), u32CoreId.60_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  u32CoreId.61_4 ={v} u32CoreId;
  _5 = Adc_NotifyCapablity (8, Group_11(D), u32CoreId.61_4);
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) Group_11(D);
  Adc_aGroupStatus[_6].eNotification = 0;

  <bb 5> :
  return;

}


Adc_EnableGroupNotification (Adc_GroupType Group)
{
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.58_2;
  unsigned char _3;
  long unsigned int u32CoreId.59_4;
  unsigned char _5;
  int _6;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.58_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (7, Group_11(D), u32CoreId.58_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  u32CoreId.59_4 ={v} u32CoreId;
  _5 = Adc_NotifyCapablity (7, Group_11(D), u32CoreId.59_4);
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) Group_11(D);
  Adc_aGroupStatus[_6].eNotification = 1;

  <bb 5> :
  return;

}


Adc_DisableHardwareTrigger (Adc_GroupType Group)
{
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.52_2;
  unsigned char _3;
  long unsigned int u32CoreId.53_4;
  unsigned char _5;
  long unsigned int u32CoreId.54_6;
  unsigned char _7;
  long unsigned int u32CoreId.55_8;
  const struct Adc_ConfigType * _9;
  const uint16 * _10;
  unsigned int _11;
  unsigned int _12;
  const uint16 * _13;
  long unsigned int u32CoreId.56_14;
  const struct Adc_ConfigType * _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned int _17;
  unsigned int _18;
  const struct Adc_GroupConfigurationType * _19;
  long unsigned int u32CoreId.57_20;

  <bb 2> :
  GroupIndex_22 = 0;
  LogicalHwUnitId_23 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.52_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (6, Group_27(D), u32CoreId.52_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  u32CoreId.53_4 ={v} u32CoreId;
  _5 = Adc_ValidateStateNotIdle (6, Group_27(D), u32CoreId.53_4);
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  u32CoreId.54_6 ={v} u32CoreId;
  _7 = Adc_ValidateExtraParams (6, 10, Group_27(D), u32CoreId.54_6);
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.55_8 ={v} u32CoreId;
  _9 = Adc_pCfgPtr[u32CoreId.55_8];
  _10 = _9->pGroupIdToIndexMap;
  _11 = (unsigned int) Group_27(D);
  _12 = _11 * 2;
  _13 = _10 + _12;
  GroupIndex_31 = *_13;
  u32CoreId.56_14 ={v} u32CoreId;
  _15 = Adc_pCfgPtr[u32CoreId.56_14];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex_31;
  _18 = _17 * 68;
  _19 = _16 + _18;
  LogicalHwUnitId_32 = _19->AdcLogicalUnitId;
  Adc_UpdateStatusDisableHardware (Group_27(D), LogicalHwUnitId_32);
  u32CoreId.57_20 ={v} u32CoreId;
  Adc_Ipw_DisableHardwareTrigger (Group_27(D), LogicalHwUnitId_32, u32CoreId.57_20);

  <bb 6> :
  return;

}


Adc_EnableHardwareTrigger (Adc_GroupType Group)
{
  Std_ReturnType ValidStatus;
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.46_2;
  unsigned char _3;
  long unsigned int u32CoreId.47_4;
  const struct Adc_ConfigType * _5;
  const uint16 * _6;
  unsigned int _7;
  unsigned int _8;
  const uint16 * _9;
  long unsigned int u32CoreId.48_10;
  unsigned char _11;
  long unsigned int u32CoreId.49_12;
  unsigned char _13;
  long unsigned int u32CoreId.50_14;
  const struct Adc_ConfigType * _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned int _17;
  unsigned int _18;
  const struct Adc_GroupConfigurationType * _19;
  long unsigned int u32CoreId.51_20;

  <bb 2> :
  GroupIndex_22 = 0;
  LogicalHwUnitId_23 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.46_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (5, Group_27(D), u32CoreId.46_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  u32CoreId.47_4 ={v} u32CoreId;
  _5 = Adc_pCfgPtr[u32CoreId.47_4];
  _6 = _5->pGroupIdToIndexMap;
  _7 = (unsigned int) Group_27(D);
  _8 = _7 * 2;
  _9 = _6 + _8;
  GroupIndex_29 = *_9;
  u32CoreId.48_10 ={v} u32CoreId;
  _11 = Adc_ValidateStateEnableHwTriggNotBusy (Group_27(D), u32CoreId.48_10);
  if (_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  u32CoreId.49_12 ={v} u32CoreId;
  _13 = Adc_ValidateExtraParams (5, 11, Group_27(D), u32CoreId.49_12);
  if (_13 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  u32CoreId.50_14 ={v} u32CoreId;
  _15 = Adc_pCfgPtr[u32CoreId.50_14];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex_29;
  _18 = _17 * 68;
  _19 = _16 + _18;
  LogicalHwUnitId_32 = _19->AdcLogicalUnitId;
  Adc_UpdateStatusEnableHardware (Group_27(D), LogicalHwUnitId_32);
  u32CoreId.51_20 ={v} u32CoreId;
  ValidStatus_35 = Adc_Ipw_EnableHardwareTrigger (Group_27(D), LogicalHwUnitId_32, u32CoreId.51_20);
  if (ValidStatus_35 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetRuntimeError (5, 11);

  <bb 7> :
  return;

}


Adc_ReadGroup (Adc_GroupType Group, Adc_ValueGroupType * DataBufferPtr)
{
  boolean bFlag;
  Std_ReturnType GroupRet;
  volatile uint32 u32CoreId;
  Std_ReturnType D.7340;
  long unsigned int _1;
  long unsigned int u32CoreId.39_2;
  unsigned char _3;
  unsigned char _4;
  long unsigned int u32CoreId.40_5;
  unsigned char _6;
  long unsigned int u32CoreId.41_7;
  _Bool bFlag.42_8;
  _Bool _9;
  _Bool bFlag.43_10;
  long unsigned int u32CoreId.44_11;
  Std_ReturnType _27;

  <bb 2> :
  GroupRet_14 = 1;
  bFlag = 1;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.39_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (4, Group_19(D), u32CoreId.39_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (4, DataBufferPtr_21(D));
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  u32CoreId.40_5 ={v} u32CoreId;
  _6 = Adc_ValidateStateNotIdle (4, Group_19(D), u32CoreId.40_5);
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  u32CoreId.41_7 ={v} u32CoreId;
  GroupRet_25 = Adc_Ipw_ReadGroup (Group_19(D), DataBufferPtr_21(D), &bFlag, u32CoreId.41_7);
  if (GroupRet_25 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  bFlag.42_8 = bFlag;
  _9 = ~bFlag.42_8;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  bFlag.43_10 = bFlag;
  u32CoreId.44_11 ={v} u32CoreId;
  Adc_UpdateStatusReadGroup (Group_19(D), bFlag.43_10, u32CoreId.44_11);

  <bb 8> :
  # GroupRet_12 = PHI <GroupRet_14(2), GroupRet_14(3), GroupRet_14(4), GroupRet_25(6), GroupRet_25(7)>
  _27 = GroupRet_12;
  bFlag ={v} {CLOBBER};

  <bb 9> :
<L10>:
  return _27;

}


Adc_StopGroupConversion (Adc_GroupType Group)
{
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  Adc_HwUnitType LogicalHwUnitId;
  long unsigned int _1;
  long unsigned int u32CoreId.31_2;
  unsigned char _3;
  long unsigned int u32CoreId.32_4;
  unsigned char _5;
  long unsigned int u32CoreId.33_6;
  unsigned char _7;
  long unsigned int u32CoreId.34_8;
  const struct Adc_ConfigType * _9;
  const uint16 * _10;
  unsigned int _11;
  unsigned int _12;
  const uint16 * _13;
  long unsigned int u32CoreId.35_14;
  const struct Adc_ConfigType * _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned int _17;
  unsigned int _18;
  const struct Adc_GroupConfigurationType * _19;
  long unsigned int u32CoreId.36_20;

  <bb 2> :
  LogicalHwUnitId_22 = 0;
  GroupIndex_23 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.31_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (3, Group_27(D), u32CoreId.31_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  u32CoreId.32_4 ={v} u32CoreId;
  _5 = Adc_ValidateStateNotIdle (3, Group_27(D), u32CoreId.32_4);
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  u32CoreId.33_6 ={v} u32CoreId;
  _7 = Adc_ValidateExtraParams (3, 2, Group_27(D), u32CoreId.33_6);
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.34_8 ={v} u32CoreId;
  _9 = Adc_pCfgPtr[u32CoreId.34_8];
  _10 = _9->pGroupIdToIndexMap;
  _11 = (unsigned int) Group_27(D);
  _12 = _11 * 2;
  _13 = _10 + _12;
  GroupIndex_31 = *_13;
  u32CoreId.35_14 ={v} u32CoreId;
  _15 = Adc_pCfgPtr[u32CoreId.35_14];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex_31;
  _18 = _17 * 68;
  _19 = _16 + _18;
  LogicalHwUnitId_32 = _19->AdcLogicalUnitId;
  u32CoreId.36_20 ={v} u32CoreId;
  Adc_UpdateStatusStopConversion (Group_27(D), LogicalHwUnitId_32, u32CoreId.36_20);

  <bb 6> :
  return;

}


Adc_StartGroupConversion (Adc_GroupType Group)
{
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.25_2;
  unsigned char _3;
  long unsigned int u32CoreId.26_4;
  const struct Adc_ConfigType * _5;
  const uint16 * _6;
  unsigned int _7;
  unsigned int _8;
  const uint16 * _9;
  long unsigned int u32CoreId.27_10;
  unsigned char _11;
  long unsigned int u32CoreId.28_12;
  unsigned char _13;
  long unsigned int u32CoreId.29_14;
  const struct Adc_ConfigType * _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned int _17;
  unsigned int _18;
  const struct Adc_GroupConfigurationType * _19;
  long unsigned int u32CoreId.30_20;

  <bb 2> :
  GroupIndex_22 = 0;
  LogicalHwUnitId_23 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.25_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (2, Group_27(D), u32CoreId.25_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  u32CoreId.26_4 ={v} u32CoreId;
  _5 = Adc_pCfgPtr[u32CoreId.26_4];
  _6 = _5->pGroupIdToIndexMap;
  _7 = (unsigned int) Group_27(D);
  _8 = _7 * 2;
  _9 = _6 + _8;
  GroupIndex_29 = *_9;
  u32CoreId.27_10 ={v} u32CoreId;
  _11 = Adc_ValidateStateStartGroupConvNotBusy (Group_27(D), u32CoreId.27_10);
  if (_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  u32CoreId.28_12 ={v} u32CoreId;
  _13 = Adc_ValidateExtraParams (2, 7, Group_27(D), u32CoreId.28_12);
  if (_13 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.29_14 ={v} u32CoreId;
  _15 = Adc_pCfgPtr[u32CoreId.29_14];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex_29;
  _18 = _17 * 68;
  _19 = _16 + _18;
  LogicalHwUnitId_32 = _19->AdcLogicalUnitId;
  u32CoreId.30_20 ={v} u32CoreId;
  Adc_UpdateStatusStartConversion (Group_27(D), LogicalHwUnitId_32, u32CoreId.30_20);

  <bb 6> :
  return;

}


Adc_DeInit ()
{
  Std_ReturnType ValidStatus;
  Std_ReturnType TempReturn;
  uint32 u32CoreIdTemp;
  Std_ReturnType ValidCoreId;
  Adc_HwUnitType LogicalHwUnitId;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.15_2;
  long unsigned int u32CoreId.16_3;
  const struct Adc_ConfigType * _4;
  long unsigned int u32CoreId.17_5;
  long unsigned int u32CoreId.18_6;
  long unsigned int u32CoreId.19_7;
  const struct Adc_ConfigType * _8;
  const struct Adc_Ipw_Config * _9;
  int _10;
  unsigned char _11;
  int _12;
  unsigned char LogicalHwUnitId.20_13;
  long unsigned int u32CoreId.21_14;
  long unsigned int u32CoreId.22_15;

  <bb 2> :
  LogicalHwUnitId_22 = 0;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreIdTemp_26 ={v} u32CoreId;
  u32CoreId.15_2 ={v} u32CoreId;
  ValidStatus_28 = Adc_ValidateGloballCall (1, u32CoreId.15_2);
  if (ValidStatus_28 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  u32CoreId.16_3 ={v} u32CoreId;
  _4 = Adc_pCfgPtr[u32CoreId.16_3];
  ValidCoreId_30 = Adc_CheckCurrentCoreId (_4, u32CoreIdTemp_26);
  if (ValidCoreId_30 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  u32CoreId.17_5 ={v} u32CoreId;
  ValidStatus_33 = Adc_ValidateDeInitNotBusy (u32CoreId.17_5);
  if (ValidStatus_33 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 5> :
  u32CoreId.18_6 ={v} u32CoreId;
  TempReturn_35 = Adc_Ipw_DeInit (u32CoreId.18_6);
  if (TempReturn_35 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetRuntimeError (1, 43);

  <bb 7> :
  LogicalHwUnitId_37 = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  u32CoreId.19_7 ={v} u32CoreId;
  _8 = Adc_pCfgPtr[u32CoreId.19_7];
  _9 = _8->pAdcIpwConfig;
  _10 = (int) LogicalHwUnitId_16;
  _11 = _9->Mapping.au8Adc_HwUnit[_10];
  if (_11 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _12 = (int) LogicalHwUnitId_16;
  Adc_aUnitStatus[_12].u8Sc1Used = 0;

  <bb 10> :
  LogicalHwUnitId.20_13 = LogicalHwUnitId_16;
  LogicalHwUnitId_40 = LogicalHwUnitId.20_13 + 1;

  <bb 11> :
  # LogicalHwUnitId_16 = PHI <LogicalHwUnitId_37(7), LogicalHwUnitId_40(10)>
  if (LogicalHwUnitId_16 <= 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  u32CoreId.21_14 ={v} u32CoreId;
  Adc_pCfgPtr[u32CoreId.21_14] = 0B;
  goto <bb 14>; [INV]

  <bb 13> :
  Adc_ReportDetError (1, 14);

  <bb 14> :
  # ValidStatus_17 = PHI <ValidStatus_28(2), ValidStatus_33(12), ValidStatus_28(13), ValidStatus_33(4)>
  u32CoreId.22_15 ={v} u32CoreId;
  Adc_EndValidateGloballCall (ValidStatus_17, 1, u32CoreId.22_15);
  return;

}


Adc_SetupResultBuffer (Adc_GroupType Group, Adc_ValueGroupType * const DataBufferPtr)
{
  const struct Adc_GroupConfigurationType * pGroupPtr;
  Std_ReturnType TempReturn;
  Adc_GroupType GroupIndex;
  volatile uint32 u32CoreId;
  Std_ReturnType D.7162;
  long unsigned int _1;
  long unsigned int u32CoreId.12_2;
  unsigned char _3;
  long unsigned int u32CoreId.13_4;
  const struct Adc_ConfigType * _5;
  const uint16 * _6;
  unsigned int _7;
  unsigned int _8;
  const uint16 * _9;
  unsigned char _10;
  unsigned char _11;
  long unsigned int u32CoreId.14_12;
  const struct Adc_ConfigType * _13;
  const struct Adc_GroupConfigurationType * _14;
  unsigned int _15;
  unsigned int _16;
  Adc_ValueGroupType * * _17;
  unsigned int _18;
  unsigned int _19;
  Adc_ValueGroupType * * _20;
  Std_ReturnType _37;

  <bb 2> :
  TempReturn_23 = 1;
  pGroupPtr_24 = 0B;
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.12_2 ={v} u32CoreId;
  _3 = Adc_ValidateCallAndGroup (12, Group_28(D), u32CoreId.12_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  u32CoreId.13_4 ={v} u32CoreId;
  _5 = Adc_pCfgPtr[u32CoreId.13_4];
  _6 = _5->pGroupIdToIndexMap;
  _7 = (unsigned int) Group_28(D);
  _8 = _7 * 2;
  _9 = _6 + _8;
  GroupIndex_30 = *_9;
  _10 = Adc_ValidatePtr (12, DataBufferPtr_31(D));
  if (_10 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _11 = Adc_ValidateSetupBufferNotBusy (Group_28(D));
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.14_12 ={v} u32CoreId;
  _13 = Adc_pCfgPtr[u32CoreId.14_12];
  _14 = _13->pGroups;
  _15 = (unsigned int) GroupIndex_30;
  _16 = _15 * 68;
  pGroupPtr_34 = _14 + _16;
  _17 = pGroupPtr_34->pResultsBufferPtr;
  _18 = (unsigned int) Group_28(D);
  _19 = _18 * 4;
  _20 = _17 + _19;
  *_20 = DataBufferPtr_31(D);
  TempReturn_36 = 0;

  <bb 6> :
  # TempReturn_21 = PHI <TempReturn_23(2), TempReturn_23(3), TempReturn_23(4), TempReturn_36(5)>
  _37 = TempReturn_21;

  <bb 7> :
<L6>:
  return _37;

}


Adc_Init (const struct Adc_ConfigType * ConfigPtr)
{
  Std_ReturnType ValidStatus;
  Std_ReturnType TimeOutStatus;
  Std_ReturnType ValidCoreId;
  uint32 u32CoreIdTemp;
  volatile uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.1_2;
  long unsigned int u32CoreId.2_3;
  long unsigned int u32CoreId.3_4;
  long unsigned int u32CoreId.4_5;
  long unsigned int u32CoreId.5_6;
  long unsigned int u32CoreId.6_7;
  const struct Adc_ConfigType * _8;
  const struct Adc_Ipw_Config * _9;
  long unsigned int u32CoreId.7_10;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreIdTemp_17 ={v} u32CoreId;
  u32CoreId.1_2 ={v} u32CoreId;
  ValidStatus_19 = Adc_ValidateGloballCall (0, u32CoreId.1_2);
  if (ValidStatus_19 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  ValidStatus_22 = Adc_ValidatePtrInit (ConfigPtr_20(D));
  if (ValidStatus_22 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  u32CoreId.2_3 ={v} u32CoreId;
  ValidCoreId_24 = Adc_CheckCurrentCoreId (ConfigPtr_20(D), u32CoreId.2_3);
  if (ValidCoreId_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  u32CoreId.3_4 ={v} u32CoreId;
  Adc_pCfgPtr[u32CoreId.3_4] = ConfigPtr_20(D);
  u32CoreId.4_5 ={v} u32CoreId;
  Adc_InitUnitStatus (u32CoreId.4_5);
  u32CoreId.5_6 ={v} u32CoreId;
  Adc_InitGroupsStatus (u32CoreId.5_6);
  u32CoreId.6_7 ={v} u32CoreId;
  _8 = Adc_pCfgPtr[u32CoreId.6_7];
  _9 = _8->pAdcIpwConfig;
  TimeOutStatus_31 = Adc_Ipw_Init (_9, u32CoreIdTemp_17);
  if (TimeOutStatus_31 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  Adc_ReportDetRuntimeError (0, 43);
  goto <bb 8>; [INV]

  <bb 7> :
  ValidStatus_25 = 1;
  Adc_ReportDetError (0, 14);

  <bb 8> :
  # ValidStatus_11 = PHI <ValidStatus_19(2), ValidStatus_22(3), ValidStatus_22(6), ValidStatus_25(7), ValidStatus_22(5)>
  if (ValidStatus_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  u32CoreId.7_10 ={v} u32CoreId;
  Adc_EndValidateGloballCall (ValidStatus_11, 0, u32CoreId.7_10);

  <bb 10> :
  return;

}


Adc_CheckSetClockModeCoreAndParam (const Adc_SelectPrescalerType Prescaler, const uint32 u32CoreId)
{
  Std_ReturnType ValidCoreId;
  boolean Valid;
  boolean D.7523;
  const struct Adc_ConfigType * _1;
  const struct Adc_ConfigType * _2;
  boolean _16;

  <bb 2> :
  Valid_5 = 0;
  ValidCoreId_6 = 1;
  _1 = Adc_pCfgPtr[u32CoreId_8(D)];
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (37, 10);
  goto <bb 10>; [INV]

  <bb 4> :
  _2 = Adc_pCfgPtr[u32CoreId_8(D)];
  ValidCoreId_10 = Adc_CheckCurrentCoreId (_2, u32CoreId_8(D));
  if (ValidCoreId_10 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetError (37, 14);
  goto <bb 10>; [INV]

  <bb 6> :
  if (Prescaler_11(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (Prescaler_11(D) != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetError (37, 41);
  goto <bb 10>; [INV]

  <bb 9> :
  Valid_13 = 1;

  <bb 10> :
  # Valid_3 = PHI <Valid_5(3), Valid_5(5), Valid_5(8), Valid_13(9)>
  _16 = Valid_3;

  <bb 11> :
<L10>:
  return _16;

}


Adc_CheckSetChannelParams (const Adc_GroupType Group, const uint16 * Delays, const uint32 ChannelUpdateMask, const Adc_ChannelIndexType NumberOfChannel)
{
  const Adc_GroupType GroupIndex;
  Std_ReturnType StatusChecks;
  const uint32 u32CoreIdTemp;
  volatile uint32 u32CoreId;
  Std_ReturnType D.7555;
  long unsigned int _1;
  long unsigned int u32CoreId.84_2;
  const struct Adc_ConfigType * _3;
  const uint16 * _4;
  unsigned int _5;
  unsigned int _6;
  const uint16 * _7;
  unsigned int _8;
  unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned char _17;
  unsigned char _18;
  const struct Adc_ConfigType * _19;
  const struct Adc_GroupConfigurationType * _20;
  unsigned int _21;
  unsigned int _22;
  const struct Adc_GroupConfigurationType * _23;
  const struct Adc_Ipw_GroupConfig * _24;
  _Bool _25;
  const struct Adc_ConfigType * _26;
  const struct Adc_GroupConfigurationType * _27;
  unsigned int _28;
  unsigned int _29;
  const struct Adc_GroupConfigurationType * _30;
  unsigned char _31;
  const struct Adc_ConfigType * _32;
  const struct Adc_GroupConfigurationType * _33;
  unsigned int _34;
  unsigned int _35;
  const struct Adc_GroupConfigurationType * _36;
  unsigned char _37;
  Std_ReturnType _57;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreIdTemp_43 ={v} u32CoreId;
  StatusChecks_44 = 0;
  u32CoreId.84_2 ={v} u32CoreId;
  _3 = Adc_pCfgPtr[u32CoreId.84_2];
  _4 = _3->pGroupIdToIndexMap;
  _5 = (unsigned int) Group_45(D);
  _6 = _5 * 2;
  _7 = _4 + _6;
  GroupIndex_46 = *_7;
  if (NumberOfChannel_47(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (48, 42);
  StatusChecks_56 = 1;
  goto <bb 14>; [INV]

  <bb 4> :
  _8 = (unsigned int) NumberOfChannel_47(D);
  _9 = _8 + 4294967295;
  _10 = ChannelUpdateMask_48(D) >> _9;
  _11 = _10 & 1;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _12 = Adc_pCfgPtr[u32CoreIdTemp_43];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_46;
  _15 = _14 * 68;
  _16 = _13 + _15;
  _17 = _16->AssignedChannelCount;
  if (NumberOfChannel_47(D) != _17)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetError (48, 42);
  goto <bb 14>; [INV]

  <bb 7> :
  _18 = Adc_ValidatePtr (48, Delays_50(D));
  if (_18 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _19 = Adc_pCfgPtr[u32CoreIdTemp_43];
  _20 = _19->pGroups;
  _21 = (unsigned int) GroupIndex_46;
  _22 = _21 * 68;
  _23 = _20 + _22;
  _24 = _23->pAdcIpwGroupConfig;
  _25 = _24->AdcGroupEnableChannelDelays;
  if (_25 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _26 = Adc_pCfgPtr[u32CoreIdTemp_43];
  _27 = _26->pGroups;
  _28 = (unsigned int) GroupIndex_46;
  _29 = _28 * 68;
  _30 = _27 + _29;
  _31 = _30->AssignedChannelCount;
  if (NumberOfChannel_47(D) != _31)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetError (48, 20);
  goto <bb 14>; [INV]

  <bb 11> :
  _32 = Adc_pCfgPtr[u32CoreIdTemp_43];
  _33 = _32->pGroups;
  _34 = (unsigned int) GroupIndex_46;
  _35 = _34 * 68;
  _36 = _33 + _35;
  _37 = _36->u8AdcWithoutInterrupt;
  if (_37 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (NumberOfChannel_47(D) > 16)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Adc_ReportDetError (48, 42);
  StatusChecks_54 = 1;

  <bb 14> :
  # StatusChecks_38 = PHI <StatusChecks_56(3), StatusChecks_44(6), StatusChecks_44(10), StatusChecks_44(11), StatusChecks_54(13), StatusChecks_44(12)>
  _57 = StatusChecks_38;

  <bb 15> :
<L17>:
  return _57;

}


Adc_UpdateStatusAfterGetStream (Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  <unnamed type> _7;
  int _8;
  int _9;
  <unnamed type> _10;
  const struct Adc_ConfigType * _11;
  const struct Adc_GroupConfigurationType * _12;
  unsigned int _13;
  unsigned int _14;
  const struct Adc_GroupConfigurationType * _15;
  <unnamed type> _16;
  const struct Adc_ConfigType * _17;
  const struct Adc_GroupConfigurationType * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Adc_GroupConfigurationType * _21;
  <unnamed type> _22;
  const struct Adc_ConfigType * _23;
  const struct Adc_GroupConfigurationType * _24;
  unsigned int _25;
  unsigned int _26;
  const struct Adc_GroupConfigurationType * _27;
  <unnamed type> _28;
  const struct Adc_ConfigType * _29;
  const struct Adc_GroupConfigurationType * _30;
  unsigned int _31;
  unsigned int _32;
  const struct Adc_GroupConfigurationType * _33;
  <unnamed type> _34;
  const struct Adc_ConfigType * _35;
  const struct Adc_GroupConfigurationType * _36;
  unsigned int _37;
  unsigned int _38;
  const struct Adc_GroupConfigurationType * _39;
  <unnamed type> _40;
  int _41;
  int _42;
  const struct Adc_ConfigType * _43;
  const struct Adc_GroupConfigurationType * _44;
  unsigned int _45;
  unsigned int _46;
  const struct Adc_GroupConfigurationType * _47;
  <unnamed type> _48;
  const struct Adc_ConfigType * _49;
  const struct Adc_GroupConfigurationType * _50;
  unsigned int _51;
  unsigned int _52;
  const struct Adc_GroupConfigurationType * _53;
  <unnamed type> _54;
  int _55;
  int _56;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_61(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_62(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_63 = *_5;
  _6 = (int) Group_62(D);
  _7 ={v} Adc_aGroupStatus[_6].eConversion;
  if (_7 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = (int) Group_62(D);
  Adc_aGroupStatus[_8].eConversion ={v} 1;

  <bb 4> :
  _9 = (int) Group_62(D);
  _10 ={v} Adc_aGroupStatus[_9].eConversion;
  if (_10 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 5> :
  _11 = Adc_pCfgPtr[u32CoreId_61(D)];
  _12 = _11->pGroups;
  _13 = (unsigned int) GroupIndex_63;
  _14 = _13 * 68;
  _15 = _12 + _14;
  _16 = _15->eTriggerSource;
  if (_16 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _17 = Adc_pCfgPtr[u32CoreId_61(D)];
  _18 = _17->pGroups;
  _19 = (unsigned int) GroupIndex_63;
  _20 = _19 * 68;
  _21 = _18 + _20;
  _22 = _21->eMode;
  if (_22 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _23 = Adc_pCfgPtr[u32CoreId_61(D)];
  _24 = _23->pGroups;
  _25 = (unsigned int) GroupIndex_63;
  _26 = _25 * 68;
  _27 = _24 + _26;
  _28 = _27->eMode;
  if (_28 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _29 = Adc_pCfgPtr[u32CoreId_61(D)];
  _30 = _29->pGroups;
  _31 = (unsigned int) GroupIndex_63;
  _32 = _31 * 68;
  _33 = _30 + _32;
  _34 = _33->eAccessMode;
  if (_34 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _35 = Adc_pCfgPtr[u32CoreId_61(D)];
  _36 = _35->pGroups;
  _37 = (unsigned int) GroupIndex_63;
  _38 = _37 * 68;
  _39 = _36 + _38;
  _40 = _39->eBufferMode;
  if (_40 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _41 = (int) Group_62(D);
  Adc_aGroupStatus[_41].eConversion ={v} 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _42 = (int) Group_62(D);
  Adc_aGroupStatus[_42].eConversion ={v} 1;

  <bb 12> :
  goto <bb 17>; [INV]

  <bb 13> :
  _43 = Adc_pCfgPtr[u32CoreId_61(D)];
  _44 = _43->pGroups;
  _45 = (unsigned int) GroupIndex_63;
  _46 = _45 * 68;
  _47 = _44 + _46;
  _48 = _47->eAccessMode;
  if (_48 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _49 = Adc_pCfgPtr[u32CoreId_61(D)];
  _50 = _49->pGroups;
  _51 = (unsigned int) GroupIndex_63;
  _52 = _51 * 68;
  _53 = _50 + _52;
  _54 = _53->eBufferMode;
  if (_54 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _55 = (int) Group_62(D);
  Adc_aGroupStatus[_55].eConversion ={v} 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _56 = (int) Group_62(D);
  Adc_aGroupStatus[_56].eConversion ={v} 1;

  <bb 17> :
  return;

}


Adc_UpdateStatusDisableHardware (Adc_GroupType Group, Adc_HwUnitType Unit)
{
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;

  <bb 2> :
  _1 = (int) Group_6(D);
  Adc_aGroupStatus[_1].eNotification = 0;
  _2 = (int) Group_6(D);
  Adc_aRuntimeGroupChannel[_2].u32Mask = 4294967295;
  _3 = (int) Group_6(D);
  Adc_aGroupStatus[_3].eConversion ={v} 0;
  _4 = (int) Group_6(D);
  Adc_aGroupStatus[_4].eHwTriggering = 0;
  _5 = (int) Unit_12(D);
  Adc_aUnitStatus[_5].OngoingHwGroup ={v} 65535;
  return;

}


Adc_UpdateStatusEnableHardware (Adc_GroupType Group, Adc_HwUnitType Unit)
{
  int _1;
  int _2;
  int _3;
  int _4;

  <bb 2> :
  _1 = (int) Unit_5(D);
  Adc_aUnitStatus[_1].OngoingHwGroup ={v} Group_7(D);
  _2 = (int) Group_7(D);
  Adc_aGroupStatus[_2].eConversion ={v} 1;
  _3 = (int) Group_7(D);
  Adc_aGroupStatus[_3].eHwTriggering = 1;
  _4 = (int) Group_7(D);
  Adc_aGroupStatus[_4].ResultIndex ={v} 0;
  return;

}


Adc_UpdateStatusReadGroupInt (const Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  <unnamed type> _7;
  int _8;
  int _9;
  <unnamed type> _10;
  const struct Adc_ConfigType * _11;
  const struct Adc_GroupConfigurationType * _12;
  unsigned int _13;
  unsigned int _14;
  const struct Adc_GroupConfigurationType * _15;
  <unnamed type> _16;
  const struct Adc_ConfigType * _17;
  const struct Adc_GroupConfigurationType * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Adc_GroupConfigurationType * _21;
  <unnamed type> _22;
  const struct Adc_ConfigType * _23;
  const struct Adc_GroupConfigurationType * _24;
  unsigned int _25;
  unsigned int _26;
  const struct Adc_GroupConfigurationType * _27;
  <unnamed type> _28;
  const struct Adc_ConfigType * _29;
  const struct Adc_GroupConfigurationType * _30;
  unsigned int _31;
  unsigned int _32;
  const struct Adc_GroupConfigurationType * _33;
  <unnamed type> _34;
  const struct Adc_ConfigType * _35;
  const struct Adc_GroupConfigurationType * _36;
  unsigned int _37;
  unsigned int _38;
  const struct Adc_GroupConfigurationType * _39;
  <unnamed type> _40;
  int _41;
  int _42;
  const struct Adc_ConfigType * _43;
  const struct Adc_GroupConfigurationType * _44;
  unsigned int _45;
  unsigned int _46;
  const struct Adc_GroupConfigurationType * _47;
  <unnamed type> _48;
  const struct Adc_ConfigType * _49;
  const struct Adc_GroupConfigurationType * _50;
  unsigned int _51;
  unsigned int _52;
  const struct Adc_GroupConfigurationType * _53;
  <unnamed type> _54;
  int _55;
  int _56;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_61(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_62(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_63 = *_5;
  _6 = (int) Group_62(D);
  _7 ={v} Adc_aGroupStatus[_6].eConversion;
  if (_7 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = (int) Group_62(D);
  Adc_aGroupStatus[_8].eConversion ={v} 1;
  goto <bb 18>; [INV]

  <bb 4> :
  _9 = (int) Group_62(D);
  _10 ={v} Adc_aGroupStatus[_9].eConversion;
  if (_10 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 5> :
  _11 = Adc_pCfgPtr[u32CoreId_61(D)];
  _12 = _11->pGroups;
  _13 = (unsigned int) GroupIndex_63;
  _14 = _13 * 68;
  _15 = _12 + _14;
  _16 = _15->eTriggerSource;
  if (_16 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _17 = Adc_pCfgPtr[u32CoreId_61(D)];
  _18 = _17->pGroups;
  _19 = (unsigned int) GroupIndex_63;
  _20 = _19 * 68;
  _21 = _18 + _20;
  _22 = _21->eMode;
  if (_22 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _23 = Adc_pCfgPtr[u32CoreId_61(D)];
  _24 = _23->pGroups;
  _25 = (unsigned int) GroupIndex_63;
  _26 = _25 * 68;
  _27 = _24 + _26;
  _28 = _27->eMode;
  if (_28 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _29 = Adc_pCfgPtr[u32CoreId_61(D)];
  _30 = _29->pGroups;
  _31 = (unsigned int) GroupIndex_63;
  _32 = _31 * 68;
  _33 = _30 + _32;
  _34 = _33->eAccessMode;
  if (_34 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _35 = Adc_pCfgPtr[u32CoreId_61(D)];
  _36 = _35->pGroups;
  _37 = (unsigned int) GroupIndex_63;
  _38 = _37 * 68;
  _39 = _36 + _38;
  _40 = _39->eBufferMode;
  if (_40 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _41 = (int) Group_62(D);
  Adc_aGroupStatus[_41].eConversion ={v} 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _42 = (int) Group_62(D);
  Adc_aGroupStatus[_42].eConversion ={v} 1;

  <bb 12> :
  goto <bb 17>; [INV]

  <bb 13> :
  _43 = Adc_pCfgPtr[u32CoreId_61(D)];
  _44 = _43->pGroups;
  _45 = (unsigned int) GroupIndex_63;
  _46 = _45 * 68;
  _47 = _44 + _46;
  _48 = _47->eAccessMode;
  if (_48 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _49 = Adc_pCfgPtr[u32CoreId_61(D)];
  _50 = _49->pGroups;
  _51 = (unsigned int) GroupIndex_63;
  _52 = _51 * 68;
  _53 = _50 + _52;
  _54 = _53->eBufferMode;
  if (_54 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _55 = (int) Group_62(D);
  Adc_aGroupStatus[_55].eConversion ={v} 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _56 = (int) Group_62(D);
  Adc_aGroupStatus[_56].eConversion ={v} 1;

  <bb 17> :

  <bb 18> :
  return;

}


Adc_UpdateSwQueueIndexNoInt (const Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_QueueIndexType NumOfSwNormalQueue;
  Adc_QueueIndexType SwNormalQueueIndex;
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_GroupConfigurationType * _10;
  int _11;
  short unsigned int _12;
  int _13;
  int _14;
  int _15;
  short unsigned int _16;
  short unsigned int SwNormalQueueIndex.45_17;
  int _18;
  short unsigned int _19;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_24(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_25(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_26 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_24(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_26;
  _9 = _8 * 68;
  _10 = _7 + _9;
  LogicalHwUnitId_27 = _10->AdcLogicalUnitId;
  _11 = (int) LogicalHwUnitId_27;
  _12 ={v} Adc_aUnitStatus[_11].SwNormalQueueIndex;
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _13 = (int) LogicalHwUnitId_27;
  NumOfSwNormalQueue_28 ={v} Adc_aUnitStatus[_13].SwNormalQueueIndex;
  SwNormalQueueIndex_29 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _14 = (int) LogicalHwUnitId_27;
  _15 = (int) SwNormalQueueIndex_20;
  _16 ={v} Adc_aUnitStatus[_14].SwNormalQueue[_15];
  if (Group_25(D) == _16)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_RemoveFromQueue (LogicalHwUnitId_27, SwNormalQueueIndex_20);
  goto <bb 8>; [INV]

  <bb 6> :
  SwNormalQueueIndex.45_17 = SwNormalQueueIndex_20;
  SwNormalQueueIndex_30 = SwNormalQueueIndex.45_17 + 1;

  <bb 7> :
  # SwNormalQueueIndex_20 = PHI <SwNormalQueueIndex_29(3), SwNormalQueueIndex_30(6)>
  if (SwNormalQueueIndex_20 < NumOfSwNormalQueue_28)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (SwNormalQueueIndex_20 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _18 = (int) LogicalHwUnitId_27;
  _19 ={v} Adc_aUnitStatus[_18].SwNormalQueueIndex;
  if (_19 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_Ipw_StartNormalConversion (LogicalHwUnitId_27, u32CoreId_24(D));

  <bb 11> :
  return;

}


Adc_UpdateStatusReadGroupNoInt (const Adc_GroupType Group, const boolean bFlag, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  <unnamed type> _12;
  int _13;
  const struct Adc_ConfigType * _14;
  const struct Adc_GroupConfigurationType * _15;
  unsigned int _16;
  unsigned int _17;
  const struct Adc_GroupConfigurationType * _18;
  <unnamed type> _19;
  int _20;
  const struct Adc_ConfigType * _21;
  const struct Adc_GroupConfigurationType * _22;
  unsigned int _23;
  unsigned int _24;
  const struct Adc_GroupConfigurationType * _25;
  <unnamed type> _26;
  int _27;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_30(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_31(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_32 = *_5;
  _6 = (int) Group_31(D);
  Adc_aGroupStatus[_6].eAlreadyConverted ={v} 1;
  if (bFlag_34(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _7 = Adc_pCfgPtr[u32CoreId_30(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_32;
  _10 = _9 * 68;
  _11 = _8 + _10;
  _12 = _11->eMode;
  if (_12 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _13 = (int) Group_31(D);
  Adc_aGroupStatus[_13].eConversion ={v} 1;
  goto <bb 9>; [INV]

  <bb 5> :
  _14 = Adc_pCfgPtr[u32CoreId_30(D)];
  _15 = _14->pGroups;
  _16 = (unsigned int) GroupIndex_32;
  _17 = _16 * 68;
  _18 = _15 + _17;
  _19 = _18->eTriggerSource;
  if (_19 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _20 = (int) Group_31(D);
  Adc_aGroupStatus[_20].eConversion ={v} 0;
  Adc_UpdateSwQueueIndexNoInt (Group_31(D), u32CoreId_30(D));
  goto <bb 9>; [INV]

  <bb 7> :
  _21 = Adc_pCfgPtr[u32CoreId_30(D)];
  _22 = _21->pGroups;
  _23 = (unsigned int) GroupIndex_32;
  _24 = _23 * 68;
  _25 = _22 + _24;
  _26 = _25->eMode;
  if (_26 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _27 = (int) Group_31(D);
  Adc_aGroupStatus[_27].eConversion ={v} 1;

  <bb 9> :
  return;

}


Adc_UpdateStatusReadGroup (const Adc_GroupType Group, const boolean bFlag, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_GroupConfigurationType * _10;
  unsigned char _11;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_14(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_15(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_16 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_14(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_16;
  _9 = _8 * 68;
  _10 = _7 + _9;
  _11 = _10->u8AdcWithoutInterrupt;
  if (_11 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_UpdateStatusReadGroupNoInt (Group_15(D), bFlag_18(D), u32CoreId_14(D));
  goto <bb 5>; [INV]

  <bb 4> :
  Adc_UpdateStatusReadGroupInt (Group_15(D), u32CoreId_14(D));

  <bb 5> :
  return;

}


Adc_UpdateStatusStopConversion (Adc_GroupType Group, Adc_HwUnitType Unit, uint32 u32CoreId)
{
  Adc_StatusType eConversion;
  Adc_StreamBufferModeType eBufferMode;
  Adc_GroupAccessModeType eAccessMode;
  Adc_GroupConvModeType eMode;
  Std_ReturnType TimeOutStatus;
  Adc_QueueIndexType RemovedPos;
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  const struct Adc_ConfigType * _17;
  const struct Adc_GroupConfigurationType * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Adc_GroupConfigurationType * _21;
  int _22;
  int _23;
  int _24;
  int _25;
  int _26;
  int _27;
  short unsigned int RemovedPos.37_28;
  int _29;
  short unsigned int _30;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_34(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_35(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_36 = *_5;
  RemovedPos = 0;
  TimeOutStatus_38 = 0;
  _6 = (int) Group_35(D);
  Adc_aGroupStatus[_6].bLimitCheckFailed ={v} 0;
  _7 = Adc_pCfgPtr[u32CoreId_34(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_36;
  _10 = _9 * 68;
  _11 = _8 + _10;
  eMode_40 = _11->eMode;
  _12 = Adc_pCfgPtr[u32CoreId_34(D)];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_36;
  _15 = _14 * 68;
  _16 = _13 + _15;
  eAccessMode_41 = _16->eAccessMode;
  _17 = Adc_pCfgPtr[u32CoreId_34(D)];
  _18 = _17->pGroups;
  _19 = (unsigned int) GroupIndex_36;
  _20 = _19 * 68;
  _21 = _18 + _20;
  eBufferMode_42 = _21->eBufferMode;
  _22 = (int) Group_35(D);
  eConversion_43 ={v} Adc_aGroupStatus[_22].eConversion;
  _23 = (int) Group_35(D);
  Adc_aGroupStatus[_23].ResultIndex ={v} 0;
  _24 = (int) Group_35(D);
  Adc_aGroupStatus[_24].eNotification = 0;
  _25 = (int) Group_35(D);
  Adc_aRuntimeGroupChannel[_25].u32Mask = 4294967295;
  if (eMode_40 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (eAccessMode_41 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (eBufferMode_42 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (eConversion_43 == 3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _26 = (int) Group_35(D);
  Adc_aGroupStatus[_26].eConversion ={v} 0;
  goto <bb 12>; [INV]

  <bb 7> :
  TimeOutStatus_50 = Adc_StopSwGroupConversion (&RemovedPos, Group_35(D), Unit_48(D), u32CoreId_34(D));
  _27 = (int) Group_35(D);
  Adc_aGroupStatus[_27].eConversion ={v} 0;
  RemovedPos.37_28 = RemovedPos;
  if (RemovedPos.37_28 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _29 = (int) Unit_48(D);
  _30 ={v} Adc_aUnitStatus[_29].SwNormalQueueIndex;
  if (_30 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Adc_Ipw_StartNormalConversion (Unit_48(D), u32CoreId_34(D));

  <bb 10> :
  if (TimeOutStatus_50 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_ReportDetRuntimeError (3, 43);

  <bb 12> :
  RemovedPos ={v} {CLOBBER};
  return;

}


Adc_StopSwGroupConversion (Adc_QueueIndexType * RemovedPos, Adc_GroupType Group, Adc_HwUnitType Unit, uint32 u32CoreId)
{
  Adc_QueueIndexType NumOfSwNormalQueue;
  Adc_QueueIndexType SwNormalQueueIndex;
  Std_ReturnType TimeOutStatus;
  Std_ReturnType D.7329;
  int _1;
  short unsigned int _2;
  int _3;
  int _4;
  int _5;
  short unsigned int _6;
  short unsigned int SwNormalQueueIndex.38_7;
  Std_ReturnType _22;

  <bb 2> :
  TimeOutStatus_15 = 0;
  _1 = (int) Unit_16(D);
  _2 ={v} Adc_aUnitStatus[_1].SwNormalQueueIndex;
  *RemovedPos_18(D) = _2;
  _3 = (int) Unit_16(D);
  NumOfSwNormalQueue_20 ={v} Adc_aUnitStatus[_3].SwNormalQueueIndex;
  SwNormalQueueIndex_21 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _4 = (int) Unit_16(D);
  _5 = (int) SwNormalQueueIndex_11;
  _6 ={v} Adc_aUnitStatus[_4].SwNormalQueue[_5];
  if (Group_23(D) == _6)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  *RemovedPos_18(D) = SwNormalQueueIndex_11;
  if (SwNormalQueueIndex_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  TimeOutStatus_27 = Adc_Ipw_StopCurrentConversion (Unit_16(D), Group_23(D), u32CoreId_25(D));

  <bb 6> :
  # TimeOutStatus_8 = PHI <TimeOutStatus_10(4), TimeOutStatus_27(5)>
  Adc_RemoveFromQueue (Unit_16(D), SwNormalQueueIndex_11);

  <bb 7> :
  # TimeOutStatus_9 = PHI <TimeOutStatus_10(3), TimeOutStatus_8(6)>
  SwNormalQueueIndex.38_7 = SwNormalQueueIndex_11;
  SwNormalQueueIndex_29 = SwNormalQueueIndex.38_7 + 1;

  <bb 8> :
  # TimeOutStatus_10 = PHI <TimeOutStatus_15(2), TimeOutStatus_9(7)>
  # SwNormalQueueIndex_11 = PHI <SwNormalQueueIndex_21(2), SwNormalQueueIndex_29(7)>
  if (SwNormalQueueIndex_11 < NumOfSwNormalQueue_20)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _22 = TimeOutStatus_10;

  <bb 10> :
<L7>:
  return _22;

}


Adc_UpdateStatusStartConversion (const Adc_GroupType Group, const Adc_HwUnitType Unit, uint32 u32CoreId)
{
  Std_ReturnType TimeOutStatus;
  Adc_QueueIndexType SwNormalQueueIndex;
  Adc_QueueIndexType qPtr;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  int _10;
  int _11;
  short unsigned int _12;
  int _13;
  short unsigned int _14;
  int _15;
  int _16;
  short unsigned int _17;
  short unsigned int _18;
  short unsigned int _19;

  <bb 2> :
  qPtr_23 = 0;
  TimeOutStatus_24 = 0;
  _1 = (int) Group_25(D);
  Adc_aGroupStatus[_1].eConversion ={v} 1;
  _2 = (int) Group_25(D);
  Adc_aGroupStatus[_2].ResultIndex ={v} 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01 ();
  _3 = (int) Unit_30(D);
  qPtr_31 ={v} Adc_aUnitStatus[_3].SwNormalQueueIndex;
  if (qPtr_31 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) Unit_30(D);
  _5 = (int) qPtr_31;
  Adc_aUnitStatus[_4].SwNormalQueue[_5] ={v} Group_25(D);
  _6 = (int) Unit_30(D);
  _7 ={v} Adc_aUnitStatus[_6].SwNormalQueueIndex;
  _8 = _7;
  _9 = _8 + 1;
  Adc_aUnitStatus[_6].SwNormalQueueIndex ={v} _9;

  <bb 4> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01 ();
  _10 = (int) Unit_30(D);
  SwNormalQueueIndex_36 ={v} Adc_aUnitStatus[_10].SwNormalQueueIndex;
  _11 = (int) Unit_30(D);
  _12 ={v} Adc_aUnitStatus[_11].SwNormalQueue[0];
  if (Group_25(D) == _12)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (SwNormalQueueIndex_36 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _13 = (int) Unit_30(D);
  _14 ={v} Adc_aUnitStatus[_13].SwNormalQueueIndex;
  if (_14 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _15 = (int) Unit_30(D);
  Adc_aUnitStatus[_15].SwNormalQueue[0] ={v} Group_25(D);
  _16 = (int) Unit_30(D);
  _17 ={v} Adc_aUnitStatus[_16].SwNormalQueueIndex;
  _18 = _17;
  _19 = _18 + 1;
  Adc_aUnitStatus[_16].SwNormalQueueIndex ={v} _19;

  <bb 8> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();
  Adc_Ipw_StartNormalConversion (Unit_30(D), u32CoreId_41(D));
  goto <bb 10>; [INV]

  <bb 9> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();

  <bb 10> :
  return;

}


Adc_RemoveFromQueue (const Adc_HwUnitType Unit, const Adc_QueueIndexType CurQueueIndex)
{
  Adc_QueueIndexType CurrentIndex;
  Adc_QueueIndexType PositionIndex;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  unsigned int _6;
  unsigned int _7;
  short unsigned int _8;
  short unsigned int PositionIndex.0_9;
  int _10;
  short unsigned int _11;
  short unsigned int _12;
  short unsigned int _13;

  <bb 2> :
  PositionIndex_17 = 0;
  CurrentIndex_18 = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00 ();
  _1 = (int) Unit_21(D);
  CurrentIndex_22 ={v} Adc_aUnitStatus[_1].SwNormalQueueIndex;
  if (CurrentIndex_22 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (int) Unit_21(D);
  Adc_aUnitStatus[_2].SwNormalQueueIndex ={v} 0;
  goto <bb 8>; [INV]

  <bb 4> :
  PositionIndex_24 = CurQueueIndex_23(D) + 1;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = (int) Unit_21(D);
  _4 = (int) PositionIndex_14;
  _5 = (int) Unit_21(D);
  _6 = (unsigned int) PositionIndex_14;
  _7 = _6 + 4294967295;
  _8 ={v} Adc_aUnitStatus[_3].SwNormalQueue[_4];
  Adc_aUnitStatus[_5].SwNormalQueue[_7] ={v} _8;
  PositionIndex.0_9 = PositionIndex_14;
  PositionIndex_27 = PositionIndex.0_9 + 1;

  <bb 6> :
  # PositionIndex_14 = PHI <PositionIndex_24(4), PositionIndex_27(5)>
  if (PositionIndex_14 < CurrentIndex_22)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = (int) Unit_21(D);
  _11 ={v} Adc_aUnitStatus[_10].SwNormalQueueIndex;
  _12 = _11;
  _13 = _12 + 65535;
  Adc_aUnitStatus[_10].SwNormalQueueIndex ={v} _13;

  <bb 8> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00 ();
  return;

}


Adc_CheckCurrentCoreId (const struct Adc_ConfigType * pCfgPtr, uint32 u32CoreId)
{
  Std_ReturnType ValidCoreId;
  uint8 Index;
  Std_ReturnType D.7147;
  long unsigned int _1;
  const uint8 * _2;
  sizetype _3;
  const uint8 * _4;
  unsigned char _5;
  long unsigned int _6;
  unsigned char Index.8_7;
  unsigned char _8;
  Std_ReturnType _19;

  <bb 2> :
  Index_11 = 0;
  ValidCoreId_12 = 1;
  _1 = pCfgPtr_14(D)->u32CoreId;
  if (u32CoreId_15(D) == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Index_16 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _2 = pCfgPtr_14(D)->pAssignmentPartition;
  _3 = (sizetype) Index_9;
  _4 = _2 + _3;
  _5 = *_4;
  _6 = (long unsigned int) _5;
  if (u32CoreId_15(D) == _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ValidCoreId_18 = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  Index.8_7 = Index_9;
  Index_17 = Index.8_7 + 1;

  <bb 7> :
  # Index_9 = PHI <Index_16(3), Index_17(6)>
  _8 = pCfgPtr_14(D)->AssignedPartitionCount;
  if (Index_9 < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ValidCoreId_10 = PHI <ValidCoreId_12(2), ValidCoreId_18(5), ValidCoreId_12(7)>
  _19 = ValidCoreId_10;

  <bb 9> :
<L7>:
  return _19;

}


Adc_InitUnitStatus (uint32 u32CoreId)
{
  Adc_QueueIndexType QueueIdx;
  Adc_HwUnitType LogicalHwUnitId;
  const struct Adc_ConfigType * _1;
  const struct Adc_Ipw_Config * _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  short unsigned int QueueIdx.9_8;
  int _9;
  int _10;
  unsigned char LogicalHwUnitId.10_11;

  <bb 2> :
  LogicalHwUnitId_17 = 0;
  QueueIdx_18 = 0;
  LogicalHwUnitId_19 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId_21(D)];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId_12;
  _4 = _2->Mapping.au8Adc_HwUnit[_3];
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _5 = (int) LogicalHwUnitId_12;
  Adc_aUnitStatus[_5].SwNormalQueueIndex ={v} 0;
  QueueIdx_23 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _6 = (int) LogicalHwUnitId_12;
  _7 = (int) QueueIdx_13;
  Adc_aUnitStatus[_6].SwNormalQueue[_7] ={v} 0;
  QueueIdx.9_8 = QueueIdx_13;
  QueueIdx_27 = QueueIdx.9_8 + 1;

  <bb 6> :
  # QueueIdx_13 = PHI <QueueIdx_23(4), QueueIdx_27(5)>
  if (QueueIdx_13 <= 9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = (int) LogicalHwUnitId_12;
  Adc_aUnitStatus[_9].OngoingHwGroup ={v} 65535;
  _10 = (int) LogicalHwUnitId_12;
  Adc_aUnitStatus[_10].u8Sc1Used = 0;

  <bb 8> :
  LogicalHwUnitId.10_11 = LogicalHwUnitId_12;
  LogicalHwUnitId_28 = LogicalHwUnitId.10_11 + 1;

  <bb 9> :
  # LogicalHwUnitId_12 = PHI <LogicalHwUnitId_19(2), LogicalHwUnitId_28(8)>
  if (LogicalHwUnitId_12 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Adc_InitGroupsStatus (uint32 u32CoreId)
{
  Adc_GroupType GroupId;
  Adc_GroupType u16GroupCnt;
  const struct Adc_ConfigType * _1;
  const struct Adc_GroupConfigurationType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Adc_GroupConfigurationType * _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int _12;
  const struct Adc_ConfigType * _13;
  const struct Adc_GroupConfigurationType * _14;
  unsigned int _15;
  unsigned int _16;
  const struct Adc_GroupConfigurationType * _17;
  int _18;
  const Adc_GroupDefType * _19;
  const struct Adc_ConfigType * _20;
  const struct Adc_GroupConfigurationType * _21;
  unsigned int _22;
  unsigned int _23;
  const struct Adc_GroupConfigurationType * _24;
  int _25;
  unsigned char _26;
  int _27;
  int _28;
  const struct Adc_ConfigType * _29;
  const struct Adc_GroupConfigurationType * _30;
  unsigned int _31;
  unsigned int _32;
  const struct Adc_GroupConfigurationType * _33;
  const struct Adc_Ipw_GroupConfig * _34;
  int _35;
  const uint16 * _36;
  int _37;
  short unsigned int u16GroupCnt.11_38;
  const struct Adc_ConfigType * _39;
  short unsigned int _40;

  <bb 2> :
  u16GroupCnt_43 = 0;
  GroupId_44 = 0;
  u16GroupCnt_45 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId_47(D)];
  _2 = _1->pGroups;
  _3 = (unsigned int) u16GroupCnt_41;
  _4 = _3 * 68;
  _5 = _2 + _4;
  GroupId_48 = _5->GroupId;
  _6 = (int) GroupId_48;
  Adc_aGroupStatus[_6].eConversion ={v} 0;
  _7 = (int) GroupId_48;
  Adc_aGroupStatus[_7].eAlreadyConverted ={v} 0;
  _8 = (int) GroupId_48;
  Adc_aGroupStatus[_8].ResultIndex ={v} 0;
  _9 = (int) GroupId_48;
  Adc_aGroupStatus[_9].CurrentChannel = 0;
  _10 = (int) GroupId_48;
  Adc_aGroupStatus[_10].bLimitCheckFailed ={v} 0;
  _11 = (int) GroupId_48;
  Adc_aGroupStatus[_11].eHwTriggering = 0;
  _12 = (int) GroupId_48;
  Adc_aGroupStatus[_12].eNotification = 0;
  _13 = Adc_pCfgPtr[u32CoreId_47(D)];
  _14 = _13->pGroups;
  _15 = (unsigned int) u16GroupCnt_41;
  _16 = _15 * 68;
  _17 = _14 + _16;
  _18 = (int) GroupId_48;
  _19 = _17->pAssignment;
  Adc_aRuntimeGroupChannel[_18].pChannel = _19;
  _20 = Adc_pCfgPtr[u32CoreId_47(D)];
  _21 = _20->pGroups;
  _22 = (unsigned int) u16GroupCnt_41;
  _23 = _22 * 68;
  _24 = _21 + _23;
  _25 = (int) GroupId_48;
  _26 = _24->AssignedChannelCount;
  Adc_aRuntimeGroupChannel[_25].ChannelCount = _26;
  _27 = (int) GroupId_48;
  Adc_aRuntimeGroupChannel[_27].bRuntimeUpdated = 0;
  _28 = (int) GroupId_48;
  Adc_aRuntimeGroupChannel[_28].bAdcRuntimeGroupLimitcheck = 0;
  _29 = Adc_pCfgPtr[u32CoreId_47(D)];
  _30 = _29->pGroups;
  _31 = (unsigned int) u16GroupCnt_41;
  _32 = _31 * 68;
  _33 = _30 + _32;
  _34 = _33->pAdcIpwGroupConfig;
  _35 = (int) GroupId_48;
  _36 = _34->pDelay;
  Adc_aRuntimeGroupChannel[_35].pu16Delays = _36;
  _37 = (int) GroupId_48;
  Adc_aRuntimeGroupChannel[_37].u32Mask = 4294967295;
  u16GroupCnt.11_38 = u16GroupCnt_41;
  u16GroupCnt_62 = u16GroupCnt.11_38 + 1;

  <bb 4> :
  # u16GroupCnt_41 = PHI <u16GroupCnt_45(2), u16GroupCnt_62(3)>
  _39 = Adc_pCfgPtr[u32CoreId_47(D)];
  _40 = _39->GroupCount;
  if (u16GroupCnt_41 < _40)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Adc_NotifyCapablity (uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  unsigned int D.7418;
  unsigned int D.7417;
  Std_ReturnType ValidCapability;
  Adc_GroupType GroupIndex;
  Std_ReturnType D.7415;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  void (*<T56f>) (void) _12;
  unsigned int _23;
  unsigned int _24;
  Std_ReturnType _27;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_18(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_19(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_20 = *_5;
  ValidCapability_21 = 0;
  _6 = (int) u8ServiceId_22(D);
  _23 = (unsigned int) _6;
  _24 = _23 + 4294967289;
  if (_24 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
<L0>:
  _7 = Adc_pCfgPtr[u32CoreId_18(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_20;
  _10 = _9 * 68;
  _11 = _8 + _10;
  _12 = _11->Notification;
  if (_12 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ValidCapability_25 = 1;
  Adc_ReportDetError (u8ServiceId_22(D), 24);

  <bb 5> :
  # ValidCapability_13 = PHI <ValidCapability_21(3), ValidCapability_25(4)>
  goto <bb 7>; [INV]

  <bb 6> :
<L4>:

  <bb 7> :
  # ValidCapability_14 = PHI <ValidCapability_13(5), ValidCapability_21(6)>
  _27 = ValidCapability_14;

  <bb 8> :
<L6>:
  return _27;

}


Adc_ValidateCallAndUnit (uint8 u8ServiceId, Adc_HwUnitType Unit, uint32 u32CoreId)
{
  Std_ReturnType ValidCoreId;
  Std_ReturnType ValidCallAndUnit;
  Std_ReturnType D.7487;
  const struct Adc_ConfigType * _1;
  const struct Adc_ConfigType * _2;
  const struct Adc_ConfigType * _3;
  const struct Adc_Ipw_Config * _4;
  int _5;
  unsigned char _6;
  Std_ReturnType _21;

  <bb 2> :
  ValidCallAndUnit_9 = 1;
  _1 = Adc_pCfgPtr[u32CoreId_11(D)];
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (u8ServiceId_15(D), 10);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Unit_12(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetError (u8ServiceId_15(D), 38);
  goto <bb 11>; [INV]

  <bb 6> :
  _2 = Adc_pCfgPtr[u32CoreId_11(D)];
  ValidCoreId_14 = Adc_CheckCurrentCoreId (_2, u32CoreId_11(D));
  if (ValidCoreId_14 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _3 = Adc_pCfgPtr[u32CoreId_11(D)];
  _4 = _3->pAdcIpwConfig;
  _5 = (int) Unit_12(D);
  _6 = _4->Mapping.au8Adc_HwUnit[_5];
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  ValidCallAndUnit_18 = 0;
  goto <bb 11>; [INV]

  <bb 9> :
  Adc_ReportDetError (u8ServiceId_15(D), 14);
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetError (u8ServiceId_15(D), 14);

  <bb 11> :
  # ValidCallAndUnit_7 = PHI <ValidCallAndUnit_9(3), ValidCallAndUnit_9(5), ValidCallAndUnit_9(9), ValidCallAndUnit_9(10), ValidCallAndUnit_18(8)>
  _21 = ValidCallAndUnit_7;

  <bb 12> :
<L12>:
  return _21;

}


Adc_ValidateCallAndGroup (uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  Std_ReturnType ValidCoreId;
  Std_ReturnType ValidCallAndGroup;
  Std_ReturnType D.7176;
  const struct Adc_ConfigType * _1;
  const struct Adc_ConfigType * _2;
  const struct Adc_ConfigType * _3;
  const uint16 * _4;
  unsigned int _5;
  unsigned int _6;
  const uint16 * _7;
  const struct Adc_ConfigType * _8;
  const struct Adc_GroupConfigurationType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Adc_GroupConfigurationType * _12;
  short unsigned int _13;
  Std_ReturnType _31;

  <bb 2> :
  ValidCallAndGroup_16 = 1;
  ValidCoreId_17 = 1;
  GroupIndex_18 = 0;
  _1 = Adc_pCfgPtr[u32CoreId_20(D)];
  if (_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (u8ServiceId_23(D), 10);
  goto <bb 11>; [INV]

  <bb 4> :
  _2 = Adc_pCfgPtr[u32CoreId_20(D)];
  ValidCoreId_22 = Adc_CheckCurrentCoreId (_2, u32CoreId_20(D));
  if (ValidCoreId_22 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  if (Group_25(D) > 6)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetError (u8ServiceId_23(D), 21);
  goto <bb 11>; [INV]

  <bb 7> :
  _3 = Adc_pCfgPtr[u32CoreId_20(D)];
  _4 = _3->pGroupIdToIndexMap;
  _5 = (unsigned int) Group_25(D);
  _6 = _5 * 2;
  _7 = _4 + _6;
  GroupIndex_26 = *_7;
  _8 = Adc_pCfgPtr[u32CoreId_20(D)];
  _9 = _8->pGroups;
  _10 = (unsigned int) GroupIndex_26;
  _11 = _10 * 68;
  _12 = _9 + _11;
  _13 = _12->GroupId;
  if (Group_25(D) != _13)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetError (u8ServiceId_23(D), 14);
  goto <bb 11>; [INV]

  <bb 9> :
  ValidCallAndGroup_27 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetError (u8ServiceId_23(D), 14);

  <bb 11> :
  # ValidCallAndGroup_14 = PHI <ValidCallAndGroup_16(3), ValidCallAndGroup_16(8), ValidCallAndGroup_16(10), ValidCallAndGroup_16(6), ValidCallAndGroup_27(9)>
  _31 = ValidCallAndGroup_14;

  <bb 12> :
<L12>:
  return _31;

}


Adc_ValidateStateNotIdle (uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.7311;
  int _1;
  int _2;
  <unnamed type> _3;
  int _4;
  <unnamed type> _5;
  int _6;
  <unnamed type> _7;
  int _8;
  <unnamed type> _9;
  int _10;
  <unnamed type> _11;
  Std_ReturnType _34;

  <bb 2> :
  ValidState_22 = 0;
  _1 = (int) u8ServiceId_23(D);
  switch (_1) <default: <L15> [INV], case 3: <L5> [INV], case 4: <L0> [INV], case 6: <L9> [INV], case 11: <L12> [INV]>

  <bb 3> :
<L0>:
  _2 = (int) Group_24(D);
  _3 ={v} Adc_aGroupStatus[_2].eConversion;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = (int) Group_24(D);
  _5 ={v} Adc_aGroupStatus[_4].eAlreadyConverted;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetRuntimeError (u8ServiceId_23(D), 12);
  ValidState_31 = 1;

  <bb 6> :
  # ValidState_12 = PHI <ValidState_22(3), ValidState_22(4), ValidState_31(5)>
  goto <bb 17>; [INV]

  <bb 7> :
<L5>:
  _6 = (int) Group_24(D);
  _7 ={v} Adc_aGroupStatus[_6].eConversion;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetRuntimeError (u8ServiceId_23(D), 12);
  ValidState_33 = 1;

  <bb 9> :
  # ValidState_13 = PHI <ValidState_22(7), ValidState_33(8)>
  goto <bb 17>; [INV]

  <bb 10> :
<L9>:
  _8 = (int) Group_24(D);
  _9 = Adc_aGroupStatus[_8].eHwTriggering;
  if (_9 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_ReportDetRuntimeError (u8ServiceId_23(D), 12);
  ValidState_29 = 1;

  <bb 12> :
  # ValidState_14 = PHI <ValidState_22(10), ValidState_29(11)>
  goto <bb 17>; [INV]

  <bb 13> :
<L12>:
  _10 = (int) Group_24(D);
  _11 ={v} Adc_aGroupStatus[_10].eConversion;
  if (_11 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Adc_ReportDetRuntimeError (u8ServiceId_23(D), 12);
  ValidState_27 = 1;

  <bb 15> :
  # ValidState_15 = PHI <ValidState_22(13), ValidState_27(14)>
  goto <bb 17>; [INV]

  <bb 16> :
<L15>:

  <bb 17> :
  # ValidState_16 = PHI <ValidState_12(6), ValidState_13(9), ValidState_14(12), ValidState_15(15), ValidState_22(16)>
  _34 = ValidState_16;

  <bb 18> :
<L17>:
  return _34;

}


Adc_ValidateStateEnableHwTriggNotBusy (Adc_GroupType Group, uint32 u32CoreId)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.7391;
  Std_ReturnType _7;

  <bb 2> :
  ValidState_1 = 1;
  ValidState_6 = Adc_ValidateNotBusyEnableHwTrig (5, Group_3(D), u32CoreId_4(D));
  _7 = ValidState_6;

  <bb 3> :
<L0>:
  return _7;

}


Adc_ValidateStateStartGroupConvNotBusy (Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupConvType eTypeHwGroup;
  Adc_GroupType HwGroupId;
  Adc_GroupType OngoingHwGroupId;
  Adc_GroupConvType eTypeSwGroup;
  Adc_HwUnitType LogicalHwUnitId;
  boolean bImplicitly;
  Std_ReturnType ValidState;
  Adc_GroupType GroupIndex;
  Std_ReturnType D.7240;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_GroupConfigurationType * _10;
  <unnamed type> _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  <unnamed type> _17;
  const struct Adc_ConfigType * _18;
  const struct Adc_GroupConfigurationType * _19;
  unsigned int _20;
  unsigned int _21;
  const struct Adc_GroupConfigurationType * _22;
  <unnamed type> _23;
  const struct Adc_ConfigType * _24;
  const struct Adc_GroupConfigurationType * _25;
  unsigned int _26;
  unsigned int _27;
  const struct Adc_GroupConfigurationType * _28;
  <unnamed type> _29;
  const struct Adc_ConfigType * _30;
  const struct Adc_GroupConfigurationType * _31;
  unsigned int _32;
  unsigned int _33;
  const struct Adc_GroupConfigurationType * _34;
  int _35;
  const struct Adc_ConfigType * _36;
  const struct Adc_GroupConfigurationType * _37;
  unsigned int _38;
  unsigned int _39;
  const struct Adc_GroupConfigurationType * _40;
  const struct Adc_ConfigType * _41;
  const uint16 * _42;
  unsigned int _43;
  unsigned int _44;
  const uint16 * _45;
  const struct Adc_ConfigType * _46;
  const struct Adc_GroupConfigurationType * _47;
  unsigned int _48;
  unsigned int _49;
  const struct Adc_GroupConfigurationType * _50;
  Std_ReturnType _72;

  <bb 2> :
  ValidState_55 = 0;
  bImplicitly_56 = 0;
  LogicalHwUnitId_57 = 0;
  _1 = Adc_pCfgPtr[u32CoreId_59(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_60(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_61 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_59(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_61;
  _9 = _8 * 68;
  _10 = _7 + _9;
  _11 = _10->eMode;
  if (_11 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _12 = Adc_pCfgPtr[u32CoreId_59(D)];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_61;
  _15 = _14 * 68;
  _16 = _13 + _15;
  _17 = _16->eMode;
  if (_17 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _18 = Adc_pCfgPtr[u32CoreId_59(D)];
  _19 = _18->pGroups;
  _20 = (unsigned int) GroupIndex_61;
  _21 = _20 * 68;
  _22 = _19 + _21;
  _23 = _22->eAccessMode;
  if (_23 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _24 = Adc_pCfgPtr[u32CoreId_59(D)];
  _25 = _24->pGroups;
  _26 = (unsigned int) GroupIndex_61;
  _27 = _26 * 68;
  _28 = _25 + _27;
  _29 = _28->eBufferMode;
  if (_29 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  bImplicitly_62 = 1;

  <bb 7> :
  # bImplicitly_53 = PHI <bImplicitly_56(3), bImplicitly_56(4), bImplicitly_56(5), bImplicitly_62(6)>
  _30 = Adc_pCfgPtr[u32CoreId_59(D)];
  _31 = _30->pGroups;
  _32 = (unsigned int) GroupIndex_61;
  _33 = _32 * 68;
  _34 = _31 + _33;
  LogicalHwUnitId_63 = _34->AdcLogicalUnitId;
  _35 = (int) LogicalHwUnitId_63;
  OngoingHwGroupId_64 ={v} Adc_aUnitStatus[_35].OngoingHwGroup;
  if (OngoingHwGroupId_64 != 65535)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 8> :
  _36 = Adc_pCfgPtr[u32CoreId_59(D)];
  _37 = _36->pGroups;
  _38 = (unsigned int) GroupIndex_61;
  _39 = _38 * 68;
  _40 = _37 + _39;
  eTypeSwGroup_65 = _40->eType;
  _41 = Adc_pCfgPtr[u32CoreId_59(D)];
  _42 = _41->pGroupIdToIndexMap;
  _43 = (unsigned int) OngoingHwGroupId_64;
  _44 = _43 * 2;
  _45 = _42 + _44;
  HwGroupId_66 = *_45;
  _46 = Adc_pCfgPtr[u32CoreId_59(D)];
  _47 = _46->pGroups;
  _48 = (unsigned int) HwGroupId_66;
  _49 = _48 * 68;
  _50 = _47 + _49;
  eTypeHwGroup_67 = _50->eType;
  if (eTypeSwGroup_65 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  if (eTypeHwGroup_67 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (eTypeSwGroup_65 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  if (eTypeHwGroup_67 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  ValidState_68 = 1;

  <bb 13> :
  # ValidState_51 = PHI <ValidState_55(7), ValidState_55(10), ValidState_55(11), ValidState_68(12)>
  if (ValidState_51 == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 16>; [INV]

  <bb 15> :
  ValidState_70 = Adc_ValidateNotBusyNoPrio (Group_60(D), bImplicitly_53, u32CoreId_59(D));

  <bb 16> :
  # ValidState_52 = PHI <ValidState_51(14), ValidState_70(15)>
  _72 = ValidState_52;

  <bb 17> :
<L15>:
  return _72;

}


Adc_ValidateSetupBufferNotBusy (Adc_GroupType Group)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.7185;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _10;

  <bb 2> :
  ValidState_5 = 1;
  _1 = (int) Group_6(D);
  _2 ={v} Adc_aGroupStatus[_1].eConversion;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetRuntimeError (12, 11);
  goto <bb 5>; [INV]

  <bb 4> :
  ValidState_8 = 0;

  <bb 5> :
  # ValidState_3 = PHI <ValidState_5(3), ValidState_8(4)>
  _10 = ValidState_3;

  <bb 6> :
<L3>:
  return _10;

}


Adc_ValidateDeInitNotBusy (uint32 u32CoreId)
{
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType ValidState;
  Std_ReturnType ErrorFound;
  Std_ReturnType D.7206;
  const struct Adc_ConfigType * _1;
  const struct Adc_Ipw_Config * _2;
  int _3;
  unsigned char _4;
  unsigned char LogicalHwUnitId.23_5;
  unsigned char _6;
  Std_ReturnType _27;

  <bb 2> :
  ErrorFound_16 = 0;
  ValidState_17 = 1;
  LogicalHwUnitId_18 = 0;
  LogicalHwUnitId_19 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId_21(D)];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) LogicalHwUnitId_11;
  _4 = _2->Mapping.au8Adc_HwUnit[_3];
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  ErrorFound_23 = Adc_ValidateNotBusyNoQueue (LogicalHwUnitId_11, 1);
  if (ErrorFound_23 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
  # ErrorFound_7 = PHI <ErrorFound_8(3), ErrorFound_23(4)>
  LogicalHwUnitId.23_5 = LogicalHwUnitId_11;
  LogicalHwUnitId_24 = LogicalHwUnitId.23_5 + 1;

  <bb 7> :
  # ErrorFound_8 = PHI <ErrorFound_16(2), ErrorFound_7(6)>
  # LogicalHwUnitId_11 = PHI <LogicalHwUnitId_19(2), LogicalHwUnitId_24(6)>
  if (LogicalHwUnitId_11 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # ErrorFound_9 = PHI <ErrorFound_23(5), ErrorFound_8(7)>
  if (ErrorFound_9 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _6 = Adc_ValidateCheckGroupNotConversion (1, u32CoreId_21(D));
  if (_6 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  ValidState_26 = 0;

  <bb 11> :
  # ValidState_10 = PHI <ValidState_17(8), ValidState_17(9), ValidState_26(10)>
  _27 = ValidState_10;

  <bb 12> :
<L11>:
  return _27;

}


Adc_ValidateCheckGroupNotConversion (uint8 u8ServiceId, uint32 u32CoreId)
{
  Std_ReturnType ErrorFound;
  Adc_GroupType GroupId;
  Adc_GroupType GroupIter;
  Adc_StatusType eConversion;
  Std_ReturnType D.7217;
  const struct Adc_ConfigType * _1;
  const struct Adc_GroupConfigurationType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Adc_GroupConfigurationType * _5;
  int _6;
  short unsigned int GroupIter.24_7;
  const struct Adc_ConfigType * _8;
  short unsigned int _9;
  Std_ReturnType _19;

  <bb 2> :
  ErrorFound_15 = 0;
  GroupIter_16 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Adc_pCfgPtr[u32CoreId_18(D)];
  _2 = _1->pGroups;
  _3 = (unsigned int) GroupIter_10;
  _4 = _3 * 68;
  _5 = _2 + _4;
  GroupId_20 = _5->GroupId;
  _6 = (int) GroupId_20;
  eConversion_21 ={v} Adc_aGroupStatus[_6].eConversion;
  if (eConversion_21 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (eConversion_21 != 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetRuntimeError (u8ServiceId_22(D), 11);
  ErrorFound_24 = 1;

  <bb 6> :
  # ErrorFound_11 = PHI <ErrorFound_12(3), ErrorFound_12(4), ErrorFound_24(5)>
  GroupIter.24_7 = GroupIter_10;
  GroupIter_25 = GroupIter.24_7 + 1;

  <bb 7> :
  # GroupIter_10 = PHI <GroupIter_16(2), GroupIter_25(6)>
  # ErrorFound_12 = PHI <ErrorFound_15(2), ErrorFound_11(6)>
  _8 = Adc_pCfgPtr[u32CoreId_18(D)];
  _9 = _8->GroupCount;
  if (GroupIter_10 < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _19 = ErrorFound_12;

  <bb 9> :
<L7>:
  return _19;

}


Adc_ValidateNotBusyNoPrio (Adc_GroupType Group, boolean bImplicitly, uint32 u32CoreId)
{
  Adc_StatusType eConversion;
  Std_ReturnType ValidState;
  Std_ReturnType D.7251;
  int _1;
  _Bool _2;
  Std_ReturnType _13;

  <bb 2> :
  ValidState_5 = 1;
  _1 = (int) Group_6(D);
  eConversion_8 ={v} Adc_aGroupStatus[_1].eConversion;
  _2 = ~bImplicitly_9(D);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (eConversion_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 10>; [INV]

  <bb 5> :
  if (bImplicitly_9(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  if (eConversion_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (eConversion_8 != 3)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 10>; [INV]

  <bb 9> :
  ValidState_12 = 0;

  <bb 10> :
  # ValidState_3 = PHI <ValidState_5(4), ValidState_5(8), ValidState_12(9)>
  _13 = ValidState_3;

  <bb 11> :
<L9>:
  return _13;

}


Adc_ValidateNotBusyEnableHwTrig (uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType OngoingHwGroupId;
  Adc_GroupConvType eGroupType;
  Adc_QueueIndexType NoGroupsInSwNormalQueue;
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType ValidState;
  Adc_GroupType GroupIndex;
  Std_ReturnType D.7401;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_GroupConfigurationType * _10;
  int _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  int _17;
  int _18;
  Std_ReturnType _34;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_23(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_24(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_25 = *_5;
  ValidState_26 = 1;
  _6 = Adc_pCfgPtr[u32CoreId_23(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_25;
  _9 = _8 * 68;
  _10 = _7 + _9;
  LogicalHwUnitId_27 = _10->AdcLogicalUnitId;
  _11 = (int) LogicalHwUnitId_27;
  NoGroupsInSwNormalQueue_28 ={v} Adc_aUnitStatus[_11].SwNormalQueueIndex;
  _12 = Adc_pCfgPtr[u32CoreId_23(D)];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_25;
  _15 = _14 * 68;
  _16 = _13 + _15;
  eGroupType_29 = _16->eType;
  _17 = (int) LogicalHwUnitId_27;
  OngoingHwGroupId_30 ={v} Adc_aUnitStatus[_17].OngoingHwGroup;
  _18 = (int) u8ServiceId_31(D);
  if (_18 == 5)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
<L0>:
  if (OngoingHwGroupId_30 == 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (eGroupType_29 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (NoGroupsInSwNormalQueue_28 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  ValidState_32 = 0;

  <bb 7> :
  # ValidState_19 = PHI <ValidState_26(3), ValidState_26(4), ValidState_26(5), ValidState_32(6)>
  goto <bb 9>; [INV]

  <bb 8> :
<L7>:

  <bb 9> :
  # ValidState_20 = PHI <ValidState_19(7), ValidState_26(8)>
  if (ValidState_20 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetRuntimeError (u8ServiceId_31(D), 11);

  <bb 11> :
  _34 = ValidState_20;

  <bb 12> :
<L11>:
  return _34;

}


Adc_ValidateNotBusyNoQueue (Adc_HwUnitType Unit, uint8 u8ServiceId)
{
  Adc_GroupType NoGroupsInSwNormalQueue;
  Adc_GroupType OngoingHwGroupId;
  Std_ReturnType ErrorFound;
  Std_ReturnType D.7211;
  int _1;
  int _2;
  Std_ReturnType _13;

  <bb 2> :
  ErrorFound_5 = 0;
  _1 = (int) Unit_6(D);
  NoGroupsInSwNormalQueue_8 ={v} Adc_aUnitStatus[_1].SwNormalQueueIndex;
  _2 = (int) Unit_6(D);
  OngoingHwGroupId_9 ={v} Adc_aUnitStatus[_2].OngoingHwGroup;
  if (NoGroupsInSwNormalQueue_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (OngoingHwGroupId_9 != 65535)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportDetRuntimeError (u8ServiceId_10(D), 11);
  ErrorFound_12 = 1;

  <bb 5> :
  # ErrorFound_3 = PHI <ErrorFound_5(3), ErrorFound_12(4)>
  _13 = ErrorFound_3;

  <bb 6> :
<L3>:
  return _13;

}


Adc_EndValidateGloballCall (Std_ReturnType ValidCall, uint8 u8ServiceId, uint32 u32CoreId)
{
  <bb 2> :
  if (ValidCall_2(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (u8ServiceId_4(D) == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_eGlobalState[u32CoreId_5(D)] = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  Adc_eGlobalState[u32CoreId_5(D)] = 2;

  <bb 6> :
  return;

}


Adc_ValidateExtraParams (uint8 u8ServiceId, uint32 u32ErrorIdList, Adc_GroupType Group, uint32 u32CoreId)
{
  struct Adc_ValidationResultType ValidationStatus;
  Std_ReturnType D.7269;
  long unsigned int _1;
  _Bool _2;
  _Bool _3;
  long unsigned int _4;
  _Bool _5;
  _Bool _6;
  long unsigned int _7;
  _Bool _8;
  _Bool _9;
  long unsigned int _10;
  _Bool _11;
  _Bool _12;
  Std_ReturnType _28;

  <bb 2> :
  ValidationStatus.bEndValidations = 0;
  ValidationStatus.ValidParams = 0;
  _1 = u32ErrorIdList_20(D) & 1;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = ValidationStatus.bEndValidations;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ValidateBufferUninit (&ValidationStatus, u8ServiceId_21(D), Group_22(D), u32CoreId_23(D));

  <bb 5> :
  _4 = u32ErrorIdList_20(D) & 2;
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _5 = ValidationStatus.bEndValidations;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_ValidateTriggerSrc (&ValidationStatus, u8ServiceId_21(D), Group_22(D), u32CoreId_23(D));

  <bb 8> :
  _7 = u32ErrorIdList_20(D) & 4;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _8 = ValidationStatus.bEndValidations;
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_ValidateQueueNotFull (&ValidationStatus, u8ServiceId_21(D), Group_22(D), u32CoreId_23(D));

  <bb 11> :
  _10 = u32ErrorIdList_20(D) & 8;
  if (_10 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _11 = ValidationStatus.bEndValidations;
  _12 = ~_11;
  if (_12 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Adc_ValidateConvMode (&ValidationStatus, u8ServiceId_21(D), Group_22(D), u32CoreId_23(D));

  <bb 14> :
  _28 = ValidationStatus.ValidParams;
  ValidationStatus ={v} {CLOBBER};

  <bb 15> :
<L17>:
  return _28;

}


Adc_ValidateConvMode (struct Adc_ValidationResultType * pReturnValue, uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  unsigned int D.7285;
  unsigned int D.7284;
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  <unnamed type> _12;
  unsigned int _20;
  unsigned int _21;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_16(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_17(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_18 = *_5;
  _6 = (int) u8ServiceId_19(D);
  _20 = (unsigned int) _6;
  _21 = _20 + 4294967291;
  if (_21 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
<L0>:
  _7 = Adc_pCfgPtr[u32CoreId_16(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_18;
  _10 = _9 * 68;
  _11 = _8 + _10;
  _12 = _11->eMode;
  if (_12 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportValidationError (pReturnValue_22(D), u8ServiceId_19(D), 22);

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
<L4>:

  <bb 7> :
  return;

}


Adc_ValidateQueueNotFull (struct Adc_ValidationResultType * pReturnValue, uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_GroupConfigurationType * _10;
  int _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  <unnamed type> _17;
  int _18;
  short unsigned int _19;

  <bb 2> :
  LogicalHwUnitId_22 = 0;
  _1 = Adc_pCfgPtr[u32CoreId_24(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_25(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_26 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_24(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_26;
  _9 = _8 * 68;
  _10 = _7 + _9;
  LogicalHwUnitId_27 = _10->AdcLogicalUnitId;
  _11 = (int) u8ServiceId_28(D);
  if (_11 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
<L0>:
  _12 = Adc_pCfgPtr[u32CoreId_24(D)];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_26;
  _15 = _14 * 68;
  _16 = _13 + _15;
  _17 = _16->eType;
  if (_17 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _18 = (int) LogicalHwUnitId_27;
  _19 ={v} Adc_aUnitStatus[_18].SwNormalQueueIndex;
  if (_19 > 9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportValidationError (pReturnValue_29(D), u8ServiceId_28(D), 32);

  <bb 6> :
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:

  <bb 8> :
  return;

}


Adc_ValidateTriggerSrc (struct Adc_ValidationResultType * pReturnValue, uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  <unnamed type> _12;
  const struct Adc_ConfigType * _13;
  const struct Adc_GroupConfigurationType * _14;
  unsigned int _15;
  unsigned int _16;
  const struct Adc_GroupConfigurationType * _17;
  <unnamed type> _18;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_23(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_24(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_25 = *_5;
  _6 = (int) u8ServiceId_26(D);
  switch (_6) <default: <L8> [INV], case 2 ... 3: <L0> [INV], case 5 ... 6: <L4> [INV]>

  <bb 3> :
<L0>:
  _7 = Adc_pCfgPtr[u32CoreId_23(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_25;
  _10 = _9 * 68;
  _11 = _8 + _10;
  _12 = _11->eTriggerSource;
  if (_12 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportValidationError (pReturnValue_27(D), u8ServiceId_26(D), 23);

  <bb 5> :
  goto <bb 10>; [INV]

  <bb 6> :
<L4>:
  _13 = Adc_pCfgPtr[u32CoreId_23(D)];
  _14 = _13->pGroups;
  _15 = (unsigned int) GroupIndex_25;
  _16 = _15 * 68;
  _17 = _14 + _16;
  _18 = _17->eTriggerSource;
  if (_18 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_ReportValidationError (pReturnValue_27(D), u8ServiceId_26(D), 23);

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
<L8>:

  <bb 10> :
  return;

}


Adc_ValidateBufferUninit (struct Adc_ValidationResultType * pReturnValue, uint8 u8ServiceId, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_GroupConfigurationType * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Adc_GroupConfigurationType * _11;
  Adc_ValueGroupType * * _12;
  unsigned int _13;
  unsigned int _14;
  Adc_ValueGroupType * * _15;
  Adc_ValueGroupType * _16;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_20(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_21(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_22 = *_5;
  _6 = (int) u8ServiceId_23(D);
  switch (_6) <default: <L4> [INV], case 2: <L0> [INV], case 5: <L0> [INV]>

  <bb 3> :
<L0>:
  _7 = Adc_pCfgPtr[u32CoreId_20(D)];
  _8 = _7->pGroups;
  _9 = (unsigned int) GroupIndex_22;
  _10 = _9 * 68;
  _11 = _8 + _10;
  _12 = _11->pResultsBufferPtr;
  _13 = (unsigned int) Group_21(D);
  _14 = _13 * 4;
  _15 = _12 + _14;
  _16 = *_15;
  if (_16 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportValidationError (pReturnValue_24(D), u8ServiceId_23(D), 25);

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
<L4>:

  <bb 7> :
  return;

}


Adc_ValidatePtr (uint8 u8ServiceId, const void * pPtrVal)
{
  Std_ReturnType ValidPtr;
  Std_ReturnType D.7180;
  Std_ReturnType _9;

  <bb 2> :
  ValidPtr_3 = 0;
  if (pPtrVal_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ValidPtr_6 = 1;
  Adc_ReportDetError (u8ServiceId_7(D), 20);

  <bb 4> :
  # ValidPtr_1 = PHI <ValidPtr_3(2), ValidPtr_6(3)>
  _9 = ValidPtr_1;

  <bb 5> :
<L2>:
  return _9;

}


Adc_ValidatePtrInit (const struct Adc_ConfigType * pConfigPtr)
{
  Std_ReturnType ValidPtr;
  Std_ReturnType D.7141;
  Std_ReturnType _8;

  <bb 2> :
  ValidPtr_3 = 0;
  if (pConfigPtr_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ValidPtr_6 = 1;
  Adc_ReportDetError (0, 20);

  <bb 4> :
  # ValidPtr_1 = PHI <ValidPtr_3(2), ValidPtr_6(3)>
  _8 = ValidPtr_1;

  <bb 5> :
<L2>:
  return _8;

}


Adc_ValidateGloballCall (uint8 u8ServiceId, uint32 u32CoreId)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.7137;
  <unnamed type> _1;
  Std_ReturnType _12;

  <bb 2> :
  ValidState_4 = 1;
  _1 = Adc_eGlobalState[u32CoreId_6(D)];
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (u8ServiceId_7(D) == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ValidState_11 = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  Adc_ReportDetError (u8ServiceId_7(D), 10);
  goto <bb 9>; [INV]

  <bb 6> :
  if (u8ServiceId_7(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_ReportDetError (u8ServiceId_7(D), 13);
  goto <bb 9>; [INV]

  <bb 8> :
  ValidState_8 = 0;

  <bb 9> :
  # ValidState_2 = PHI <ValidState_4(5), ValidState_4(7), ValidState_8(8), ValidState_11(4)>
  _12 = ValidState_2;

  <bb 10> :
<L9>:
  return _12;

}


Adc_ReportValidationError (struct Adc_ValidationResultType * pResult, uint8 u8ServiceId, uint8 u8ErrorId)
{
  <bb 2> :
  pResult_2(D)->bEndValidations = 1;
  pResult_2(D)->ValidParams = 1;
  Adc_ReportDetError (u8ServiceId_5(D), u8ErrorId_6(D));
  return;

}


Adc_ReportDetRuntimeError (uint8 u8ServiceId, uint8 u8ErrorId)
{
  <bb 2> :
  Det_ReportRuntimeError (123, 0, u8ServiceId_2(D), u8ErrorId_3(D));
  return;

}


Adc_ReportDetError (uint8 u8ServiceId, uint8 u8ErrorId)
{
  <bb 2> :
  Det_ReportError (123, 0, u8ServiceId_2(D), u8ErrorId_3(D));
  return;

}


