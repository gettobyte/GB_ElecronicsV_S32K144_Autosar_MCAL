
Marking local functions: Adc_DoCalibration_SetParams DevAssert Adc_HwAcc_GetData Adc_HwAcc_GetCOCO Adc_HwAcc_GetAIEN Adc_HwAcc_SetUserGainAndOffset Adc_HwAcc_SetChannel Adc_HwAcc_GetTriggerMode Adc_HwAcc_SetTriggerMode Adc_HwAcc_GetAverageSelect Adc_HwAcc_SetAveraging Adc_HwAcc_SetSampleTime Adc_HwAcc_GetInputClock Adc_HwAcc_GetClockDivide Adc_HwAcc_SetClock Adc_HwAcc_SetSC2Reg


Marking externally visible functions: Adc_Ip_IRQHandler Adc_Ip_GetChanData Adc_Ip_GetDataAddress Adc_Ip_GetTrigErrReg Adc_Ip_ClearTrigErrReg Adc_Ip_DisableChannelNotification Adc_Ip_EnableChannelNotification Adc_Ip_ClearLatchedTriggers Adc_Ip_DoCalibration Adc_Ip_GetConvData Adc_Ip_GetConvCompleteFlag Adc_Ip_GetChanInterrupt Adc_Ip_GetConvActiveFlag Adc_Ip_StartConversion Adc_Ip_SetDisabledChannel Adc_Ip_ConfigChannel Adc_Ip_SetClockMode Adc_Ip_SetResolution Adc_Ip_SetContinuousMode Adc_Ip_SetTriggerMode Adc_Ip_DisableDma Adc_Ip_EnableDma Adc_Ip_SetSampleTime Adc_Ip_SetAveraging Adc_Ip_DeInit Adc_Ip_Init


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25/88 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25) @0695a1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearTrigErrReg/39 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25/87 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25) @0695a0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearTrigErrReg/39 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20/86 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20) @06952ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableChannelNotification/38 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20/85 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20) @06952e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableChannelNotification/38 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19/84 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19) @06952c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableChannelNotification/37 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19/83 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19) @06952b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableChannelNotification/37 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12/82 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12) @069529a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12/81 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12) @069528c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13/80 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13) @06952700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13/79 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13) @06952620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15/78 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15) @06952540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15/77 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15) @06952460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24/76 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24) @06952380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24/75 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24) @069522a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29) @06946d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_DoCalibration/35 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29) @06946c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_DoCalibration/35 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18/72 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18) @06946460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_StartConversion/30 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18/71 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18) @06946380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_StartConversion/30 
  Calls: 
OsIf_GetElapsed/70 (OsIf_GetElapsed) @069461c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17/69 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17) @069460e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17/68 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17) @06946000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetDisabledChannel/29 
  Calls: 
OsIf_GetCounter/67 (OsIf_GetCounter) @0693fee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
OsIf_MicrosToTicks/66 (OsIf_MicrosToTicks) @0693fe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21/65 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21) @0693fb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ConfigChannel/28 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21/64 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21) @0693fa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ConfigChannel/28 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28/63 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28) @0693f8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28/62 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28) @0693f7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14/61 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14) @0693f700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14/60 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14) @0693f620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11/59 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11) @0693f540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11/58 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11) @0693f460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10/57 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10) @0693f2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetResolution/26 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10/56 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10) @0693f1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetResolution/26 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30/55 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30) @0693f000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetContinuousMode/25 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30/54 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30) @0687aee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetContinuousMode/25 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23/53 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23) @0687ac40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetTriggerMode/24 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23/52 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23) @0687ab60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetTriggerMode/24 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22/51 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22) @0687a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableDma/23 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22/50 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22) @0687a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableDma/23 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26/49 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26) @0687a700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableDma/22 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26/48 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26) @0687a620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableDma/22 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16/47 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16) @0687a460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetSampleTime/21 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16/46 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16) @0687a380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetSampleTime/21 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27/45 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27) @0687a1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetAveraging/20 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27/44 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27) @0687a0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetAveraging/20 
  Calls: 
Adc_Ip_IRQHandler/43 (Adc_Ip_IRQHandler) @0686a7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)AdcIpState/16 (read)AdcIpState/16 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetData/13 Adc_HwAcc_GetData/13 Adc_HwAcc_GetCOCO/12 Adc_HwAcc_GetAIEN/11 DevAssert/14 
   Indirect call
Adc_Ip_GetChanData/42 (Adc_Ip_GetChanData) @0686a460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_GetDataAddress/41 (Adc_Ip_GetDataAddress) @0686a1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_GetTrigErrReg/40 (Adc_Ip_GetTrigErrReg) @06860ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 DevAssert/14 
Adc_Ip_ClearTrigErrReg/39 (Adc_Ip_ClearTrigErrReg) @068608c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25/88 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25/87 DevAssert/14 DevAssert/14 
Adc_Ip_DisableChannelNotification/38 (Adc_Ip_DisableChannelNotification) @068602a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20/86 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20/85 DevAssert/14 DevAssert/14 
Adc_Ip_EnableChannelNotification/37 (Adc_Ip_EnableChannelNotification) @06860e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19/84 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19/83 DevAssert/14 DevAssert/14 
Adc_Ip_ClearLatchedTriggers/36 (Adc_Ip_ClearLatchedTriggers) @06860b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12/82 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12/81 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 DevAssert/14 
Adc_Ip_DoCalibration/35 (Adc_Ip_DoCalibration) @068607e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_DoCalibration_SetParams/17 OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 Adc_DoCalibration_SetParams/17 Adc_HwAcc_GetInputClock/3 Adc_HwAcc_GetClockDivide/2 Adc_HwAcc_GetTriggerMode/8 Adc_HwAcc_GetAverageSelect/6 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 
Adc_Ip_GetConvData/34 (Adc_Ip_GetConvData) @06860460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetData/13 DevAssert/14 DevAssert/14 
Adc_Ip_GetConvCompleteFlag/33 (Adc_Ip_GetConvCompleteFlag) @068601c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetCOCO/12 DevAssert/14 DevAssert/14 
Adc_Ip_GetChanInterrupt/32 (Adc_Ip_GetChanInterrupt) @06859ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetAIEN/11 DevAssert/14 DevAssert/14 
Adc_Ip_GetConvActiveFlag/31 (Adc_Ip_GetConvActiveFlag) @068599a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_StartConversion/30 (Adc_Ip_StartConversion) @06859380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18/72 Adc_HwAcc_SetChannel/9 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18/71 DevAssert/14 
Adc_Ip_SetDisabledChannel/29 (Adc_Ip_SetDisabledChannel) @06859e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17/69 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17/68 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 DevAssert/14 
Adc_Ip_ConfigChannel/28 (Adc_Ip_ConfigChannel) @06859b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21/65 Adc_HwAcc_SetChannel/9 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21/64 DevAssert/14 DevAssert/14 
Adc_Ip_SetClockMode/27 (Adc_Ip_SetClockMode) @068598c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28/63 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28/62 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14/61 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14/60 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11/59 Adc_HwAcc_SetClock/1 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11/58 DevAssert/14 DevAssert/14 
Adc_Ip_SetResolution/26 (Adc_Ip_SetResolution) @06859620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10/57 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10/56 DevAssert/14 
Adc_Ip_SetContinuousMode/25 (Adc_Ip_SetContinuousMode) @068592a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30/55 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30/54 DevAssert/14 
Adc_Ip_SetTriggerMode/24 (Adc_Ip_SetTriggerMode) @0684ce00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23/53 Adc_HwAcc_SetTriggerMode/7 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23/52 DevAssert/14 
Adc_Ip_DisableDma/23 (Adc_Ip_DisableDma) @0684c8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22/51 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22/50 DevAssert/14 
Adc_Ip_EnableDma/22 (Adc_Ip_EnableDma) @0684c000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26/49 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26/48 DevAssert/14 
Adc_Ip_SetSampleTime/21 (Adc_Ip_SetSampleTime) @0684cd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16/47 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16/46 DevAssert/14 
Adc_Ip_SetAveraging/20 (Adc_Ip_SetAveraging) @0684ca80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27/45 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27/44 DevAssert/14 
Adc_Ip_DeInit/19 (Adc_Ip_DeInit) @0684c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ip_Init/18 DevAssert/14 
Adc_Ip_Init/18 (Adc_Ip_Init) @0684c540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (write)AdcIpState/16 (write)AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_DeInit/19 
  Calls: Adc_Ip_ConfigChannel/28 Adc_Ip_SetContinuousMode/25 Adc_HwAcc_SetUserGainAndOffset/10 Adc_HwAcc_SetSC2Reg/0 Adc_Ip_SetResolution/26 Adc_HwAcc_SetAveraging/5 Adc_HwAcc_SetSampleTime/4 Adc_HwAcc_SetClock/1 DevAssert/14 DevAssert/14 DevAssert/14 
Adc_DoCalibration_SetParams/17 (Adc_DoCalibration_SetParams) @06834e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 Adc_Ip_DoCalibration/35 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13/80 Adc_HwAcc_SetClock/1 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13/79 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15/78 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15/77 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24/76 Adc_HwAcc_SetTriggerMode/7 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24/75 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 
AdcIpState/16 (AdcIpState) @068361f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Adc_Ip_Init/18 (write)Adc_Ip_Init/18 (write)Adc_Ip_Init/18 (write)Adc_Ip_DeInit/19 (write)Adc_Ip_ConfigChannel/28 (write)Adc_Ip_DoCalibration/35 (read)Adc_Ip_GetChanData/42 (read)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)
  Availability: available
  Varpool flags:
AdcBase/15 (AdcBase) @06836168
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Adc_Ip_Init/18 (read)Adc_Ip_SetAveraging/20 (read)Adc_Ip_SetSampleTime/21 (read)Adc_Ip_EnableDma/22 (read)Adc_Ip_DisableDma/23 (read)Adc_Ip_SetTriggerMode/24 (read)Adc_Ip_SetContinuousMode/25 (read)Adc_Ip_SetResolution/26 (read)Adc_Ip_SetClockMode/27 (read)Adc_Ip_ConfigChannel/28 (read)Adc_Ip_SetDisabledChannel/29 (read)Adc_Ip_StartConversion/30 (read)Adc_Ip_GetConvActiveFlag/31 (read)Adc_Ip_GetChanInterrupt/32 (read)Adc_Ip_GetConvCompleteFlag/33 (read)Adc_Ip_GetConvData/34 (read)Adc_Ip_DoCalibration/35 (read)Adc_Ip_ClearLatchedTriggers/36 (read)Adc_Ip_EnableChannelNotification/37 (read)Adc_Ip_DisableChannelNotification/38 (read)Adc_Ip_ClearTrigErrReg/39 (read)Adc_Ip_GetTrigErrReg/40 (read)Adc_Ip_GetDataAddress/41 (read)Adc_Ip_GetChanData/42 (read)Adc_Ip_IRQHandler/43 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
DevAssert/14 (DevAssert) @06834460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetChanData/42 Adc_Ip_GetDataAddress/41 Adc_Ip_GetTrigErrReg/40 Adc_Ip_GetTrigErrReg/40 Adc_Ip_ClearTrigErrReg/39 Adc_Ip_ClearTrigErrReg/39 Adc_Ip_DisableChannelNotification/38 Adc_Ip_DisableChannelNotification/38 Adc_Ip_EnableChannelNotification/37 Adc_Ip_EnableChannelNotification/37 Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_GetConvData/34 Adc_Ip_GetConvData/34 Adc_Ip_GetConvCompleteFlag/33 Adc_Ip_GetConvCompleteFlag/33 Adc_Ip_GetChanInterrupt/32 Adc_Ip_GetChanInterrupt/32 Adc_Ip_GetConvActiveFlag/31 Adc_Ip_StartConversion/30 Adc_Ip_SetDisabledChannel/29 Adc_Ip_SetDisabledChannel/29 Adc_Ip_ConfigChannel/28 Adc_Ip_ConfigChannel/28 Adc_Ip_SetClockMode/27 Adc_Ip_SetClockMode/27 Adc_Ip_SetResolution/26 Adc_Ip_SetContinuousMode/25 Adc_Ip_SetTriggerMode/24 Adc_Ip_DisableDma/23 Adc_Ip_EnableDma/22 Adc_Ip_SetSampleTime/21 Adc_Ip_SetAveraging/20 Adc_Ip_DeInit/19 Adc_Ip_Init/18 Adc_Ip_Init/18 Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_GetData/13 (Adc_HwAcc_GetData) @0681c8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_IRQHandler/43 Adc_Ip_GetConvData/34 
  Calls: 
Adc_HwAcc_GetCOCO/12 (Adc_HwAcc_GetCOCO) @0681c620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetConvCompleteFlag/33 
  Calls: 
Adc_HwAcc_GetAIEN/11 (Adc_HwAcc_GetAIEN) @0681c380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetChanInterrupt/32 
  Calls: 
Adc_HwAcc_SetUserGainAndOffset/10 (Adc_HwAcc_SetUserGainAndOffset) @0681c0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_SetChannel/9 (Adc_HwAcc_SetChannel) @067e9c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_StartConversion/30 Adc_Ip_ConfigChannel/28 
  Calls: 
Adc_HwAcc_GetTriggerMode/8 (Adc_HwAcc_GetTriggerMode) @067e97e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetTriggerMode/7 (Adc_HwAcc_SetTriggerMode) @067e9540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_SetTriggerMode/24 
  Calls: 
Adc_HwAcc_GetAverageSelect/6 (Adc_HwAcc_GetAverageSelect) @067e91c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetAveraging/5 (Adc_HwAcc_SetAveraging) @067e4ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_SetClockMode/27 Adc_Ip_SetAveraging/20 Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_SetSampleTime/4 (Adc_HwAcc_SetSampleTime) @067e4a80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_SetClockMode/27 Adc_Ip_SetSampleTime/21 Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_GetInputClock/3 (Adc_HwAcc_GetInputClock) @067e4700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_GetClockDivide/2 (Adc_HwAcc_GetClockDivide) @067e4460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetClock/1 (Adc_HwAcc_SetClock) @067e41c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_DoCalibration_SetParams/17 Adc_Ip_SetClockMode/27 Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_SetSC2Reg/0 (Adc_HwAcc_SetSC2Reg) @067e0d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 
  Calls: 
Adc_Ip_IRQHandler (const uint32 Instance)
{
  boolean ChanCocoFlag;
  boolean ChanIntFlag;
  uint8 ControlChanIdx;
  uint32 Sc1Reg;
  const struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  ChanIntFlag = 0;
  ChanCocoFlag = 0;
  _2 = AdcIpState[Instance].Init;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _3 = AdcIpState[Instance].ConversionCompleteNotification;
  if (_3 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  ControlChanIdx = 0;
  goto <bb 12>; [INV]

  <bb 5> :
  _4 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_4];
  ChanIntFlag = Adc_HwAcc_GetAIEN (Sc1Reg);
  ChanCocoFlag = Adc_HwAcc_GetCOCO (Sc1Reg);
  if (ChanIntFlag != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChanCocoFlag != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _5 = AdcIpState[Instance].ConversionCompleteNotification;
  _5 (ControlChanIdx);
  goto <bb 11>; [INV]

  <bb 8> :
  _6 = (int) ControlChanIdx;
  _7 = AdcIpState[Instance].ChannelConfig[_6];
  if (_7 == 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (ChanCocoFlag != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_HwAcc_GetData (Base, ControlChanIdx);

  <bb 11> :
  ControlChanIdx.12_8 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.12_8 + 1;

  <bb 12> :
  if (ControlChanIdx <= 15)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  goto <bb 17>; [INV]

  <bb 14> :
  ControlChanIdx = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  Adc_HwAcc_GetData (Base, ControlChanIdx);
  ControlChanIdx.13_9 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.13_9 + 1;

  <bb 16> :
  if (ControlChanIdx <= 15)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  return;

}


Adc_Ip_GetChanData (const uint32 Instance, const Adc_Ip_InputChannelType Channel, uint16 * const Result)
{
  boolean Found;
  uint8 ControlChanIdx;
  uint16 Temp;
  Adc_Ip_StatusType Status;
  const struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6422;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  Status = 0;
  Temp = 0;
  Found = 0;
  ControlChanIdx = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) ControlChanIdx;
  _3 = AdcIpState[Instance].ChannelConfig[_2];
  if (Channel == _3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Found = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  ControlChanIdx.11_4 = ControlChanIdx;
  ControlChanIdx = ControlChanIdx.11_4 + 1;

  <bb 6> :
  if (ControlChanIdx <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (Found != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = (int) ControlChanIdx;
  _6 = Base->R[_5];
  Temp = (uint16) _6;
  Temp = Temp & 4095;
  goto <bb 10>; [INV]

  <bb 9> :
  Status = 1;

  <bb 10> :
  *Result = Temp;
  D.6422 = Status;

  <bb 11> :
<L8>:
  return D.6422;

}


Adc_Ip_GetDataAddress (const uint32 Instance, const uint8 Index)
{
  uint32 D.6415;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = AdcBase[Instance];
  _3 = (int) Index;
  _4 = &_2->R[_3];
  D.6415 = (uint32) _4;

  <bb 3> :
<L0>:
  return D.6415;

}


Adc_Ip_GetTrigErrReg (const uint32 Instance)
{
  const struct ADC_Type * const Base;
  uint32 D.6413;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = Instance != 0;
  DevAssert (_2);
  Base = AdcBase[Instance];
  _3 = Base->SC2;
  _4 = _3 >> 24;
  D.6413 = _4 & 15;

  <bb 3> :
<L0>:
  return D.6413;

}


Adc_Ip_ClearTrigErrReg (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = Instance != 0;
  DevAssert (_2);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25 ();
  _3 = Base->SC2;
  _4 = _3 | 251658240;
  Base->SC2 = _4;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25 ();
  return;

}


Adc_Ip_DisableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20 ();
  _3 = (int) ControlChanIdx;
  _4 = Base->SC1[_3];
  _5 = (int) ControlChanIdx;
  _6 = _4 & 4294967231;
  Base->SC1[_5] = _6;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20 ();
  return;

}


Adc_Ip_EnableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19 ();
  _3 = (int) ControlChanIdx;
  _4 = Base->SC1[_3];
  _5 = (int) ControlChanIdx;
  _6 = _4 | 64;
  Base->SC1[_5] = _6;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19 ();
  return;

}


Adc_Ip_ClearLatchedTriggers (const uint32 Instance)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6410;
  long unsigned int D.6406;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = Instance != 0;
  DevAssert (_2);
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _3 = OsIf_GetCounter (0);
  CurrentTicks = _3;
  ElapsedTicks = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12 ();
  _4 = Base->CFG1;
  _5 = _4 | 256;
  Base->CFG1 = _5;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12 ();
  goto <bb 4>; [INV]

  <bb 3> :
  D.6406 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6406 + ElapsedTicks;

  <bb 4> :
  _6 = Base->SC2;
  _7 = _6 & 983040;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 2;

  <bb 8> :
  D.6410 = Status;
  CurrentTicks = {CLOBBER};

  <bb 9> :
<L7>:
  return D.6410;

}


Adc_Ip_DoCalibration (const uint32 Instance)
{
  struct Adc_Ip_ClockConfigType CalClockConfig;
  struct Adc_Ip_ClockConfigType PreClockConfig;
  uint32 Reg;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_TrigType TriggerMode;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6393;
  long unsigned int vol.10;
  long unsigned int D.6388;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _2 = OsIf_GetCounter (0);
  CurrentTicks = _2;
  ElapsedTicks = 0;
  Reg = Base->SC3;
  _3 = Reg >> 2;
  _4 = (int) _3;
  _5 = _4 & 1;
  _6 = _5 != 0;
  PreClockConfig.AvgEn = _6;
  _7 = Adc_HwAcc_GetAverageSelect (Reg);
  PreClockConfig.AvgSel = _7;
  Reg = Base->CFG2;
  _8 = (unsigned char) Reg;
  PreClockConfig.SampleTime = _8;
  _9 = Base->SC2;
  TriggerMode = Adc_HwAcc_GetTriggerMode (_9);
  Reg = Base->CFG1;
  _10 = Adc_HwAcc_GetClockDivide (Reg);
  PreClockConfig.ClockDivide = _10;
  _11 = Adc_HwAcc_GetInputClock (Reg);
  PreClockConfig.InputClock = _11;
  CalClockConfig.AvgEn = 1;
  CalClockConfig.AvgSel = 3;
  CalClockConfig.SampleTime = 12;
  _12 = AdcIpState[Instance].CalibrationClockDivide;
  CalClockConfig.ClockDivide = _12;
  _13 = PreClockConfig.InputClock;
  CalClockConfig.InputClock = _13;
  Adc_DoCalibration_SetParams (Base, &CalClockConfig, 0);
  Base->CLPS = 0;
  Base->CLP3 = 0;
  Base->CLP2 = 0;
  Base->CLP1 = 0;
  Base->CLP0 = 0;
  Base->CLPX = 0;
  Base->CLP9 = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  Reg = Base->SC3;
  Reg = Reg & 4294967167;
  Reg = Reg | 128;
  Base->SC3 = Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  goto <bb 4>; [INV]

  <bb 3> :
  D.6388 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6388 + ElapsedTicks;

  <bb 4> :
  _14 = Base->SC3;
  _15 = _14 & 128;
  if (_15 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 2;

  <bb 8> :
  Adc_DoCalibration_SetParams (Base, &PreClockConfig, TriggerMode);
  vol.10 = Base->R[0];
  D.6393 = Status;
  CurrentTicks = {CLOBBER};
  PreClockConfig = {CLOBBER};
  CalClockConfig = {CLOBBER};

  <bb 9> :
<L7>:
  return D.6393;

}


Adc_Ip_GetConvData (const uint32 Instance, const uint8 ControlChanIdx)
{
  const struct ADC_Type * const Base;
  uint16 D.6384;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  D.6384 = Adc_HwAcc_GetData (Base, ControlChanIdx);

  <bb 3> :
<L0>:
  return D.6384;

}


Adc_Ip_GetConvCompleteFlag (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6380;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  _3 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_3];
  D.6380 = Adc_HwAcc_GetCOCO (Sc1Reg);

  <bb 3> :
<L0>:
  return D.6380;

}


Adc_Ip_GetChanInterrupt (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6376;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  _3 = (int) ControlChanIdx;
  Sc1Reg = Base->SC1[_3];
  D.6376 = Adc_HwAcc_GetAIEN (Sc1Reg);

  <bb 3> :
<L0>:
  return D.6376;

}


Adc_Ip_GetConvActiveFlag (const uint32 Instance)
{
  uint32 Sc2Reg;
  const struct ADC_Type * const Base;
  boolean D.6374;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  Sc2Reg = Base->SC2;
  _2 = Sc2Reg >> 7;
  Sc2Reg = _2 & 1;
  D.6374 = Sc2Reg != 0;

  <bb 3> :
<L0>:
  return D.6374;

}


Adc_Ip_StartConversion (const uint32 Instance, Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18 ();
  Adc_HwAcc_SetChannel (Base, 0, InputChannel, InterruptEnable);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18 ();
  return;

}


Adc_Ip_SetDisabledChannel (const uint32 Instance, const uint8 ControlChanIdx, const boolean WithTimeout)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6371;
  long unsigned int D.6367;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx <= 15;
  DevAssert (_2);
  Base = AdcBase[Instance];
  Status = 0;
  TimeoutTicks = OsIf_MicrosToTicks (10000, 0);
  _3 = OsIf_GetCounter (0);
  CurrentTicks = _3;
  ElapsedTicks = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17 ();
  _4 = (int) ControlChanIdx;
  _5 = Base->SC1[_4];
  _6 = (int) ControlChanIdx;
  _7 = _5 | 31;
  Base->SC1[_6] = _7;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17 ();
  if (WithTimeout != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 5>; [INV]

  <bb 4> :
  D.6367 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks = D.6367 + ElapsedTicks;

  <bb 5> :
  _8 = (int) ControlChanIdx;
  _9 = Base->SC1[_8];
  _10 = _9 & 31;
  if (_10 != 31)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (ElapsedTicks < TimeoutTicks)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (ElapsedTicks >= TimeoutTicks)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Status = 2;

  <bb 9> :
  D.6371 = Status;
  CurrentTicks = {CLOBBER};

  <bb 10> :
<L9>:
  return D.6371;

}


Adc_Ip_ConfigChannel (const uint32 Instance, const struct Adc_Ip_ChanConfigType * const ChanConfig)
{
  Adc_Ip_InputChannelType InputChanDemapped;
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = ChanConfig != 0B;
  DevAssert (_2);
  Base = AdcBase[Instance];
  InputChanDemapped = ChanConfig->Channel;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _3 = ChanConfig->ChnIdx;
  _4 = ChanConfig->InterruptEnable;
  Adc_HwAcc_SetChannel (Base, _3, InputChanDemapped, _4);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _5 = ChanConfig->ChnIdx;
  _6 = (int) _5;
  _7 = ChanConfig->Channel;
  AdcIpState[Instance].ChannelConfig[_6] = _7;
  return;

}


Adc_Ip_SetClockMode (const uint32 Instance, const struct Adc_Ip_ClockConfigType * const Config)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = Config != 0B;
  DevAssert (_2);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11 ();
  _3 = Config->ClockDivide;
  _4 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _3, _4);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14 ();
  _5 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28 ();
  _6 = Config->AvgEn;
  _7 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _6, _7);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28 ();
  return;

}


Adc_Ip_SetResolution (const uint32 Instance, const Adc_Ip_ResolutionType Resolution)
{
  uint32 Cfg1Reg;
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10 ();
  Cfg1Reg = Base->CFG1;
  Cfg1Reg = Cfg1Reg & 4294967283;
  _2 = Resolution << 2;
  _3 = _2 & 12;
  Cfg1Reg = Cfg1Reg | _3;
  Base->CFG1 = Cfg1Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10 ();
  return;

}


Adc_Ip_SetContinuousMode (const uint32 Instance, const boolean ContinuousModeEnable)
{
  uint32 Sc3Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.8;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30 ();
  Sc3Reg = Base->SC3;
  Sc3Reg = Sc3Reg & 4294967287;
  if (ContinuousModeEnable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8 = 0;

  <bb 5> :
  Sc3Reg = iftmp.8 | Sc3Reg;
  Base->SC3 = Sc3Reg;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30 ();
  return;

}


Adc_Ip_SetTriggerMode (const uint32 Instance, const Adc_Ip_TrigType TriggerMode)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23 ();
  Adc_HwAcc_SetTriggerMode (Base, TriggerMode);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23 ();
  return;

}


Adc_Ip_DisableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22 ();
  _2 = Base->SC2;
  _3 = _2 & 4294967291;
  Base->SC2 = _3;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22 ();
  return;

}


Adc_Ip_EnableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26 ();
  _2 = Base->SC2;
  _3 = _2 | 4;
  Base->SC2 = _3;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26 ();
  return;

}


Adc_Ip_SetSampleTime (const uint32 Instance, const uint8 SampleTime)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16 ();
  Adc_HwAcc_SetSampleTime (Base, SampleTime);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16 ();
  return;

}


Adc_Ip_SetAveraging (const uint32 Instance, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  struct ADC_Type * const Base;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  Base = AdcBase[Instance];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27 ();
  Adc_HwAcc_SetAveraging (Base, AvgEn, AvgSel);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27 ();
  return;

}


Adc_Ip_DeInit (const uint32 Instance)
{
  uint8 Index;
  struct Adc_Ip_ChanConfigType ChannelConfigs[16];
  struct Adc_Ip_ConfigType DefaultConfig;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  DefaultConfig.ClockDivide = 0;
  DefaultConfig.CalibrationClockDivide = 3;
  DefaultConfig.InputClock = 0;
  DefaultConfig.SampleTime = 12;
  DefaultConfig.AvgEn = 0;
  DefaultConfig.AvgSel = 0;
  DefaultConfig.Resolution = 0;
  DefaultConfig.TriggerMode = 0;
  DefaultConfig.DmaEnable = 0;
  DefaultConfig.VoltageRef = 0;
  DefaultConfig.ContinuousConvEnable = 0;
  DefaultConfig.CompareEnable = 0;
  DefaultConfig.CompareGreaterThanEnable = 0;
  DefaultConfig.CompareRangeFuncEnable = 0;
  DefaultConfig.CompVal1 = 0;
  DefaultConfig.CompVal2 = 0;
  DefaultConfig.UsrGain = 4;
  DefaultConfig.UsrOffset = 0;
  DefaultConfig.NumChannels = 16;
  Index = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = (int) Index;
  ChannelConfigs[_2].ChnIdx = Index;
  _3 = (int) Index;
  ChannelConfigs[_3].Channel = 31;
  _4 = (int) Index;
  ChannelConfigs[_4].InterruptEnable = 0;
  Index.7_5 = Index;
  Index = Index.7_5 + 1;

  <bb 4> :
  if (Index <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DefaultConfig.ChannelConfigs = &ChannelConfigs;
  DefaultConfig.ConversionCompleteNotification = 0B;
  Adc_Ip_Init (Instance, &DefaultConfig);
  AdcIpState[Instance].Init = 0;
  DefaultConfig = {CLOBBER};
  ChannelConfigs = {CLOBBER};
  return;

}


Adc_Ip_Init (const uint32 Instance, const struct Adc_Ip_ConfigType * const Config)
{
  uint8 Index;
  uint32 SC2ClearMask;
  uint32 SC2Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.2;
  long unsigned int iftmp.1;
  long unsigned int iftmp.0;

  <bb 2> :
  _1 = Instance <= 1;
  DevAssert (_1);
  _2 = Config != 0B;
  DevAssert (_2);
  _3 = Config->NumChannels;
  _4 = _3 <= 16;
  DevAssert (_4);
  Base = AdcBase[Instance];
  SC2Reg = 0;
  SC2ClearMask = 0;
  _5 = Config->ClockDivide;
  _6 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _5, _6);
  _7 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _7);
  _8 = Config->AvgEn;
  _9 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _8, _9);
  _10 = Config->Resolution;
  Adc_Ip_SetResolution (Instance, _10);
  SC2ClearMask = SC2ClearMask | 64;
  _11 = Config->TriggerMode;
  _12 = _11 << 6;
  _13 = _12 & 64;
  SC2Reg = SC2Reg | _13;
  _14 = Config->DmaEnable;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SC2Reg = SC2Reg | 4;
  goto <bb 5>; [INV]

  <bb 4> :
  SC2ClearMask = SC2ClearMask | 4;

  <bb 5> :
  SC2ClearMask = SC2ClearMask | 3;
  _15 = Config->VoltageRef;
  _16 = _15 & 3;
  SC2Reg = SC2Reg | _16;
  SC2ClearMask = SC2ClearMask | 56;
  _17 = Config->CompareEnable;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0 = 32;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.0 = 0;

  <bb 8> :
  SC2Reg = iftmp.0 | SC2Reg;
  _18 = Config->CompareGreaterThanEnable;
  if (_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1 = 16;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.1 = 0;

  <bb 11> :
  SC2Reg = iftmp.1 | SC2Reg;
  _19 = Config->CompareRangeFuncEnable;
  if (_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.2 = 8;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2 = 0;

  <bb 14> :
  SC2Reg = iftmp.2 | SC2Reg;
  _20 = Config->CompVal1;
  _21 = (long unsigned int) _20;
  Base->CV[0] = _21;
  _22 = Config->CompVal2;
  _23 = (long unsigned int) _22;
  Base->CV[1] = _23;
  Adc_HwAcc_SetSC2Reg (Base, SC2ClearMask, SC2Reg);
  _24 = Config->UsrGain;
  _25 = Config->UsrOffset;
  Adc_HwAcc_SetUserGainAndOffset (Base, _24, _25);
  _26 = Config->ContinuousConvEnable;
  Adc_Ip_SetContinuousMode (Instance, _26);
  _27 = Config->ChannelConfigs;
  if (_27 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  Index = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _28 = Config->ChannelConfigs;
  _29 = (unsigned int) Index;
  _30 = _29 * 12;
  _31 = _28 + _30;
  Adc_Ip_ConfigChannel (Instance, _31);
  Index.3_32 = Index;
  Index = Index.3_32 + 1;

  <bb 17> :
  _33 = Config->NumChannels;
  if (Index < _33)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _34 = Config->ConversionCompleteNotification;
  AdcIpState[Instance].ConversionCompleteNotification = _34;
  _35 = Config->CalibrationClockDivide;
  AdcIpState[Instance].CalibrationClockDivide = _35;
  AdcIpState[Instance].Init = 1;
  return;

}


Adc_DoCalibration_SetParams (struct ADC_Type * const Base, const struct Adc_Ip_ClockConfigType * const Config, const Adc_Ip_TrigType TriggerMode)
{
  <bb 2> :
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  _1 = Config->AvgEn;
  _2 = Config->AvgSel;
  Adc_HwAcc_SetAveraging (Base, _1, _2);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24 ();
  Adc_HwAcc_SetTriggerMode (Base, TriggerMode);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15 ();
  _3 = Config->SampleTime;
  Adc_HwAcc_SetSampleTime (Base, _3);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13 ();
  _4 = Config->ClockDivide;
  _5 = Config->InputClock;
  Adc_HwAcc_SetClock (Base, _4, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13 ();
  return;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  x.4_1 = x;
  if (x.4_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


Adc_HwAcc_GetData (const struct ADC_Type * const Base, const uint8 ChnIdx)
{
  uint16 Result;
  uint16 D.6386;

  <bb 2> :
  _1 = (int) ChnIdx;
  _2 = Base->R[_1];
  Result = (uint16) _2;
  Result = Result & 4095;
  D.6386 = Result;

  <bb 3> :
<L0>:
  return D.6386;

}


Adc_HwAcc_GetCOCO (const uint32 Reg)
{
  boolean D.6382;

  <bb 2> :
  _1 = Reg >> 7;
  _2 = (int) _1;
  _3 = _2 & 1;
  D.6382 = _3 != 0;

  <bb 3> :
<L0>:
  return D.6382;

}


Adc_HwAcc_GetAIEN (const uint32 Reg)
{
  boolean D.6378;

  <bb 2> :
  _1 = Reg >> 6;
  _2 = (int) _1;
  _3 = _2 & 1;
  D.6378 = _3 != 0;

  <bb 3> :
<L0>:
  return D.6378;

}


Adc_HwAcc_SetUserGainAndOffset (struct ADC_Type * const Base, const uint16 UsrGain, const uint16 UsrOffset)
{
  <bb 2> :
  _1 = (long unsigned int) UsrOffset;
  _2 = _1 & 255;
  Base->USR_OFS = _2;
  _3 = (long unsigned int) UsrGain;
  _4 = _3 & 1023;
  Base->UG = _4;
  return;

}


Adc_HwAcc_SetChannel (struct ADC_Type * const Base, const uint8 ChnIdx, const Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  uint32 Sc1Reg;
  long unsigned int iftmp.9;

  <bb 2> :
  _1 = (int) ChnIdx;
  Sc1Reg = Base->SC1[_1];
  Sc1Reg = Sc1Reg & 4294967200;
  _2 = InputChannel & 31;
  Sc1Reg = Sc1Reg | _2;
  if (InterruptEnable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9 = 0;

  <bb 5> :
  Sc1Reg = iftmp.9 | Sc1Reg;
  _3 = (int) ChnIdx;
  Base->SC1[_3] = Sc1Reg;
  return;

}


Adc_HwAcc_GetTriggerMode (const uint32 Reg)
{
  Adc_Ip_TrigType ReturnValue;
  Adc_Ip_TrigType D.6400;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 64;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue = 1;

  <bb 4> :
  D.6400 = ReturnValue;

  <bb 5> :
<L2>:
  return D.6400;

}


Adc_HwAcc_SetTriggerMode (struct ADC_Type * const Base, const Adc_Ip_TrigType TriggerMode)
{
  uint32 Sc2Reg;

  <bb 2> :
  Sc2Reg = Base->SC2;
  Sc2Reg = Sc2Reg & 4294967231;
  _1 = TriggerMode << 6;
  _2 = _1 & 64;
  Sc2Reg = Sc2Reg | _2;
  Base->SC2 = Sc2Reg;
  return;

}


Adc_HwAcc_GetAverageSelect (const uint32 Reg)
{
  Adc_Ip_AvgSelectType ReturnValue;
  Adc_Ip_AvgSelectType D.6396;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6396 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6396;

}


Adc_HwAcc_SetAveraging (struct ADC_Type * const Base, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  uint32 Sc3Reg;
  long unsigned int iftmp.6;

  <bb 2> :
  Sc3Reg = Base->SC3;
  Sc3Reg = Sc3Reg & 4294967288;
  if (AvgEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6 = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6 = 0;

  <bb 5> :
  Sc3Reg = iftmp.6 | Sc3Reg;
  _1 = AvgSel & 3;
  Sc3Reg = Sc3Reg | _1;
  Base->SC3 = Sc3Reg;
  return;

}


Adc_HwAcc_SetSampleTime (struct ADC_Type * const Base, const uint8 SampleTime)
{
  uint32 Cfg2Reg;
  uint8 ClippedSampleTime;
  unsigned char iftmp.5;

  <bb 2> :
  if (SampleTime != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5 = SampleTime;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 1;

  <bb 5> :
  ClippedSampleTime = iftmp.5;
  Cfg2Reg = Base->CFG2;
  Cfg2Reg = Cfg2Reg & 4294967040;
  _1 = (long unsigned int) ClippedSampleTime;
  Cfg2Reg = Cfg2Reg | _1;
  Base->CFG2 = Cfg2Reg;
  return;

}


Adc_HwAcc_GetInputClock (const uint32 Reg)
{
  Adc_Ip_ClkSourceType ReturnValue;
  Adc_Ip_ClkSourceType D.6404;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6404 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6404;

}


Adc_HwAcc_GetClockDivide (const uint32 Reg)
{
  Adc_Ip_ClockSelType ReturnValue;
  Adc_Ip_ClockSelType D.6402;

  <bb 2> :
  ReturnValue = 0;
  _1 = Reg >> 5;
  _2 = _1 & 3;
  switch (_2) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  D.6402 = ReturnValue;

  <bb 8> :
<L5>:
  return D.6402;

}


Adc_HwAcc_SetClock (struct ADC_Type * const Base, const Adc_Ip_ClockSelType ClockDivide, const Adc_Ip_ClkSourceType InputClock)
{
  uint32 Cfg1Reg;

  <bb 2> :
  Cfg1Reg = Base->CFG1;
  Cfg1Reg = Cfg1Reg & 4294967196;
  _1 = ClockDivide << 5;
  _2 = _1 & 96;
  Cfg1Reg = Cfg1Reg | _2;
  _3 = InputClock & 3;
  Cfg1Reg = Cfg1Reg | _3;
  Base->CFG1 = Cfg1Reg;
  return;

}


Adc_HwAcc_SetSC2Reg (struct ADC_Type * const Base, const uint32 ClearMask, const uint32 Value)
{
  uint32 Sc2Reg;

  <bb 2> :
  Sc2Reg = Base->SC2;
  _1 = ~ClearMask;
  Sc2Reg = Sc2Reg & _1;
  Sc2Reg = Sc2Reg | Value;
  Base->SC2 = Sc2Reg;
  return;

}


