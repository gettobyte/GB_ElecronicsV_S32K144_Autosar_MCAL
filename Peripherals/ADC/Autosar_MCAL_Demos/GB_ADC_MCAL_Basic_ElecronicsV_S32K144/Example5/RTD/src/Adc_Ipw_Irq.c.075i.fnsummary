Symbol table:

Adc_Ip_ConfigChannel/28 (Adc_Ip_ConfigChannel) @06ffc8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_HandleConversionCheckFail/3 
  Calls: 
Adc_Ipw_StartHwTrigConversion/27 (Adc_Ipw_StartHwTrigConversion) @06ffc700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 
  Calls: 
Adc_Ip_DisableChannelNotification/26 (Adc_Ip_DisableChannelNotification) @06ffc620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 
  Calls: 
Pdb_Adc_Ip_SwTrigger/25 (Pdb_Adc_Ip_SwTrigger) @06ffc2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_RestartConversion/5 
  Calls: 
Adc_Ipw_StartNormalConversion/24 (Adc_Ipw_StartNormalConversion) @06ffc000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateQueue/1 
  Calls: 
Adc_RemoveFromQueue/23 (Adc_RemoveFromQueue) @068be7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateQueue/1 
  Calls: 
Adc_Ipw_CheckConversionValuesInRange/22 (Adc_Ipw_CheckConversionValuesInRange) @068bea80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ip_GetConvData/21 (Adc_Ip_GetConvData) @068be9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_CheckValidConversion/20 (Adc_Ipw_CheckValidConversion) @068be8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_CalculateNumsBitShift/19 (Adc_Ipw_CalculateNumsBitShift) @068be700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_ConfigureConversion/18 (Adc_Ipw_ConfigureConversion) @068be460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_EndConversion/9 Adc_Ipw_HandleConversionCheckFail/3 Adc_Ipw_RestartConversion/5 Adc_Ipw_ConfigureRuntimeChannels/4 
  Calls: 
Adc_aGroupStatus/17 (Adc_aGroupStatus) @06ff33a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_RestartConversion/5 (write)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_RestartConversion/5 (write)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_GetCurrentSampleCount/6 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_HandleConversionCheckFail/3 (write)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (write)
  Availability: not_available
  Varpool flags:
Adc_aRuntimeGroupChannel/16 (Adc_aRuntimeGroupChannel) @06ff32d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)
  Availability: not_available
  Varpool flags:
Adc_aUnitStatus/15 (Adc_aUnitStatus) @068b7b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_UpdateQueue/1 (read)Adc_Ipw_HandleConversionCheckFail/3 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_EndConversionNotification/11 (read)
  Availability: not_available
  Varpool flags:
Adc_pCfgPtr/14 (Adc_pCfgPtr) @068b7b40
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_HandleConversionCheckFail/3 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversionNotification/11 (read)
  Availability: not_available
  Varpool flags:
Adc_GetCoreID/13 (Adc_GetCoreID) @068be1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_EndConversionNotification/11 
  Calls: 
Adc_Ipw_Adc0EndConversionNotification/12 (Adc_Ipw_Adc0EndConversionNotification) @069dc380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ipw_EndConversionNotification/11 
Adc_Ipw_EndConversionNotification/11 (Adc_Ipw_EndConversionNotification) @069dcee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aUnitStatus/15 (read)Adc_aUnitStatus/15 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_Adc0EndConversionNotification/12 
  Calls: Adc_Ipw_EndConversion/9 Adc_Ipw_EndConversion/9 Adc_GetCoreID/13 
Adc_Ipw_ReadData/10 (Adc_Ipw_ReadData) @069dcc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_CheckConversionChannels/2 Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_EndConversion/9 (Adc_Ipw_EndConversion) @069dc9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversionNotification/11 Adc_Ipw_EndConversionNotification/11 
  Calls: Adc_Ipw_HandleConversionCheckFail/3 Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_ConfigureConversion/18 Adc_Ipw_CheckConversionChannels/2 Adc_Ipw_ConfigureRuntimeChannels/4 
Adc_Ipw_UpdateHardwareGroupState/8 (Adc_Ipw_UpdateHardwareGroupState) @069dc540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aGroupStatus/17 (write)Adc_aRuntimeGroupChannel/16 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_CallNotification/0 Adc_Ipw_StartHwTrigConversion/27 Adc_Ipw_CallNotification/0 Adc_Ip_DisableChannelNotification/26 Adc_Ipw_GetCurrentSampleCount/6 
Adc_Ipw_UpdateSoftwareGroupState/7 (Adc_Ipw_UpdateSoftwareGroupState) @069dc2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_CallNotification/0 Adc_Ipw_RestartConversion/5 Adc_Ipw_UpdateQueue/1 Adc_Ipw_RestartConversion/5 Adc_Ipw_UpdateQueue/1 Adc_Ipw_GetCurrentSampleCount/6 
Adc_Ipw_GetCurrentSampleCount/6 (Adc_Ipw_GetCurrentSampleCount) @069dc000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aGroupStatus/17 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: 
Adc_Ipw_RestartConversion/5 (Adc_Ipw_RestartConversion) @068b07e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: Adc_Ipw_ConfigureConversion/18 Pdb_Adc_Ip_SwTrigger/25 Adc_Ipw_ConfigureRuntimeChannels/4 
Adc_Ipw_ConfigureRuntimeChannels/4 (Adc_Ipw_ConfigureRuntimeChannels) @068b0ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_aRuntimeGroupChannel/16 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 Adc_Ipw_RestartConversion/5 
  Calls: Adc_Ipw_ConfigureConversion/18 
Adc_Ipw_HandleConversionCheckFail/3 (Adc_Ipw_HandleConversionCheckFail) @068b0c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_ConfigureConversion/18 Adc_Ip_ConfigChannel/28 
Adc_Ipw_CheckConversionChannels/2 (Adc_Ipw_CheckConversionChannels) @068b09a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_ReadData/10 Adc_Ipw_ReadData/10 Adc_Ipw_CheckConversionValuesInRange/22 Adc_Ip_GetConvData/21 Adc_Ipw_CheckValidConversion/20 Adc_Ipw_CalculateNumsBitShift/19 
Adc_Ipw_UpdateQueue/1 (Adc_Ipw_UpdateQueue) @068b0700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aUnitStatus/15 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: Adc_Ipw_StartNormalConversion/24 Adc_RemoveFromQueue/23 
Adc_Ipw_CallNotification/0 (Adc_Ipw_CallNotification) @068b0460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: 
   Indirect call
Adc_Ipw_Adc0EndConversionNotification (const uint8 ControlChanIdx)
{
  const Adc_HwUnitType PhysicalAdcUnit;

  <bb 2> :
  PhysicalAdcUnit_1 = 0;
  Adc_Ipw_EndConversionNotification (PhysicalAdcUnit_1);
  return;

}


Adc_Ipw_EndConversionNotification (const Adc_HwUnitType PhysicalAdcUnit)
{
  const Adc_GroupType HwGroupId;
  const Adc_GroupType SwGroupId;
  const Adc_HwUnitType LogicalHwUnitId;
  const uint32 u32CoreId;
  long unsigned int _1;
  long unsigned int u32CoreId.0_2;
  const struct Adc_ConfigType * _3;
  const struct Adc_Ipw_Config * _4;
  int _5;
  int _6;
  int _7;
  long unsigned int u32CoreId.1_8;
  int _9;
  short unsigned int _10;
  long unsigned int u32CoreId.2_11;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId ={v} _1;
  u32CoreId.0_2 ={v} u32CoreId;
  _3 = Adc_pCfgPtr[u32CoreId.0_2];
  _4 = _3->pAdcIpwConfig;
  _5 = (int) PhysicalAdcUnit_16(D);
  LogicalHwUnitId_17 = _4->Mapping.aHwLogicalId[_5];
  _6 = (int) LogicalHwUnitId_17;
  SwGroupId_18 ={v} Adc_aUnitStatus[_6].SwNormalQueue[0];
  _7 = (int) LogicalHwUnitId_17;
  HwGroupId_19 ={v} Adc_aUnitStatus[_7].OngoingHwGroup;
  if (HwGroupId_19 != 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  u32CoreId.1_8 ={v} u32CoreId;
  Adc_Ipw_EndConversion (LogicalHwUnitId_17, HwGroupId_19, 0, u32CoreId.1_8);
  goto <bb 6>; [INV]

  <bb 4> :
  _9 = (int) LogicalHwUnitId_17;
  _10 ={v} Adc_aUnitStatus[_9].SwNormalQueueIndex;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.2_11 ={v} u32CoreId;
  Adc_Ipw_EndConversion (LogicalHwUnitId_17, SwGroupId_18, 1, u32CoreId.2_11);

  <bb 6> :
  return;

}


Adc_Ipw_ReadData (const struct Adc_GroupConfigurationType * GroupPtr, Adc_ValueGroupType * pResult, const Adc_StreamNumSampleType GroupSamples, const Adc_ChannelIndexType Index, const uint16 ConvResult)
{
  int _1;
  int _2;
  int _3;
  unsigned int _4;
  unsigned int _5;
  Adc_ValueGroupType * _6;

  <bb 2> :
  _1 = (int) Index_7(D);
  _2 = (int) GroupSamples_8(D);
  _3 = _1 * _2;
  _4 = (unsigned int) _3;
  _5 = _4 * 2;
  _6 = pResult_9(D) + _5;
  *_6 = ConvResult_11(D);
  return;

}


Adc_Ipw_EndConversion (Adc_HwUnitType Unit, Adc_GroupType Group, boolean IsSoftwareConversion, uint32 u32CoreId)
{
  Adc_ChannelIndexType ChannelCount;
  uint8 LeftChannel;
  Adc_ChannelIndexType NumChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  unsigned char iftmp.4;
  unsigned char iftmp.3;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  int _10;
  int _11;
  _Bool _12;
  short unsigned int _13;
  unsigned char _14;
  int _15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  int _19;
  short unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;
  short unsigned int _23;
  short unsigned int _24;
  unsigned char iftmp.3_25;
  unsigned char iftmp.4_26;
  unsigned char iftmp.4_42;
  unsigned char iftmp.4_43;
  unsigned char iftmp.3_46;
  unsigned char iftmp.3_47;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_29(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_30(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_31 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_29(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_31;
  _9 = _8 * 68;
  GroupPtr_32 = _7 + _9;
  _10 = (int) Group_30(D);
  ChannelCount_33 = Adc_aRuntimeGroupChannel[_10].ChannelCount;
  _11 = (int) Group_30(D);
  _12 = Adc_aRuntimeGroupChannel[_11].bRuntimeUpdated;
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (ChannelCount_33 <= 15)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_47 = ChannelCount_33 & 15;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3_46 = 16;

  <bb 6> :
  # iftmp.3_25 = PHI <iftmp.3_47(4), iftmp.3_46(5)>
  Adc_Ipw_ConfigureRuntimeChannels (Unit_34(D), GroupPtr_32, iftmp.3_25, u32CoreId_29(D));
  goto <bb 18>; [INV]

  <bb 7> :
  _13 = GroupPtr_32->NumSamples;
  _14 = Adc_Ipw_CheckConversionChannels (Unit_34(D), Group_30(D), _13, u32CoreId_29(D));
  if (_14 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  _15 = (int) Group_30(D);
  _16 = Adc_aGroupStatus[_15].CurrentChannel;
  if (ChannelCount_33 > _16)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _17 = (int) Group_30(D);
  _18 = Adc_aGroupStatus[_17].CurrentChannel;
  NumChannel_41 = ChannelCount_33 - _18;
  if (NumChannel_41 <= 15)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.4_43 = NumChannel_41 & 15;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.4_42 = 16;

  <bb 12> :
  # iftmp.4_26 = PHI <iftmp.4_43(10), iftmp.4_42(11)>
  LeftChannel_44 = iftmp.4_26;
  Adc_Ipw_ConfigureConversion (Unit_34(D), Group_30(D), 15, LeftChannel_44, u32CoreId_29(D));
  goto <bb 18>; [INV]

  <bb 13> :
  _19 = (int) Group_30(D);
  _20 ={v} Adc_aGroupStatus[_19].ResultIndex;
  _21 = _20;
  _22 = _21 + 1;
  Adc_aGroupStatus[_19].ResultIndex ={v} _22;
  if (IsSoftwareConversion_36(D) != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _23 = GroupPtr_32->NumSamples;
  Adc_Ipw_UpdateSoftwareGroupState (Unit_34(D), Group_30(D), _23, u32CoreId_29(D));
  goto <bb 18>; [INV]

  <bb 15> :
  _24 = GroupPtr_32->NumSamples;
  Adc_Ipw_UpdateHardwareGroupState (Unit_34(D), Group_30(D), _24, u32CoreId_29(D));
  goto <bb 18>; [INV]

  <bb 16> :
  if (IsSoftwareConversion_36(D) != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Adc_Ipw_HandleConversionCheckFail (Unit_34(D), Group_30(D), GroupPtr_32, u32CoreId_29(D));

  <bb 18> :
  return;

}


Adc_Ipw_UpdateHardwareGroupState (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  const struct Adc_Ipw_Config * const pAdcIpwConfigPtr;
  const Adc_GroupType GroupIndex;
  Adc_ChannelIndexType ChannelCount;
  uint32 CurrentSampleCount;
  boolean NotificationCalled;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  int _7;
  int _8;
  int _9;
  int _10;
  <unnamed type> _11;
  int _12;
  long unsigned int _13;
  int _14;
  const struct Adc_ConfigType * _15;
  const struct Adc_GroupConfigurationType * _16;
  unsigned int _17;
  unsigned int _18;
  const struct Adc_GroupConfigurationType * _19;
  <unnamed type> _20;
  const struct Adc_ConfigType * _21;
  const struct Adc_GroupConfigurationType * _22;
  unsigned int _23;
  unsigned int _24;
  const struct Adc_GroupConfigurationType * _25;
  <unnamed type> _26;
  long unsigned int _27;
  int _28;
  unsigned char _29;
  unsigned char _30;
  int _31;
  _Bool _32;
  int _33;
  _Bool _34;

  <bb 2> :
  NotificationCalled_40 = 0;
  _1 = Adc_pCfgPtr[u32CoreId_42(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_43(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_44 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_42(D)];
  pAdcIpwConfigPtr_45 = _6->pAdcIpwConfig;
  _7 = (int) Unit_46(D);
  PhysicalHwUnitId_47 = pAdcIpwConfigPtr_45->aAdcPhysicalId[_7];
  _8 = (int) Group_43(D);
  ChannelCount_48 = Adc_aRuntimeGroupChannel[_8].ChannelCount;
  _9 = (int) Group_43(D);
  Adc_aGroupStatus[_9].eAlreadyConverted ={v} 1;
  _10 = (int) Group_43(D);
  _11 ={v} Adc_aGroupStatus[_10].eConversion;
  if (_11 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _12 = (int) Group_43(D);
  Adc_aGroupStatus[_12].eConversion ={v} 2;

  <bb 4> :
  CurrentSampleCount_52 = Adc_Ipw_GetCurrentSampleCount (Group_43(D));
  _13 = (long unsigned int) GroupSamples_53(D);
  if (CurrentSampleCount_52 >= _13)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _14 = (int) Group_43(D);
  Adc_aGroupStatus[_14].eConversion ={v} 3;
  _15 = Adc_pCfgPtr[u32CoreId_42(D)];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex_44;
  _18 = _17 * 68;
  _19 = _16 + _18;
  _20 = _19->eBufferMode;
  if (_20 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _21 = Adc_pCfgPtr[u32CoreId_42(D)];
  _22 = _21->pGroups;
  _23 = (unsigned int) GroupIndex_44;
  _24 = _23 * 68;
  _25 = _22 + _24;
  _26 = _25->eAccessMode;
  if (_26 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _27 = (long unsigned int) PhysicalHwUnitId_47;
  _28 = (int) Unit_46(D);
  _29 = Adc_aUnitStatus[_28].u8Sc1Used;
  _30 = _29 + 255;
  Adc_Ip_DisableChannelNotification (_27, _30);
  Adc_Ipw_CallNotification (Group_43(D), u32CoreId_42(D));
  NotificationCalled_57 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  _31 = (int) Group_43(D);
  Adc_aGroupStatus[_31].ResultIndex ={v} 0;

  <bb 9> :
  # NotificationCalled_35 = PHI <NotificationCalled_40(4), NotificationCalled_57(7), NotificationCalled_40(8)>
  _32 = ~NotificationCalled_35;
  if (_32 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  if (ChannelCount_48 > 16)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _33 = (int) Group_43(D);
  _34 = Adc_aRuntimeGroupChannel[_33].bRuntimeUpdated;
  if (_34 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Adc_Ipw_StartHwTrigConversion (Unit_46(D), Group_43(D), u32CoreId_42(D));

  <bb 13> :
  Adc_Ipw_CallNotification (Group_43(D), u32CoreId_42(D));

  <bb 14> :
  return;

}


Adc_Ipw_UpdateSoftwareGroupState (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  const Adc_GroupType GroupIndex;
  uint32 CurrentSampleCount;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  int _7;
  <unnamed type> _8;
  int _9;
  long unsigned int _10;
  int _11;
  const struct Adc_ConfigType * _12;
  const struct Adc_GroupConfigurationType * _13;
  unsigned int _14;
  unsigned int _15;
  const struct Adc_GroupConfigurationType * _16;
  <unnamed type> _17;
  const struct Adc_ConfigType * _18;
  const struct Adc_GroupConfigurationType * _19;
  unsigned int _20;
  unsigned int _21;
  const struct Adc_GroupConfigurationType * _22;
  <unnamed type> _23;
  const struct Adc_ConfigType * _24;
  const struct Adc_GroupConfigurationType * _25;
  unsigned int _26;
  unsigned int _27;
  const struct Adc_GroupConfigurationType * _28;
  <unnamed type> _29;
  int _30;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_35(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_36(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_37 = *_5;
  _6 = (int) Group_36(D);
  Adc_aGroupStatus[_6].eAlreadyConverted ={v} 1;
  _7 = (int) Group_36(D);
  _8 ={v} Adc_aGroupStatus[_7].eConversion;
  if (_8 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = (int) Group_36(D);
  Adc_aGroupStatus[_9].eConversion ={v} 2;

  <bb 4> :
  CurrentSampleCount_41 = Adc_Ipw_GetCurrentSampleCount (Group_36(D));
  _10 = (long unsigned int) GroupSamples_42(D);
  if (CurrentSampleCount_41 >= _10)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _11 = (int) Group_36(D);
  Adc_aGroupStatus[_11].eConversion ={v} 3;
  _12 = Adc_pCfgPtr[u32CoreId_35(D)];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex_37;
  _15 = _14 * 68;
  _16 = _13 + _15;
  _17 = _16->eBufferMode;
  if (_17 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _18 = Adc_pCfgPtr[u32CoreId_35(D)];
  _19 = _18->pGroups;
  _20 = (unsigned int) GroupIndex_37;
  _21 = _20 * 68;
  _22 = _19 + _21;
  _23 = _22->eAccessMode;
  if (_23 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_Ipw_UpdateQueue (Unit_43(D), u32CoreId_35(D));
  goto <bb 11>; [INV]

  <bb 8> :
  _24 = Adc_pCfgPtr[u32CoreId_35(D)];
  _25 = _24->pGroups;
  _26 = (unsigned int) GroupIndex_37;
  _27 = _26 * 68;
  _28 = _25 + _27;
  _29 = _28->eMode;
  if (_29 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _30 = (int) Group_36(D);
  Adc_aGroupStatus[_30].ResultIndex ={v} 0;
  Adc_Ipw_RestartConversion (Unit_43(D), Group_36(D), u32CoreId_35(D));
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_Ipw_UpdateQueue (Unit_43(D), u32CoreId_35(D));

  <bb 11> :
  goto <bb 13>; [INV]

  <bb 12> :
  Adc_Ipw_RestartConversion (Unit_43(D), Group_36(D), u32CoreId_35(D));

  <bb 13> :
  Adc_Ipw_CallNotification (Group_36(D), u32CoreId_35(D));
  return;

}


Adc_Ipw_GetCurrentSampleCount (Adc_GroupType Group)
{
  Adc_StreamNumSampleType CurrentSampleCount;
  uint32 D.6470;
  int _1;
  uint32 _5;

  <bb 2> :
  _1 = (int) Group_2(D);
  CurrentSampleCount_4 ={v} Adc_aGroupStatus[_1].ResultIndex;
  _5 = (uint32) CurrentSampleCount_4;

  <bb 3> :
<L0>:
  return _5;

}


Adc_Ipw_RestartConversion (Adc_HwUnitType Unit, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_ChannelIndexType ChannelCount;
  uint8 NumChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  unsigned char iftmp.7;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  const struct Adc_ConfigType * _6;
  const struct Adc_GroupConfigurationType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Adc_ConfigType * _10;
  const struct Adc_Ipw_Config * _11;
  int _12;
  int _13;
  int _14;
  _Bool _15;
  int _16;
  long unsigned int _17;
  int _18;
  unsigned char iftmp.7_19;
  unsigned char iftmp.7_29;
  unsigned char iftmp.7_30;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_22(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_23(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_24 = *_5;
  _6 = Adc_pCfgPtr[u32CoreId_22(D)];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex_24;
  _9 = _8 * 68;
  GroupPtr_25 = _7 + _9;
  _10 = Adc_pCfgPtr[u32CoreId_22(D)];
  _11 = _10->pAdcIpwConfig;
  _12 = (int) Unit_26(D);
  PhysicalHwUnitId_27 = _11->aAdcPhysicalId[_12];
  _13 = (int) Group_23(D);
  ChannelCount_28 = Adc_aRuntimeGroupChannel[_13].ChannelCount;
  if (ChannelCount_28 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_30 = ChannelCount_28 & 15;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_29 = 16;

  <bb 5> :
  # iftmp.7_19 = PHI <iftmp.7_30(3), iftmp.7_29(4)>
  NumChannel_31 = iftmp.7_19;
  _14 = (int) Group_23(D);
  _15 = Adc_aRuntimeGroupChannel[_14].bRuntimeUpdated;
  if (_15 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_Ipw_ConfigureRuntimeChannels (Unit_26(D), GroupPtr_25, NumChannel_31, u32CoreId_22(D));
  goto <bb 10>; [INV]

  <bb 7> :
  if (ChannelCount_28 <= 16)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _16 = (int) Group_23(D);
  Adc_aGroupStatus[_16].CurrentChannel = ChannelCount_28;
  _17 = (long unsigned int) PhysicalHwUnitId_27;
  Pdb_Adc_Ip_SwTrigger (_17);
  goto <bb 10>; [INV]

  <bb 9> :
  _18 = (int) Group_23(D);
  Adc_aGroupStatus[_18].CurrentChannel = 0;
  Adc_Ipw_ConfigureConversion (Unit_26(D), Group_23(D), 15, NumChannel_31, u32CoreId_22(D));

  <bb 10> :
  return;

}


Adc_Ipw_ConfigureRuntimeChannels (Adc_HwUnitType Unit, const struct Adc_GroupConfigurationType * GroupPtr, uint8 NumChannel, uint32 CoreId)
{
  Adc_GroupType Group;
  int _1;
  int _2;
  <unnamed type> _3;
  int _4;

  <bb 2> :
  Group_7 = GroupPtr_6(D)->GroupId;
  _1 = (int) Group_7;
  Adc_aGroupStatus[_1].CurrentChannel = 0;
  _2 = (int) Group_7;
  Adc_aGroupStatus[_2].ResultIndex ={v} 0;
  _3 = GroupPtr_6(D)->HwTriggerSource;
  Adc_Ipw_ConfigureConversion (Unit_10(D), Group_7, _3, NumChannel_11(D), CoreId_12(D));
  _4 = (int) Group_7;
  Adc_aRuntimeGroupChannel[_4].bRuntimeUpdated = 0;
  return;

}


Adc_Ipw_HandleConversionCheckFail (Adc_HwUnitType Unit, Adc_GroupType Group, const struct Adc_GroupConfigurationType * GroupPtr, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  struct Adc_Ip_ChanConfigType ChannelConfig;
  uint8 Channel;
  const struct Adc_ConfigType * _1;
  const struct Adc_Ipw_Config * _2;
  int _3;
  <unnamed type> _4;
  long unsigned int _5;
  unsigned char Channel.8_6;
  int _7;
  unsigned char _8;
  int _9;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_14(D)];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit_15(D);
  PhysicalHwUnitId_16 = _2->aAdcPhysicalId[_3];
  _4 = GroupPtr_17(D)->eMode;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  Channel_21 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  ChannelConfig.ChnIdx = Channel_10;
  ChannelConfig.Channel = 31;
  ChannelConfig.InterruptEnable = 0;
  _5 = (long unsigned int) PhysicalHwUnitId_16;
  Adc_Ip_ConfigChannel (_5, &ChannelConfig);
  Channel.8_6 = Channel_10;
  Channel_26 = Channel.8_6 + 1;

  <bb 5> :
  # Channel_10 = PHI <Channel_21(3), Channel_26(4)>
  _7 = (int) Unit_15(D);
  _8 = Adc_aUnitStatus[_7].u8Sc1Used;
  if (Channel_10 < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = (int) Group_18(D);
  Adc_aGroupStatus[_9].CurrentChannel = 0;
  Adc_Ipw_ConfigureConversion (Unit_15(D), Group_18(D), 15, 1, u32CoreId_14(D));

  <bb 7> :
  ChannelConfig ={v} {CLOBBER};
  return;

}


Adc_Ipw_CheckConversionChannels (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  boolean ValidConversion;
  boolean bFlag;
  Adc_ChannelType HwChannel;
  const uint8 NumsBitShift;
  Std_ReturnType Status;
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_ValueGroupType * ResultIndex;
  uint16 ConvResult;
  Adc_ChannelIndexType Index;
  Adc_ChannelIndexType Temp;
  Adc_ChannelIndexType CurrentChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  Std_ReturnType D.6456;
  unsigned char iftmp.5;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  const struct Adc_ConfigType * _7;
  const struct Adc_Ipw_Config * _8;
  int _9;
  const struct Adc_ConfigType * _10;
  const struct Adc_Ipw_Config * _11;
  int _12;
  const struct Adc_Ip_ConfigType * _13;
  <unnamed type> _14;
  int _15;
  const struct Adc_ConfigType * _16;
  const struct Adc_GroupConfigurationType * _17;
  unsigned int _18;
  unsigned int _19;
  unsigned char _20;
  Adc_ValueGroupType * * _21;
  unsigned int _22;
  unsigned int _23;
  Adc_ValueGroupType * * _24;
  Adc_ValueGroupType * _25;
  int _26;
  short unsigned int _27;
  unsigned int _28;
  unsigned int _29;
  long unsigned int _30;
  unsigned char _31;
  int _32;
  int _33;
  int _34;
  _Bool _35;
  int _36;
  _Bool _37;
  int _38;
  const Adc_GroupDefType * _39;
  unsigned int _40;
  unsigned int _41;
  const Adc_GroupDefType * _42;
  int _43;
  int _44;
  int _45;
  unsigned char Index.6_46;
  unsigned char iftmp.5_50;
  unsigned char iftmp.5_70;
  unsigned char iftmp.5_71;
  Std_ReturnType _92;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_56(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_57(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_58 = *_5;
  _6 = (int) Group_57(D);
  CurrentChannel_59 = Adc_aGroupStatus[_6].CurrentChannel;
  ResultIndex_60 = 0B;
  _7 = Adc_pCfgPtr[u32CoreId_56(D)];
  _8 = _7->pAdcIpwConfig;
  _9 = (int) Unit_61(D);
  PhysicalHwUnitId_62 = _8->aAdcPhysicalId[_9];
  Status_63 = 0;
  _10 = Adc_pCfgPtr[u32CoreId_56(D)];
  _11 = _10->pAdcIpwConfig;
  _12 = (int) Unit_61(D);
  _13 = _11->apAdcConfig[_12];
  _14 = _13->Resolution;
  NumsBitShift_65 = Adc_Ipw_CalculateNumsBitShift (_14);
  bFlag_66 = 0;
  ValidConversion_67 = 1;
  _15 = (int) Group_57(D);
  Index_68 = Adc_aRuntimeGroupChannel[_15].ChannelCount;
  _16 = Adc_pCfgPtr[u32CoreId_56(D)];
  _17 = _16->pGroups;
  _18 = (unsigned int) GroupIndex_58;
  _19 = _18 * 68;
  GroupPtr_69 = _17 + _19;
  if (CurrentChannel_59 <= Index_68)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 3> :
  _20 = CurrentChannel_59 & 15;
  if (_20 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_71 = CurrentChannel_59 + 240;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.5_70 = CurrentChannel_59 & 240;

  <bb 6> :
  # iftmp.5_50 = PHI <iftmp.5_71(4), iftmp.5_70(5)>
  Temp_72 = iftmp.5_50;
  _21 = GroupPtr_69->pResultsBufferPtr;
  _22 = (unsigned int) Group_57(D);
  _23 = _22 * 4;
  _24 = _21 + _23;
  _25 = *_24;
  _26 = (int) Group_57(D);
  _27 ={v} Adc_aGroupStatus[_26].ResultIndex;
  _28 = (unsigned int) _27;
  _29 = _28 * 2;
  ResultIndex_73 = _25 + _29;
  ValidConversion_75 = Adc_Ipw_CheckValidConversion (PhysicalHwUnitId_62, Temp_72, CurrentChannel_59);
  if (ValidConversion_75 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 7> :
  Index_77 = Temp_72;
  goto <bb 16>; [INV]

  <bb 8> :
  _30 = (long unsigned int) PhysicalHwUnitId_62;
  _31 = Index_47 - Temp_72;
  ConvResult_79 = Adc_Ip_GetConvData (_30, _31);
  _32 = (int) ConvResult_79;
  _33 = (int) NumsBitShift_65;
  _34 = _32 << _33;
  ConvResult_80 = (uint16) _34;
  _35 = GroupPtr_69->bAdcGroupLimitcheck;
  if (_35 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _36 = (int) Group_57(D);
  _37 = Adc_aRuntimeGroupChannel[_36].bAdcRuntimeGroupLimitcheck;
  if (_37 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _38 = (int) Group_57(D);
  _39 = Adc_aRuntimeGroupChannel[_38].pChannel;
  _40 = (unsigned int) Index_47;
  _41 = _40 * 2;
  _42 = _39 + _41;
  HwChannel_83 = *_42;
  bFlag_85 = Adc_Ipw_CheckConversionValuesInRange (ConvResult_80, Unit_61(D), HwChannel_83, u32CoreId_56(D));
  if (bFlag_85 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_Ipw_ReadData (GroupPtr_69, ResultIndex_73, GroupSamples_81(D), Index_47, ConvResult_80);
  _43 = (int) Group_57(D);
  Adc_aGroupStatus[_43].bLimitCheckFailed ={v} 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _44 = (int) Group_57(D);
  Adc_aGroupStatus[_44].eAlreadyConverted ={v} 1;
  _45 = (int) Group_57(D);
  Adc_aGroupStatus[_45].bLimitCheckFailed ={v} 1;
  Status_88 = 1;
  goto <bb 17>; [INV]

  <bb 13> :
  goto <bb 15>; [INV]

  <bb 14> :
  Adc_Ipw_ReadData (GroupPtr_69, ResultIndex_73, GroupSamples_81(D), Index_47, ConvResult_80);

  <bb 15> :
  Index.6_46 = Index_47;
  Index_91 = Index.6_46 + 1;

  <bb 16> :
  # Index_47 = PHI <Index_77(7), Index_91(15)>
  if (Index_47 < CurrentChannel_59)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # Status_48 = PHI <Status_88(12), Status_63(16)>
  goto <bb 19>; [INV]

  <bb 18> :
  Status_76 = 1;

  <bb 19> :
  # Status_49 = PHI <Status_63(2), Status_48(17), Status_76(18)>
  _92 = Status_49;

  <bb 20> :
<L18>:
  return _92;

}


Adc_Ipw_UpdateQueue (Adc_HwUnitType Unit, uint32 u32CoreId)
{
  int _1;
  short unsigned int _2;

  <bb 2> :
  Adc_RemoveFromQueue (Unit_5(D), 0);
  _1 = (int) Unit_5(D);
  _2 ={v} Adc_aUnitStatus[_1].SwNormalQueueIndex;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_Ipw_StartNormalConversion (Unit_5(D), u32CoreId_7(D));

  <bb 4> :
  return;

}


Adc_Ipw_CallNotification (Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;
  const struct Adc_ConfigType * _1;
  const uint16 * _2;
  unsigned int _3;
  unsigned int _4;
  const uint16 * _5;
  int _6;
  <unnamed type> _7;
  const struct Adc_ConfigType * _8;
  const struct Adc_GroupConfigurationType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Adc_GroupConfigurationType * _12;
  void (*<T56f>) (void) _13;
  const struct Adc_ConfigType * _14;
  const struct Adc_GroupConfigurationType * _15;
  unsigned int _16;
  unsigned int _17;
  const struct Adc_GroupConfigurationType * _18;
  void (*<T56f>) (void) _19;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId_22(D)];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group_23(D);
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex_24 = *_5;
  _6 = (int) Group_23(D);
  _7 = Adc_aGroupStatus[_6].eNotification;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _8 = Adc_pCfgPtr[u32CoreId_22(D)];
  _9 = _8->pGroups;
  _10 = (unsigned int) GroupIndex_24;
  _11 = _10 * 68;
  _12 = _9 + _11;
  _13 = _12->Notification;
  if (_13 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _14 = Adc_pCfgPtr[u32CoreId_22(D)];
  _15 = _14->pGroups;
  _16 = (unsigned int) GroupIndex_24;
  _17 = _16 * 68;
  _18 = _15 + _17;
  _19 = _18->Notification;
  _19 ();

  <bb 5> :
  return;

}


