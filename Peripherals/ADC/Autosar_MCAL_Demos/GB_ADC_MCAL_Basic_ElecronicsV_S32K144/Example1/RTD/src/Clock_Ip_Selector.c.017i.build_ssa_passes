SetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetSimTraceSel_TrustedCall (config);
  return;

}


SetSimTraceSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntryPCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074036736B;
  regValue = _3->CHIPCTL;
  regValue = regValue & 4294963199;
  _4 = selectorValue << 12;
  _5 = _4 & 4096;
  regValue = regValue | _5;
  _6 = 1074036736B;
  _6->CHIPCTL = regValue;
  return;

}


ResetSimTraceSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetSimTraceSel_TrustedCall (config);
  return;

}


ResetSimTraceSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntryPCS_hardwareValue[28];
  selectorValue = (uint32) _1;
  _2 = 1074036736B;
  regValue = _2->CHIPCTL;
  regValue = regValue & 4294963199;
  _3 = selectorValue << 12;
  _4 = _3 & 4096;
  regValue = regValue | _4;
  _5 = 1074036736B;
  _5->CHIPCTL = regValue;
  return;

}


SetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetPccPcsSelect_TrustedCall (config);
  return;

}


SetPccPcsSelect_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 pccIndex;
  uint32 regValue;

  <bb 2> :
  _1 = config->name;
  _2 = clockFeatures[_1][4];
  pccIndex = (uint32) _2;
  _3 = config->value;
  _4 = selectorEntryPCS_hardwareValue[_3];
  selectorValue = (uint32) _4;
  _5 = 1074155520B;
  regValue = _5->PCCn[pccIndex];
  regValue = regValue & 4177526783;
  _6 = selectorValue << 24;
  _7 = _6 & 117440512;
  regValue = regValue | _7;
  _8 = 1074155520B;
  _8->PCCn[pccIndex] = regValue;
  return;

}


ResetPccPcsSelect (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetPccPcsSelect_TrustedCall (config);
  return;

}


ResetPccPcsSelect_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 pccIndex;
  uint32 regValue;

  <bb 2> :
  _1 = config->name;
  _2 = clockFeatures[_1][4];
  pccIndex = (uint32) _2;
  _3 = 1074155520B;
  regValue = _3->PCCn[pccIndex];
  regValue = regValue & 3103784959;
  _4 = 1074155520B;
  _4->PCCn[pccIndex] = regValue;
  return;

}


SetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetSimClkoutSel_TrustedCall (config);
  return;

}


SetSimClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntry_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074036736B;
  regValue = _3->CHIPCTL;
  regValue = regValue & 4294967055;
  _4 = selectorValue << 4;
  regValue = regValue | _4;
  _5 = 1074036736B;
  _5->CHIPCTL = regValue;
  return;

}


ResetSimClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetSimClkoutSel_TrustedCall (config);
  return;

}


ResetSimClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 regValue;

  <bb 2> :
  _1 = 1074036736B;
  regValue = _1->CHIPCTL;
  regValue = regValue & 4294965007;
  _2 = 1074036736B;
  _2->CHIPCTL = regValue;
  return;

}


SetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetSimFtmoptSel_TrustedCall (config);
  return;

}


SetSimFtmoptSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 instance;
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntry_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = config->name;
  _4 = clockFeatures[_3][0];
  instance = (uint32) _4;
  _5 = 1074036736B;
  regValue = _5->FTMOPT0;
  if (instance <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = instance << 1;
  _7 = _6 + 24;
  _8 = 3 << _7;
  _9 = ~_8;
  regValue = regValue & _9;
  _10 = instance << 1;
  _11 = _10 + 24;
  _12 = selectorValue << _11;
  regValue = regValue | _12;
  goto <bb 5>; [INV]

  <bb 4> :
  _13 = instance + 4294967292;
  _14 = _13 << 1;
  _15 = _14 + 16;
  _16 = 3 << _15;
  _17 = ~_16;
  regValue = regValue & _17;
  _18 = instance + 4294967292;
  _19 = _18 << 1;
  _20 = _19 + 16;
  _21 = selectorValue << _20;
  regValue = regValue | _21;

  <bb 5> :
  _22 = 1074036736B;
  _22->FTMOPT0 = regValue;
  return;

}


ResetSimFtmoptSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetSimFtmoptSel_TrustedCall (config);
  return;

}


ResetSimFtmoptSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 instance;
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntry_hardwareValue[5];
  selectorValue = (uint32) _1;
  _2 = config->name;
  _3 = clockFeatures[_2][0];
  instance = (uint32) _3;
  _4 = 1074036736B;
  regValue = _4->FTMOPT0;
  if (instance <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = instance << 1;
  _6 = _5 + 24;
  _7 = 3 << _6;
  _8 = ~_7;
  regValue = regValue & _8;
  _9 = instance << 1;
  _10 = _9 + 24;
  _11 = selectorValue << _10;
  regValue = regValue | _11;
  goto <bb 5>; [INV]

  <bb 4> :
  _12 = instance + 4294967292;
  _13 = _12 << 1;
  _14 = _13 + 16;
  _15 = 3 << _14;
  _16 = ~_15;
  regValue = regValue & _16;
  _17 = instance + 4294967292;
  _18 = _17 << 1;
  _19 = _18 + 16;
  _20 = selectorValue << _19;
  regValue = regValue | _20;

  <bb 5> :
  _21 = 1074036736B;
  _21->FTMOPT0 = regValue;
  return;

}


SetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetScgClkoutSel_TrustedCall (config);
  return;

}


SetScgClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntrySCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074151424B;
  regValue = _3->CLKOUTCNFG;
  regValue = regValue & 4043309055;
  _4 = selectorValue << 24;
  regValue = regValue | _4;
  _5 = 1074151424B;
  _5->CLKOUTCNFG = regValue;
  return;

}


ResetScgClkoutSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetScgClkoutSel_TrustedCall (config);
  return;

}


ResetScgClkoutSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue = (uint32) _1;
  _2 = 1074151424B;
  regValue = _2->CLKOUTCNFG;
  regValue = regValue & 4043309055;
  _3 = selectorValue << 24;
  regValue = regValue | _3;
  _4 = 1074151424B;
  _4->CLKOUTCNFG = regValue;
  return;

}


SetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetSimLpoSel_TrustedCall (config);
  return;

}


SetSimLpoSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntryPCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074036736B;
  regValue = _3->LPOCLKS;
  regValue = regValue & 4294967283;
  _4 = selectorValue << 2;
  regValue = regValue | _4;
  _5 = 1074036736B;
  _5->LPOCLKS = regValue;
  return;

}


ResetSimLpoSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetSimLpoSel_TrustedCall (config);
  return;

}


ResetSimLpoSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntryPCS_hardwareValue[1];
  selectorValue = (uint32) _1;
  _2 = 1074036736B;
  regValue = _2->LPOCLKS;
  regValue = regValue & 4294967283;
  _3 = selectorValue << 2;
  regValue = regValue | _3;
  _4 = 1074036736B;
  _4->LPOCLKS = regValue;
  return;

}


SetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetSimRtcSel_TrustedCall (config);
  return;

}


SetSimRtcSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntry_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074036736B;
  regValue = _3->LPOCLKS;
  regValue = regValue & 4294967247;
  _4 = selectorValue << 4;
  regValue = regValue | _4;
  _5 = 1074036736B;
  _5->LPOCLKS = regValue;
  return;

}


ResetSimRtcSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetSimRtcSel_TrustedCall (config);
  return;

}


ResetSimRtcSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntry_hardwareValue[14];
  selectorValue = (uint32) _1;
  _2 = 1074036736B;
  regValue = _2->LPOCLKS;
  regValue = regValue & 4294967247;
  _3 = selectorValue << 4;
  regValue = regValue | _3;
  _4 = 1074036736B;
  _4->LPOCLKS = regValue;
  return;

}


SetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetScgHsrunSel_TrustedCall (config);
  return;

}


SetScgHsrunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntrySCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074151424B;
  regValue = _3->HCCR;
  regValue = regValue & 4043309055;
  _4 = selectorValue << 24;
  _5 = _4 & 251658240;
  regValue = regValue | _5;
  _6 = 1074151424B;
  _6->HCCR = regValue;
  return;

}


ResetScgHsrunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetScgHsrunSel_TrustedCall (config);
  return;

}


ResetScgHsrunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue = (uint32) _1;
  _2 = 1074151424B;
  regValue = _2->HCCR;
  regValue = regValue & 4043309055;
  _3 = selectorValue << 24;
  _4 = _3 & 251658240;
  regValue = regValue | _4;
  _5 = 1074151424B;
  _5->HCCR = regValue;
  return;

}


SetScgVlprSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetScgVlprSel_TrustedCall (config);
  return;

}


SetScgVlprSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntrySCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074151424B;
  regValue = _3->VCCR;
  regValue = regValue & 4043309055;
  _4 = selectorValue << 24;
  _5 = _4 & 251658240;
  regValue = regValue | _5;
  _6 = 1074151424B;
  _6->VCCR = regValue;
  return;

}


SetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  SetScgRunSel_TrustedCall (config);
  return;

}


SetScgRunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = config->value;
  _2 = selectorEntrySCS_hardwareValue[_1];
  selectorValue = (uint32) _2;
  _3 = 1074151424B;
  regValue = _3->RCCR;
  regValue = regValue & 4043309055;
  _4 = selectorValue << 24;
  _5 = _4 & 251658240;
  regValue = regValue | _5;
  _6 = 1074151424B;
  _6->RCCR = regValue;
  return;

}


ResetScgRunSel (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  ResetScgRunSel_TrustedCall (config);
  return;

}


ResetScgRunSel_TrustedCall (const struct Clock_Ip_SelectorConfigType * config)
{
  uint32 selectorValue;
  uint32 regValue;

  <bb 2> :
  _1 = selectorEntrySCS_hardwareValue[5];
  selectorValue = (uint32) _1;
  _2 = 1074151424B;
  regValue = _2->RCCR;
  regValue = regValue & 4043309055;
  _3 = selectorValue << 24;
  _4 = _3 & 251658240;
  regValue = regValue | _4;
  _5 = 1074151424B;
  _5->RCCR = regValue;
  return;

}


Callback_SelectorEmpty (const struct Clock_Ip_SelectorConfigType * config)
{
  <bb 2> :
  return;

}


