
Marking local functions:


Marking externally visible functions: Uart_GetStatus Uart_AsyncSend Uart_AsyncReceive Uart_SyncReceive Uart_SyncSend Uart_SetBuffer Uart_Abort Uart_GetBaudrate Uart_SetBaudrate Uart_Deinit Uart_Init


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Uart_Ipw_AbortReceivingData/62 (Uart_Ipw_AbortReceivingData) @05f479a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Abort/39 
  Calls: 
Uart_Ipw_AbortSendingData/61 (Uart_Ipw_AbortSendingData) @05f478c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Abort/39 
  Calls: 
Uart_Ipw_GetBaudrate/60 (Uart_Ipw_GetBaudrate) @05f47700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetBaudrate/38 
  Calls: 
Uart_Ipw_SetBaudrate/59 (Uart_Ipw_SetBaudrate) @05f47540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_SetBaudrate/37 
  Calls: 
Uart_Ipw_Deinit/58 (Uart_Ipw_Deinit) @05f472a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Deinit/36 
  Calls: 
Uart_Ipw_Init/57 (Uart_Ipw_Init) @05f470e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Init/35 
  Calls: 
Uart_pxPBcfgVariantPredefined/56 (Uart_pxPBcfgVariantPredefined) @05f43750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Uart_Init/35 (read)
  Availability: not_available
  Varpool flags: read-only
Uart_Ipw_SetRxBuffer/55 (Uart_Ipw_SetRxBuffer) @05de7e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSetBuffer/34 
  Calls: 
Uart_Ipw_SetTxBuffer/54 (Uart_Ipw_SetTxBuffer) @05de7d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSetBuffer/34 
  Calls: 
Uart_Ipw_AsyncSend/53 (Uart_Ipw_AsyncSend) @05de7b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartAsyncSend/33 
  Calls: 
Uart_Ipw_AsyncReceive/52 (Uart_Ipw_AsyncReceive) @05de79a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartAsyncReceive/32 
  Calls: 
Uart_Ipw_SyncSend/51 (Uart_Ipw_SyncSend) @05de77e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSyncSend/31 
  Calls: 
Uart_Ipw_GetTransmitStatus/50 (Uart_Ipw_GetTransmitStatus) @05de7700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetStatus/45 Uart_SetBaudrate/37 Uart_Deinit/36 Uart_StartAsyncSend/33 Uart_StartSyncSend/31 
  Calls: 
Det_ReportRuntimeError/49 (Det_ReportRuntimeError) @05de7540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Deinit/36 Uart_StartSyncSend/31 Uart_StartSyncReceive/30 
  Calls: 
Uart_Ipw_SyncReceive/48 (Uart_Ipw_SyncReceive) @05de7460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSyncReceive/30 
  Calls: 
Det_ReportError/47 (Det_ReportError) @05de7380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetStatus/45 Uart_GetStatus/45 Uart_GetStatus/45 Uart_AsyncSend/44 Uart_AsyncSend/44 Uart_AsyncSend/44 Uart_AsyncSend/44 Uart_AsyncReceive/43 Uart_AsyncReceive/43 Uart_AsyncReceive/43 Uart_AsyncReceive/43 Uart_SyncReceive/42 Uart_SyncReceive/42 Uart_SyncReceive/42 Uart_SyncReceive/42 Uart_SyncSend/41 Uart_SyncSend/41 Uart_SyncSend/41 Uart_SyncSend/41 Uart_SetBuffer/40 Uart_SetBuffer/40 Uart_SetBuffer/40 Uart_SetBuffer/40 Uart_Abort/39 Uart_Abort/39 Uart_GetBaudrate/38 Uart_GetBaudrate/38 Uart_GetBaudrate/38 Uart_SetBaudrate/37 Uart_SetBaudrate/37 Uart_SetBaudrate/37 Uart_Deinit/36 Uart_Init/35 Uart_Init/35 Uart_StartAsyncSend/33 Uart_StartAsyncReceive/32 Uart_StartSyncSend/31 Uart_StartSyncReceive/30 
  Calls: 
Uart_Ipw_GetReceiveStatus/46 (Uart_Ipw_GetReceiveStatus) @05de72a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetStatus/45 Uart_SetBaudrate/37 Uart_Deinit/36 Uart_StartAsyncReceive/32 Uart_StartSyncReceive/30 
  Calls: 
Uart_GetStatus/45 (Uart_GetStatus) @05ddab60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_GetReceiveStatus/46 Uart_Ipw_GetTransmitStatus/50 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_AsyncSend/44 (Uart_AsyncSend) @05dda620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartAsyncSend/33 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_AsyncReceive/43 (Uart_AsyncReceive) @05dda0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartAsyncReceive/32 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_SyncReceive/42 (Uart_SyncReceive) @05ddad20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSyncReceive/30 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_SyncSend/41 (Uart_SyncSend) @05ddaa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSyncSend/31 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_SetBuffer/40 (Uart_SetBuffer) @05dda7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSetBuffer/34 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_Abort/39 (Uart_Abort) @05dda540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_AbortReceivingData/62 Uart_Ipw_AbortSendingData/61 Det_ReportError/47 Det_ReportError/47 
Uart_GetBaudrate/38 (Uart_GetBaudrate) @05dda2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_GetBaudrate/60 Det_ReportError/47 Det_ReportError/47 Det_ReportError/47 
Uart_SetBaudrate/37 (Uart_SetBaudrate) @05dda000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_au32ClockFrequency/28 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_SetBaudrate/59 Det_ReportError/47 Uart_Ipw_GetTransmitStatus/50 Uart_Ipw_GetReceiveStatus/46 Det_ReportError/47 Det_ReportError/47 
Uart_Deinit/36 (Uart_Deinit) @05e7aa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_au8DriverStatus/27 (write)Uart_apConfig/29 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Det_ReportRuntimeError/49 Uart_Ipw_Deinit/58 Uart_Ipw_GetTransmitStatus/50 Uart_Ipw_GetReceiveStatus/46 Det_ReportError/47 
Uart_Init/35 (Uart_Init) @05e7a540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_pxPBcfgVariantPredefined/56 (read)Uart_apConfig/29 (write)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_au32ClockFrequency/28 (write)Uart_au8DriverStatus/27 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_Init/57 Det_ReportError/47 Det_ReportError/47 
Uart_StartSetBuffer/34 (Uart_StartSetBuffer) @05e7aee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SetBuffer/40 
  Calls: Uart_Ipw_SetRxBuffer/55 Uart_Ipw_SetTxBuffer/54 
Uart_StartAsyncSend/33 (Uart_StartAsyncSend) @05e7ac40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_AsyncSend/44 
  Calls: Uart_Ipw_AsyncSend/53 Det_ReportError/47 Uart_Ipw_GetTransmitStatus/50 
Uart_StartAsyncReceive/32 (Uart_StartAsyncReceive) @05e7a9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_AsyncReceive/43 
  Calls: Uart_Ipw_AsyncReceive/52 Det_ReportError/47 Uart_Ipw_GetReceiveStatus/46 
Uart_StartSyncSend/31 (Uart_StartSyncSend) @05e7a700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SyncSend/41 
  Calls: Det_ReportRuntimeError/49 Uart_Ipw_SyncSend/51 Det_ReportError/47 Uart_Ipw_GetTransmitStatus/50 
Uart_StartSyncReceive/30 (Uart_StartSyncReceive) @05e7a460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SyncReceive/42 
  Calls: Det_ReportRuntimeError/49 Uart_Ipw_SyncReceive/48 Det_ReportError/47 Uart_Ipw_GetReceiveStatus/46 
Uart_apConfig/29 (Uart_apConfig) @05dd2a68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_Init/35 (write)Uart_Init/35 (read)Uart_Init/35 (read)Uart_Init/35 (read)Uart_Init/35 (read)Uart_Deinit/36 (read)Uart_Deinit/36 (read)Uart_Deinit/36 (read)Uart_Deinit/36 (read)Uart_Deinit/36 (write)
  Availability: available
  Varpool flags:
Uart_au32ClockFrequency/28 (Uart_au32ClockFrequency) @05dd2990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_Init/35 (write)Uart_SetBaudrate/37 (read)
  Availability: available
  Varpool flags:
Uart_au8DriverStatus/27 (Uart_au8DriverStatus) @05dd2900
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_Init/35 (read)Uart_Init/35 (write)Uart_Deinit/36 (read)Uart_Deinit/36 (write)Uart_SetBaudrate/37 (read)Uart_GetBaudrate/38 (read)Uart_Abort/39 (read)Uart_SetBuffer/40 (read)Uart_SyncSend/41 (read)Uart_SyncReceive/42 (read)Uart_AsyncReceive/43 (read)Uart_AsyncSend/44 (read)Uart_GetStatus/45 (read)
  Availability: available
  Varpool flags:
Uart_GetStatus (uint8 Channel, uint32 * BytesTransfered, Uart_DataDirectionType TransferType)
{
  uint8 CoreId;
  Uart_StatusType TempReturn;
  Uart_StatusType D.6439;

  <bb 2> :
  TempReturn = 4;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 9, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 9, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (BytesTransfered == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 9, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (TransferType == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  TempReturn = Uart_Ipw_GetTransmitStatus (Channel, BytesTransfered);
  goto <bb 11>; [INV]

  <bb 10> :
  TempReturn = Uart_Ipw_GetReceiveStatus (Channel, BytesTransfered);

  <bb 11> :
  D.6439 = TempReturn;

  <bb 12> :
<L12>:
  return D.6439;

}


Uart_AsyncSend (uint8 Channel, const uint8 * Buffer, uint32 BufferSize)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6425;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 5, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 5, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (Buffer == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 5, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (BufferSize == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Det_ReportError (255, 0, 5, 7);
  goto <bb 11>; [INV]

  <bb 10> :
  TempReturn = Uart_StartAsyncSend (CoreId, Channel, Buffer, BufferSize);

  <bb 11> :
  D.6425 = TempReturn;

  <bb 12> :
<L12>:
  return D.6425;

}


Uart_AsyncReceive (uint8 Channel, uint8 * Buffer, uint32 BufferSize)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6411;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 7, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 7, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (Buffer == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 7, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (BufferSize == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Det_ReportError (255, 0, 7, 7);
  goto <bb 11>; [INV]

  <bb 10> :
  TempReturn = Uart_StartAsyncReceive (CoreId, Channel, Buffer, BufferSize);

  <bb 11> :
  D.6411 = TempReturn;

  <bb 12> :
<L12>:
  return D.6411;

}


Uart_SyncReceive (uint8 Channel, uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6397;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 6, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 6, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (Buffer == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 6, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (BufferSize == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Det_ReportError (255, 0, 6, 7);
  goto <bb 11>; [INV]

  <bb 10> :
  TempReturn = Uart_StartSyncReceive (CoreId, Channel, Buffer, BufferSize, Timeout);

  <bb 11> :
  D.6397 = TempReturn;

  <bb 12> :
<L12>:
  return D.6397;

}


Uart_SyncSend (uint8 Channel, const uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6383;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 4, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 4, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (Buffer == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 4, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (BufferSize == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Det_ReportError (255, 0, 4, 7);
  goto <bb 11>; [INV]

  <bb 10> :
  TempReturn = Uart_StartSyncSend (CoreId, Channel, Buffer, BufferSize, Timeout);

  <bb 11> :
  D.6383 = TempReturn;

  <bb 12> :
<L12>:
  return D.6383;

}


Uart_SetBuffer (uint8 Channel, uint8 * Buffer, uint32 BufferSize, Uart_DataDirectionType Direction)
{
  uint8 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 11, 1);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 11, 2);
  goto <bb 11>; [INV]

  <bb 6> :
  if (Buffer == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 11, 3);
  goto <bb 11>; [INV]

  <bb 8> :
  if (BufferSize == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Det_ReportError (255, 0, 11, 7);
  goto <bb 11>; [INV]

  <bb 10> :
  Uart_StartSetBuffer (CoreId, Channel, Buffer, BufferSize, Direction);

  <bb 11> :
  return;

}


Uart_Abort (uint8 Channel, Uart_DataDirectionType TransmissionType)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6357;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 8, 1);
  goto <bb 9>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 8, 2);
  goto <bb 9>; [INV]

  <bb 6> :
  if (TransmissionType == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  TempReturn = Uart_Ipw_AbortSendingData (Channel);
  goto <bb 9>; [INV]

  <bb 8> :
  TempReturn = Uart_Ipw_AbortReceivingData (Channel);

  <bb 9> :
  D.6357 = TempReturn;

  <bb 10> :
<L9>:
  return D.6357;

}


Uart_GetBaudrate (uint8 Channel, uint32 * Baudrate)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6346;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 3, 1);
  goto <bb 9>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 3, 2);
  goto <bb 9>; [INV]

  <bb 6> :
  if (Baudrate == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Det_ReportError (255, 0, 3, 3);
  goto <bb 9>; [INV]

  <bb 8> :
  Uart_Ipw_GetBaudrate (Channel, Baudrate);
  TempReturn = 0;

  <bb 9> :
  D.6346 = TempReturn;

  <bb 10> :
<L9>:
  return D.6346;

}


Uart_SetBaudrate (uint8 Channel, Uart_BaudrateType Baudrate)
{
  Uart_StatusType TransmitStatus;
  Uart_StatusType ReceiveStatus;
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6335;

  <bb 2> :
  TempReturn = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 2, 1);
  goto <bb 10>; [INV]

  <bb 4> :
  if (Channel != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 2, 2);
  goto <bb 10>; [INV]

  <bb 6> :
  ReceiveStatus = Uart_Ipw_GetReceiveStatus (Channel, 0B);
  TransmitStatus = Uart_Ipw_GetTransmitStatus (Channel, 0B);
  if (ReceiveStatus == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (TransmitStatus == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (255, 0, 2, 6);
  goto <bb 10>; [INV]

  <bb 9> :
  _3 = (int) CoreId;
  _4 = (int) Channel;
  _5 = Uart_au32ClockFrequency[_3][_4];
  TempReturn = Uart_Ipw_SetBaudrate (Channel, Baudrate, _5);

  <bb 10> :
  D.6335 = TempReturn;

  <bb 11> :
<L10>:
  return D.6335;

}


Uart_Deinit ()
{
  boolean IsAllChannelsIdle;
  Uart_StatusType TransmitStatus;
  Uart_StatusType ReceiveStatus;
  uint8 Channel;
  uint8 CoreId;
  uint8 u8ChLoop;

  <bb 2> :
  u8ChLoop = 0;
  CoreId = 0;
  IsAllChannelsIdle = 1;
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 1, 1);
  goto <bb 19>; [INV]

  <bb 4> :
  u8ChLoop = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  _3 = (int) CoreId;
  _4 = Uart_apConfig[_3];
  _5 = (int) u8ChLoop;
  _6 = _4->Configs[_5];
  if (_6 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _7 = (int) CoreId;
  _8 = Uart_apConfig[_7];
  _9 = (int) u8ChLoop;
  _10 = _8->Configs[_9];
  Channel = _10->UartChannelId;
  ReceiveStatus = Uart_Ipw_GetReceiveStatus (Channel, 0B);
  TransmitStatus = Uart_Ipw_GetTransmitStatus (Channel, 0B);
  if (ReceiveStatus == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (TransmitStatus == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  IsAllChannelsIdle = 0;
  goto <bb 11>; [INV]

  <bb 9> :
  u8ChLoop.1_11 = u8ChLoop;
  u8ChLoop = u8ChLoop.1_11 + 1;

  <bb 10> :
  if (u8ChLoop == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (IsAllChannelsIdle != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 12> :
  u8ChLoop = 0;
  goto <bb 16>; [INV]

  <bb 13> :
  _12 = (int) CoreId;
  _13 = Uart_apConfig[_12];
  _14 = (int) u8ChLoop;
  _15 = _13->Configs[_14];
  if (_15 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _16 = (int) CoreId;
  _17 = Uart_apConfig[_16];
  _18 = (int) u8ChLoop;
  _19 = _17->Configs[_18];
  Channel = _19->UartChannelId;
  Uart_Ipw_Deinit (Channel);

  <bb 15> :
  u8ChLoop.2_20 = u8ChLoop;
  u8ChLoop = u8ChLoop.2_20 + 1;

  <bb 16> :
  if (u8ChLoop == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _21 = (int) CoreId;
  Uart_au8DriverStatus[_21] = 0;
  _22 = (int) CoreId;
  Uart_apConfig[_22] = 0B;
  goto <bb 19>; [INV]

  <bb 18> :
  Det_ReportRuntimeError (255, 0, 1, 16);

  <bb 19> :
  return;

}


Uart_Init (const struct Uart_ConfigType * Config)
{
  uint8 Channel;
  uint8 CoreId;
  uint8 u8ChLoop;

  <bb 2> :
  CoreId = 0;
  _1 = (int) CoreId;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 0, 4);
  goto <bb 12>; [INV]

  <bb 4> :
  if (Config != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (255, 0, 0, 9);
  goto <bb 12>; [INV]

  <bb 6> :
  _3 = (int) CoreId;
  _4 = (int) CoreId;
  _5 = Uart_pxPBcfgVariantPredefined[_3];
  Uart_apConfig[_4] = _5;
  u8ChLoop = 0;
  goto <bb 10>; [INV]

  <bb 7> :
  _6 = (int) CoreId;
  _7 = Uart_apConfig[_6];
  _8 = (int) u8ChLoop;
  _9 = _7->Configs[_8];
  if (_9 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = (int) CoreId;
  _11 = Uart_apConfig[_10];
  _12 = (int) u8ChLoop;
  _13 = _11->Configs[_12];
  Channel = _13->UartChannelId;
  _14 = (int) CoreId;
  _15 = Uart_apConfig[_14];
  _16 = (int) u8ChLoop;
  _17 = _15->Configs[_16];
  _18 = _17->UartChannelConfig;
  Uart_Ipw_Init (Channel, _18);
  _19 = (int) CoreId;
  _20 = Uart_apConfig[_19];
  _21 = (int) u8ChLoop;
  _22 = _20->Configs[_21];
  _23 = (int) CoreId;
  _24 = (int) Channel;
  _25 = _22->ChannelClockFrequency;
  Uart_au32ClockFrequency[_23][_24] = _25;

  <bb 9> :
  u8ChLoop.0_26 = u8ChLoop;
  u8ChLoop = u8ChLoop.0_26 + 1;

  <bb 10> :
  if (u8ChLoop == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _27 = (int) CoreId;
  Uart_au8DriverStatus[_27] = 1;

  <bb 12> :
  return;

}


Uart_StartSetBuffer (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize, Uart_DataDirectionType Direction)
{
  <bb 2> :
  if (Direction == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Uart_Ipw_SetTxBuffer (Channel, Buffer, BufferSize);
  goto <bb 5>; [INV]

  <bb 4> :
  Uart_Ipw_SetRxBuffer (Channel, Buffer, BufferSize);

  <bb 5> :
  return;

}


Uart_StartAsyncSend (uint8 CoreId, uint8 Channel, const uint8 * Buffer, uint32 BufferSize)
{
  Uart_StatusType TransmitStatus;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6299;

  <bb 2> :
  TempReturn = 1;
  TransmitStatus = Uart_Ipw_GetTransmitStatus (Channel, 0B);
  if (TransmitStatus == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 5, 6);
  goto <bb 5>; [INV]

  <bb 4> :
  TempReturn = Uart_Ipw_AsyncSend (Channel, Buffer, BufferSize);

  <bb 5> :
  D.6299 = TempReturn;

  <bb 6> :
<L3>:
  return D.6299;

}


Uart_StartAsyncReceive (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize)
{
  Uart_StatusType ReceiveStatus;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6294;

  <bb 2> :
  TempReturn = 1;
  ReceiveStatus = Uart_Ipw_GetReceiveStatus (Channel, 0B);
  if (ReceiveStatus == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 7, 6);
  goto <bb 5>; [INV]

  <bb 4> :
  TempReturn = Uart_Ipw_AsyncReceive (Channel, Buffer, BufferSize);

  <bb 5> :
  D.6294 = TempReturn;

  <bb 6> :
<L3>:
  return D.6294;

}


Uart_StartSyncSend (uint8 CoreId, uint8 Channel, const uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  Uart_StatusType TransmitStatus;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6289;

  <bb 2> :
  TempReturn = 1;
  TransmitStatus = Uart_Ipw_GetTransmitStatus (Channel, 0B);
  if (TransmitStatus == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 4, 6);
  goto <bb 6>; [INV]

  <bb 4> :
  TempReturn = Uart_Ipw_SyncSend (Channel, Buffer, BufferSize, Timeout);
  if (TempReturn == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportRuntimeError (255, 0, 4, 8);
  TempReturn = 1;

  <bb 6> :
  D.6289 = TempReturn;

  <bb 7> :
<L5>:
  return D.6289;

}


Uart_StartSyncReceive (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  Uart_StatusType ReceiveStatus;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6282;

  <bb 2> :
  TempReturn = 1;
  ReceiveStatus = Uart_Ipw_GetReceiveStatus (Channel, 0B);
  if (ReceiveStatus == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (255, 0, 6, 6);
  goto <bb 6>; [INV]

  <bb 4> :
  TempReturn = Uart_Ipw_SyncReceive (Channel, Buffer, BufferSize, Timeout);
  if (TempReturn == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportRuntimeError (255, 0, 6, 8);
  TempReturn = 1;

  <bb 6> :
  D.6282 = TempReturn;

  <bb 7> :
<L5>:
  return D.6282;

}


