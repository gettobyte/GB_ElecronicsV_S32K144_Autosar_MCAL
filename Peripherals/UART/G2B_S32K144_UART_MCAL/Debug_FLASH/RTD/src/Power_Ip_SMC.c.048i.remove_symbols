
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Power_Ip_TimeoutExpired/4 (Power_Ip_TimeoutExpired) @06a0e0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 
  Calls: 
Power_Ip_StartTimeout/3 (Power_Ip_StartTimeout) @06a0e000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 Power_Ip_SMC_ModeConfig/2 
  Calls: 
Power_Ip_SMC_ModeConfig/2 (Power_Ip_SMC_ModeConfig) @068ebc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 Power_Ip_TimeoutExpired/4 Power_Ip_StartTimeout/3 
Power_Ip_SMC_ModeCheckEntry/1 (Power_Ip_SMC_ModeCheckEntry) @068eb9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Power_Ip_SMC_AllowedModesConfig/0 (Power_Ip_SMC_AllowedModesConfig) @068eb700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Power_Ip_SMC_ModeConfig (const struct Power_Ip_ModeConfigType * ModeConfigPtr)
{
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  uint32 PowerModeStatus;
  uint32 TempValue;
  Power_Ip_PowerModeType PowerMode;
  uint32 PowerSwitchMode;
  uint32 D.5726;
  struct SMC_Type * _1;
  struct SMC_Type * _2;
  long unsigned int TimeoutTicks.0_3;
  struct SMC_Type * _4;
  long unsigned int _5;
  _Bool _6;
  struct SMC_Type * _7;
  struct SMC_Type * _8;
  long unsigned int TimeoutTicks.1_9;
  struct SMC_Type * _10;
  long unsigned int _11;
  _Bool _12;
  struct SMC_Type * _13;
  struct SMC_Type * _14;
  long unsigned int TimeoutTicks.2_15;
  struct SMC_Type * _16;
  long unsigned int _17;
  _Bool _18;
  uint32 _61;

  <bb 2> :
  PowerSwitchMode_27 = 0;
  PowerMode_28 = 0;
  TimeoutOccurred_29 = 0;
  PowerMode_32 = ModeConfigPtr_31(D)->PowerMode;
  switch (PowerMode_32) <default: <L18> [INV], case 0: <L0> [INV], case 1: <L6> [INV], case 2: <L12> [INV]>

  <bb 3> :
<L0>:
  _1 = 1074257920B;
  TempValue_51 ={v} _1->PMCTRL;
  TempValue_52 = TempValue_51 & 4294967199;
  TempValue_53 = TempValue_52;
  _2 = 1074257920B;
  _2->PMCTRL ={v} TempValue_53;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  TimeoutTicks.0_3 = TimeoutTicks;
  TimeoutOccurred_57 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_3);
  _4 = 1074257920B;
  _5 ={v} _4->PMSTAT;
  PowerModeStatus_58 = _5 & 1;
  if (PowerModeStatus_58 != 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = ~TimeoutOccurred_57;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_57 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  PowerSwitchMode_59 = 1;

  <bb 8> :
  # PowerSwitchMode_19 = PHI <PowerSwitchMode_27(6), PowerSwitchMode_59(7)>
  goto <bb 22>; [INV]

  <bb 9> :
<L6>:
  _7 = 1074257920B;
  TempValue_42 ={v} _7->PMCTRL;
  TempValue_43 = TempValue_42 & 4294967199;
  TempValue_44 = TempValue_43 | 96;
  _8 = 1074257920B;
  _8->PMCTRL ={v} TempValue_44;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 10> :
  TimeoutTicks.1_9 = TimeoutTicks;
  TimeoutOccurred_48 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_9);
  _10 = 1074257920B;
  _11 ={v} _10->PMSTAT;
  PowerModeStatus_49 = _11 & 128;
  if (PowerModeStatus_49 != 128)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _12 = ~TimeoutOccurred_48;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (TimeoutOccurred_48 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  PowerSwitchMode_50 = 1;

  <bb 14> :
  # PowerSwitchMode_20 = PHI <PowerSwitchMode_27(12), PowerSwitchMode_50(13)>
  goto <bb 22>; [INV]

  <bb 15> :
<L12>:
  _13 = 1074257920B;
  TempValue_33 ={v} _13->PMCTRL;
  TempValue_34 = TempValue_33 & 4294967199;
  TempValue_35 = TempValue_34 | 64;
  _14 = 1074257920B;
  _14->PMCTRL ={v} TempValue_35;
  Power_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 16> :
  TimeoutTicks.2_15 = TimeoutTicks;
  TimeoutOccurred_39 = Power_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_15);
  _16 = 1074257920B;
  _17 ={v} _16->PMSTAT;
  PowerModeStatus_40 = _17 & 4;
  if (PowerModeStatus_40 != 4)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _18 = ~TimeoutOccurred_39;
  if (_18 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  if (TimeoutOccurred_39 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  PowerSwitchMode_41 = 1;

  <bb 20> :
  # PowerSwitchMode_21 = PHI <PowerSwitchMode_27(18), PowerSwitchMode_41(19)>
  goto <bb 22>; [INV]

  <bb 21> :
<L18>:
  PowerSwitchMode_60 = 1;

  <bb 22> :
  # PowerSwitchMode_22 = PHI <PowerSwitchMode_19(8), PowerSwitchMode_20(14), PowerSwitchMode_21(20), PowerSwitchMode_60(21)>
  _61 = PowerSwitchMode_22;
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};

  <bb 23> :
<L21>:
  return _61;

}


Power_Ip_SMC_ModeCheckEntry (Power_Ip_PowerModeType PowerMode)
{
  uint32 CurrentPowerMode;
  Power_Ip_SMC_ModeStatusType PowerModeCheck;
  Power_Ip_SMC_ModeStatusType D.5715;
  struct SMC_Type * _1;
  long unsigned int _2;
  Power_Ip_SMC_ModeStatusType _14;

  <bb 2> :
  PowerModeCheck_6 = 1;
  CurrentPowerMode_7 = 1;
  _1 = 1074257920B;
  _2 ={v} _1->PMSTAT;
  CurrentPowerMode_9 = _2 & 255;
  switch (PowerMode_10(D)) <default: <L8> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L4> [INV]>

  <bb 3> :
<L0>:
  PowerModeCheck_13 = 0;
  goto <bb 12>; [INV]

  <bb 4> :
<L1>:
  if (CurrentPowerMode_9 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  PowerModeCheck_12 = 0;

  <bb 6> :
  # PowerModeCheck_3 = PHI <PowerModeCheck_6(4), PowerModeCheck_12(5)>
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  if (CurrentPowerMode_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (CurrentPowerMode_9 == 16)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  PowerModeCheck_11 = 0;

  <bb 10> :
  # PowerModeCheck_4 = PHI <PowerModeCheck_6(8), PowerModeCheck_11(9)>
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:

  <bb 12> :
  # PowerModeCheck_5 = PHI <PowerModeCheck_13(3), PowerModeCheck_3(6), PowerModeCheck_4(10), PowerModeCheck_6(11)>
  _14 = PowerModeCheck_5;

  <bb 13> :
<L10>:
  return _14;

}


Power_Ip_SMC_AllowedModesConfig (const struct Power_Ip_SMC_ConfigType * ConfigPtr)
{
  long unsigned int _1;
  struct SMC_Type * _2;
  long unsigned int _3;

  <bb 2> :
  _1 = ConfigPtr_5(D)->AllowedModes;
  _2 = 1074257920B;
  _3 = _1 & 160;
  _2->PMPROT ={v} _3;
  return;

}


