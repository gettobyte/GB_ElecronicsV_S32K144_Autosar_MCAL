Pwm_Ipw_GetMaxPeriodValue (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint32 RetVal;
  uint32 D.6379;

  <bb 2> :
  RetVal = 65535;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal = 65534;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  D.6379 = RetVal;

  <bb 6> :
<L4>:
  return D.6379;

}


Pwm_Ipw_ValidateModuleId (uint8 ModuleId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6377;

  <bb 2> :
  RetVal = 0;
  if (ModuleId > 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  RetVal = 0;

  <bb 5> :
  D.6377 = RetVal;

  <bb 6> :
<L3>:
  return D.6377;

}


Pwm_Ipw_ValidateSetOutPutToIdle (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6372;

  <bb 2> :
  RetVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal = 1;

  <bb 5> :
  D.6372 = RetVal;

  <bb 6> :
<L4>:
  return D.6372;

}


Pwm_Ipw_ValidateUpdateSynchronous (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6370;

  <bb 2> :
  RetVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal = 1;

  <bb 5> :
  D.6370 = RetVal;

  <bb 6> :
<L4>:
  return D.6370;

}


Pwm_Ipw_ValidateSetDutyPhaseShiftParams (uint16 PhaseShift, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6368;

  <bb 2> :
  RetVal = 0;
  if (DutyCycle != 32768)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (DutyCycle != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _1 = IpConfig->ChannelInstanceId;
  _2 = (int) _1;
  _3 = Ftm_Pwm_Ip_aPeriod[_2];
  if (PhaseShift >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal = 1;

  <bb 6> :
  D.6368 = RetVal;

  <bb 7> :
<L6>:
  return D.6368;

}


Pwm_Ipw_ValidateSetPhaseShiftParams (uint16 PhaseShift)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6360;

  <bb 2> :
  RetVal = 0;
  if (PhaseShift > 16384)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 1;

  <bb 4> :
  D.6360 = RetVal;

  <bb 5> :
<L2>:
  return D.6360;

}


Pwm_Ipw_ValidateSetPhaseShift (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_ChannelModeType ChMode;
  Std_ReturnType RetVal;
  Std_ReturnType D.6356;

  <bb 2> :
  RetVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmChConfig;
  ChMode = _2->ChannelMode;
  if (ChMode != 34)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (ChMode != 98)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  if (ChMode != 97)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChMode != 33)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  RetVal = 1;

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
<L9>:
  RetVal = 1;

  <bb 10> :
  D.6356 = RetVal;

  <bb 11> :
<L12>:
  return D.6356;

}


Pwm_Ipw_ValidateForceOutputToZero (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6346;

  <bb 2> :
  RetVal = 0;
  D.6346 = RetVal;

  <bb 3> :
<L0>:
  return D.6346;

}


Pwm_Ipw_ValidateNotification (Pwm_EdgeNotificationType Notification, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6344;

  <bb 2> :
  RetVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal = 1;

  <bb 5> :
  D.6344 = RetVal;

  <bb 6> :
<L4>:
  return D.6344;

}


Pwm_Ipw_SyncUpdate (uint8 ModuleId)
{
  <bb 2> :
  Ftm_Pwm_Ip_SyncUpdate (ModuleId);
  return;

}


Pwm_Ipw_SetPhaseShift_NoUpdate (uint16 Period, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 PhaseShiftVal;

  <bb 2> :
  PhaseShiftVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period;
  _3 = (long unsigned int) PhaseShift;
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  PhaseShiftVal = _6 + 1;
  _7 = IpConfig->ChannelInstanceId;
  _8 = IpConfig->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, Period, PhaseShiftVal, 0);

  <bb 4> :
  return;

}


Pwm_Ipw_SetPeriodAndDuty_NoUpdate (Pwm_PeriodType Period, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;

  <bb 2> :
  FtmDutyCycle = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period;
  _3 = (long unsigned int) DutyCycle;
  _4 = _2 * _3;
  _5 = _4 / 32768;
  FtmDutyCycle = (uint16) _5;
  _6 = IpConfig->ChannelInstanceId;
  _7 = IpConfig->FtmChConfig;
  _8 = _7->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_6, _8, Period, FtmDutyCycle, 0);
  _9 = IpConfig->ChannelInstanceId;
  _10 = (int) _9;
  _11 = IpConfig->FtmChConfig;
  _12 = _11->ChannelId;
  _13 = (int) _12;
  Pwm_Ipw_aFtmDutyCycle[_10][_13] = DutyCycle;

  <bb 4> :
  return;

}


Pwm_Ipw_SetDutyCycle_NoUpdate (uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  Std_ReturnType RetVal;
  Std_ReturnType D.6336;

  <bb 2> :
  RetVal = 0;
  FtmDutyCycle = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = IpConfig->ChannelInstanceId;
  _3 = (int) _2;
  _4 = Ftm_Pwm_Ip_aPeriod[_3];
  _5 = (long unsigned int) _4;
  _6 = (long unsigned int) DutyCycle;
  _7 = _5 * _6;
  _8 = _7 / 32768;
  FtmDutyCycle = (uint16) _8;
  _9 = IpConfig->ChannelInstanceId;
  _10 = IpConfig->FtmChConfig;
  _11 = _10->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_9, _11, FtmDutyCycle, 0);
  _12 = IpConfig->ChannelInstanceId;
  _13 = (int) _12;
  _14 = IpConfig->FtmChConfig;
  _15 = _14->ChannelId;
  _16 = (int) _15;
  Pwm_Ipw_aFtmDutyCycle[_13][_16] = DutyCycle;

  <bb 4> :
  D.6336 = RetVal;

  <bb 5> :
<L3>:
  return D.6336;

}


Pwm_Ipw_SetDutyPhaseShift (uint16 DutyCycle, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig, boolean SyncUpdate)
{
  uint16 FtmDutyCycle;

  <bb 2> :
  FtmDutyCycle = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = IpConfig->ChannelInstanceId;
  _3 = (int) _2;
  _4 = Ftm_Pwm_Ip_aPeriod[_3];
  _5 = (long unsigned int) _4;
  _6 = (long unsigned int) DutyCycle;
  _7 = _5 * _6;
  _8 = _7 / 32768;
  FtmDutyCycle = (uint16) _8;
  _9 = IpConfig->ChannelInstanceId;
  _10 = IpConfig->FtmChConfig;
  _11 = _10->ChannelId;
  Ftm_Pwm_Ip_SetDutyPhaseShift (_9, _11, FtmDutyCycle, PhaseShift, SyncUpdate);
  _12 = IpConfig->ChannelInstanceId;
  _13 = (int) _12;
  _14 = IpConfig->FtmChConfig;
  _15 = _14->ChannelId;
  _16 = (int) _15;
  Pwm_Ipw_aFtmDutyCycle[_13][_16] = DutyCycle;

  <bb 4> :
  return;

}


Pwm_Ipw_SetPhaseShift (uint16 Period, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 PhaseShiftVal;

  <bb 2> :
  PhaseShiftVal = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period;
  _3 = (long unsigned int) PhaseShift;
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  PhaseShiftVal = _6 + 1;
  _7 = IpConfig->ChannelInstanceId;
  _8 = IpConfig->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, Period, PhaseShiftVal, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_ForceOutputToZero (boolean Force, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_OutputStateType OutputState;
  Ftm_Pwm_Ip_PolarityType PolCh;
  boolean ForceOutput;
  uint8 Channel;
  uint8 Instance;

  <bb 2> :
  Instance = IpConfig->ChannelInstanceId;
  _1 = IpConfig->FtmChConfig;
  Channel = _1->ChannelId;
  ForceOutput = Force;
  _2 = IpConfig->FtmChConfig;
  PolCh = _2->Polarity;
  _3 = PolCh == 1;
  OutputState = (Ftm_Pwm_Ip_OutputStateType) _3;
  _4 = (int) Instance;
  _5 = (int) Channel;
  _6 = Ftm_Pwm_Ip_aChannelState[_4][_5];
  if (_6 != 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (ForceOutput != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = (int) Instance;
  _8 = (int) Channel;
  _9 = (int) Instance;
  _10 = (int) Channel;
  _11 = Ftm_Pwm_Ip_aChannelState[_7][_8];
  Ftm_Pwm_Ip_aPreviousChannelState[_9][_10] = _11;
  _12 = (int) Instance;
  _13 = (int) Channel;
  Ftm_Pwm_Ip_aChannelState[_12][_13] = 3;
  goto <bb 8>; [INV]

  <bb 5> :
  _14 = ~ForceOutput;
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _15 = (int) Instance;
  _16 = (int) Channel;
  _17 = (int) Instance;
  _18 = (int) Channel;
  _19 = Ftm_Pwm_Ip_aPreviousChannelState[_15][_16];
  Ftm_Pwm_Ip_aChannelState[_17][_18] = _19;
  _20 = (int) Instance;
  _21 = (int) Channel;
  _22 = Ftm_Pwm_Ip_aChannelState[_20][_21];
  if (_22 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _23 = IpConfig->FtmChConfig;
  OutputState = _23->InitOut;
  ForceOutput = 1;

  <bb 8> :
  _24 = IpConfig->ChannelType;
  if (_24 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Ftm_Pwm_Ip_SwOutputControl (Instance, Channel, OutputState, ForceOutput);

  <bb 10> :
  return;

}


Pwm_Ipw_GetChannelState (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 DutyCycle;
  uint16 D.6311;

  <bb 2> :
  DutyCycle = 0;
  _1 = IpConfig->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  DutyCycle = Pwm_Ipw_aFtmDutyCycle[_3][_6];
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  D.6311 = DutyCycle;

  <bb 6> :
<L4>:
  return D.6311;

}


Pwm_Ipw_EnableNotification (Pwm_EdgeNotificationType Notification, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Ftm_Ip_EdgeNotifType FtmNotification;

  <bb 2> :
  if (Notification == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FtmNotification = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  if (Notification == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FtmNotification = 2;
  goto <bb 7>; [INV]

  <bb 6> :
  FtmNotification = 3;

  <bb 7> :
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L10> [INV], case 0: <L9> [INV], case 1: <L6> [INV]>

  <bb 8> :
<L6>:
  _2 = IpConfig->FtmChConfig;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _3 = IpConfig->ChannelInstanceId;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  Ftm_Pwm_Ip_EnableNotification (_3, _5, FtmNotification);

  <bb 10> :
  goto <bb 13>; [INV]

  <bb 11> :
<L9>:
  goto <bb 13>; [INV]

  <bb 12> :
<L10>:

  <bb 13> :
  return;

}


Pwm_Ipw_DisableNotification (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  <bb 2> :
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig->ChannelInstanceId;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  Ftm_Pwm_Ip_DisableNotification (_3, _5);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_GetOutputState (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_OutputStateType FtmRetVal;
  Pwm_OutputStateType RetVal;
  Pwm_OutputStateType D.6299;

  <bb 2> :
  RetVal = 0;
  FtmRetVal = 0;
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L7> [INV], case 0: <L6> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _3 = IpConfig->ChannelInstanceId;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  FtmRetVal = Ftm_Pwm_Ip_GetOutputState (_3, _5);
  if (FtmRetVal == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  RetVal = 1;

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
<L6>:
  goto <bb 10>; [INV]

  <bb 9> :
<L7>:

  <bb 10> :
  D.6299 = RetVal;

  <bb 11> :
<L9>:
  return D.6299;

}


Pwm_Ipw_SetOutputToIdle (const Pwm_OutputStateType IdleState, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint8 Channel;
  uint8 Instance;

  <bb 2> :
  Instance = IpConfig->ChannelInstanceId;
  _1 = IpConfig->FtmChConfig;
  Channel = _1->ChannelId;
  _2 = IpConfig->ChannelType;
  switch (_2) <default: <L5> [INV], case 0: <L4> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = (int) Instance;
  _4 = (int) Channel;
  _5 = Ftm_Pwm_Ip_aChannelState[_3][_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) Instance;
  _7 = (int) Channel;
  Ftm_Pwm_Ip_aChannelState[_6][_7] = 2;
  _8 = IpConfig->FtmChConfig;
  _9 = _8->InitOut;
  Ftm_Pwm_Ip_SwOutputControl (Instance, Channel, _9, 1);
  _10 = IpConfig->ChannelInstanceId;
  _11 = (int) _10;
  _12 = IpConfig->FtmChConfig;
  _13 = _12->ChannelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = 0;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetPeriodAndDuty (Pwm_PeriodType Period, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;

  <bb 2> :
  FtmDutyCycle = 0;
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (long unsigned int) Period;
  _4 = (long unsigned int) DutyCycle;
  _5 = _3 * _4;
  _6 = _5 / 32768;
  FtmDutyCycle = (uint16) _6;
  _7 = IpConfig->ChannelInstanceId;
  _8 = IpConfig->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_7, _9, Period, FtmDutyCycle, 1);
  _10 = IpConfig->ChannelInstanceId;
  _11 = (int) _10;
  _12 = IpConfig->FtmChConfig;
  _13 = _12->ChannelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = DutyCycle;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetDutyCycle (uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  Std_ReturnType RetVal;
  Std_ReturnType D.6287;

  <bb 2> :
  RetVal = 0;
  FtmDutyCycle = 0;
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig->ChannelInstanceId;
  _4 = (int) _3;
  _5 = Ftm_Pwm_Ip_aPeriod[_4];
  _6 = (long unsigned int) _5;
  _7 = (long unsigned int) DutyCycle;
  _8 = _6 * _7;
  _9 = _8 / 32768;
  FtmDutyCycle = (uint16) _9;
  _10 = IpConfig->ChannelInstanceId;
  _11 = IpConfig->FtmChConfig;
  _12 = _11->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_10, _12, FtmDutyCycle, 1);
  _13 = IpConfig->ChannelInstanceId;
  _14 = (int) _13;
  _15 = IpConfig->FtmChConfig;
  _16 = _15->ChannelId;
  _17 = (int) _16;
  Pwm_Ipw_aFtmDutyCycle[_14][_17] = DutyCycle;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  D.6287 = RetVal;

  <bb 9> :
<L6>:
  return D.6287;

}


Pwm_Ipw_DeInitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <bb 2> :
  _1 = IpConfig->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig->InstanceId;
  Ftm_Pwm_Ip_DeInit (_3);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_DeInit (const struct Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
  <bb 2> :
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = 0;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Pwm_Ipw_InitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <bb 2> :
  _1 = IpConfig->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig->InstanceId;
  _4 = IpConfig->FtmInsConfig;
  Ftm_Pwm_Ip_Init (_3, _4);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_Init (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  <bb 2> :
  _1 = IpConfig->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  _7 = IpConfig->ChannelDutyCycle;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = _7;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


