Symbol table:

Ftm_Pwm_Ip_SyncUpdate/42 (Ftm_Pwm_Ip_SyncUpdate) @06a2dee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SyncUpdate/19 
  Calls: 
Ftm_Pwm_Ip_SetDutyPhaseShift/41 (Ftm_Pwm_Ip_SetDutyPhaseShift) @06a2da80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetDutyPhaseShift/15 
  Calls: 
Ftm_Pwm_Ip_SetPhaseShift/40 (Ftm_Pwm_Ip_SetPhaseShift) @06a2d8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetPhaseShift_NoUpdate/18 Pwm_Ipw_SetPhaseShift/14 
  Calls: 
Ftm_Pwm_Ip_aPreviousChannelState/39 (Ftm_Pwm_Ip_aPreviousChannelState) @06a2f9d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Pwm_Ipw_ForceOutputToZero/13 (write)Pwm_Ipw_ForceOutputToZero/13 (read)
  Availability: not_available
  Varpool flags:
Ftm_Pwm_Ip_EnableNotification/38 (Ftm_Pwm_Ip_EnableNotification) @06a2d460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_EnableNotification/11 
  Calls: 
Ftm_Pwm_Ip_DisableNotification/37 (Ftm_Pwm_Ip_DisableNotification) @06a2d2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_DisableNotification/10 
  Calls: 
Ftm_Pwm_Ip_GetOutputState/36 (Ftm_Pwm_Ip_GetOutputState) @06a2d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_GetOutputState/9 
  Calls: 
Ftm_Pwm_Ip_SwOutputControl/35 (Ftm_Pwm_Ip_SwOutputControl) @069f10e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_ForceOutputToZero/13 Pwm_Ipw_SetOutputToIdle/8 
  Calls: 
Ftm_Pwm_Ip_aChannelState/34 (Ftm_Pwm_Ip_aChannelState) @06a2a8b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Pwm_Ipw_SetOutputToIdle/8 (read)Pwm_Ipw_SetOutputToIdle/8 (write)Pwm_Ipw_ForceOutputToZero/13 (read)Pwm_Ipw_ForceOutputToZero/13 (read)Pwm_Ipw_ForceOutputToZero/13 (write)Pwm_Ipw_ForceOutputToZero/13 (write)Pwm_Ipw_ForceOutputToZero/13 (read)
  Availability: not_available
  Varpool flags:
Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/33 (Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty) @069f1e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetPeriodAndDuty_NoUpdate/17 Pwm_Ipw_SetPeriodAndDuty/7 
  Calls: 
Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/32 (Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel) @069f1c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetDutyCycle_NoUpdate/16 Pwm_Ipw_SetDutyCycle/6 
  Calls: 
Ftm_Pwm_Ip_aPeriod/31 (Ftm_Pwm_Ip_aPeriod) @06a2a2d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Pwm_Ipw_SetDutyPhaseShift/15 (read)Pwm_Ipw_SetDutyCycle_NoUpdate/16 (read)Pwm_Ipw_SetDutyCycle/6 (read)Pwm_Ipw_ValidateSetDutyPhaseShiftParams/24 (read)
  Availability: not_available
  Varpool flags:
Ftm_Pwm_Ip_DeInit/30 (Ftm_Pwm_Ip_DeInit) @069f1a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_DeInitInstance/5 
  Calls: 
Ftm_Pwm_Ip_Init/29 (Ftm_Pwm_Ip_Init) @069f17e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_InitInstance/3 
  Calls: 
Pwm_Ipw_GetMaxPeriodValue/28 (Pwm_Ipw_GetMaxPeriodValue) @069f12a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateModuleId/27 (Pwm_Ipw_ValidateModuleId) @069f1000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetOutPutToIdle/26 (Pwm_Ipw_ValidateSetOutPutToIdle) @069ebb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateUpdateSynchronous/25 (Pwm_Ipw_ValidateUpdateSynchronous) @069eb620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetDutyPhaseShiftParams/24 (Pwm_Ipw_ValidateSetDutyPhaseShiftParams) @069eb0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aPeriod/31 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShiftParams/23 (Pwm_Ipw_ValidateSetPhaseShiftParams) @069ebd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShift/22 (Pwm_Ipw_ValidateSetPhaseShift) @069eba80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateForceOutputToZero/21 (Pwm_Ipw_ValidateForceOutputToZero) @069eb7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateNotification/20 (Pwm_Ipw_ValidateNotification) @069eb540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_SyncUpdate/19 (Pwm_Ipw_SyncUpdate) @069eb2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SyncUpdate/42 
Pwm_Ipw_SetPhaseShift_NoUpdate/18 (Pwm_Ipw_SetPhaseShift_NoUpdate) @069eb000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetPhaseShift/40 
Pwm_Ipw_SetPeriodAndDuty_NoUpdate/17 (Pwm_Ipw_SetPeriodAndDuty_NoUpdate) @06b89b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/33 
Pwm_Ipw_SetDutyCycle_NoUpdate/16 (Pwm_Ipw_SetDutyCycle_NoUpdate) @06b89620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aPeriod/31 (read)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/32 
Pwm_Ipw_SetDutyPhaseShift/15 (Pwm_Ipw_SetDutyPhaseShift) @06b890e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aPeriod/31 (read)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetDutyPhaseShift/41 
Pwm_Ipw_SetPhaseShift/14 (Pwm_Ipw_SetPhaseShift) @06b89d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetPhaseShift/40 
Pwm_Ipw_ForceOutputToZero/13 (Pwm_Ipw_ForceOutputToZero) @06b89a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aChannelState/34 (read)Ftm_Pwm_Ip_aChannelState/34 (read)Ftm_Pwm_Ip_aPreviousChannelState/39 (write)Ftm_Pwm_Ip_aChannelState/34 (write)Ftm_Pwm_Ip_aPreviousChannelState/39 (read)Ftm_Pwm_Ip_aChannelState/34 (write)Ftm_Pwm_Ip_aChannelState/34 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SwOutputControl/35 
Pwm_Ipw_GetChannelState/12 (Pwm_Ipw_GetChannelState) @06b897e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_EnableNotification/11 (Pwm_Ipw_EnableNotification) @06b89540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_EnableNotification/38 
Pwm_Ipw_DisableNotification/10 (Pwm_Ipw_DisableNotification) @06b892a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_DisableNotification/37 
Pwm_Ipw_GetOutputState/9 (Pwm_Ipw_GetOutputState) @06b89000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_GetOutputState/36 
Pwm_Ipw_SetOutputToIdle/8 (Pwm_Ipw_SetOutputToIdle) @068faa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aChannelState/34 (read)Ftm_Pwm_Ip_aChannelState/34 (write)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SwOutputControl/35 
Pwm_Ipw_SetPeriodAndDuty/7 (Pwm_Ipw_SetPeriodAndDuty) @068fa540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/33 
Pwm_Ipw_SetDutyCycle/6 (Pwm_Ipw_SetDutyCycle) @068faee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aPeriod/31 (read)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/32 
Pwm_Ipw_DeInitInstance/5 (Pwm_Ipw_DeInitInstance) @068fac40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_DeInit/30 
Pwm_Ipw_DeInit/4 (Pwm_Ipw_DeInit) @068fa9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_InitInstance/3 (Pwm_Ipw_InitInstance) @068fa700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_Init/29 
Pwm_Ipw_Init/2 (Pwm_Ipw_Init) @068fa460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_aFtmDutyCycle/1 (Pwm_Ipw_aFtmDutyCycle) @068f7318
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Pwm_Ipw_SetDutyPhaseShift/15 (write)Pwm_Ipw_SetDutyCycle_NoUpdate/16 (write)Pwm_Ipw_Init/2 (write)Pwm_Ipw_DeInit/4 (write)Pwm_Ipw_SetDutyCycle/6 (write)Pwm_Ipw_SetPeriodAndDuty/7 (write)Pwm_Ipw_SetOutputToIdle/8 (write)Pwm_Ipw_GetChannelState/12 (read)Pwm_Ipw_SetPeriodAndDuty_NoUpdate/17 (write)
  Availability: available
  Varpool flags:
Pwm_Ipw_GetMaxPeriodValue (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint32 RetVal;
  uint32 D.6379;
  <unnamed type> _1;
  uint32 _7;

  <bb 2> :
  RetVal_3 = 65535;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 65534;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_3(4)>
  _7 = RetVal_2;

  <bb 6> :
<L4>:
  return _7;

}


Pwm_Ipw_ValidateModuleId (uint8 ModuleId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6377;
  Std_ReturnType _6;

  <bb 2> :
  RetVal_2 = 0;
  if (ModuleId_3(D) > 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_5 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  RetVal_4 = 0;

  <bb 5> :
  # RetVal_1 = PHI <RetVal_5(3), RetVal_4(4)>
  _6 = RetVal_1;

  <bb 6> :
<L3>:
  return _6;

}


Pwm_Ipw_ValidateSetOutPutToIdle (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6372;
  <unnamed type> _1;
  Std_ReturnType _8;

  <bb 2> :
  RetVal_3 = 0;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal_7 = 1;

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_7(4)>
  _8 = RetVal_2;

  <bb 6> :
<L4>:
  return _8;

}


Pwm_Ipw_ValidateUpdateSynchronous (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6370;
  <unnamed type> _1;
  Std_ReturnType _8;

  <bb 2> :
  RetVal_3 = 0;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal_7 = 1;

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_7(4)>
  _8 = RetVal_2;

  <bb 6> :
<L4>:
  return _8;

}


Pwm_Ipw_ValidateSetDutyPhaseShiftParams (uint16 PhaseShift, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6368;
  unsigned char _1;
  int _2;
  short unsigned int _3;
  Std_ReturnType _11;

  <bb 2> :
  RetVal_5 = 0;
  if (DutyCycle_6(D) != 32768)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (DutyCycle_6(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _1 = IpConfig_8(D)->ChannelInstanceId;
  _2 = (int) _1;
  _3 = Ftm_Pwm_Ip_aPeriod[_2];
  if (PhaseShift_9(D) >= _3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal_10 = 1;

  <bb 6> :
  # RetVal_4 = PHI <RetVal_5(2), RetVal_5(3), RetVal_5(4), RetVal_10(5)>
  _11 = RetVal_4;

  <bb 7> :
<L6>:
  return _11;

}


Pwm_Ipw_ValidateSetPhaseShiftParams (uint16 PhaseShift)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6360;
  Std_ReturnType _5;

  <bb 2> :
  RetVal_2 = 0;
  if (PhaseShift_3(D) > 16384)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_4 = 1;

  <bb 4> :
  # RetVal_1 = PHI <RetVal_2(2), RetVal_4(3)>
  _5 = RetVal_1;

  <bb 5> :
<L2>:
  return _5;

}


Pwm_Ipw_ValidateSetPhaseShift (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_ChannelModeType ChMode;
  Std_ReturnType RetVal;
  Std_ReturnType D.6356;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  Std_ReturnType _11;

  <bb 2> :
  RetVal_5 = 0;
  _1 = IpConfig_7(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig_7(D)->FtmChConfig;
  ChMode_8 = _2->ChannelMode;
  if (ChMode_8 != 34)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (ChMode_8 != 98)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  if (ChMode_8 != 97)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChMode_8 != 33)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  RetVal_9 = 1;

  <bb 8> :
  # RetVal_3 = PHI <RetVal_5(3), RetVal_5(4), RetVal_5(5), RetVal_5(6), RetVal_9(7)>
  goto <bb 10>; [INV]

  <bb 9> :
<L9>:
  RetVal_10 = 1;

  <bb 10> :
  # RetVal_4 = PHI <RetVal_3(8), RetVal_10(9)>
  _11 = RetVal_4;

  <bb 11> :
<L12>:
  return _11;

}


Pwm_Ipw_ValidateForceOutputToZero (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6346;
  Std_ReturnType _2;

  <bb 2> :
  RetVal_1 = 0;
  _2 = RetVal_1;

  <bb 3> :
<L0>:
  return _2;

}


Pwm_Ipw_ValidateNotification (Pwm_EdgeNotificationType Notification, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6344;
  <unnamed type> _1;
  Std_ReturnType _8;

  <bb 2> :
  RetVal_3 = 0;
  _1 = IpConfig_5(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  RetVal_6 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  RetVal_7 = 1;

  <bb 5> :
  # RetVal_2 = PHI <RetVal_6(3), RetVal_7(4)>
  _8 = RetVal_2;

  <bb 6> :
<L4>:
  return _8;

}


Pwm_Ipw_SyncUpdate (uint8 ModuleId)
{
  <bb 2> :
  Ftm_Pwm_Ip_SyncUpdate (ModuleId_2(D));
  return;

}


Pwm_Ipw_SetPhaseShift_NoUpdate (uint16 Period, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 PhaseShiftVal;
  <unnamed type> _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  short unsigned int _6;
  unsigned char _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char _9;

  <bb 2> :
  PhaseShiftVal_11 = 0;
  _1 = IpConfig_13(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period_14(D);
  _3 = (long unsigned int) PhaseShift_15(D);
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  PhaseShiftVal_16 = _6 + 1;
  _7 = IpConfig_13(D)->ChannelInstanceId;
  _8 = IpConfig_13(D)->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, Period_14(D), PhaseShiftVal_16, 0);

  <bb 4> :
  return;

}


Pwm_Ipw_SetPeriodAndDuty_NoUpdate (Pwm_PeriodType Period, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  <unnamed type> _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _7;
  unsigned char _8;
  unsigned char _9;
  int _10;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _11;
  unsigned char _12;
  int _13;

  <bb 2> :
  FtmDutyCycle_15 = 0;
  _1 = IpConfig_17(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period_18(D);
  _3 = (long unsigned int) DutyCycle_19(D);
  _4 = _2 * _3;
  _5 = _4 / 32768;
  FtmDutyCycle_20 = (uint16) _5;
  _6 = IpConfig_17(D)->ChannelInstanceId;
  _7 = IpConfig_17(D)->FtmChConfig;
  _8 = _7->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_6, _8, Period_18(D), FtmDutyCycle_20, 0);
  _9 = IpConfig_17(D)->ChannelInstanceId;
  _10 = (int) _9;
  _11 = IpConfig_17(D)->FtmChConfig;
  _12 = _11->ChannelId;
  _13 = (int) _12;
  Pwm_Ipw_aFtmDutyCycle[_10][_13] = DutyCycle_19(D);

  <bb 4> :
  return;

}


Pwm_Ipw_SetDutyCycle_NoUpdate (uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  Std_ReturnType RetVal;
  Std_ReturnType D.6336;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _14;
  unsigned char _15;
  int _16;
  Std_ReturnType _26;

  <bb 2> :
  RetVal_18 = 0;
  FtmDutyCycle_19 = 0;
  _1 = IpConfig_21(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = IpConfig_21(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = Ftm_Pwm_Ip_aPeriod[_3];
  _5 = (long unsigned int) _4;
  _6 = (long unsigned int) DutyCycle_22(D);
  _7 = _5 * _6;
  _8 = _7 / 32768;
  FtmDutyCycle_23 = (uint16) _8;
  _9 = IpConfig_21(D)->ChannelInstanceId;
  _10 = IpConfig_21(D)->FtmChConfig;
  _11 = _10->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_9, _11, FtmDutyCycle_23, 0);
  _12 = IpConfig_21(D)->ChannelInstanceId;
  _13 = (int) _12;
  _14 = IpConfig_21(D)->FtmChConfig;
  _15 = _14->ChannelId;
  _16 = (int) _15;
  Pwm_Ipw_aFtmDutyCycle[_13][_16] = DutyCycle_22(D);

  <bb 4> :
  _26 = RetVal_18;

  <bb 5> :
<L3>:
  return _26;

}


Pwm_Ipw_SetDutyPhaseShift (uint16 DutyCycle, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig, boolean SyncUpdate)
{
  uint16 FtmDutyCycle;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _14;
  unsigned char _15;
  int _16;

  <bb 2> :
  FtmDutyCycle_18 = 0;
  _1 = IpConfig_20(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = IpConfig_20(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = Ftm_Pwm_Ip_aPeriod[_3];
  _5 = (long unsigned int) _4;
  _6 = (long unsigned int) DutyCycle_21(D);
  _7 = _5 * _6;
  _8 = _7 / 32768;
  FtmDutyCycle_22 = (uint16) _8;
  _9 = IpConfig_20(D)->ChannelInstanceId;
  _10 = IpConfig_20(D)->FtmChConfig;
  _11 = _10->ChannelId;
  Ftm_Pwm_Ip_SetDutyPhaseShift (_9, _11, FtmDutyCycle_22, PhaseShift_23(D), SyncUpdate_24(D));
  _12 = IpConfig_20(D)->ChannelInstanceId;
  _13 = (int) _12;
  _14 = IpConfig_20(D)->FtmChConfig;
  _15 = _14->ChannelId;
  _16 = (int) _15;
  Pwm_Ipw_aFtmDutyCycle[_13][_16] = DutyCycle_21(D);

  <bb 4> :
  return;

}


Pwm_Ipw_SetPhaseShift (uint16 Period, uint16 PhaseShift, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 PhaseShiftVal;
  <unnamed type> _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  short unsigned int _6;
  unsigned char _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char _9;

  <bb 2> :
  PhaseShiftVal_11 = 0;
  _1 = IpConfig_13(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) Period_14(D);
  _3 = (long unsigned int) PhaseShift_15(D);
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  PhaseShiftVal_16 = _6 + 1;
  _7 = IpConfig_13(D)->ChannelInstanceId;
  _8 = IpConfig_13(D)->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, Period_14(D), PhaseShiftVal_16, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_ForceOutputToZero (boolean Force, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_OutputStateType OutputState;
  Ftm_Pwm_Ip_PolarityType PolCh;
  boolean ForceOutput;
  uint8 Channel;
  uint8 Instance;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  _Bool _3;
  int _4;
  int _5;
  <unnamed type> _6;
  int _7;
  int _8;
  int _9;
  int _10;
  <unnamed type> _11;
  int _12;
  int _13;
  _Bool _14;
  int _15;
  int _16;
  int _17;
  int _18;
  <unnamed type> _19;
  int _20;
  int _21;
  <unnamed type> _22;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _23;
  <unnamed type> _24;

  <bb 2> :
  Instance_31 = IpConfig_30(D)->ChannelInstanceId;
  _1 = IpConfig_30(D)->FtmChConfig;
  Channel_32 = _1->ChannelId;
  ForceOutput_34 = Force_33(D);
  _2 = IpConfig_30(D)->FtmChConfig;
  PolCh_35 = _2->Polarity;
  _3 = PolCh_35 == 1;
  OutputState_36 = (Ftm_Pwm_Ip_OutputStateType) _3;
  _4 = (int) Instance_31;
  _5 = (int) Channel_32;
  _6 = Ftm_Pwm_Ip_aChannelState[_4][_5];
  if (_6 != 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (ForceOutput_34 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = (int) Instance_31;
  _8 = (int) Channel_32;
  _9 = (int) Instance_31;
  _10 = (int) Channel_32;
  _11 = Ftm_Pwm_Ip_aChannelState[_7][_8];
  Ftm_Pwm_Ip_aPreviousChannelState[_9][_10] = _11;
  _12 = (int) Instance_31;
  _13 = (int) Channel_32;
  Ftm_Pwm_Ip_aChannelState[_12][_13] = 3;
  goto <bb 8>; [INV]

  <bb 5> :
  _14 = ~ForceOutput_34;
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _15 = (int) Instance_31;
  _16 = (int) Channel_32;
  _17 = (int) Instance_31;
  _18 = (int) Channel_32;
  _19 = Ftm_Pwm_Ip_aPreviousChannelState[_15][_16];
  Ftm_Pwm_Ip_aChannelState[_17][_18] = _19;
  _20 = (int) Instance_31;
  _21 = (int) Channel_32;
  _22 = Ftm_Pwm_Ip_aChannelState[_20][_21];
  if (_22 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _23 = IpConfig_30(D)->FtmChConfig;
  OutputState_38 = _23->InitOut;
  ForceOutput_39 = 1;

  <bb 8> :
  # ForceOutput_25 = PHI <ForceOutput_34(4), ForceOutput_34(5), ForceOutput_39(7), ForceOutput_34(3), ForceOutput_34(6)>
  # OutputState_26 = PHI <OutputState_36(4), OutputState_36(5), OutputState_38(7), OutputState_36(3), OutputState_36(6)>
  _24 = IpConfig_30(D)->ChannelType;
  if (_24 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Ftm_Pwm_Ip_SwOutputControl (Instance_31, Channel_32, OutputState_26, ForceOutput_25);

  <bb 10> :
  return;

}


Pwm_Ipw_GetChannelState (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 DutyCycle;
  uint16 D.6311;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;
  uint16 _12;

  <bb 2> :
  DutyCycle_8 = 0;
  _1 = IpConfig_10(D)->ChannelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = IpConfig_10(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_10(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  DutyCycle_11 = Pwm_Ipw_aFtmDutyCycle[_3][_6];
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  # DutyCycle_7 = PHI <DutyCycle_11(3), DutyCycle_8(4)>
  _12 = DutyCycle_7;

  <bb 6> :
<L4>:
  return _12;

}


Pwm_Ipw_EnableNotification (Pwm_EdgeNotificationType Notification, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Ftm_Ip_EdgeNotifType FtmNotification;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  unsigned char _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;

  <bb 2> :
  if (Notification_9(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FtmNotification_12 = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  if (Notification_9(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FtmNotification_11 = 2;
  goto <bb 7>; [INV]

  <bb 6> :
  FtmNotification_10 = 3;

  <bb 7> :
  # FtmNotification_6 = PHI <FtmNotification_12(3), FtmNotification_11(5), FtmNotification_10(6)>
  _1 = IpConfig_14(D)->ChannelType;
  switch (_1) <default: <L10> [INV], case 0: <L9> [INV], case 1: <L6> [INV]>

  <bb 8> :
<L6>:
  _2 = IpConfig_14(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _3 = IpConfig_14(D)->ChannelInstanceId;
  _4 = IpConfig_14(D)->FtmChConfig;
  _5 = _4->ChannelId;
  Ftm_Pwm_Ip_EnableNotification (_3, _5, FtmNotification_6);

  <bb 10> :
  goto <bb 13>; [INV]

  <bb 11> :
<L9>:
  goto <bb 13>; [INV]

  <bb 12> :
<L10>:

  <bb 13> :
  return;

}


Pwm_Ipw_DisableNotification (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  unsigned char _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;

  <bb 2> :
  _1 = IpConfig_9(D)->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_9(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_9(D)->ChannelInstanceId;
  _4 = IpConfig_9(D)->FtmChConfig;
  _5 = _4->ChannelId;
  Ftm_Pwm_Ip_DisableNotification (_3, _5);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_GetOutputState (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  Ftm_Pwm_Ip_OutputStateType FtmRetVal;
  Pwm_OutputStateType RetVal;
  Pwm_OutputStateType D.6299;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  unsigned char _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  Pwm_OutputStateType _18;

  <bb 2> :
  RetVal_10 = 0;
  FtmRetVal_11 = 0;
  _1 = IpConfig_13(D)->ChannelType;
  switch (_1) <default: <L7> [INV], case 0: <L6> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_13(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _3 = IpConfig_13(D)->ChannelInstanceId;
  _4 = IpConfig_13(D)->FtmChConfig;
  _5 = _4->ChannelId;
  FtmRetVal_15 = Ftm_Pwm_Ip_GetOutputState (_3, _5);
  if (FtmRetVal_15 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal_17 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  RetVal_16 = 1;

  <bb 7> :
  # RetVal_6 = PHI <RetVal_10(3), RetVal_17(5), RetVal_16(6)>
  goto <bb 10>; [INV]

  <bb 8> :
<L6>:
  goto <bb 10>; [INV]

  <bb 9> :
<L7>:

  <bb 10> :
  # RetVal_7 = PHI <RetVal_6(7), RetVal_10(8), RetVal_10(9)>
  _18 = RetVal_7;

  <bb 11> :
<L9>:
  return _18;

}


Pwm_Ipw_SetOutputToIdle (const Pwm_OutputStateType IdleState, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint8 Channel;
  uint8 Instance;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _1;
  <unnamed type> _2;
  int _3;
  int _4;
  <unnamed type> _5;
  int _6;
  int _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  <unnamed type> _9;
  unsigned char _10;
  int _11;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _12;
  unsigned char _13;
  int _14;

  <bb 2> :
  Instance_19 = IpConfig_18(D)->ChannelInstanceId;
  _1 = IpConfig_18(D)->FtmChConfig;
  Channel_20 = _1->ChannelId;
  _2 = IpConfig_18(D)->ChannelType;
  switch (_2) <default: <L5> [INV], case 0: <L4> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = (int) Instance_19;
  _4 = (int) Channel_20;
  _5 = Ftm_Pwm_Ip_aChannelState[_3][_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) Instance_19;
  _7 = (int) Channel_20;
  Ftm_Pwm_Ip_aChannelState[_6][_7] = 2;
  _8 = IpConfig_18(D)->FtmChConfig;
  _9 = _8->InitOut;
  Ftm_Pwm_Ip_SwOutputControl (Instance_19, Channel_20, _9, 1);
  _10 = IpConfig_18(D)->ChannelInstanceId;
  _11 = (int) _10;
  _12 = IpConfig_18(D)->FtmChConfig;
  _13 = _12->ChannelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = 0;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetPeriodAndDuty (Pwm_PeriodType Period, uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char _9;
  unsigned char _10;
  int _11;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _12;
  unsigned char _13;
  int _14;

  <bb 2> :
  FtmDutyCycle_17 = 0;
  _1 = IpConfig_19(D)->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_19(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (long unsigned int) Period_20(D);
  _4 = (long unsigned int) DutyCycle_21(D);
  _5 = _3 * _4;
  _6 = _5 / 32768;
  FtmDutyCycle_22 = (uint16) _6;
  _7 = IpConfig_19(D)->ChannelInstanceId;
  _8 = IpConfig_19(D)->FtmChConfig;
  _9 = _8->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_7, _9, Period_20(D), FtmDutyCycle_22, 1);
  _10 = IpConfig_19(D)->ChannelInstanceId;
  _11 = (int) _10;
  _12 = IpConfig_19(D)->FtmChConfig;
  _13 = _12->ChannelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = DutyCycle_21(D);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetDutyCycle (uint16 DutyCycle, const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  uint16 FtmDutyCycle;
  Std_ReturnType RetVal;
  Std_ReturnType D.6287;
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _2;
  unsigned char _3;
  int _4;
  short unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  unsigned char _10;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _11;
  unsigned char _12;
  unsigned char _13;
  int _14;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _15;
  unsigned char _16;
  int _17;
  Std_ReturnType _28;

  <bb 2> :
  RetVal_20 = 0;
  FtmDutyCycle_21 = 0;
  _1 = IpConfig_23(D)->ChannelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_23(D)->FtmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_23(D)->ChannelInstanceId;
  _4 = (int) _3;
  _5 = Ftm_Pwm_Ip_aPeriod[_4];
  _6 = (long unsigned int) _5;
  _7 = (long unsigned int) DutyCycle_24(D);
  _8 = _6 * _7;
  _9 = _8 / 32768;
  FtmDutyCycle_25 = (uint16) _9;
  _10 = IpConfig_23(D)->ChannelInstanceId;
  _11 = IpConfig_23(D)->FtmChConfig;
  _12 = _11->ChannelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_10, _12, FtmDutyCycle_25, 1);
  _13 = IpConfig_23(D)->ChannelInstanceId;
  _14 = (int) _13;
  _15 = IpConfig_23(D)->FtmChConfig;
  _16 = _15->ChannelId;
  _17 = (int) _16;
  Pwm_Ipw_aFtmDutyCycle[_14][_17] = DutyCycle_24(D);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  _28 = RetVal_20;

  <bb 9> :
<L6>:
  return _28;

}


Pwm_Ipw_DeInitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_UserCfgType * _2;
  unsigned char _3;

  <bb 2> :
  _1 = IpConfig_7(D)->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_7(D)->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_7(D)->InstanceId;
  Ftm_Pwm_Ip_DeInit (_3);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_DeInit (const struct Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;

  <bb 2> :
  _1 = IpConfig_9(D)->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_9(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_9(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = 0;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Pwm_Ipw_InitInstance (const struct Pwm_IpwInstanceConfigType * const IpConfig)
{
  <unnamed type> _1;
  const struct Ftm_Pwm_Ip_UserCfgType * _2;
  unsigned char _3;
  const struct Ftm_Pwm_Ip_UserCfgType * _4;

  <bb 2> :
  _1 = IpConfig_8(D)->InstanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_8(D)->FtmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = IpConfig_8(D)->InstanceId;
  _4 = IpConfig_8(D)->FtmInsConfig;
  Ftm_Pwm_Ip_Init (_3, _4);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_Init (const struct Pwm_IpwChannelConfigType * const IpConfig)
{
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _4;
  unsigned char _5;
  int _6;
  short unsigned int _7;

  <bb 2> :
  _1 = IpConfig_10(D)->ChannelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = IpConfig_10(D)->ChannelInstanceId;
  _3 = (int) _2;
  _4 = IpConfig_10(D)->FtmChConfig;
  _5 = _4->ChannelId;
  _6 = (int) _5;
  _7 = IpConfig_10(D)->ChannelDutyCycle;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = _7;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


