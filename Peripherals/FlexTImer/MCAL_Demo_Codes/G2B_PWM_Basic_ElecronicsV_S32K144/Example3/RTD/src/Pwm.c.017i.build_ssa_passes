Pwm_SetDutyPhaseShift (Pwm_ChannelType ChannelNumber, uint16 DutyCycle, uint16 PhaseShift, boolean SyncUpdate)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 55);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateParamDuty (DutyCycle, 55);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Pwm_ValidateParamsDutyPhaseShift (CoreId, PhaseShift, DutyCycle, PartitionChannelIdx, 55);
  if (_3 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _4 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _5 = (unsigned int) PartitionChannelIdx;
  _6 = _5 * 28;
  _7 = _4 + _6;
  _8 = &_7->IpwChannelCfg;
  Pwm_Ipw_SetDutyPhaseShift (DutyCycle, PhaseShift, _8, SyncUpdate);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SetPhaseShift (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 PhaseShift)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 44);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId, PartitionChannelIdx, _6, Period, 44);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamsPhaseShift (PhaseShift, 44);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx;
  _11 = _10 * 28;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPhaseShift (Period, PhaseShift, _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SyncUpdate (uint8 ModuleId)
{
  uint32 CoreId;
  Std_ReturnType CallIsValid;

  <bb 2> :
  CoreId = 0;
  CallIsValid = Pwm_ValidateGlobalConfigCall (CoreId, 40);
  if (CallIsValid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = Pwm_ValidateModuleId (ModuleId, 40);
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Pwm_Ipw_SyncUpdate (ModuleId);

  <bb 5> :
  Pwm_EndValidateGlobalConfigCall (CoreId, CallIsValid, 40);
  return;

}


Pwm_SetPhaseShift_NoUpdate (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 PhaseShift)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 45);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId, PartitionChannelIdx, _6, Period, 45);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamsPhaseShift (PhaseShift, 45);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx;
  _11 = _10 * 28;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPhaseShift_NoUpdate (Period, PhaseShift, _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SetPeriodAndDuty_NoUpdate (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 DutyCycle)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 41);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId, PartitionChannelIdx, _6, Period, 41);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamDuty (DutyCycle, 41);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx;
  _11 = _10 * 28;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPeriodAndDuty_NoUpdate (Period, DutyCycle, _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SetDutyCycle_NoUpdate (Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
  Std_ReturnType RetVal;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  RetVal = 0;
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 42);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateParamDuty (DutyCycle, 42);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx;
  _5 = _4 * 28;
  _6 = _3 + _5;
  _7 = &_6->IpwChannelCfg;
  RetVal = Pwm_Ipw_SetDutyCycle_NoUpdate (DutyCycle, _7);
  if (RetVal != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, 42, 52);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_ForceOutputToZero (Pwm_ChannelType ChannelNumber, boolean Force)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 33);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateForceOutputToZero (CoreId, PartitionChannelIdx);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx;
  _5 = _4 * 28;
  _6 = _3 + _5;
  _7 = &_6->IpwChannelCfg;
  Pwm_Ipw_ForceOutputToZero (Force, _7);

  <bb 5> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_Notification (uint8 Channel)
{
  void (*Pwm_NotifyType) (void) Notify;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  uint8 LogicChannel;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_aState[CoreId].PwmConfig;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Pwm_aState[CoreId].PwmConfig;
  _3 = (int) Channel;
  LogicChannel = _2->HwToLogicChannelMap[_3];
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, LogicChannel);
  _4 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _5 = (unsigned int) PartitionChannelIdx;
  _6 = _5 * 28;
  _7 = _4 + _6;
  Notify = _7->PwmChannelNotification;
  if (Notify != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Notify ();

  <bb 5> :
  return;

}


Pwm_GetChannelState (Pwm_ChannelType ChannelNumber)
{
  uint16 DutyCycle;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  uint16 D.6625;

  <bb 2> :
  DutyCycle = 0;
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 32);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = &_5->IpwChannelCfg;
  DutyCycle = Pwm_Ipw_GetChannelState (_6);

  <bb 4> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  D.6625 = DutyCycle;

  <bb 5> :
<L2>:
  return D.6625;

}


Pwm_GetVersionInfo (struct Std_VersionInfoType * versioninfo)
{
  <bb 2> :
  if (versioninfo != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  versioninfo->vendorID = 43;
  versioninfo->moduleID = 121;
  versioninfo->sw_major_version = 1;
  versioninfo->sw_minor_version = 0;
  versioninfo->sw_patch_version = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportError (121, 0, 8, 21);

  <bb 5> :
  return;

}


Pwm_EnableNotification (Pwm_ChannelType ChannelNumber, Pwm_EdgeNotificationType Notification)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 7);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateParamNotification (CoreId, PartitionChannelIdx, Notification);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx;
  _5 = _4 * 28;
  _6 = _3 + _5;
  _7 = &_6->IpwChannelCfg;
  Pwm_Ipw_EnableNotification (Notification, _7);

  <bb 5> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_DisableNotification (Pwm_ChannelType ChannelNumber)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 6);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = &_5->IpwChannelCfg;
  Pwm_Ipw_DisableNotification (_6);

  <bb 4> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_GetOutputState (Pwm_ChannelType ChannelNumber)
{
  Pwm_OutputStateType RetVal;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;
  Pwm_OutputStateType D.6605;

  <bb 2> :
  RetVal = 0;
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 5);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = &_5->IpwChannelCfg;
  RetVal = Pwm_Ipw_GetOutputState (_6);

  <bb 4> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  D.6605 = RetVal;

  <bb 5> :
<L2>:
  return D.6605;

}


Pwm_SetOutputToIdle (Pwm_ChannelType ChannelNumber)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 4);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateSetOutPutToIdle (CoreId, PartitionChannelIdx);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx;
  _5 = _4 * 28;
  _6 = _3 + _5;
  _7 = _6->ChannelIdleState;
  _8 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _9 = (unsigned int) PartitionChannelIdx;
  _10 = _9 * 28;
  _11 = _8 + _10;
  _12 = &_11->IpwChannelCfg;
  Pwm_Ipw_SetOutputToIdle (_7, _12);
  _13 = (int) PartitionChannelIdx;
  Pwm_aState[CoreId].PwmChannelIdleState[_13] = 1;

  <bb 5> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SetPeriodAndDuty (Pwm_ChannelType ChannelNumber, Pwm_PeriodType Period, uint16 DutyCycle)
{
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 3);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _3 = (unsigned int) PartitionChannelIdx;
  _4 = _3 * 28;
  _5 = _2 + _4;
  _6 = _5->PwmChannelClass;
  _7 = Pwm_ValidateParamsPeriodClass (CoreId, PartitionChannelIdx, _6, Period, 3);
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Pwm_ValidateParamDuty (DutyCycle, 3);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _10 = (unsigned int) PartitionChannelIdx;
  _11 = _10 * 28;
  _12 = _9 + _11;
  _13 = &_12->IpwChannelCfg;
  Pwm_Ipw_SetPeriodAndDuty (Period, DutyCycle, _13);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_SetDutyCycle (Pwm_ChannelType ChannelNumber, uint16 DutyCycle)
{
  Std_ReturnType RetVal;
  Pwm_ChannelType PartitionChannelIdx;
  uint32 CoreId;

  <bb 2> :
  RetVal = 0;
  CoreId = 0;
  _1 = Pwm_ValidateChannelConfigCall (CoreId, ChannelNumber, 2);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_ValidateParamDuty (DutyCycle, 2);
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _3 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _4 = (unsigned int) PartitionChannelIdx;
  _5 = _4 * 28;
  _6 = _3 + _5;
  _7 = &_6->IpwChannelCfg;
  RetVal = Pwm_Ipw_SetDutyCycle (DutyCycle, _7);
  if (RetVal != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, 2, 52);

  <bb 6> :
  Pwm_EndValidateChannelConfigCall (ChannelNumber);
  return;

}


Pwm_DeInit ()
{
  uint8 Index;
  uint32 CoreId;
  const struct Pwm_ConfigType * ConfigPtr;
  Std_ReturnType CallIsValid;

  <bb 2> :
  CoreId = 0;
  CallIsValid = Pwm_ValidateGlobalConfigCall (CoreId, 1);
  if (CallIsValid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  Index = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) Index;
  _3 = _2 * 28;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  _6 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _7 = (unsigned int) Index;
  _8 = _7 * 28;
  _9 = _6 + _8;
  _10 = _9->ChannelIdleState;
  Pwm_Ipw_DeInit (_5, _10);
  Index.2_11 = Index;
  Index = Index.2_11 + 1;

  <bb 5> :
  _12 = Pwm_aState[CoreId].PwmConfig;
  _13 = _12->NumChannels;
  if (Index < _13)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  ConfigPtr = Pwm_aState[CoreId].PwmConfig;
  Index = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _14 = ConfigPtr->PwmInstancesConfig;
  _15 = (int) Index;
  _16 = &*_14[_15];
  Pwm_Ipw_DeInitInstance (_16);
  Index.3_17 = Index;
  Index = Index.3_17 + 1;

  <bb 8> :
  _18 = Pwm_aState[CoreId].PwmConfig;
  _19 = _18->NumInstances;
  if (Index < _19)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Pwm_aState[CoreId].PwmConfig = 0B;
  Index = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  _20 = (int) Index;
  Pwm_aState[CoreId].PwmChannelConfigs[_20] = 0B;
  Index.4_21 = Index;
  Index = Index.4_21 + 1;

  <bb 11> :
  if (Index <= 2)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  Pwm_EndValidateGlobalConfigCall (CoreId, CallIsValid, 1);
  return;

}


Pwm_Init (const struct Pwm_ConfigType * ConfigPtr)
{
  uint8 Index;
  uint32 CoreId;
  Std_ReturnType CallIsValid;

  <bb 2> :
  CoreId = 0;
  CallIsValid = Pwm_ValidateGlobalConfigCall (CoreId, 0);
  if (CallIsValid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  CallIsValid = Pwm_ValidateParamPtrInit (CoreId, ConfigPtr);
  if (CallIsValid == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  Pwm_aState[CoreId].PwmConfig = ConfigPtr;
  Index = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _1 = Pwm_aState[CoreId].PwmConfig;
  _2 = _1->PwmInstancesConfig;
  _3 = (int) Index;
  _4 = &*_2[_3];
  Pwm_Ipw_InitInstance (_4);
  Index.0_5 = Index;
  Index = Index.0_5 + 1;

  <bb 6> :
  _6 = Pwm_aState[CoreId].PwmConfig;
  _7 = _6->NumInstances;
  if (Index < _7)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Index = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _8 = Pwm_aState[CoreId].PwmConfig;
  _9 = _8->PwmChannelsConfig;
  _10 = (int) Index;
  _11 = (int) Index;
  _12 = &*_9[_10];
  Pwm_aState[CoreId].PwmChannelConfigs[_11] = _12;
  _13 = Pwm_aState[CoreId].PwmConfig;
  _14 = _13->PwmChannelsConfig;
  _15 = (int) Index;
  _16 = &*_14[_15].IpwChannelCfg;
  Pwm_Ipw_Init (_16);
  Index.1_17 = Index;
  Index = Index.1_17 + 1;

  <bb 9> :
  _18 = Pwm_aState[CoreId].PwmConfig;
  _19 = _18->NumChannels;
  if (Index < _19)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  Pwm_EndValidateGlobalConfigCall (CoreId, CallIsValid, 0);
  return;

}


Pwm_ValidateSetOutPutToIdle (uint32 CoreId, Pwm_ChannelType ChannelNumber)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6601;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber;
  _3 = _2 * 28;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  RetVal = Pwm_Ipw_ValidateSetOutPutToIdle (_5);
  if (RetVal != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, 4, 66);

  <bb 4> :
  D.6601 = RetVal;

  <bb 5> :
<L2>:
  return D.6601;

}


Pwm_ValidateParamsDutyPhaseShift (uint32 CoreId, uint16 PhaseShift, uint16 DutyCycle, Pwm_ChannelType ChannelNumber, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6684;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber;
  _3 = _2 * 28;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  RetVal = Pwm_Ipw_ValidateSetDutyPhaseShiftParams (PhaseShift, DutyCycle, _5);
  if (RetVal != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId, 58);

  <bb 4> :
  D.6684 = RetVal;

  <bb 5> :
<L2>:
  return D.6684;

}


Pwm_ValidateParamsPhaseShift (uint16 PhaseShift, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6659;

  <bb 2> :
  RetVal = 0;
  RetVal = Pwm_Ipw_ValidateSetPhaseShiftParams (PhaseShift);
  if (RetVal != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId, 58);

  <bb 4> :
  D.6659 = RetVal;

  <bb 5> :
<L2>:
  return D.6659;

}


Pwm_ValidateForceOutputToZero (uint32 CoreId, Pwm_ChannelType ChannelNumber)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6637;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber;
  _3 = _2 * 28;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  RetVal = Pwm_Ipw_ValidateForceOutputToZero (_5);
  if (RetVal != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, 33, 62);

  <bb 4> :
  D.6637 = RetVal;

  <bb 5> :
<L2>:
  return D.6637;

}


Pwm_ValidateModuleId (uint8 ModuleId, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6668;

  <bb 2> :
  RetVal = 0;
  if (ModuleId > 3)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _1 = Pwm_Ipw_ValidateModuleId (ModuleId);
  if (_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 54);

  <bb 5> :
  D.6668 = RetVal;

  <bb 6> :
<L3>:
  return D.6668;

}


Pwm_ValidateParamNotification (uint32 CoreId, Pwm_ChannelType ChannelNumber, Pwm_EdgeNotificationType Notification)
{
  void (*Pwm_NotifyType) (void) PwmChannelNotification;
  Std_ReturnType RetVal;
  Std_ReturnType D.6618;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber;
  _3 = _2 * 28;
  _4 = _1 + _3;
  PwmChannelNotification = _4->PwmChannelNotification;
  if (PwmChannelNotification == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, 7, 49);
  RetVal = 1;
  goto <bb 6>; [INV]

  <bb 4> :
  _5 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _6 = (unsigned int) ChannelNumber;
  _7 = _6 * 28;
  _8 = _5 + _7;
  _9 = &_8->IpwChannelCfg;
  RetVal = Pwm_Ipw_ValidateNotification (Notification, _9);
  if (RetVal != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, 7, 48);

  <bb 6> :
  D.6618 = RetVal;

  <bb 7> :
<L5>:
  return D.6618;

}


Pwm_ValidateParamsPeriodClass (uint32 CoreId, Pwm_ChannelType ChannelNumber, Pwm_ChannelClassType ChannelClass, Pwm_PeriodType Period, uint8 ServiceId)
{
  uint32 PeriodMaxValue;
  Std_ReturnType RetVal;
  Std_ReturnType D.6593;

  <bb 2> :
  RetVal = 0;
  PeriodMaxValue = 0;
  if (ChannelClass != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId, 19);
  RetVal = 1;
  goto <bb 6>; [INV]

  <bb 4> :
  _1 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _2 = (unsigned int) ChannelNumber;
  _3 = _2 * 28;
  _4 = _1 + _3;
  _5 = &_4->IpwChannelCfg;
  PeriodMaxValue = Pwm_Ipw_GetMaxPeriodValue (_5);
  _6 = (long unsigned int) Period;
  if (PeriodMaxValue < _6)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (121, 0, ServiceId, 26);
  RetVal = 1;

  <bb 6> :
  D.6593 = RetVal;

  <bb 7> :
<L6>:
  return D.6593;

}


Pwm_ValidateParamDuty (uint16 DutyCycle, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6579;

  <bb 2> :
  RetVal = 0;
  if (DutyCycle > 32768)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, ServiceId, 50);
  RetVal = 1;

  <bb 4> :
  D.6579 = RetVal;

  <bb 5> :
<L2>:
  return D.6579;

}


Pwm_ValidateParamPtrInit (uint32 CoreId, const struct Pwm_ConfigType * ConfigPtr)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6536;

  <bb 2> :
  RetVal = 0;
  if (ConfigPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (121, 0, 0, 16);
  RetVal = 1;

  <bb 4> :
  D.6536 = RetVal;

  <bb 5> :
<L3>:
  return D.6536;

}


Pwm_EndValidateChannelConfigCall (Pwm_ChannelType ChannelNumber)
{
  <bb 2> :
  return;

}


Pwm_ValidateChannelConfigCall (uint32 CoreId, Pwm_ChannelType ChannelNumber, uint8 ServiceId)
{
  Pwm_ChannelType PartitionChannelIdx;
  Std_ReturnType RetVal;
  Std_ReturnType D.6573;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmDriverState;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 17);
  goto <bb 19>; [INV]

  <bb 4> :
  if (ChannelNumber > 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 18);
  goto <bb 19>; [INV]

  <bb 6> :
  PartitionChannelIdx = Pwm_GetPartitionChannelIdx (CoreId, ChannelNumber);
  _2 = Pwm_aState[CoreId].PwmConfig;
  _3 = _2->NumChannels;
  if (PartitionChannelIdx >= _3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 64);
  goto <bb 19>; [INV]

  <bb 8> :
  if (ServiceId == 44)
    goto <bb 11>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (ServiceId == 45)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (ServiceId == 55)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _4 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _5 = (unsigned int) PartitionChannelIdx;
  _6 = _5 * 28;
  _7 = _4 + _6;
  _8 = &_7->IpwChannelCfg;
  _9 = Pwm_Ipw_ValidateSetPhaseShift (_8);
  if (_9 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 59);

  <bb 13> :
  if (ServiceId == 41)
    goto <bb 17>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (ServiceId == 42)
    goto <bb 17>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (ServiceId == 45)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (ServiceId == 40)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _10 = Pwm_aState[CoreId].PwmChannelConfigs[0];
  _11 = (unsigned int) PartitionChannelIdx;
  _12 = _11 * 28;
  _13 = _10 + _12;
  _14 = &_13->IpwChannelCfg;
  _15 = Pwm_Ipw_ValidateUpdateSynchronous (_14);
  if (_15 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  RetVal = 1;
  Det_ReportError (121, 0, ServiceId, 60);

  <bb 19> :
  D.6573 = RetVal;

  <bb 20> :
<L22>:
  return D.6573;

}


Pwm_EndValidateGlobalConfigCall (uint32 CoreId, Std_ReturnType ValidCall, uint8 ServiceId)
{
  <bb 2> :
  if (ValidCall == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (ServiceId == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Pwm_aState[CoreId].PwmDriverState = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  Pwm_aState[CoreId].PwmDriverState = 1;

  <bb 6> :
  return;

}


Pwm_ValidateGlobalConfigCall (uint32 CoreId, uint8 ServiceId)
{
  Std_ReturnType RetVal;
  Std_ReturnType D.6527;

  <bb 2> :
  RetVal = 0;
  _1 = Pwm_aState[CoreId].PwmDriverState;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (ServiceId != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Det_ReportError (121, 0, ServiceId, 17);
  RetVal = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  if (ServiceId == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (121, 0, ServiceId, 20);
  RetVal = 1;

  <bb 7> :
  D.6527 = RetVal;

  <bb 8> :
<L7>:
  return D.6527;

}


Pwm_GetPartitionChannelIdx (uint32 CoreId, Pwm_ChannelType ChannelNumber)
{
  uint8 D.6575;

  <bb 2> :
  D.6575 = ChannelNumber;

  <bb 3> :
<L0>:
  return D.6575;

}


