Ftm_Ocu_Ip_EnableNotification (uint8 InstNum, uint8 ChNum)
{
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.24_1;
  int _2;
  int _3;
  void (*<T4a5>) (uint16) _4;
  int _5;
  struct Ftm_Ocu_Ip_xRegLayoutType * _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.24_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.24_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_9(D);
  _3 = (int) ChNum_10(D);
  _4 = Ftm_Ocu_Ip_gaxChState[_2][_3].mCallbackFunc;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) InstNum_9(D);
  _6 = Ftm_Ocu_Ip_gapcxBase[_5];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_6, ChNum_10(D), 1);

  <bb 5> :
  return;

}


Ftm_Ocu_Ip_DisableNotification (uint8 InstNum, uint8 ChNum)
{
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.23_1;
  int _2;
  struct Ftm_Ocu_Ip_xRegLayoutType * _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.23_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.23_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_6(D);
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_3, ChNum_7(D), 0);

  <bb 4> :
  return;

}


Ftm_Ocu_Ip_GetMaxCounterValue (uint8 InstNum, uint8 ChNum)
{
  uint16 RetMaxCntVal;
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.22_1;
  int _2;
  int _3;
  uint16 _10;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetMaxCntVal_5 = 0;
  # DEBUG RetMaxCntVal => RetMaxCntVal_5
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.22_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.22_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_7(D);
  _3 = (int) ChNum_8(D);
  RetMaxCntVal_9 = Ftm_Ocu_Ip_sau16MaxCounterVals[_2][_3];
  # DEBUG RetMaxCntVal => RetMaxCntVal_9

  <bb 4> :
  # RetMaxCntVal_4 = PHI <RetMaxCntVal_5(2), RetMaxCntVal_9(3)>
  # DEBUG RetMaxCntVal => RetMaxCntVal_4
  # DEBUG BEGIN_STMT
  _10 = RetMaxCntVal_4;
  return _10;

}


Ftm_Ocu_Ip_SetAbsoluteThreshold (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_ValueType ReferenceValue, Ftm_Ocu_Ip_ValueType AbsoluteValue)
{
  Ftm_Ocu_Ip_ValueType CntValuePostUpdate;
  Ftm_Ocu_Ip_ReturnType RetVal;
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.21_1;
  int _2;
  struct Ftm_Ocu_Ip_xRegLayoutType * _3;
  long unsigned int _4;
  int _5;
  struct Ftm_Ocu_Ip_xRegLayoutType * _6;
  Ftm_Ocu_Ip_ReturnType _20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_9 = 0;
  # DEBUG RetVal => RetVal_9
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.21_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.21_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_11(D);
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  _4 = (long unsigned int) AbsoluteValue_12(D);
  Ftm_Ocu_Ip_SetChCounterMatchVal (_3, ChNum_13(D), _4);
  # DEBUG BEGIN_STMT
  _5 = (int) InstNum_11(D);
  _6 = Ftm_Ocu_Ip_gapcxBase[_5];
  CntValuePostUpdate_16 = Ftm_Ocu_Ip_GetCntVal (_6);
  # DEBUG CntValuePostUpdate => CntValuePostUpdate_16
  # DEBUG BEGIN_STMT
  RetVal_19 = Ftm_Ocu_Ip_DetermineNextCmStatus (CntValuePostUpdate_16, ReferenceValue_17(D), AbsoluteValue_12(D));
  # DEBUG RetVal => RetVal_19

  <bb 4> :
  # RetVal_7 = PHI <RetVal_9(2), RetVal_19(3)>
  # DEBUG RetVal => RetVal_7
  # DEBUG BEGIN_STMT
  _20 = RetVal_7;
  return _20;

}


Ftm_Ocu_Ip_SetRelativeThreshold (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_ValueType RelativeValue)
{
  Ftm_Ocu_Ip_ValueType CmpMatchValue;
  Ftm_Ocu_Ip_ValueType CntValuePostUpdate;
  Ftm_Ocu_Ip_ValueType CntValuePreUpdate;
  Ftm_Ocu_Ip_ReturnType RetVal;
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.18_1;
  int _2;
  struct Ftm_Ocu_Ip_xRegLayoutType * _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  short unsigned int _9;
  int _10;
  int _11;
  int _12;
  struct Ftm_Ocu_Ip_xRegLayoutType * _13;
  long unsigned int _14;
  int _15;
  struct Ftm_Ocu_Ip_xRegLayoutType * _16;
  Ftm_Ocu_Ip_ReturnType _32;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal_19 = 0;
  # DEBUG RetVal => RetVal_19
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.18_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.18_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_21(D);
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  CntValuePreUpdate_23 = Ftm_Ocu_Ip_GetCntVal (_3);
  # DEBUG CntValuePreUpdate => CntValuePreUpdate_23
  # DEBUG BEGIN_STMT
  _4 = (int) CntValuePreUpdate_23;
  _5 = (int) RelativeValue_24(D);
  _6 = _4 + _5;
  _7 = (int) InstNum_21(D);
  _8 = (int) ChNum_25(D);
  _9 = Ftm_Ocu_Ip_sau16MaxCounterVals[_7][_8];
  _10 = (int) _9;
  _11 = _6 % _10;
  CmpMatchValue_26 = (Ftm_Ocu_Ip_ValueType) _11;
  # DEBUG CmpMatchValue => CmpMatchValue_26
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum_21(D);
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  _14 = (long unsigned int) CmpMatchValue_26;
  Ftm_Ocu_Ip_SetChCounterMatchVal (_13, ChNum_25(D), _14);
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum_21(D);
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  CntValuePostUpdate_29 = Ftm_Ocu_Ip_GetCntVal (_16);
  # DEBUG CntValuePostUpdate => CntValuePostUpdate_29
  # DEBUG BEGIN_STMT
  RetVal_31 = Ftm_Ocu_Ip_DetermineNextCmStatus (CntValuePostUpdate_29, CntValuePreUpdate_23, CmpMatchValue_26);
  # DEBUG RetVal => RetVal_31

  <bb 4> :
  # RetVal_17 = PHI <RetVal_19(2), RetVal_31(3)>
  # DEBUG RetVal => RetVal_17
  # DEBUG BEGIN_STMT
  _32 = RetVal_17;
  return _32;

}


Ftm_Ocu_Ip_SetPinState (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_PinStateType PinState)
{
  uint32 u32RegSwOCtrl;
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.17_1;
  int _2;
  int _3;
  <unnamed type> _4;
  int _5;
  int _6;
  <unnamed type> _7;
  int _8;
  struct Ftm_Ocu_Ip_xRegLayoutType * _9;
  unsigned int _10;
  unsigned int _11;
  long unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  int _17;
  long unsigned int _18;
  int _19;
  struct Ftm_Ocu_Ip_xRegLayoutType * _20;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.17_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.17_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _2 = (int) InstNum_24(D);
  _3 = (int) ChNum_25(D);
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _5 = (int) InstNum_24(D);
  _6 = (int) ChNum_25(D);
  _7 = Ftm_Ocu_Ip_axChannelPinUsedState[_5][_6];
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum_24(D);
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  u32RegSwOCtrl_27 = Ftm_Ocu_Ip_GetSwOutputControlReg (_9);
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_27
  # DEBUG BEGIN_STMT
  if (PinState_28(D) == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) ChNum_25(D);
  _11 = _10 + 8;
  _12 = 1 << _11;
  u32RegSwOCtrl_30 = u32RegSwOCtrl_27 | _12;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_30
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) ChNum_25(D);
  _14 = _13 + 8;
  _15 = 1 << _14;
  _16 = ~_15;
  u32RegSwOCtrl_29 = u32RegSwOCtrl_27 & _16;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_29

  <bb 8> :
  # u32RegSwOCtrl_21 = PHI <u32RegSwOCtrl_30(6), u32RegSwOCtrl_29(7)>
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_21
  # DEBUG BEGIN_STMT
  _17 = (int) ChNum_25(D);
  _18 = 1 << _17;
  u32RegSwOCtrl_31 = u32RegSwOCtrl_21 | _18;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_31
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum_24(D);
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetSwOutputControlReg (_20, u32RegSwOCtrl_31);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_14 ();

  <bb 9> :
  return;

}


Ftm_Ocu_Ip_SetPinAction (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_PinActionType PinAction)
{
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.16_1;
  int _2;
  int _3;
  <unnamed type> _4;
  int _5;
  int _6;
  <unnamed type> _7;
  int _8;
  int _9;
  int _10;
  int _11;
  struct Ftm_Ocu_Ip_xRegLayoutType * _12;
  int _13;
  int _14;
  int _15;
  struct Ftm_Ocu_Ip_xRegLayoutType * _16;
  int _17;
  int _18;
  int _19;
  struct Ftm_Ocu_Ip_xRegLayoutType * _20;
  int _21;
  int _22;
  int _23;
  struct Ftm_Ocu_Ip_xRegLayoutType * _24;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.16_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.16_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = (int) InstNum_28(D);
  _3 = (int) ChNum_29(D);
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _5 = (int) InstNum_28(D);
  _6 = (int) ChNum_29(D);
  _7 = Ftm_Ocu_Ip_axChannelPinUsedState[_5][_6];
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _8 = (int) PinAction_31(D);
  switch (_8) <default: <L6> [INV], case 0: <L3> [INV], case 1: <L4> [INV], case 2: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _9 = (int) InstNum_28(D);
  _10 = (int) ChNum_29(D);
  Ftm_Ocu_Ip_axPinAction[_9][_10] = 0;
  # DEBUG BEGIN_STMT
  _11 = (int) InstNum_28(D);
  _12 = Ftm_Ocu_Ip_gapcxBase[_11];
  Ftm_Ocu_Ip_SetChEdgeLevel (_12, ChNum_29(D), 2);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _13 = (int) InstNum_28(D);
  _14 = (int) ChNum_29(D);
  Ftm_Ocu_Ip_axPinAction[_13][_14] = 1;
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum_28(D);
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  Ftm_Ocu_Ip_SetChEdgeLevel (_16, ChNum_29(D), 3);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _17 = (int) InstNum_28(D);
  _18 = (int) ChNum_29(D);
  Ftm_Ocu_Ip_axPinAction[_17][_18] = 2;
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum_28(D);
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetChEdgeLevel (_20, ChNum_29(D), 1);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _21 = (int) InstNum_28(D);
  _22 = (int) ChNum_29(D);
  Ftm_Ocu_Ip_axPinAction[_21][_22] = 3;
  # DEBUG BEGIN_STMT
  _23 = (int) InstNum_28(D);
  _24 = Ftm_Ocu_Ip_gapcxBase[_23];
  Ftm_Ocu_Ip_SetChEdgeLevel (_24, ChNum_29(D), 0);
  # DEBUG BEGIN_STMT

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_13 ();

  <bb 11> :
  return;

}


Ftm_Ocu_Ip_GetCounter (uint8 InstNum)
{
  Ftm_Ocu_Ip_ValueType RetCntVal;
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.15_1;
  int _2;
  struct Ftm_Ocu_Ip_xRegLayoutType * _3;
  Ftm_Ocu_Ip_ValueType _11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetCntVal_6 = 0;
  # DEBUG RetCntVal => RetCntVal_6
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.15_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.15_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum_8(D);
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  RetCntVal_10 = Ftm_Ocu_Ip_GetCntVal (_3);
  # DEBUG RetCntVal => RetCntVal_10

  <bb 4> :
  # RetCntVal_4 = PHI <RetCntVal_6(2), RetCntVal_10(3)>
  # DEBUG RetCntVal => RetCntVal_4
  # DEBUG BEGIN_STMT
  _11 = RetCntVal_4;
  return _11;

}


Ftm_Ocu_Ip_StopChannel (uint8 InstNum, uint8 ChNum)
{
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.14_1;
  int _2;
  int _3;
  <unnamed type> _4;
  int _5;
  int _6;
  <unnamed type> _7;
  int _8;
  struct Ftm_Ocu_Ip_xRegLayoutType * _9;
  int _10;
  struct Ftm_Ocu_Ip_xRegLayoutType * _11;
  int _12;
  struct Ftm_Ocu_Ip_xRegLayoutType * _13;
  int _14;
  struct Ftm_Ocu_Ip_xRegLayoutType * _15;
  int _16;
  int _17;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.14_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.14_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) InstNum_20(D);
  _3 = (int) ChNum_21(D);
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _5 = (int) InstNum_20(D);
  _6 = (int) ChNum_21(D);
  _7 = Ftm_Ocu_Ip_saxChannelState[_5][_6];
  if (_7 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum_20(D);
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  Ftm_Ocu_Ip_SetChEdgeLevel (_9, ChNum_21(D), 0);
  # DEBUG BEGIN_STMT
  _10 = (int) InstNum_20(D);
  _11 = Ftm_Ocu_Ip_gapcxBase[_10];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_11, ChNum_21(D));
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum_20(D);
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_13, ChNum_21(D));
  # DEBUG BEGIN_STMT
  _14 = (int) InstNum_20(D);
  _15 = Ftm_Ocu_Ip_gapcxBase[_14];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_15, ChNum_21(D), 0);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum_20(D);
  _17 = (int) ChNum_21(D);
  Ftm_Ocu_Ip_saxChannelState[_16][_17] = 2;

  <bb 6> :
  return;

}


Ftm_Ocu_Ip_StartChannel (uint8 InstNum, uint8 ChNum)
{
  <unnamed type> Ftm_Ocu_Ip_sGlobalDrvState.13_1;
  int _2;
  int _3;
  <unnamed type> _4;
  unsigned int _5;
  int _6;
  int _7;
  unsigned char _8;
  int _9;
  int _10;
  struct Ftm_Ocu_Ip_xRegLayoutType * _11;
  int _12;
  struct Ftm_Ocu_Ip_xRegLayoutType * _13;
  int _14;
  struct Ftm_Ocu_Ip_xRegLayoutType * _15;
  int _16;
  struct Ftm_Ocu_Ip_xRegLayoutType * _17;
  int _18;
  struct Ftm_Ocu_Ip_xRegLayoutType * _19;
  int _20;
  struct Ftm_Ocu_Ip_xRegLayoutType * _21;
  int _22;
  struct Ftm_Ocu_Ip_xRegLayoutType * _23;
  int _24;
  struct Ftm_Ocu_Ip_xRegLayoutType * _25;
  int _26;
  int _27;

  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.13_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.13_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _2 = (int) InstNum_31(D);
  _3 = (int) ChNum_32(D);
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  _5 = _4 + 4294967295;
  if (_5 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _6 = (int) InstNum_31(D);
  _7 = (int) ChNum_32(D);
  _8 = Ftm_Ocu_Ip_axPinAction[_6][_7];
  _9 = (int) _8;
  switch (_9) <default: <L5> [INV], case 0: <L2> [INV], case 1: <L3> [INV], case 2: <L4> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _10 = (int) InstNum_31(D);
  _11 = Ftm_Ocu_Ip_gapcxBase[_10];
  Ftm_Ocu_Ip_SetChEdgeLevel (_11, ChNum_32(D), 2);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum_31(D);
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  Ftm_Ocu_Ip_SetChEdgeLevel (_13, ChNum_32(D), 3);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _14 = (int) InstNum_31(D);
  _15 = Ftm_Ocu_Ip_gapcxBase[_14];
  Ftm_Ocu_Ip_SetChEdgeLevel (_15, ChNum_32(D), 1);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum_31(D);
  _17 = Ftm_Ocu_Ip_gapcxBase[_16];
  Ftm_Ocu_Ip_SetChEdgeLevel (_17, ChNum_32(D), 0);
  # DEBUG BEGIN_STMT

  <bb 9> :
  # DEBUG BEGIN_STMT
  _18 = (int) InstNum_31(D);
  _19 = Ftm_Ocu_Ip_gapcxBase[_18];
  Ftm_Ocu_Ip_ClearChSwOutputControlEn (_19, ChNum_32(D));
  # DEBUG BEGIN_STMT
  _20 = (int) InstNum_31(D);
  _21 = Ftm_Ocu_Ip_gapcxBase[_20];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_21, ChNum_32(D));
  # DEBUG BEGIN_STMT
  _22 = (int) InstNum_31(D);
  _23 = Ftm_Ocu_Ip_gapcxBase[_22];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_23, ChNum_32(D));
  # DEBUG BEGIN_STMT
  _24 = (int) InstNum_31(D);
  _25 = Ftm_Ocu_Ip_gapcxBase[_24];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_25, ChNum_32(D), 1);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _26 = (int) InstNum_31(D);
  _27 = (int) ChNum_32(D);
  Ftm_Ocu_Ip_saxChannelState[_26][_27] = 3;

  <bb 10> :
  return;

}


Ftm_Ocu_Ip_DeInit ()
{
  const struct Ftm_Ocu_Ip_SpecificIpConfigType * pFtmModuleCfg;
  const struct Ftm_Ocu_Ip_ChannelConfigType * pFtmChannelCfg;
  uint8 ChNum;
  uint8 InstNum;
  uint8 ChLoopIdx;
  uint8 ModuleIdx;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.8_1;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.9_2;
  const struct Ftm_Ocu_Ip_SpecificIpConfigType[<unknown>] * _3;
  int _4;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.10_5;
  const struct Ftm_Ocu_Ip_ChannelConfigType[<unknown>] * _6;
  int _7;
  short unsigned int _8;
  short unsigned int _9;
  unsigned char _10;
  int _11;
  int _12;
  int _13;
  struct Ftm_Ocu_Ip_xRegLayoutType * _14;
  int _15;
  struct Ftm_Ocu_Ip_xRegLayoutType * _16;
  int _17;
  struct Ftm_Ocu_Ip_xRegLayoutType * _18;
  int _19;
  struct Ftm_Ocu_Ip_xRegLayoutType * _20;
  int _21;
  int _22;
  int _23;
  struct Ftm_Ocu_Ip_xRegLayoutType * _24;
  int _25;
  struct Ftm_Ocu_Ip_xRegLayoutType * _26;
  int _27;
  struct Ftm_Ocu_Ip_xRegLayoutType * _28;
  int _29;
  struct Ftm_Ocu_Ip_xRegLayoutType * _30;
  int _31;
  struct Ftm_Ocu_Ip_xRegLayoutType * _32;
  int _33;
  struct Ftm_Ocu_Ip_xRegLayoutType * _34;
  int _35;
  struct Ftm_Ocu_Ip_xRegLayoutType * _36;
  int _37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  int _43;
  int _44;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.11_45;
  unsigned char _46;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.12_47;
  unsigned char _48;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pFtmChannelCfg_55 = 0B;
  # DEBUG pFtmChannelCfg => pFtmChannelCfg_55
  # DEBUG BEGIN_STMT
  pFtmModuleCfg_56 = 0B;
  # DEBUG pFtmModuleCfg => pFtmModuleCfg_56
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.8_1 = Ftm_Ocu_Ip_spcxIpConfig;
  if (Ftm_Ocu_Ip_spcxIpConfig.8_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ModuleIdx_58 = 0;
  # DEBUG ModuleIdx => ModuleIdx_58
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.9_2 = Ftm_Ocu_Ip_spcxIpConfig;
  _3 = Ftm_Ocu_Ip_spcxIpConfig.9_2->pcxModulesConfig;
  _4 = (int) ModuleIdx_49;
  pFtmModuleCfg_61 = &*_3[_4];
  # DEBUG pFtmModuleCfg => pFtmModuleCfg_61
  # DEBUG BEGIN_STMT
  ChLoopIdx_62 = 0;
  # DEBUG ChLoopIdx => ChLoopIdx_62
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.10_5 = Ftm_Ocu_Ip_spcxIpConfig;
  _6 = Ftm_Ocu_Ip_spcxIpConfig.10_5->pcxChannelsConfig;
  _7 = (int) ChLoopIdx_50;
  pFtmChannelCfg_64 = &*_6[_7];
  # DEBUG pFtmChannelCfg => pFtmChannelCfg_64
  # DEBUG BEGIN_STMT
  _8 = pFtmChannelCfg_64->HwChannel;
  InstNum_66 = Ftm_Ocu_Ip_GetInstanceNum (_8);
  # DEBUG InstNum => InstNum_66
  # DEBUG BEGIN_STMT
  _9 = pFtmChannelCfg_64->HwChannel;
  ChNum_68 = Ftm_Ocu_Ip_GetChannelNum (_9);
  # DEBUG ChNum => ChNum_68
  # DEBUG BEGIN_STMT
  _10 = pFtmModuleCfg_61->ModuleId;
  if (InstNum_66 == _10)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = (int) InstNum_66;
  _12 = (int) ChNum_68;
  Ftm_Ocu_Ip_axPinAction[_11][_12] = 0;
  # DEBUG BEGIN_STMT
  _13 = (int) InstNum_66;
  _14 = Ftm_Ocu_Ip_gapcxBase[_13];
  Ftm_Ocu_Ip_SetModuloRegVal (_14, 0);
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum_66;
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  Ftm_Ocu_Ip_SetEnFtmModule (_16, 0);
  # DEBUG BEGIN_STMT
  _17 = (int) InstNum_66;
  _18 = Ftm_Ocu_Ip_gapcxBase[_17];
  Ftm_Ocu_Ip_SetBehaviorInDebugMode (_18, 0);
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum_66;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetSCRegVal (_20, 0);
  # DEBUG BEGIN_STMT
  _21 = (int) InstNum_66;
  _22 = (int) ChNum_68;
  Ftm_Ocu_Ip_sau16MaxCounterVals[_21][_22] = 0;
  # DEBUG BEGIN_STMT
  _23 = (int) InstNum_66;
  _24 = Ftm_Ocu_Ip_gapcxBase[_23];
  Ftm_Ocu_Ip_SetChStatusAndControlReg (_24, ChNum_68, 0);
  # DEBUG BEGIN_STMT
  _25 = (int) InstNum_66;
  _26 = Ftm_Ocu_Ip_gapcxBase[_25];
  Ftm_Ocu_Ip_SetChCounterMatchVal (_26, ChNum_68, 0);
  # DEBUG BEGIN_STMT
  _27 = (int) InstNum_66;
  _28 = Ftm_Ocu_Ip_gapcxBase[_27];
  Ftm_Ocu_Ip_ClearChSwOutputControlEn (_28, ChNum_68);
  # DEBUG BEGIN_STMT
  _29 = (int) InstNum_66;
  _30 = Ftm_Ocu_Ip_gapcxBase[_29];
  Ftm_Ocu_Ip_ClearChSwOutputControlVal (_30, ChNum_68);
  # DEBUG BEGIN_STMT
  _31 = (int) InstNum_66;
  _32 = Ftm_Ocu_Ip_gapcxBase[_31];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_32, ChNum_68, 0);
  # DEBUG BEGIN_STMT
  _33 = (int) InstNum_66;
  _34 = Ftm_Ocu_Ip_gapcxBase[_33];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_34, ChNum_68);
  # DEBUG BEGIN_STMT
  _35 = (int) InstNum_66;
  _36 = Ftm_Ocu_Ip_gapcxBase[_35];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_36, ChNum_68);
  # DEBUG BEGIN_STMT
  _37 = (int) InstNum_66;
  _38 = (int) ChNum_68;
  Ftm_Ocu_Ip_gaxChState[_37][_38].mChannelInit = 0;
  # DEBUG BEGIN_STMT
  _39 = (int) InstNum_66;
  _40 = (int) ChNum_68;
  Ftm_Ocu_Ip_gaxChState[_39][_40].mCallbackFunc = 0B;
  # DEBUG BEGIN_STMT
  _41 = (int) InstNum_66;
  _42 = (int) ChNum_68;
  Ftm_Ocu_Ip_gaxChState[_41][_42].mCallbackParam = 255;
  # DEBUG BEGIN_STMT
  _43 = (int) InstNum_66;
  _44 = (int) ChNum_68;
  Ftm_Ocu_Ip_saxChannelState[_43][_44] = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ChLoopIdx_86 = ChLoopIdx_50 + 1;
  # DEBUG ChLoopIdx => ChLoopIdx_86

  <bb 8> :
  # ChLoopIdx_50 = PHI <ChLoopIdx_62(4), ChLoopIdx_86(7)>
  # DEBUG ChLoopIdx => ChLoopIdx_50
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.11_45 = Ftm_Ocu_Ip_spcxIpConfig;
  _46 = Ftm_Ocu_Ip_spcxIpConfig.11_45->NumChannels;
  if (ChLoopIdx_50 < _46)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ModuleIdx_63 = ModuleIdx_49 + 1;
  # DEBUG ModuleIdx => ModuleIdx_63

  <bb 10> :
  # ModuleIdx_49 = PHI <ModuleIdx_58(3), ModuleIdx_63(9)>
  # DEBUG ModuleIdx => ModuleIdx_49
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.12_47 = Ftm_Ocu_Ip_spcxIpConfig;
  _48 = Ftm_Ocu_Ip_spcxIpConfig.12_47->NumModules;
  if (ModuleIdx_49 < _48)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig = 0B;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState = 0;

  <bb 12> :
  return;

}


Ftm_Ocu_Ip_Init (const struct Ftm_Ocu_Ip_ModuleConfigType * const pFtmIpConfig)
{
  const struct Ftm_Ocu_Ip_SpecificIpConfigType * pFtmModuleCfg;
  const struct Ftm_Ocu_Ip_ChannelConfigType * pFtmChannelCfg;
  uint8 ChNum;
  uint8 InstNum;
  uint8 PinAction;
  uint32 u32RegSwOCtrl;
  uint8 ChLoopIdx;
  uint8 ModuleIdx;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.0_1;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.1_2;
  const struct Ftm_Ocu_Ip_SpecificIpConfigType[<unknown>] * _3;
  int _4;
  unsigned char _5;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.2_6;
  const struct Ftm_Ocu_Ip_ChannelConfigType[<unknown>] * _7;
  int _8;
  short unsigned int _9;
  short unsigned int _10;
  unsigned char _11;
  int _12;
  struct Ftm_Ocu_Ip_xRegLayoutType * _13;
  long unsigned int _14;
  long unsigned int _15;
  int _16;
  struct Ftm_Ocu_Ip_xRegLayoutType * _17;
  long unsigned int _18;
  int _19;
  struct Ftm_Ocu_Ip_xRegLayoutType * _20;
  long unsigned int _21;
  int _22;
  struct Ftm_Ocu_Ip_xRegLayoutType * _23;
  int _24;
  struct Ftm_Ocu_Ip_xRegLayoutType * _25;
  int _26;
  struct Ftm_Ocu_Ip_xRegLayoutType * _27;
  int _28;
  struct Ftm_Ocu_Ip_xRegLayoutType * _29;
  int _30;
  struct Ftm_Ocu_Ip_xRegLayoutType * _31;
  int _32;
  struct Ftm_Ocu_Ip_xRegLayoutType * _33;
  int _34;
  struct Ftm_Ocu_Ip_xRegLayoutType * _35;
  int _36;
  struct Ftm_Ocu_Ip_xRegLayoutType * _37;
  unsigned char _38;
  unsigned int _39;
  unsigned int _40;
  unsigned char _41;
  unsigned char _42;
  int _43;
  struct Ftm_Ocu_Ip_xRegLayoutType * _44;
  int _45;
  struct Ftm_Ocu_Ip_xRegLayoutType * _46;
  int _47;
  struct Ftm_Ocu_Ip_xRegLayoutType * _48;
  short unsigned int _49;
  int _50;
  int _51;
  short unsigned int _52;
  int _53;
  struct Ftm_Ocu_Ip_xRegLayoutType * _54;
  int _55;
  struct Ftm_Ocu_Ip_xRegLayoutType * _56;
  unsigned int _57;
  unsigned int _58;
  long unsigned int _59;
  int _60;
  struct Ftm_Ocu_Ip_xRegLayoutType * _61;
  int _62;
  struct Ftm_Ocu_Ip_xRegLayoutType * _63;
  int _64;
  struct Ftm_Ocu_Ip_xRegLayoutType * _65;
  int _66;
  struct Ftm_Ocu_Ip_xRegLayoutType * _67;
  short unsigned int _68;
  long unsigned int _69;
  unsigned char _70;
  unsigned int _71;
  unsigned int _72;
  unsigned char _73;
  int _74;
  int _75;
  int _76;
  int _77;
  struct Ftm_Ocu_Ip_xRegLayoutType * _78;
  int _79;
  int _80;
  int _81;
  struct Ftm_Ocu_Ip_xRegLayoutType * _82;
  int _83;
  int _84;
  int _85;
  struct Ftm_Ocu_Ip_xRegLayoutType * _86;
  int _87;
  int _88;
  int _89;
  struct Ftm_Ocu_Ip_xRegLayoutType * _90;
  unsigned int _91;
  unsigned int _92;
  int _93;
  struct Ftm_Ocu_Ip_xRegLayoutType * _94;
  unsigned char _95;
  int _96;
  struct Ftm_Ocu_Ip_xRegLayoutType * _97;
  unsigned char _98;
  int _99;
  struct Ftm_Ocu_Ip_xRegLayoutType * _100;
  unsigned char _101;
  int _102;
  struct Ftm_Ocu_Ip_xRegLayoutType * _103;
  unsigned char _104;
  int _105;
  struct Ftm_Ocu_Ip_xRegLayoutType * _106;
  unsigned char _107;
  int _108;
  struct Ftm_Ocu_Ip_xRegLayoutType * _109;
  unsigned char _110;
  unsigned char _111;
  signed char _112;
  int _113;
  int _114;
  unsigned char _115;
  long unsigned int _116;
  long unsigned int _117;
  long unsigned int _118;
  unsigned int _119;
  unsigned int _120;
  long unsigned int _121;
  int _122;
  long unsigned int _123;
  int _124;
  struct Ftm_Ocu_Ip_xRegLayoutType * _125;
  int _126;
  struct Ftm_Ocu_Ip_xRegLayoutType * _127;
  int _128;
  int _129;
  int _130;
  int _131;
  void (*<T4a5>) (uint16) _132;
  int _133;
  int _134;
  short unsigned int _135;
  int _136;
  struct Ftm_Ocu_Ip_xRegLayoutType * _137;
  int _138;
  struct Ftm_Ocu_Ip_xRegLayoutType * _139;
  unsigned char _140;
  unsigned char _141;
  int _142;
  struct Ftm_Ocu_Ip_xRegLayoutType * _143;
  int _144;
  struct Ftm_Ocu_Ip_xRegLayoutType * _145;
  unsigned char _146;
  unsigned int _147;
  unsigned int _148;
  unsigned char _149;
  unsigned char _150;
  int _151;
  int _152;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.3_153;
  unsigned char _154;
  const struct Ftm_Ocu_Ip_ModuleConfigType * Ftm_Ocu_Ip_spcxIpConfig.4_155;
  unsigned char _156;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pFtmChannelCfg_170 = 0B;
  # DEBUG pFtmChannelCfg => pFtmChannelCfg_170
  # DEBUG BEGIN_STMT
  pFtmModuleCfg_171 = 0B;
  # DEBUG pFtmModuleCfg => pFtmModuleCfg_171
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.0_1 = Ftm_Ocu_Ip_spcxIpConfig;
  if (Ftm_Ocu_Ip_spcxIpConfig.0_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig = pFtmIpConfig_173(D);
  # DEBUG BEGIN_STMT
  ModuleIdx_175 = 0;
  # DEBUG ModuleIdx => ModuleIdx_175
  goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.1_2 = Ftm_Ocu_Ip_spcxIpConfig;
  _3 = Ftm_Ocu_Ip_spcxIpConfig.1_2->pcxModulesConfig;
  _4 = (int) ModuleIdx_157;
  pFtmModuleCfg_177 = &*_3[_4];
  # DEBUG pFtmModuleCfg => pFtmModuleCfg_177
  # DEBUG BEGIN_STMT
  u32RegSwOCtrl_178 = 0;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_178
  # DEBUG BEGIN_STMT
  _5 = pFtmModuleCfg_177->ModuleId;
  Ftm_Ocu_Ip_SetOutputPinCtrlBit (_5);
  # DEBUG BEGIN_STMT
  ChLoopIdx_180 = 0;
  # DEBUG ChLoopIdx => ChLoopIdx_180
  goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.2_6 = Ftm_Ocu_Ip_spcxIpConfig;
  _7 = Ftm_Ocu_Ip_spcxIpConfig.2_6->pcxChannelsConfig;
  _8 = (int) ChLoopIdx_158;
  pFtmChannelCfg_182 = &*_7[_8];
  # DEBUG pFtmChannelCfg => pFtmChannelCfg_182
  # DEBUG BEGIN_STMT
  _9 = pFtmChannelCfg_182->HwChannel;
  InstNum_184 = Ftm_Ocu_Ip_GetInstanceNum (_9);
  # DEBUG InstNum => InstNum_184
  # DEBUG BEGIN_STMT
  _10 = pFtmChannelCfg_182->HwChannel;
  ChNum_186 = Ftm_Ocu_Ip_GetChannelNum (_10);
  # DEBUG ChNum => ChNum_186
  # DEBUG BEGIN_STMT
  _11 = pFtmModuleCfg_177->ModuleId;
  if (InstNum_184 == _11)
    goto <bb 6>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum_184;
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  _14 ={v} _13->FMS;
  _15 = _14 & 64;
  if (_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum_184;
  _17 = Ftm_Ocu_Ip_gapcxBase[_16];
  _18 ={v} _17->MODE;
  _19 = (int) InstNum_184;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  _21 = _18 | 4;
  _20->MODE ={v} _21;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _22 = (int) InstNum_184;
  _23 = Ftm_Ocu_Ip_gapcxBase[_22];
  Ftm_Ocu_Ip_SetModeRegVal (_23, 4);
  # DEBUG BEGIN_STMT
  _24 = (int) InstNum_184;
  _25 = Ftm_Ocu_Ip_gapcxBase[_24];
  Ftm_Ocu_Ip_SetOutmaskSyncOnRisingEdges (_25);
  # DEBUG BEGIN_STMT
  _26 = (int) InstNum_184;
  _27 = Ftm_Ocu_Ip_gapcxBase[_26];
  Ftm_Qdec_Ip_ClearQdecModeEn (_27);
  # DEBUG BEGIN_STMT
  _28 = (int) InstNum_184;
  _29 = Ftm_Ocu_Ip_gapcxBase[_28];
  Ftm_Ocu_Ip_SetClockSource (_29, 0);
  # DEBUG BEGIN_STMT
  _30 = (int) InstNum_184;
  _31 = Ftm_Ocu_Ip_gapcxBase[_30];
  Ftm_Ocu_Ip_SetClockPrescaler (_31, 0);
  # DEBUG BEGIN_STMT
  _32 = (int) InstNum_184;
  _33 = Ftm_Ocu_Ip_gapcxBase[_32];
  Ftm_Ocu_Ip_SetUpCountingMode (_33);
  # DEBUG BEGIN_STMT
  _34 = (int) InstNum_184;
  _35 = Ftm_Ocu_Ip_gapcxBase[_34];
  Ftm_Ocu_Ip_SetTimerOverflowInterruptEn (_35, 0);
  # DEBUG BEGIN_STMT
  _36 = (int) InstNum_184;
  _37 = Ftm_Ocu_Ip_gapcxBase[_36];
  _38 = pFtmModuleCfg_177->ModuleControlValue;
  _39 = (unsigned int) _38;
  _40 = _39 >> 1;
  _41 = (unsigned char) _40;
  _42 = _41 & 3;
  Ftm_Ocu_Ip_SetBehaviorInDebugMode (_37, _42);
  # DEBUG BEGIN_STMT
  _43 = (int) InstNum_184;
  _44 = Ftm_Ocu_Ip_gapcxBase[_43];
  Ftm_Ocu_Ip_SetSyncAndConfigfReg (_44, 0);
  # DEBUG BEGIN_STMT
  _45 = (int) InstNum_184;
  _46 = Ftm_Ocu_Ip_gapcxBase[_45];
  Ftm_Ocu_Ip_SetCounterInitialVal (_46, 0);
  # DEBUG BEGIN_STMT
  _47 = (int) InstNum_184;
  _48 = Ftm_Ocu_Ip_gapcxBase[_47];
  _49 = pFtmModuleCfg_177->MaxCounterValue;
  Ftm_Ocu_Ip_SetModuloRegVal (_48, _49);
  # DEBUG BEGIN_STMT
  _50 = (int) InstNum_184;
  _51 = (int) ChNum_186;
  _52 = pFtmModuleCfg_177->MaxCounterValue;
  Ftm_Ocu_Ip_sau16MaxCounterVals[_50][_51] = _52;
  # DEBUG BEGIN_STMT
  _53 = (int) InstNum_184;
  _54 = Ftm_Ocu_Ip_gapcxBase[_53];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_54, ChNum_186, 0);
  # DEBUG BEGIN_STMT
  _55 = (int) InstNum_184;
  _56 = Ftm_Ocu_Ip_gapcxBase[_55];
  _57 = (unsigned int) ChNum_186;
  _58 = _57 + 16;
  _59 = 1 << _58;
  Ftm_Ocu_Ip_EnablePwmChannelOutput (_56, _59);
  # DEBUG BEGIN_STMT
  _60 = (int) InstNum_184;
  _61 = Ftm_Ocu_Ip_gapcxBase[_60];
  Ftm_Ocu_Ip_ClearChannelPolarity (_61, ChNum_186);
  # DEBUG BEGIN_STMT
  _62 = (int) InstNum_184;
  _63 = Ftm_Ocu_Ip_gapcxBase[_62];
  Ftm_Ocu_Ip_SetChannelOutputCompareMode (_63, ChNum_186);
  # DEBUG BEGIN_STMT
  _64 = (int) InstNum_184;
  _65 = Ftm_Ocu_Ip_gapcxBase[_64];
  Ftm_Ocu_Ip_DisablesDmaTransfersForChannel (_65, ChNum_186);
  # DEBUG BEGIN_STMT
  _66 = (int) InstNum_184;
  _67 = Ftm_Ocu_Ip_gapcxBase[_66];
  _68 = pFtmChannelCfg_182->DefaultThreshold;
  _69 = (long unsigned int) _68;
  Ftm_Ocu_Ip_SetChCounterMatchVal (_67, ChNum_186, _69);
  # DEBUG BEGIN_STMT
  _70 = pFtmChannelCfg_182->ChannelControlValue;
  _71 = (unsigned int) _70;
  _72 = _71 >> 4;
  _73 = (unsigned char) _72;
  PinAction_206 = _73 & 3;
  # DEBUG PinAction => PinAction_206
  # DEBUG BEGIN_STMT
  _74 = (int) PinAction_206;
  switch (_74) <default: <L9> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _75 = (int) InstNum_184;
  _76 = (int) ChNum_186;
  Ftm_Ocu_Ip_axPinAction[_75][_76] = 0;
  # DEBUG BEGIN_STMT
  _77 = (int) InstNum_184;
  _78 = Ftm_Ocu_Ip_gapcxBase[_77];
  Ftm_Ocu_Ip_SetChEdgeLevel (_78, ChNum_186, 2);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  _79 = (int) InstNum_184;
  _80 = (int) ChNum_186;
  Ftm_Ocu_Ip_axPinAction[_79][_80] = 1;
  # DEBUG BEGIN_STMT
  _81 = (int) InstNum_184;
  _82 = Ftm_Ocu_Ip_gapcxBase[_81];
  Ftm_Ocu_Ip_SetChEdgeLevel (_82, ChNum_186, 3);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  _83 = (int) InstNum_184;
  _84 = (int) ChNum_186;
  Ftm_Ocu_Ip_axPinAction[_83][_84] = 2;
  # DEBUG BEGIN_STMT
  _85 = (int) InstNum_184;
  _86 = Ftm_Ocu_Ip_gapcxBase[_85];
  Ftm_Ocu_Ip_SetChEdgeLevel (_86, ChNum_186, 1);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  _87 = (int) InstNum_184;
  _88 = (int) ChNum_186;
  Ftm_Ocu_Ip_axPinAction[_87][_88] = 3;
  # DEBUG BEGIN_STMT
  _89 = (int) InstNum_184;
  _90 = Ftm_Ocu_Ip_gapcxBase[_89];
  Ftm_Ocu_Ip_SetChEdgeLevel (_90, ChNum_186, 0);
  # DEBUG BEGIN_STMT

  <bb 13> :
  # DEBUG BEGIN_STMT
  _91 = (unsigned int) ChNum_186;
  _92 = _91 & 1;
  if (_92 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _93 = (int) InstNum_184;
  _94 = Ftm_Ocu_Ip_gapcxBase[_93];
  _95 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualEdgeCaptureMode (_94, _95);
  # DEBUG BEGIN_STMT
  _96 = (int) InstNum_184;
  _97 = Ftm_Ocu_Ip_gapcxBase[_96];
  _98 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualChCombineMode (_97, _98);
  # DEBUG BEGIN_STMT
  _99 = (int) InstNum_184;
  _100 = Ftm_Ocu_Ip_gapcxBase[_99];
  _101 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualChModifiedCombineMode (_100, _101);
  # DEBUG BEGIN_STMT
  _102 = (int) InstNum_184;
  _103 = Ftm_Ocu_Ip_gapcxBase[_102];
  _104 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualChPwmSyncEn (_103, _104);
  # DEBUG BEGIN_STMT
  _105 = (int) InstNum_184;
  _106 = Ftm_Ocu_Ip_gapcxBase[_105];
  _107 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualChDeadTimeInsertionEn (_106, _107);
  # DEBUG BEGIN_STMT
  _108 = (int) InstNum_184;
  _109 = Ftm_Ocu_Ip_gapcxBase[_108];
  _110 = ChNum_186 >> 1;
  Ftm_Ocu_Ip_ClearDualChComplementEn (_109, _110);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _111 = pFtmChannelCfg_182->ChannelControlValue;
  _112 = (signed char) _111;
  if (_112 < 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _113 = (int) InstNum_184;
  _114 = (int) ChNum_186;
  Ftm_Ocu_Ip_axChannelPinUsedState[_113][_114] = 1;
  # DEBUG BEGIN_STMT
  _115 = pFtmChannelCfg_182->ChannelControlValue;
  _116 = (long unsigned int) _115;
  _117 = _116 >> 6;
  _118 = _117 & 1;
  _119 = (unsigned int) ChNum_186;
  _120 = _119 + 8;
  _121 = _118 << _120;
  u32RegSwOCtrl_222 = u32RegSwOCtrl_161 | _121;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_222
  # DEBUG BEGIN_STMT
  _122 = (int) ChNum_186;
  _123 = 1 << _122;
  u32RegSwOCtrl_223 = u32RegSwOCtrl_222 | _123;
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_223

  <bb 17> :
  # u32RegSwOCtrl_159 = PHI <u32RegSwOCtrl_161(15), u32RegSwOCtrl_223(16)>
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_159
  # DEBUG BEGIN_STMT
  _124 = (int) InstNum_184;
  _125 = Ftm_Ocu_Ip_gapcxBase[_124];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_125, ChNum_186);
  # DEBUG BEGIN_STMT
  _126 = (int) InstNum_184;
  _127 = Ftm_Ocu_Ip_gapcxBase[_126];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_127, ChNum_186);
  # DEBUG BEGIN_STMT
  _128 = (int) InstNum_184;
  _129 = (int) ChNum_186;
  Ftm_Ocu_Ip_gaxChState[_128][_129].mChannelInit = 1;
  # DEBUG BEGIN_STMT
  _130 = (int) InstNum_184;
  _131 = (int) ChNum_186;
  _132 = pFtmChannelCfg_182->mCallbackFunc;
  Ftm_Ocu_Ip_gaxChState[_130][_131].mCallbackFunc = _132;
  # DEBUG BEGIN_STMT
  _133 = (int) InstNum_184;
  _134 = (int) ChNum_186;
  _135 = pFtmChannelCfg_182->mCallbackParam;
  Ftm_Ocu_Ip_gaxChState[_133][_134].mCallbackParam = _135;
  # DEBUG BEGIN_STMT
  _136 = (int) InstNum_184;
  _137 = Ftm_Ocu_Ip_gapcxBase[_136];
  Ftm_Ocu_Ip_SetSwOutputControlReg (_137, u32RegSwOCtrl_159);
  # DEBUG BEGIN_STMT
  _138 = (int) InstNum_184;
  _139 = Ftm_Ocu_Ip_gapcxBase[_138];
  _140 = pFtmModuleCfg_177->ModuleControlValue;
  _141 = _140 >> 6;
  Ftm_Ocu_Ip_SetClockSource (_139, _141);
  # DEBUG BEGIN_STMT
  _142 = (int) InstNum_184;
  _143 = Ftm_Ocu_Ip_gapcxBase[_142];
  Ftm_Ocu_Ip_ClearTimerOverflowInterruptFlag (_143);
  # DEBUG BEGIN_STMT
  _144 = (int) InstNum_184;
  _145 = Ftm_Ocu_Ip_gapcxBase[_144];
  _146 = pFtmModuleCfg_177->ModuleControlValue;
  _147 = (unsigned int) _146;
  _148 = _147 >> 3;
  _149 = (unsigned char) _148;
  _150 = _149 & 7;
  Ftm_Ocu_Ip_InitModule (_145, _150);
  # DEBUG BEGIN_STMT
  _151 = (int) InstNum_184;
  _152 = (int) ChNum_186;
  Ftm_Ocu_Ip_saxChannelState[_151][_152] = 1;

  <bb 18> :
  # u32RegSwOCtrl_160 = PHI <u32RegSwOCtrl_161(5), u32RegSwOCtrl_159(17)>
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_160
  # DEBUG BEGIN_STMT
  ChLoopIdx_234 = ChLoopIdx_158 + 1;
  # DEBUG ChLoopIdx => ChLoopIdx_234

  <bb 19> :
  # ChLoopIdx_158 = PHI <ChLoopIdx_180(4), ChLoopIdx_234(18)>
  # u32RegSwOCtrl_161 = PHI <u32RegSwOCtrl_178(4), u32RegSwOCtrl_160(18)>
  # DEBUG u32RegSwOCtrl => u32RegSwOCtrl_161
  # DEBUG ChLoopIdx => ChLoopIdx_158
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.3_153 = Ftm_Ocu_Ip_spcxIpConfig;
  _154 = Ftm_Ocu_Ip_spcxIpConfig.3_153->NumChannels;
  if (ChLoopIdx_158 < _154)
    goto <bb 5>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  ModuleIdx_181 = ModuleIdx_157 + 1;
  # DEBUG ModuleIdx => ModuleIdx_181

  <bb 21> :
  # ModuleIdx_157 = PHI <ModuleIdx_175(3), ModuleIdx_181(20)>
  # DEBUG ModuleIdx => ModuleIdx_157
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.4_155 = Ftm_Ocu_Ip_spcxIpConfig;
  _156 = Ftm_Ocu_Ip_spcxIpConfig.4_155->NumModules;
  if (ModuleIdx_157 < _156)
    goto <bb 4>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState = 1;

  <bb 23> :
  return;

}


Ftm_Ocu_Ip_InitModule (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockPresc)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_SetEnFtmModule (acpFtmBase_2(D), 1);
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_SetClockPrescaler (acpFtmBase_2(D), ClockPresc_4(D));
  return;

}


Ftm_Ocu_Ip_DetermineNextCmStatus (Ftm_Ocu_Ip_ValueType PostCmWriteValue, Ftm_Ocu_Ip_ValueType StartIntervalValue, Ftm_Ocu_Ip_ValueType EndIntervalValue)
{
  Ftm_Ocu_Ip_ReturnType RetValue;
  int iftmp.19_2;
  Ftm_Ocu_Ip_ReturnType iftmp.20_3;
  Ftm_Ocu_Ip_ReturnType iftmp.20_8;
  Ftm_Ocu_Ip_ReturnType iftmp.20_9;
  int iftmp.19_11;
  int iftmp.19_12;
  Ftm_Ocu_Ip_ReturnType _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetValue_4 = 0;
  # DEBUG RetValue => RetValue_4
  # DEBUG BEGIN_STMT
  if (StartIntervalValue_5(D) <= EndIntervalValue_6(D))
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (StartIntervalValue_5(D) > PostCmWriteValue_7(D))
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (PostCmWriteValue_7(D) > EndIntervalValue_6(D))
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.19_12 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.19_11 = 0;

  <bb 7> :
  # iftmp.19_2 = PHI <iftmp.19_12(5), iftmp.19_11(6)>
  RetValue_13 = (Ftm_Ocu_Ip_ReturnType) iftmp.19_2;
  # DEBUG RetValue => RetValue_13
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PostCmWriteValue_7(D) < StartIntervalValue_5(D))
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (PostCmWriteValue_7(D) > EndIntervalValue_6(D))
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.20_8 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.20_9 = 0;

  <bb 12> :
  # iftmp.20_3 = PHI <iftmp.20_8(10), iftmp.20_9(11)>
  RetValue_10 = iftmp.20_3;
  # DEBUG RetValue => RetValue_10

  <bb 13> :
  # RetValue_1 = PHI <RetValue_13(7), RetValue_10(12)>
  # DEBUG RetValue => RetValue_1
  # DEBUG BEGIN_STMT
  _14 = RetValue_1;
  return _14;

}


Ftm_Ocu_Ip_SetOutputPinCtrlBit (uint8 InstNum)
{
  struct SIM_Type * _1;
  long unsigned int _2;
  unsigned int _3;
  unsigned int _4;
  long unsigned int _5;
  struct SIM_Type * _6;
  long unsigned int _7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1074036736B;
  _2 ={v} _1->MISCTRL0;
  _3 = (unsigned int) InstNum_9(D);
  _4 = _3 + 16;
  _5 = 1 << _4;
  _6 = 1074036736B;
  _7 = _2 | _5;
  _6->MISCTRL0 ={v} _7;
  return;

}


Ftm_Ocu_Ip_ClearDualChComplementEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 2 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChDeadTimeInsertionEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 16 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChPwmSyncEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 32 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChModifiedCombineMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 128 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearDualEdgeCaptureMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 12 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChCombineMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->COMBINE;
  _2 = (unsigned int) ChPairNum_9(D);
  _3 = _2 * 8;
  _4 = 1 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->COMBINE ={v} _6;
  return;

}


Ftm_Ocu_Ip_SetOutmaskSyncOnRisingEdges (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_4(D)->SYNC;
  _2 = _1 & 4294967287;
  acpFtmBase_4(D)->SYNC ={v} _2;
  return;

}


Ftm_Ocu_Ip_ClearChannelPolarity (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  uint32 TmpMask;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_6(D)->POL;
  _2 = (int) NumChannel_7(D);
  _3 = 1 << _2;
  _4 = ~_3;
  TmpMask_8 = _1 & _4;
  # DEBUG TmpMask => TmpMask_8
  # DEBUG BEGIN_STMT
  acpFtmBase_6(D)->POL ={v} TmpMask_8;
  return;

}


Ftm_Ocu_Ip_GetSwOutputControlReg (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase)
{
  uint32 _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _3 ={v} acpcFtmBase_2(D)->SWOCTRL;
  return _3;

}


Ftm_Ocu_Ip_SetSwOutputControlReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase_2(D)->SWOCTRL ={v} au32Value_3(D);
  return;

}


Ftm_Ocu_Ip_ClearChSwOutputControlVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->SWOCTRL;
  _2 = (unsigned int) NumChannel_9(D);
  _3 = _2 + 8;
  _4 = 1 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase_8(D)->SWOCTRL ={v} _6;
  return;

}


Ftm_Ocu_Ip_ClearChSwOutputControlEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_7(D)->SWOCTRL;
  _2 = (int) NumChannel_8(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase_7(D)->SWOCTRL ={v} _5;
  return;

}


Ftm_Ocu_Ip_SetModuloRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint16 au16ModVal)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) au16ModVal_2(D);
  acpFtmBase_4(D)->MOD ={v} _1;
  return;

}


Ftm_Ocu_Ip_SetCounterInitialVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint16 au16MinVal)
{
  long unsigned int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) au16MinVal_2(D);
  acpFtmBase_4(D)->CNTIN ={v} _1;
  return;

}


Ftm_Ocu_Ip_GetCntVal (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase)
{
  long unsigned int _1;
  Ftm_Ocu_Ip_ValueType _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpcFtmBase_3(D)->CNT;
  _4 = (Ftm_Ocu_Ip_ValueType) _1;
  return _4;

}


Ftm_Ocu_Ip_SetBehaviorInDebugMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 BdmModeVal)
{
  uint32 TmpMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_7(D)->CONF;
  _2 = _1 & 4294967103;
  _3 = (long unsigned int) BdmModeVal_8(D);
  _4 = _3 << 6;
  _5 = _4 & 255;
  TmpMask_9 = _2 | _5;
  # DEBUG TmpMask => TmpMask_9
  # DEBUG BEGIN_STMT
  acpFtmBase_7(D)->CONF ={v} TmpMask_9;
  return;

}


Ftm_Ocu_Ip_SetSyncAndConfigfReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase_2(D)->SYNCONF ={v} au32Value_3(D);
  return;

}


Ftm_Ocu_Ip_SetSCRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase_2(D)->SC ={v} au32Value_3(D);
  return;

}


Ftm_Ocu_Ip_EnablePwmChannelOutput (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  uint32 AllPwmMasks;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllPwmMasks_4 = 4128768;
  # DEBUG AllPwmMasks => AllPwmMasks_4
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_6(D)->SC;
  _2 = au32Value_7(D) & AllPwmMasks_4;
  _3 = _1 | _2;
  acpFtmBase_6(D)->SC ={v} _3;
  return;

}


Ftm_Ocu_Ip_SetUpCountingMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_4(D)->SC;
  _2 = _1 & 4294967263;
  acpFtmBase_4(D)->SC ={v} _2;
  return;

}


Ftm_Ocu_Ip_SetChCounterMatchVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, uint32 au32Value)
{
  int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_2(D);
  acpFtmBase_4(D)->CONTROLS[_1].CV ={v} au32Value_5(D);
  return;

}


Ftm_Ocu_Ip_DisablesDmaTransfersForChannel (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_5(D);
  _2 ={v} acpFtmBase_7(D)->CONTROLS[_1].CSC;
  _3 = (int) NumChannel_5(D);
  _4 = _2 & 4294967294;
  acpFtmBase_7(D)->CONTROLS[_3].CSC ={v} _4;
  return;

}


Ftm_Ocu_Ip_SetChStatusAndControlReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, uint32 au32Value)
{
  int _1;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_2(D);
  acpFtmBase_4(D)->CONTROLS[_1].CSC ={v} au32Value_5(D);
  return;

}


Ftm_Ocu_Ip_SetChEdgeLevel (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, Ftm_Ocu_Ip_OutputCompareModeType Level)
{
  uint32 TmpMask;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  unsigned int _10;
  unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  int _14;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_15(D);
  _2 ={v} acpFtmBase_17(D)->CONTROLS[_1].CSC;
  _3 = _2 & 4294967283;
  _4 = (unsigned char) Level_18(D);
  _5 = (long unsigned int) _4;
  _6 = _5 << 2;
  _7 = _6 & 4;
  _8 = _3 | _7;
  _9 = (unsigned char) Level_18(D);
  _10 = (unsigned int) _9;
  _11 = _10 >> 1;
  _12 = _11 << 3;
  _13 = _12 & 8;
  TmpMask_19 = _8 | _13;
  # DEBUG TmpMask => TmpMask_19
  # DEBUG BEGIN_STMT
  _14 = (int) NumChannel_15(D);
  acpFtmBase_17(D)->CONTROLS[_14].CSC ={v} TmpMask_19;
  return;

}


Ftm_Ocu_Ip_SetChannelOutputCompareMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  uint32 TmpMask;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_5(D);
  _2 ={v} acpFtmBase_7(D)->CONTROLS[_1].CSC;
  _3 = _2 & 4294967247;
  TmpMask_8 = _3 | 16;
  # DEBUG TmpMask => TmpMask_8
  # DEBUG BEGIN_STMT
  _4 = (int) NumChannel_5(D);
  acpFtmBase_7(D)->CONTROLS[_4].CSC ={v} TmpMask_8;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventStatus (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_7(D)->STATUS;
  _2 = (int) NumChannel_8(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase_7(D)->STATUS ={v} _5;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_5(D);
  _2 ={v} acpFtmBase_7(D)->CONTROLS[_1].CSC;
  _3 = (int) NumChannel_5(D);
  _4 = _2 & 4294967167;
  acpFtmBase_7(D)->CONTROLS[_3].CSC ={v} _4;
  return;

}


Ftm_Ocu_Ip_SetChannelInterruptEnBit (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, boolean aboEn)
{
  uint32 TmpMask;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  long unsigned int iftmp.6_5;
  long unsigned int iftmp.6_10;
  long unsigned int iftmp.6_11;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_6(D);
  _2 ={v} acpFtmBase_8(D)->CONTROLS[_1].CSC;
  _3 = _2 & 4294967231;
  if (aboEn_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6_11 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_10 = 0;

  <bb 5> :
  # iftmp.6_5 = PHI <iftmp.6_11(3), iftmp.6_10(4)>
  TmpMask_12 = iftmp.6_5 | _3;
  # DEBUG TmpMask => TmpMask_12
  # DEBUG BEGIN_STMT
  _4 = (int) NumChannel_6(D);
  acpFtmBase_8(D)->CONTROLS[_4].CSC ={v} TmpMask_12;
  return;

}


Ftm_Ocu_Ip_SetClockPrescaler (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockPresc)
{
  uint32 TmpMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_6(D)->SC;
  _2 = _1 & 4294967288;
  _3 = (long unsigned int) ClockPresc_7(D);
  _4 = _3 & 7;
  TmpMask_8 = _2 | _4;
  # DEBUG TmpMask => TmpMask_8
  # DEBUG BEGIN_STMT
  acpFtmBase_6(D)->SC ={v} TmpMask_8;
  return;

}


Ftm_Qdec_Ip_ClearQdecModeEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_4(D)->QDCTRL;
  _2 = _1 & 4294967294;
  acpFtmBase_4(D)->QDCTRL ={v} _2;
  return;

}


Ftm_Ocu_Ip_SetClockSource (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockSource)
{
  uint32 TmpMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_7(D)->SC;
  _2 = _1 & 4294967271;
  _3 = (long unsigned int) ClockSource_8(D);
  _4 = _3 << 3;
  _5 = _4 & 24;
  TmpMask_9 = _2 | _5;
  # DEBUG TmpMask => TmpMask_9
  # DEBUG BEGIN_STMT
  acpFtmBase_7(D)->SC ={v} TmpMask_9;
  return;

}


Ftm_Ocu_Ip_SetTimerOverflowInterruptEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, boolean aboEn)
{
  uint32 TmpMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int iftmp.5_3;
  long unsigned int iftmp.5_7;
  long unsigned int iftmp.5_8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_5(D)->SC;
  _2 = _1 & 4294967039;
  if (aboEn_6(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_8 = 256;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_7 = 0;

  <bb 5> :
  # iftmp.5_3 = PHI <iftmp.5_8(3), iftmp.5_7(4)>
  TmpMask_9 = iftmp.5_3 | _2;
  # DEBUG TmpMask => TmpMask_9
  # DEBUG BEGIN_STMT
  acpFtmBase_5(D)->SC ={v} TmpMask_9;
  return;

}


Ftm_Ocu_Ip_SetEnFtmModule (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, boolean aboEn)
{
  uint32 TmpMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int iftmp.7_3;
  long unsigned int iftmp.7_7;
  long unsigned int iftmp.7_8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_5(D)->MODE;
  _2 = _1 & 4294967294;
  if (aboEn_6(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_8 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_7 = 0;

  <bb 5> :
  # iftmp.7_3 = PHI <iftmp.7_8(3), iftmp.7_7(4)>
  TmpMask_9 = iftmp.7_3 | _2;
  # DEBUG TmpMask => TmpMask_9
  # DEBUG BEGIN_STMT
  acpFtmBase_5(D)->MODE ={v} TmpMask_9;
  return;

}


Ftm_Ocu_Ip_SetModeRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  uint32 ModeMask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ModeMask_6 = 31;
  # DEBUG ModeMask => ModeMask_6
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_8(D)->MODE;
  _2 = ~ModeMask_6;
  _3 = _1 & _2;
  _4 = au32Value_9(D) & ModeMask_6;
  _5 = _3 | _4;
  acpFtmBase_8(D)->MODE ={v} _5;
  return;

}


Ftm_Ocu_Ip_ClearTimerOverflowInterruptFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_4(D)->SC;
  _2 = _1 & 4294966783;
  acpFtmBase_4(D)->SC ={v} _2;
  return;

}


Ftm_Ocu_Ip_GetChannelNum (uint16 HwChannelId)
{
  unsigned char _1;
  uint8 _3;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) HwChannelId_2(D);
  _3 = _1 & 7;
  return _3;

}


Ftm_Ocu_Ip_GetInstanceNum (uint16 HwChannelId)
{
  unsigned int _1;
  unsigned int _2;
  unsigned char _3;
  uint8 _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) HwChannelId_4(D);
  _2 = _1 >> 3;
  _3 = (unsigned char) _2;
  _5 = _3 & 31;
  return _5;

}


