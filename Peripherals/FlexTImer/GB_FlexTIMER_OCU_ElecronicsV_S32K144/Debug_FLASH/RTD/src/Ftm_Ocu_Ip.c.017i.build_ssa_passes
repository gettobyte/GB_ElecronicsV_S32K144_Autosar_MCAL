Ftm_Ocu_Ip_EnableNotification (uint8 InstNum, uint8 ChNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.24_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.24_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  _4 = Ftm_Ocu_Ip_gaxChState[_2][_3].mCallbackFunc;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _5 = (int) InstNum;
  _6 = Ftm_Ocu_Ip_gapcxBase[_5];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_6, ChNum, 1);

  <bb 5> :
  return;

}


Ftm_Ocu_Ip_DisableNotification (uint8 InstNum, uint8 ChNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.23_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.23_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_3, ChNum, 0);

  <bb 4> :
  return;

}


Ftm_Ocu_Ip_GetMaxCounterValue (uint8 InstNum, uint8 ChNum)
{
  uint16 RetMaxCntVal;
  uint16 D.6142;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetMaxCntVal = 0;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.22_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.22_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  RetMaxCntVal = Ftm_Ocu_Ip_sau16MaxCounterVals[_2][_3];

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6142 = RetMaxCntVal;
  return D.6142;

}


Ftm_Ocu_Ip_SetAbsoluteThreshold (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_ValueType ReferenceValue, Ftm_Ocu_Ip_ValueType AbsoluteValue)
{
  Ftm_Ocu_Ip_ValueType CntValuePostUpdate;
  Ftm_Ocu_Ip_ReturnType RetVal;
  Ftm_Ocu_Ip_ReturnType D.6138;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.21_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.21_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  _4 = (long unsigned int) AbsoluteValue;
  Ftm_Ocu_Ip_SetChCounterMatchVal (_3, ChNum, _4);
  # DEBUG BEGIN_STMT
  _5 = (int) InstNum;
  _6 = Ftm_Ocu_Ip_gapcxBase[_5];
  CntValuePostUpdate = Ftm_Ocu_Ip_GetCntVal (_6);
  # DEBUG BEGIN_STMT
  RetVal = Ftm_Ocu_Ip_DetermineNextCmStatus (CntValuePostUpdate, ReferenceValue, AbsoluteValue);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6138 = RetVal;
  return D.6138;

}


Ftm_Ocu_Ip_SetRelativeThreshold (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_ValueType RelativeValue)
{
  Ftm_Ocu_Ip_ValueType CmpMatchValue;
  Ftm_Ocu_Ip_ValueType CntValuePostUpdate;
  Ftm_Ocu_Ip_ValueType CntValuePreUpdate;
  Ftm_Ocu_Ip_ReturnType RetVal;
  Ftm_Ocu_Ip_ReturnType D.6119;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetVal = 0;
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.18_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.18_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  CntValuePreUpdate = Ftm_Ocu_Ip_GetCntVal (_3);
  # DEBUG BEGIN_STMT
  _4 = (int) CntValuePreUpdate;
  _5 = (int) RelativeValue;
  _6 = _4 + _5;
  _7 = (int) InstNum;
  _8 = (int) ChNum;
  _9 = Ftm_Ocu_Ip_sau16MaxCounterVals[_7][_8];
  _10 = (int) _9;
  _11 = _6 % _10;
  CmpMatchValue = (Ftm_Ocu_Ip_ValueType) _11;
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum;
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  _14 = (long unsigned int) CmpMatchValue;
  Ftm_Ocu_Ip_SetChCounterMatchVal (_13, ChNum, _14);
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum;
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  CntValuePostUpdate = Ftm_Ocu_Ip_GetCntVal (_16);
  # DEBUG BEGIN_STMT
  RetVal = Ftm_Ocu_Ip_DetermineNextCmStatus (CntValuePostUpdate, CntValuePreUpdate, CmpMatchValue);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6119 = RetVal;
  return D.6119;

}


Ftm_Ocu_Ip_SetPinState (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_PinStateType PinState)
{
  uint32 u32RegSwOCtrl;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.17_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.17_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 != 3)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _5 = (int) InstNum;
  _6 = (int) ChNum;
  _7 = Ftm_Ocu_Ip_axChannelPinUsedState[_5][_6];
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum;
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  u32RegSwOCtrl = Ftm_Ocu_Ip_GetSwOutputControlReg (_9);
  # DEBUG BEGIN_STMT
  if (PinState == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _10 = (unsigned int) ChNum;
  _11 = _10 + 8;
  _12 = 1 << _11;
  u32RegSwOCtrl = u32RegSwOCtrl | _12;
  goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _13 = (unsigned int) ChNum;
  _14 = _13 + 8;
  _15 = 1 << _14;
  _16 = ~_15;
  u32RegSwOCtrl = u32RegSwOCtrl & _16;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _17 = (int) ChNum;
  _18 = 1 << _17;
  u32RegSwOCtrl = u32RegSwOCtrl | _18;
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_14 ();
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetSwOutputControlReg (_20, u32RegSwOCtrl);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_14 ();

  <bb 9> :
  return;

}


Ftm_Ocu_Ip_SetPinAction (uint8 InstNum, uint8 ChNum, Ftm_Ocu_Ip_PinActionType PinAction)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.16_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.16_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _5 = (int) InstNum;
  _6 = (int) ChNum;
  _7 = Ftm_Ocu_Ip_axChannelPinUsedState[_5][_6];
  if (_7 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_13 ();
  # DEBUG BEGIN_STMT
  _8 = (int) PinAction;
  switch (_8) <default: <L6> [INV], case 0: <L3> [INV], case 1: <L4> [INV], case 2: <L5> [INV]>

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _9 = (int) InstNum;
  _10 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_9][_10] = 0;
  # DEBUG BEGIN_STMT
  _11 = (int) InstNum;
  _12 = Ftm_Ocu_Ip_gapcxBase[_11];
  Ftm_Ocu_Ip_SetChEdgeLevel (_12, ChNum, 2);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _13 = (int) InstNum;
  _14 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_13][_14] = 1;
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum;
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  Ftm_Ocu_Ip_SetChEdgeLevel (_16, ChNum, 3);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _17 = (int) InstNum;
  _18 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_17][_18] = 2;
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetChEdgeLevel (_20, ChNum, 1);
  # DEBUG BEGIN_STMT
  goto <bb 10>; [INV]

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _21 = (int) InstNum;
  _22 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_21][_22] = 3;
  # DEBUG BEGIN_STMT
  _23 = (int) InstNum;
  _24 = Ftm_Ocu_Ip_gapcxBase[_23];
  Ftm_Ocu_Ip_SetChEdgeLevel (_24, ChNum, 0);
  # DEBUG BEGIN_STMT

  <bb 10> :
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_13 ();

  <bb 11> :
  return;

}


Ftm_Ocu_Ip_GetCounter (uint8 InstNum)
{
  Ftm_Ocu_Ip_ValueType RetCntVal;
  Ftm_Ocu_Ip_ValueType D.6096;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetCntVal = 0;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.15_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.15_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  _2 = (int) InstNum;
  _3 = Ftm_Ocu_Ip_gapcxBase[_2];
  RetCntVal = Ftm_Ocu_Ip_GetCntVal (_3);

  <bb 4> :
  # DEBUG BEGIN_STMT
  D.6096 = RetCntVal;
  return D.6096;

}


Ftm_Ocu_Ip_StopChannel (uint8 InstNum, uint8 ChNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.14_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.14_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _5 = (int) InstNum;
  _6 = (int) ChNum;
  _7 = Ftm_Ocu_Ip_saxChannelState[_5][_6];
  if (_7 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum;
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  Ftm_Ocu_Ip_SetChEdgeLevel (_9, ChNum, 0);
  # DEBUG BEGIN_STMT
  _10 = (int) InstNum;
  _11 = Ftm_Ocu_Ip_gapcxBase[_10];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_11, ChNum);
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum;
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_13, ChNum);
  # DEBUG BEGIN_STMT
  _14 = (int) InstNum;
  _15 = Ftm_Ocu_Ip_gapcxBase[_14];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_15, ChNum, 0);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_12 ();
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum;
  _17 = (int) ChNum;
  Ftm_Ocu_Ip_saxChannelState[_16][_17] = 2;

  <bb 6> :
  return;

}


Ftm_Ocu_Ip_StartChannel (uint8 InstNum, uint8 ChNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState.13_1 = Ftm_Ocu_Ip_sGlobalDrvState;
  if (Ftm_Ocu_Ip_sGlobalDrvState.13_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _2 = (int) InstNum;
  _3 = (int) ChNum;
  _4 = Ftm_Ocu_Ip_saxChannelState[_2][_3];
  _5 = _4 + 4294967295;
  if (_5 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _6 = (int) InstNum;
  _7 = (int) ChNum;
  _8 = Ftm_Ocu_Ip_axPinAction[_6][_7];
  _9 = (int) _8;
  switch (_9) <default: <L5> [INV], case 0: <L2> [INV], case 1: <L3> [INV], case 2: <L4> [INV]>

  <bb 5> :
<L2>:
  # DEBUG BEGIN_STMT
  _10 = (int) InstNum;
  _11 = Ftm_Ocu_Ip_gapcxBase[_10];
  Ftm_Ocu_Ip_SetChEdgeLevel (_11, ChNum, 2);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum;
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  Ftm_Ocu_Ip_SetChEdgeLevel (_13, ChNum, 3);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  # DEBUG BEGIN_STMT
  _14 = (int) InstNum;
  _15 = Ftm_Ocu_Ip_gapcxBase[_14];
  Ftm_Ocu_Ip_SetChEdgeLevel (_15, ChNum, 1);
  # DEBUG BEGIN_STMT
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum;
  _17 = Ftm_Ocu_Ip_gapcxBase[_16];
  Ftm_Ocu_Ip_SetChEdgeLevel (_17, ChNum, 0);
  # DEBUG BEGIN_STMT

  <bb 9> :
  # DEBUG BEGIN_STMT
  _18 = (int) InstNum;
  _19 = Ftm_Ocu_Ip_gapcxBase[_18];
  Ftm_Ocu_Ip_ClearChSwOutputControlEn (_19, ChNum);
  # DEBUG BEGIN_STMT
  _20 = (int) InstNum;
  _21 = Ftm_Ocu_Ip_gapcxBase[_20];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_21, ChNum);
  # DEBUG BEGIN_STMT
  _22 = (int) InstNum;
  _23 = Ftm_Ocu_Ip_gapcxBase[_22];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_23, ChNum);
  # DEBUG BEGIN_STMT
  _24 = (int) InstNum;
  _25 = Ftm_Ocu_Ip_gapcxBase[_24];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_25, ChNum, 1);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_11 ();
  # DEBUG BEGIN_STMT
  _26 = (int) InstNum;
  _27 = (int) ChNum;
  Ftm_Ocu_Ip_saxChannelState[_26][_27] = 3;

  <bb 10> :
  return;

}


Ftm_Ocu_Ip_DeInit ()
{
  const struct Ftm_Ocu_Ip_SpecificIpConfigType * pFtmModuleCfg;
  const struct Ftm_Ocu_Ip_ChannelConfigType * pFtmChannelCfg;
  uint8 ChNum;
  uint8 InstNum;
  uint8 ChLoopIdx;
  uint8 ModuleIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pFtmChannelCfg = 0B;
  # DEBUG BEGIN_STMT
  pFtmModuleCfg = 0B;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.8_1 = Ftm_Ocu_Ip_spcxIpConfig;
  if (Ftm_Ocu_Ip_spcxIpConfig.8_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  ModuleIdx = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.9_2 = Ftm_Ocu_Ip_spcxIpConfig;
  _3 = Ftm_Ocu_Ip_spcxIpConfig.9_2->pcxModulesConfig;
  _4 = (int) ModuleIdx;
  pFtmModuleCfg = &*_3[_4];
  # DEBUG BEGIN_STMT
  ChLoopIdx = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.10_5 = Ftm_Ocu_Ip_spcxIpConfig;
  _6 = Ftm_Ocu_Ip_spcxIpConfig.10_5->pcxChannelsConfig;
  _7 = (int) ChLoopIdx;
  pFtmChannelCfg = &*_6[_7];
  # DEBUG BEGIN_STMT
  _8 = pFtmChannelCfg->HwChannel;
  InstNum = Ftm_Ocu_Ip_GetInstanceNum (_8);
  # DEBUG BEGIN_STMT
  _9 = pFtmChannelCfg->HwChannel;
  ChNum = Ftm_Ocu_Ip_GetChannelNum (_9);
  # DEBUG BEGIN_STMT
  _10 = pFtmModuleCfg->ModuleId;
  if (InstNum == _10)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _11 = (int) InstNum;
  _12 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_11][_12] = 0;
  # DEBUG BEGIN_STMT
  _13 = (int) InstNum;
  _14 = Ftm_Ocu_Ip_gapcxBase[_13];
  Ftm_Ocu_Ip_SetModuloRegVal (_14, 0);
  # DEBUG BEGIN_STMT
  _15 = (int) InstNum;
  _16 = Ftm_Ocu_Ip_gapcxBase[_15];
  Ftm_Ocu_Ip_SetEnFtmModule (_16, 0);
  # DEBUG BEGIN_STMT
  _17 = (int) InstNum;
  _18 = Ftm_Ocu_Ip_gapcxBase[_17];
  Ftm_Ocu_Ip_SetBehaviorInDebugMode (_18, 0);
  # DEBUG BEGIN_STMT
  _19 = (int) InstNum;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  Ftm_Ocu_Ip_SetSCRegVal (_20, 0);
  # DEBUG BEGIN_STMT
  _21 = (int) InstNum;
  _22 = (int) ChNum;
  Ftm_Ocu_Ip_sau16MaxCounterVals[_21][_22] = 0;
  # DEBUG BEGIN_STMT
  _23 = (int) InstNum;
  _24 = Ftm_Ocu_Ip_gapcxBase[_23];
  Ftm_Ocu_Ip_SetChStatusAndControlReg (_24, ChNum, 0);
  # DEBUG BEGIN_STMT
  _25 = (int) InstNum;
  _26 = Ftm_Ocu_Ip_gapcxBase[_25];
  Ftm_Ocu_Ip_SetChCounterMatchVal (_26, ChNum, 0);
  # DEBUG BEGIN_STMT
  _27 = (int) InstNum;
  _28 = Ftm_Ocu_Ip_gapcxBase[_27];
  Ftm_Ocu_Ip_ClearChSwOutputControlEn (_28, ChNum);
  # DEBUG BEGIN_STMT
  _29 = (int) InstNum;
  _30 = Ftm_Ocu_Ip_gapcxBase[_29];
  Ftm_Ocu_Ip_ClearChSwOutputControlVal (_30, ChNum);
  # DEBUG BEGIN_STMT
  _31 = (int) InstNum;
  _32 = Ftm_Ocu_Ip_gapcxBase[_31];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_32, ChNum, 0);
  # DEBUG BEGIN_STMT
  _33 = (int) InstNum;
  _34 = Ftm_Ocu_Ip_gapcxBase[_33];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_34, ChNum);
  # DEBUG BEGIN_STMT
  _35 = (int) InstNum;
  _36 = Ftm_Ocu_Ip_gapcxBase[_35];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_36, ChNum);
  # DEBUG BEGIN_STMT
  _37 = (int) InstNum;
  _38 = (int) ChNum;
  Ftm_Ocu_Ip_gaxChState[_37][_38].mChannelInit = 0;
  # DEBUG BEGIN_STMT
  _39 = (int) InstNum;
  _40 = (int) ChNum;
  Ftm_Ocu_Ip_gaxChState[_39][_40].mCallbackFunc = 0B;
  # DEBUG BEGIN_STMT
  _41 = (int) InstNum;
  _42 = (int) ChNum;
  Ftm_Ocu_Ip_gaxChState[_41][_42].mCallbackParam = 255;
  # DEBUG BEGIN_STMT
  _43 = (int) InstNum;
  _44 = (int) ChNum;
  Ftm_Ocu_Ip_saxChannelState[_43][_44] = 0;

  <bb 7> :
  # DEBUG BEGIN_STMT
  ChLoopIdx = ChLoopIdx + 1;

  <bb 8> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.11_45 = Ftm_Ocu_Ip_spcxIpConfig;
  _46 = Ftm_Ocu_Ip_spcxIpConfig.11_45->NumChannels;
  if (ChLoopIdx < _46)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # DEBUG BEGIN_STMT
  ModuleIdx = ModuleIdx + 1;

  <bb 10> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.12_47 = Ftm_Ocu_Ip_spcxIpConfig;
  _48 = Ftm_Ocu_Ip_spcxIpConfig.12_47->NumModules;
  if (ModuleIdx < _48)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig = 0B;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState = 0;

  <bb 12> :
  return;

}


Ftm_Ocu_Ip_Init (const struct Ftm_Ocu_Ip_ModuleConfigType * const pFtmIpConfig)
{
  const struct Ftm_Ocu_Ip_SpecificIpConfigType * pFtmModuleCfg;
  const struct Ftm_Ocu_Ip_ChannelConfigType * pFtmChannelCfg;
  uint8 ChNum;
  uint8 InstNum;
  uint8 PinAction;
  uint32 u32RegSwOCtrl;
  uint8 ChLoopIdx;
  uint8 ModuleIdx;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  pFtmChannelCfg = 0B;
  # DEBUG BEGIN_STMT
  pFtmModuleCfg = 0B;
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.0_1 = Ftm_Ocu_Ip_spcxIpConfig;
  if (Ftm_Ocu_Ip_spcxIpConfig.0_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig = pFtmIpConfig;
  # DEBUG BEGIN_STMT
  ModuleIdx = 0;
  goto <bb 21>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.1_2 = Ftm_Ocu_Ip_spcxIpConfig;
  _3 = Ftm_Ocu_Ip_spcxIpConfig.1_2->pcxModulesConfig;
  _4 = (int) ModuleIdx;
  pFtmModuleCfg = &*_3[_4];
  # DEBUG BEGIN_STMT
  u32RegSwOCtrl = 0;
  # DEBUG BEGIN_STMT
  _5 = pFtmModuleCfg->ModuleId;
  Ftm_Ocu_Ip_SetOutputPinCtrlBit (_5);
  # DEBUG BEGIN_STMT
  ChLoopIdx = 0;
  goto <bb 19>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.2_6 = Ftm_Ocu_Ip_spcxIpConfig;
  _7 = Ftm_Ocu_Ip_spcxIpConfig.2_6->pcxChannelsConfig;
  _8 = (int) ChLoopIdx;
  pFtmChannelCfg = &*_7[_8];
  # DEBUG BEGIN_STMT
  _9 = pFtmChannelCfg->HwChannel;
  InstNum = Ftm_Ocu_Ip_GetInstanceNum (_9);
  # DEBUG BEGIN_STMT
  _10 = pFtmChannelCfg->HwChannel;
  ChNum = Ftm_Ocu_Ip_GetChannelNum (_10);
  # DEBUG BEGIN_STMT
  _11 = pFtmModuleCfg->ModuleId;
  if (InstNum == _11)
    goto <bb 6>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _12 = (int) InstNum;
  _13 = Ftm_Ocu_Ip_gapcxBase[_12];
  _14 = _13->FMS;
  _15 = _14 & 64;
  if (_15 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  # DEBUG BEGIN_STMT
  _16 = (int) InstNum;
  _17 = Ftm_Ocu_Ip_gapcxBase[_16];
  _18 = _17->MODE;
  _19 = (int) InstNum;
  _20 = Ftm_Ocu_Ip_gapcxBase[_19];
  _21 = _18 | 4;
  _20->MODE = _21;

  <bb 8> :
  # DEBUG BEGIN_STMT
  _22 = (int) InstNum;
  _23 = Ftm_Ocu_Ip_gapcxBase[_22];
  Ftm_Ocu_Ip_SetModeRegVal (_23, 4);
  # DEBUG BEGIN_STMT
  _24 = (int) InstNum;
  _25 = Ftm_Ocu_Ip_gapcxBase[_24];
  Ftm_Ocu_Ip_SetOutmaskSyncOnRisingEdges (_25);
  # DEBUG BEGIN_STMT
  _26 = (int) InstNum;
  _27 = Ftm_Ocu_Ip_gapcxBase[_26];
  Ftm_Qdec_Ip_ClearQdecModeEn (_27);
  # DEBUG BEGIN_STMT
  _28 = (int) InstNum;
  _29 = Ftm_Ocu_Ip_gapcxBase[_28];
  Ftm_Ocu_Ip_SetClockSource (_29, 0);
  # DEBUG BEGIN_STMT
  _30 = (int) InstNum;
  _31 = Ftm_Ocu_Ip_gapcxBase[_30];
  Ftm_Ocu_Ip_SetClockPrescaler (_31, 0);
  # DEBUG BEGIN_STMT
  _32 = (int) InstNum;
  _33 = Ftm_Ocu_Ip_gapcxBase[_32];
  Ftm_Ocu_Ip_SetUpCountingMode (_33);
  # DEBUG BEGIN_STMT
  _34 = (int) InstNum;
  _35 = Ftm_Ocu_Ip_gapcxBase[_34];
  Ftm_Ocu_Ip_SetTimerOverflowInterruptEn (_35, 0);
  # DEBUG BEGIN_STMT
  _36 = (int) InstNum;
  _37 = Ftm_Ocu_Ip_gapcxBase[_36];
  _38 = pFtmModuleCfg->ModuleControlValue;
  _39 = (unsigned int) _38;
  _40 = _39 >> 1;
  _41 = (unsigned char) _40;
  _42 = _41 & 3;
  Ftm_Ocu_Ip_SetBehaviorInDebugMode (_37, _42);
  # DEBUG BEGIN_STMT
  _43 = (int) InstNum;
  _44 = Ftm_Ocu_Ip_gapcxBase[_43];
  Ftm_Ocu_Ip_SetSyncAndConfigfReg (_44, 0);
  # DEBUG BEGIN_STMT
  _45 = (int) InstNum;
  _46 = Ftm_Ocu_Ip_gapcxBase[_45];
  Ftm_Ocu_Ip_SetCounterInitialVal (_46, 0);
  # DEBUG BEGIN_STMT
  _47 = (int) InstNum;
  _48 = Ftm_Ocu_Ip_gapcxBase[_47];
  _49 = pFtmModuleCfg->MaxCounterValue;
  Ftm_Ocu_Ip_SetModuloRegVal (_48, _49);
  # DEBUG BEGIN_STMT
  _50 = (int) InstNum;
  _51 = (int) ChNum;
  _52 = pFtmModuleCfg->MaxCounterValue;
  Ftm_Ocu_Ip_sau16MaxCounterVals[_50][_51] = _52;
  # DEBUG BEGIN_STMT
  _53 = (int) InstNum;
  _54 = Ftm_Ocu_Ip_gapcxBase[_53];
  Ftm_Ocu_Ip_SetChannelInterruptEnBit (_54, ChNum, 0);
  # DEBUG BEGIN_STMT
  _55 = (int) InstNum;
  _56 = Ftm_Ocu_Ip_gapcxBase[_55];
  _57 = (unsigned int) ChNum;
  _58 = _57 + 16;
  _59 = 1 << _58;
  Ftm_Ocu_Ip_EnablePwmChannelOutput (_56, _59);
  # DEBUG BEGIN_STMT
  _60 = (int) InstNum;
  _61 = Ftm_Ocu_Ip_gapcxBase[_60];
  Ftm_Ocu_Ip_ClearChannelPolarity (_61, ChNum);
  # DEBUG BEGIN_STMT
  _62 = (int) InstNum;
  _63 = Ftm_Ocu_Ip_gapcxBase[_62];
  Ftm_Ocu_Ip_SetChannelOutputCompareMode (_63, ChNum);
  # DEBUG BEGIN_STMT
  _64 = (int) InstNum;
  _65 = Ftm_Ocu_Ip_gapcxBase[_64];
  Ftm_Ocu_Ip_DisablesDmaTransfersForChannel (_65, ChNum);
  # DEBUG BEGIN_STMT
  _66 = (int) InstNum;
  _67 = Ftm_Ocu_Ip_gapcxBase[_66];
  _68 = pFtmChannelCfg->DefaultThreshold;
  _69 = (long unsigned int) _68;
  Ftm_Ocu_Ip_SetChCounterMatchVal (_67, ChNum, _69);
  # DEBUG BEGIN_STMT
  _70 = pFtmChannelCfg->ChannelControlValue;
  _71 = (unsigned int) _70;
  _72 = _71 >> 4;
  _73 = (unsigned char) _72;
  PinAction = _73 & 3;
  # DEBUG BEGIN_STMT
  _74 = (int) PinAction;
  switch (_74) <default: <L9> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 9> :
<L6>:
  # DEBUG BEGIN_STMT
  _75 = (int) InstNum;
  _76 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_75][_76] = 0;
  # DEBUG BEGIN_STMT
  _77 = (int) InstNum;
  _78 = Ftm_Ocu_Ip_gapcxBase[_77];
  Ftm_Ocu_Ip_SetChEdgeLevel (_78, ChNum, 2);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  # DEBUG BEGIN_STMT
  _79 = (int) InstNum;
  _80 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_79][_80] = 1;
  # DEBUG BEGIN_STMT
  _81 = (int) InstNum;
  _82 = Ftm_Ocu_Ip_gapcxBase[_81];
  Ftm_Ocu_Ip_SetChEdgeLevel (_82, ChNum, 3);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  # DEBUG BEGIN_STMT
  _83 = (int) InstNum;
  _84 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_83][_84] = 2;
  # DEBUG BEGIN_STMT
  _85 = (int) InstNum;
  _86 = Ftm_Ocu_Ip_gapcxBase[_85];
  Ftm_Ocu_Ip_SetChEdgeLevel (_86, ChNum, 1);
  # DEBUG BEGIN_STMT
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:
  # DEBUG BEGIN_STMT
  _87 = (int) InstNum;
  _88 = (int) ChNum;
  Ftm_Ocu_Ip_axPinAction[_87][_88] = 3;
  # DEBUG BEGIN_STMT
  _89 = (int) InstNum;
  _90 = Ftm_Ocu_Ip_gapcxBase[_89];
  Ftm_Ocu_Ip_SetChEdgeLevel (_90, ChNum, 0);
  # DEBUG BEGIN_STMT

  <bb 13> :
  # DEBUG BEGIN_STMT
  _91 = (unsigned int) ChNum;
  _92 = _91 & 1;
  if (_92 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  # DEBUG BEGIN_STMT
  _93 = (int) InstNum;
  _94 = Ftm_Ocu_Ip_gapcxBase[_93];
  _95 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualEdgeCaptureMode (_94, _95);
  # DEBUG BEGIN_STMT
  _96 = (int) InstNum;
  _97 = Ftm_Ocu_Ip_gapcxBase[_96];
  _98 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualChCombineMode (_97, _98);
  # DEBUG BEGIN_STMT
  _99 = (int) InstNum;
  _100 = Ftm_Ocu_Ip_gapcxBase[_99];
  _101 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualChModifiedCombineMode (_100, _101);
  # DEBUG BEGIN_STMT
  _102 = (int) InstNum;
  _103 = Ftm_Ocu_Ip_gapcxBase[_102];
  _104 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualChPwmSyncEn (_103, _104);
  # DEBUG BEGIN_STMT
  _105 = (int) InstNum;
  _106 = Ftm_Ocu_Ip_gapcxBase[_105];
  _107 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualChDeadTimeInsertionEn (_106, _107);
  # DEBUG BEGIN_STMT
  _108 = (int) InstNum;
  _109 = Ftm_Ocu_Ip_gapcxBase[_108];
  _110 = ChNum >> 1;
  Ftm_Ocu_Ip_ClearDualChComplementEn (_109, _110);

  <bb 15> :
  # DEBUG BEGIN_STMT
  _111 = pFtmChannelCfg->ChannelControlValue;
  _112 = (signed char) _111;
  if (_112 < 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  # DEBUG BEGIN_STMT
  _113 = (int) InstNum;
  _114 = (int) ChNum;
  Ftm_Ocu_Ip_axChannelPinUsedState[_113][_114] = 1;
  # DEBUG BEGIN_STMT
  _115 = pFtmChannelCfg->ChannelControlValue;
  _116 = (long unsigned int) _115;
  _117 = _116 >> 6;
  _118 = _117 & 1;
  _119 = (unsigned int) ChNum;
  _120 = _119 + 8;
  _121 = _118 << _120;
  u32RegSwOCtrl = u32RegSwOCtrl | _121;
  # DEBUG BEGIN_STMT
  _122 = (int) ChNum;
  _123 = 1 << _122;
  u32RegSwOCtrl = u32RegSwOCtrl | _123;

  <bb 17> :
  # DEBUG BEGIN_STMT
  _124 = (int) InstNum;
  _125 = Ftm_Ocu_Ip_gapcxBase[_124];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_125, ChNum);
  # DEBUG BEGIN_STMT
  _126 = (int) InstNum;
  _127 = Ftm_Ocu_Ip_gapcxBase[_126];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_127, ChNum);
  # DEBUG BEGIN_STMT
  _128 = (int) InstNum;
  _129 = (int) ChNum;
  Ftm_Ocu_Ip_gaxChState[_128][_129].mChannelInit = 1;
  # DEBUG BEGIN_STMT
  _130 = (int) InstNum;
  _131 = (int) ChNum;
  _132 = pFtmChannelCfg->mCallbackFunc;
  Ftm_Ocu_Ip_gaxChState[_130][_131].mCallbackFunc = _132;
  # DEBUG BEGIN_STMT
  _133 = (int) InstNum;
  _134 = (int) ChNum;
  _135 = pFtmChannelCfg->mCallbackParam;
  Ftm_Ocu_Ip_gaxChState[_133][_134].mCallbackParam = _135;
  # DEBUG BEGIN_STMT
  _136 = (int) InstNum;
  _137 = Ftm_Ocu_Ip_gapcxBase[_136];
  Ftm_Ocu_Ip_SetSwOutputControlReg (_137, u32RegSwOCtrl);
  # DEBUG BEGIN_STMT
  _138 = (int) InstNum;
  _139 = Ftm_Ocu_Ip_gapcxBase[_138];
  _140 = pFtmModuleCfg->ModuleControlValue;
  _141 = _140 >> 6;
  Ftm_Ocu_Ip_SetClockSource (_139, _141);
  # DEBUG BEGIN_STMT
  _142 = (int) InstNum;
  _143 = Ftm_Ocu_Ip_gapcxBase[_142];
  Ftm_Ocu_Ip_ClearTimerOverflowInterruptFlag (_143);
  # DEBUG BEGIN_STMT
  _144 = (int) InstNum;
  _145 = Ftm_Ocu_Ip_gapcxBase[_144];
  _146 = pFtmModuleCfg->ModuleControlValue;
  _147 = (unsigned int) _146;
  _148 = _147 >> 3;
  _149 = (unsigned char) _148;
  _150 = _149 & 7;
  Ftm_Ocu_Ip_InitModule (_145, _150);
  # DEBUG BEGIN_STMT
  _151 = (int) InstNum;
  _152 = (int) ChNum;
  Ftm_Ocu_Ip_saxChannelState[_151][_152] = 1;

  <bb 18> :
  # DEBUG BEGIN_STMT
  ChLoopIdx = ChLoopIdx + 1;

  <bb 19> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.3_153 = Ftm_Ocu_Ip_spcxIpConfig;
  _154 = Ftm_Ocu_Ip_spcxIpConfig.3_153->NumChannels;
  if (ChLoopIdx < _154)
    goto <bb 5>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # DEBUG BEGIN_STMT
  ModuleIdx = ModuleIdx + 1;

  <bb 21> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_spcxIpConfig.4_155 = Ftm_Ocu_Ip_spcxIpConfig;
  _156 = Ftm_Ocu_Ip_spcxIpConfig.4_155->NumModules;
  if (ModuleIdx < _156)
    goto <bb 4>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_sGlobalDrvState = 1;

  <bb 23> :
  return;

}


Ftm_Ocu_Ip_InitModule (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockPresc)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_SetEnFtmModule (acpFtmBase, 1);
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_SetClockPrescaler (acpFtmBase, ClockPresc);
  return;

}


Ftm_Ocu_Ip_DetermineNextCmStatus (Ftm_Ocu_Ip_ValueType PostCmWriteValue, Ftm_Ocu_Ip_ValueType StartIntervalValue, Ftm_Ocu_Ip_ValueType EndIntervalValue)
{
  Ftm_Ocu_Ip_ReturnType RetValue;
  Ftm_Ocu_Ip_ReturnType D.6134;
  Ftm_Ocu_Ip_ReturnType iftmp.20;
  int iftmp.19;

  <bb 2> :
  # DEBUG BEGIN_STMT
  RetValue = 0;
  # DEBUG BEGIN_STMT
  if (StartIntervalValue <= EndIntervalValue)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  if (StartIntervalValue > PostCmWriteValue)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (PostCmWriteValue > EndIntervalValue)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.19 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.19 = 0;

  <bb 7> :
  RetValue = (Ftm_Ocu_Ip_ReturnType) iftmp.19;
  goto <bb 13>; [INV]

  <bb 8> :
  # DEBUG BEGIN_STMT
  if (PostCmWriteValue < StartIntervalValue)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (PostCmWriteValue > EndIntervalValue)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.20 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.20 = 0;

  <bb 12> :
  RetValue = iftmp.20;

  <bb 13> :
  # DEBUG BEGIN_STMT
  D.6134 = RetValue;
  return D.6134;

}


Ftm_Ocu_Ip_SetOutputPinCtrlBit (uint8 InstNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = 1074036736B;
  _2 = _1->MISCTRL0;
  _3 = (unsigned int) InstNum;
  _4 = _3 + 16;
  _5 = 1 << _4;
  _6 = 1074036736B;
  _7 = _2 | _5;
  _6->MISCTRL0 = _7;
  return;

}


Ftm_Ocu_Ip_ClearDualChComplementEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 2 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChDeadTimeInsertionEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 16 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChPwmSyncEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 32 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChModifiedCombineMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 128 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_ClearDualEdgeCaptureMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 12 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_ClearDualChCombineMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ChPairNum)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->COMBINE;
  _2 = (unsigned int) ChPairNum;
  _3 = _2 * 8;
  _4 = 1 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->COMBINE = _6;
  return;

}


Ftm_Ocu_Ip_SetOutmaskSyncOnRisingEdges (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SYNC;
  _2 = _1 & 4294967287;
  acpFtmBase->SYNC = _2;
  return;

}


Ftm_Ocu_Ip_ClearChannelPolarity (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->POL;
  _2 = (int) NumChannel;
  _3 = 1 << _2;
  _4 = ~_3;
  TmpMask = _1 & _4;
  # DEBUG BEGIN_STMT
  acpFtmBase->POL = TmpMask;
  return;

}


Ftm_Ocu_Ip_GetSwOutputControlReg (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase)
{
  uint32 D.6115;

  <bb 2> :
  # DEBUG BEGIN_STMT
  D.6115 = acpcFtmBase->SWOCTRL;
  return D.6115;

}


Ftm_Ocu_Ip_SetSwOutputControlReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase->SWOCTRL = au32Value;
  return;

}


Ftm_Ocu_Ip_ClearChSwOutputControlVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SWOCTRL;
  _2 = (unsigned int) NumChannel;
  _3 = _2 + 8;
  _4 = 1 << _3;
  _5 = ~_4;
  _6 = _1 & _5;
  acpFtmBase->SWOCTRL = _6;
  return;

}


Ftm_Ocu_Ip_ClearChSwOutputControlEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SWOCTRL;
  _2 = (int) NumChannel;
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase->SWOCTRL = _5;
  return;

}


Ftm_Ocu_Ip_SetModuloRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint16 au16ModVal)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) au16ModVal;
  acpFtmBase->MOD = _1;
  return;

}


Ftm_Ocu_Ip_SetCounterInitialVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint16 au16MinVal)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (long unsigned int) au16MinVal;
  acpFtmBase->CNTIN = _1;
  return;

}


Ftm_Ocu_Ip_GetCntVal (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase)
{
  Ftm_Ocu_Ip_ValueType D.6098;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpcFtmBase->CNT;
  D.6098 = (Ftm_Ocu_Ip_ValueType) _1;
  return D.6098;

}


Ftm_Ocu_Ip_SetBehaviorInDebugMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 BdmModeVal)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->CONF;
  _2 = _1 & 4294967103;
  _3 = (long unsigned int) BdmModeVal;
  _4 = _3 << 6;
  _5 = _4 & 255;
  TmpMask = _2 | _5;
  # DEBUG BEGIN_STMT
  acpFtmBase->CONF = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetSyncAndConfigfReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase->SYNCONF = au32Value;
  return;

}


Ftm_Ocu_Ip_SetSCRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  acpFtmBase->SC = au32Value;
  return;

}


Ftm_Ocu_Ip_EnablePwmChannelOutput (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  uint32 AllPwmMasks;

  <bb 2> :
  # DEBUG BEGIN_STMT
  AllPwmMasks = 4128768;
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = au32Value & AllPwmMasks;
  _3 = _1 | _2;
  acpFtmBase->SC = _3;
  return;

}


Ftm_Ocu_Ip_SetUpCountingMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = _1 & 4294967263;
  acpFtmBase->SC = _2;
  return;

}


Ftm_Ocu_Ip_SetChCounterMatchVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  acpFtmBase->CONTROLS[_1].CV = au32Value;
  return;

}


Ftm_Ocu_Ip_DisablesDmaTransfersForChannel (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = (int) NumChannel;
  _4 = _2 & 4294967294;
  acpFtmBase->CONTROLS[_3].CSC = _4;
  return;

}


Ftm_Ocu_Ip_SetChStatusAndControlReg (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, uint32 au32Value)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  acpFtmBase->CONTROLS[_1].CSC = au32Value;
  return;

}


Ftm_Ocu_Ip_SetChEdgeLevel (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, Ftm_Ocu_Ip_OutputCompareModeType Level)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = _2 & 4294967283;
  _4 = (unsigned char) Level;
  _5 = (long unsigned int) _4;
  _6 = _5 << 2;
  _7 = _6 & 4;
  _8 = _3 | _7;
  _9 = (unsigned char) Level;
  _10 = (unsigned int) _9;
  _11 = _10 >> 1;
  _12 = _11 << 3;
  _13 = _12 & 8;
  TmpMask = _8 | _13;
  # DEBUG BEGIN_STMT
  _14 = (int) NumChannel;
  acpFtmBase->CONTROLS[_14].CSC = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetChannelOutputCompareMode (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = _2 & 4294967247;
  TmpMask = _3 | 16;
  # DEBUG BEGIN_STMT
  _4 = (int) NumChannel;
  acpFtmBase->CONTROLS[_4].CSC = TmpMask;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventStatus (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->STATUS;
  _2 = (int) NumChannel;
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase->STATUS = _5;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = (int) NumChannel;
  _4 = _2 & 4294967167;
  acpFtmBase->CONTROLS[_3].CSC = _4;
  return;

}


Ftm_Ocu_Ip_SetChannelInterruptEnBit (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel, boolean aboEn)
{
  uint32 TmpMask;
  long unsigned int iftmp.6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = _2 & 4294967231;
  if (aboEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6 = 0;

  <bb 5> :
  TmpMask = iftmp.6 | _3;
  # DEBUG BEGIN_STMT
  _4 = (int) NumChannel;
  acpFtmBase->CONTROLS[_4].CSC = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetClockPrescaler (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockPresc)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = _1 & 4294967288;
  _3 = (long unsigned int) ClockPresc;
  _4 = _3 & 7;
  TmpMask = _2 | _4;
  # DEBUG BEGIN_STMT
  acpFtmBase->SC = TmpMask;
  return;

}


Ftm_Qdec_Ip_ClearQdecModeEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->QDCTRL;
  _2 = _1 & 4294967294;
  acpFtmBase->QDCTRL = _2;
  return;

}


Ftm_Ocu_Ip_SetClockSource (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 ClockSource)
{
  uint32 TmpMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = _1 & 4294967271;
  _3 = (long unsigned int) ClockSource;
  _4 = _3 << 3;
  _5 = _4 & 24;
  TmpMask = _2 | _5;
  # DEBUG BEGIN_STMT
  acpFtmBase->SC = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetTimerOverflowInterruptEn (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, boolean aboEn)
{
  uint32 TmpMask;
  long unsigned int iftmp.5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = _1 & 4294967039;
  if (aboEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5 = 256;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 0;

  <bb 5> :
  TmpMask = iftmp.5 | _2;
  # DEBUG BEGIN_STMT
  acpFtmBase->SC = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetEnFtmModule (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, boolean aboEn)
{
  uint32 TmpMask;
  long unsigned int iftmp.7;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->MODE;
  _2 = _1 & 4294967294;
  if (aboEn != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 0;

  <bb 5> :
  TmpMask = iftmp.7 | _2;
  # DEBUG BEGIN_STMT
  acpFtmBase->MODE = TmpMask;
  return;

}


Ftm_Ocu_Ip_SetModeRegVal (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint32 au32Value)
{
  uint32 ModeMask;

  <bb 2> :
  # DEBUG BEGIN_STMT
  ModeMask = 31;
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->MODE;
  _2 = ~ModeMask;
  _3 = _1 & _2;
  _4 = au32Value & ModeMask;
  _5 = _3 | _4;
  acpFtmBase->MODE = _5;
  return;

}


Ftm_Ocu_Ip_ClearTimerOverflowInterruptFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->SC;
  _2 = _1 & 4294966783;
  acpFtmBase->SC = _2;
  return;

}


Ftm_Ocu_Ip_GetChannelNum (uint16 HwChannelId)
{
  uint8 D.6067;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned char) HwChannelId;
  D.6067 = _1 & 7;
  return D.6067;

}


Ftm_Ocu_Ip_GetInstanceNum (uint16 HwChannelId)
{
  uint8 D.6065;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (unsigned int) HwChannelId;
  _2 = _1 >> 3;
  _3 = (unsigned char) _2;
  D.6065 = _3 & 31;
  return D.6065;

}


