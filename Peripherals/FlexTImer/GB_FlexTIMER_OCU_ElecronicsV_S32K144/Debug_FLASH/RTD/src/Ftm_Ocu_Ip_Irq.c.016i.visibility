
Marking local functions: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt Ftm_Ocu_Ip_Irq_ClearChannelInterrupt Ftm_Ocu_Ip_GetChannelEventStatus Ftm_Ocu_Ip_ClearChannelEventStatus Ftm_Ocu_Ip_ClearChannelEventFlag


Marking externally visible functions: FTM_0_CH_0_CH_1_ISR


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_10/45 (SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_10) @06980620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 
  Calls: 
SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_10/44 (SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_10) @06980540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 
  Calls: 
SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_15/43 (SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_15) @06980380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 
  Calls: 
SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_15/42 (SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_15) @069802a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags: optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 
  Calls: 
Ftm_Ocu_Ip_gaxChState/41 (Ftm_Ocu_Ip_gaxChState) @06977f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 (addr)
  Availability: not_available
  Varpool flags:
Ftm_Ocu_Ip_gapcxBase/40 (Ftm_Ocu_Ip_gapcxBase) @06977a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: FTM_0_CH_0_CH_1_ISR/39 (read)FTM_0_CH_0_CH_1_ISR/39 (read)Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 (read)Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 (read)Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 (read)Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 (read)
  Availability: not_available
  Varpool flags: read-only
FTM_0_CH_0_CH_1_ISR/39 (FTM_0_CH_0_CH_1_ISR) @06976620
  Type: function definition analyzed
  Visibility: externally_visible public
  References: Ftm_Ocu_Ip_gapcxBase/40 (read)Ftm_Ocu_Ip_gapcxBase/40 (read)
  Referring: 
  Availability: available
  Function flags: body optimize_size
  Called by: 
  Calls: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 Ftm_Ocu_Ip_GetChannelEventStatus/35 Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 Ftm_Ocu_Ip_GetChannelEventStatus/35 
Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 (Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt) @06976d20
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Ftm_Ocu_Ip_gaxChState/41 (addr)Ftm_Ocu_Ip_gapcxBase/40 (read)Ftm_Ocu_Ip_gapcxBase/40 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FTM_0_CH_0_CH_1_ISR/39 FTM_0_CH_0_CH_1_ISR/39 
  Calls: Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_15/43 SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_15/42 
   Indirect call
Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 (Ftm_Ocu_Ip_Irq_ClearChannelInterrupt) @06976a80
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: Ftm_Ocu_Ip_gapcxBase/40 (read)Ftm_Ocu_Ip_gapcxBase/40 (read)
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt/38 
  Calls: SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_10/45 Ftm_Ocu_Ip_ClearChannelEventStatus/9 Ftm_Ocu_Ip_ClearChannelEventFlag/8 SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_10/44 
Ftm_Ocu_Ip_GetChannelEventStatus/35 (Ftm_Ocu_Ip_GetChannelEventStatus) @0689f0e0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: FTM_0_CH_0_CH_1_ISR/39 FTM_0_CH_0_CH_1_ISR/39 
  Calls: 
Ftm_Ocu_Ip_ClearChannelEventStatus/9 (Ftm_Ocu_Ip_ClearChannelEventStatus) @0688c8c0
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 
  Calls: 
Ftm_Ocu_Ip_ClearChannelEventFlag/8 (Ftm_Ocu_Ip_ClearChannelEventFlag) @0688c620
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local optimize_size
  Called by: Ftm_Ocu_Ip_Irq_ClearChannelInterrupt/37 
  Calls: 
FTM_0_CH_0_CH_1_ISR ()
{
  uint8 channelIndex;
  uint8 moduleIndex;

  <bb 2> :
  # DEBUG BEGIN_STMT
  moduleIndex = 0;
  # DEBUG BEGIN_STMT
  channelIndex = 0;
  # DEBUG BEGIN_STMT
  _1 = (int) moduleIndex;
  _2 = Ftm_Ocu_Ip_gapcxBase[_1];
  _3 = Ftm_Ocu_Ip_GetChannelEventStatus (_2, channelIndex);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (moduleIndex, channelIndex);

  <bb 4> :
  # DEBUG BEGIN_STMT
  channelIndex = channelIndex + 1;
  # DEBUG BEGIN_STMT
  _4 = (int) moduleIndex;
  _5 = Ftm_Ocu_Ip_gapcxBase[_4];
  _6 = Ftm_Ocu_Ip_GetChannelEventStatus (_5, channelIndex);
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (moduleIndex, channelIndex);

  <bb 6> :
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  return;

}


Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (uint8 InstNum, uint8 ChIdx)
{
  const struct Ftm_Ocu_Ip_ChStateType * const pChannelState;
  boolean HasChEvOccurred;
  boolean IsChEvEnabled;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) InstNum;
  _2 = (int) ChIdx;
  pChannelState = &Ftm_Ocu_Ip_gaxChState[_1][_2];
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  _3 = (int) InstNum;
  _4 = Ftm_Ocu_Ip_gapcxBase[_3];
  _5 = (int) ChIdx;
  _6 = _4->CONTROLS[_5].CSC;
  _7 = _6 & 64;
  IsChEvEnabled = _7 != 0;
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum;
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  _10 = (int) ChIdx;
  _11 = _9->CONTROLS[_10].CSC;
  _12 = _11 & 128;
  HasChEvOccurred = _12 != 0;
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ClearChannelInterrupt (InstNum, ChIdx);
  # DEBUG BEGIN_STMT
  if (IsChEvEnabled != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (HasChEvOccurred != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _13 = pChannelState->mCallbackFunc;
  if (_13 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _14 = pChannelState->mChannelInit;
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _15 = pChannelState->mCallbackFunc;
  _16 = pChannelState->mCallbackParam;
  _15 (_16);

  <bb 7> :
  return;

}


Ftm_Ocu_Ip_Irq_ClearChannelInterrupt (uint8 InstNum, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  if (NumChannel <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (InstNum <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  _1 = (int) InstNum;
  _2 = Ftm_Ocu_Ip_gapcxBase[_1];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_2, NumChannel);
  # DEBUG BEGIN_STMT
  _3 = (int) InstNum;
  _4 = Ftm_Ocu_Ip_gapcxBase[_3];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_4, NumChannel);
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_10 ();

  <bb 5> :
  return;

}


Ftm_Ocu_Ip_GetChannelEventStatus (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase, uint8 NumChannel)
{
  boolean D.5904;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpcFtmBase->STATUS;
  _2 = (int) NumChannel;
  _3 = _1 >> _2;
  _4 = _3 & 1;
  D.5904 = _4 != 0;
  return D.5904;

}


Ftm_Ocu_Ip_ClearChannelEventStatus (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = acpFtmBase->STATUS;
  _2 = (int) NumChannel;
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase->STATUS = _5;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel;
  _2 = acpFtmBase->CONTROLS[_1].CSC;
  _3 = (int) NumChannel;
  _4 = _2 & 4294967167;
  acpFtmBase->CONTROLS[_3].CSC = _4;
  return;

}


