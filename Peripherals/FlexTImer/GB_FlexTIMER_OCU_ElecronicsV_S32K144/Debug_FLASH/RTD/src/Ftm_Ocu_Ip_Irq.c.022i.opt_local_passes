FTM_0_CH_0_CH_1_ISR ()
{
  uint8 channelIndex;
  uint8 moduleIndex;
  int _1;
  struct Ftm_Ocu_Ip_xRegLayoutType * _2;
  _Bool _3;
  int _4;
  struct Ftm_Ocu_Ip_xRegLayoutType * _5;
  _Bool _6;

  <bb 2> :
  # DEBUG BEGIN_STMT
  moduleIndex_9 = 0;
  # DEBUG moduleIndex => moduleIndex_9
  # DEBUG BEGIN_STMT
  channelIndex_10 = 0;
  # DEBUG channelIndex => channelIndex_10
  # DEBUG BEGIN_STMT
  _1 = (int) moduleIndex_9;
  _2 = Ftm_Ocu_Ip_gapcxBase[_1];
  _3 = Ftm_Ocu_Ip_GetChannelEventStatus (_2, channelIndex_10);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (moduleIndex_9, channelIndex_10);

  <bb 4> :
  # DEBUG BEGIN_STMT
  channelIndex_14 = channelIndex_10 + 1;
  # DEBUG channelIndex => channelIndex_14
  # DEBUG BEGIN_STMT
  _4 = (int) moduleIndex_9;
  _5 = Ftm_Ocu_Ip_gapcxBase[_4];
  _6 = Ftm_Ocu_Ip_GetChannelEventStatus (_5, channelIndex_14);
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (moduleIndex_9, channelIndex_14);

  <bb 6> :
  # DEBUG BEGIN_STMT
  __asm__ __volatile__(" DSB");
  return;

}


Ftm_Ocu_Ip_Irq_ProcessChannelInterrupt (uint8 InstNum, uint8 ChIdx)
{
  const struct Ftm_Ocu_Ip_ChStateType * const pChannelState;
  boolean HasChEvOccurred;
  boolean IsChEvEnabled;
  int _1;
  int _2;
  int _3;
  struct Ftm_Ocu_Ip_xRegLayoutType * _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  int _8;
  struct Ftm_Ocu_Ip_xRegLayoutType * _9;
  int _10;
  long unsigned int _11;
  long unsigned int _12;
  void (*<T4a5>) (uint16) _13;
  _Bool _14;
  void (*<T4a5>) (uint16) _15;
  short unsigned int _16;

  <bb 2> :
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  # DEBUG BEGIN_STMT
  _1 = (int) InstNum_18(D);
  _2 = (int) ChIdx_19(D);
  pChannelState_20 = &Ftm_Ocu_Ip_gaxChState[_1][_2];
  # DEBUG pChannelState => pChannelState_20
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  _3 = (int) InstNum_18(D);
  _4 = Ftm_Ocu_Ip_gapcxBase[_3];
  _5 = (int) ChIdx_19(D);
  _6 ={v} _4->CONTROLS[_5].CSC;
  _7 = _6 & 64;
  IsChEvEnabled_23 = _7 != 0;
  # DEBUG IsChEvEnabled => IsChEvEnabled_23
  # DEBUG BEGIN_STMT
  _8 = (int) InstNum_18(D);
  _9 = Ftm_Ocu_Ip_gapcxBase[_8];
  _10 = (int) ChIdx_19(D);
  _11 ={v} _9->CONTROLS[_10].CSC;
  _12 = _11 & 128;
  HasChEvOccurred_24 = _12 != 0;
  # DEBUG HasChEvOccurred => HasChEvOccurred_24
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_15 ();
  # DEBUG BEGIN_STMT
  Ftm_Ocu_Ip_Irq_ClearChannelInterrupt (InstNum_18(D), ChIdx_19(D));
  # DEBUG BEGIN_STMT
  if (IsChEvEnabled_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (HasChEvOccurred_24 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  _13 = pChannelState_20->mCallbackFunc;
  if (_13 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  # DEBUG BEGIN_STMT
  _14 = pChannelState_20->mChannelInit;
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  # DEBUG BEGIN_STMT
  _15 = pChannelState_20->mCallbackFunc;
  _16 = pChannelState_20->mCallbackParam;
  _15 (_16);

  <bb 7> :
  return;

}


Ftm_Ocu_Ip_Irq_ClearChannelInterrupt (uint8 InstNum, uint8 NumChannel)
{
  int _1;
  struct Ftm_Ocu_Ip_xRegLayoutType * _2;
  int _3;
  struct Ftm_Ocu_Ip_xRegLayoutType * _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  if (NumChannel_6(D) <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (InstNum_8(D) <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  # DEBUG BEGIN_STMT
  SchM_Enter_Ocu_OCU_EXCLUSIVE_AREA_10 ();
  # DEBUG BEGIN_STMT
  _1 = (int) InstNum_8(D);
  _2 = Ftm_Ocu_Ip_gapcxBase[_1];
  Ftm_Ocu_Ip_ClearChannelEventFlag (_2, NumChannel_6(D));
  # DEBUG BEGIN_STMT
  _3 = (int) InstNum_8(D);
  _4 = Ftm_Ocu_Ip_gapcxBase[_3];
  Ftm_Ocu_Ip_ClearChannelEventStatus (_4, NumChannel_6(D));
  # DEBUG BEGIN_STMT
  SchM_Exit_Ocu_OCU_EXCLUSIVE_AREA_10 ();

  <bb 5> :
  return;

}


Ftm_Ocu_Ip_GetChannelEventStatus (const struct Ftm_Ocu_Ip_xRegLayoutType * const acpcFtmBase, uint8 NumChannel)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  boolean _8;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpcFtmBase_6(D)->STATUS;
  _2 = (int) NumChannel_7(D);
  _3 = _1 >> _2;
  _4 = _3 & 1;
  _8 = _4 != 0;
  return _8;

}


Ftm_Ocu_Ip_ClearChannelEventStatus (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 ={v} acpFtmBase_7(D)->STATUS;
  _2 = (int) NumChannel_8(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  acpFtmBase_7(D)->STATUS ={v} _5;
  return;

}


Ftm_Ocu_Ip_ClearChannelEventFlag (struct Ftm_Ocu_Ip_xRegLayoutType * const acpFtmBase, uint8 NumChannel)
{
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  # DEBUG BEGIN_STMT
  _1 = (int) NumChannel_5(D);
  _2 ={v} acpFtmBase_7(D)->CONTROLS[_1].CSC;
  _3 = (int) NumChannel_5(D);
  _4 = _2 & 4294967167;
  acpFtmBase_7(D)->CONTROLS[_3].CSC ={v} _4;
  return;

}


