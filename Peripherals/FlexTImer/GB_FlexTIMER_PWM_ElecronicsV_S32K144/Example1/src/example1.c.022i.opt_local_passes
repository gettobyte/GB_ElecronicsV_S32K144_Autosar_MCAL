main ()
{
  Clock_Ip_StatusType clockStatus;
  int D.6383;
  long unsigned int _1;
  int exit_code.2_2;
  int _12;

  <bb 2> :
  clockStatus_7 = Clock_Ip_Init (&Clock_Ip_aClockConfig[0]);
  goto <bb 4>; [INV]

  <bb 3> :
  clockStatus_14 = Clock_Ip_Init (&Clock_Ip_aClockConfig[0]);

  <bb 4> :
  # clockStatus_3 = PHI <clockStatus_7(2), clockStatus_14(3)>
  if (clockStatus_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Port_Init (0B);
  Ftm_Pwm_Ip_Init (0, &Ftm_Pwm_Ip_BOARD_InitPeripherals_UserCfg0);
  _1 = Clock_Ip_GetClockFrequency (63);
  FTM_Clk = _1;

  <bb 6> :
  exit_code.2_2 ={v} exit_code;
  if (exit_code.2_2 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  goto <bb 6>; [INV]

  <bb 9> :
  _12 ={v} exit_code;

  <bb 10> :
<L7>:
  return _12;

}


TestDelay (uint32 delay)
{
  static volatile uint32 DelayTimer = 0;
  long unsigned int DelayTimer.0_1;
  long unsigned int _2;
  long unsigned int DelayTimer.1_3;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  DelayTimer.0_1 ={v} DelayTimer;
  _2 = DelayTimer.0_1 + 1;
  DelayTimer ={v} _2;

  <bb 4> :
  DelayTimer.1_3 ={v} DelayTimer;
  if (delay_6(D) > DelayTimer.1_3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DelayTimer ={v} 0;
  return;

}


