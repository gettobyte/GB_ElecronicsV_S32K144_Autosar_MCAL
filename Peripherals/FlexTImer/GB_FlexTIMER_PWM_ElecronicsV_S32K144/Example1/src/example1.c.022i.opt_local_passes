main ()
{
  Clock_Ip_StatusType clockStatus;
  int D.7019;

  <bb 2> :
  clockStatus_6 = Clock_Ip_Init (&Clock_Ip_aClockConfig[0]);
  goto <bb 4>; [INV]

  <bb 3> :
  clockStatus_17 = Clock_Ip_Init (&Clock_Ip_aClockConfig[0]);

  <bb 4> :
  # clockStatus_1 = PHI <clockStatus_6(2), clockStatus_17(3)>
  if (clockStatus_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Port_Init (0B);
  IntCtrl_Ip_InstallHandler (99, FTM_0_CH_0_CH_1_ISR, 0B);
  IntCtrl_Ip_EnableIrq (99);
  Ftm_Pwm_Ip_Init (0, &Ftm_Pwm_Ip_BOARD_InitPeripherals_UserCfg0);

  <bb 6> :
  TestDelay (200000);
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (0, 0, 35000, 12000, 1);
  TestDelay (200000);
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (0, 1, 45000, 32000, 1);
  TestDelay (200000);
  goto <bb 6>; [INV]

}


PwmFtmChInterruptCallback ()
{
  <bb 2> :
  return;

}


TestDelay (uint32 delay)
{
  static volatile uint32 DelayTimer = 0;
  long unsigned int DelayTimer.0_1;
  long unsigned int _2;
  long unsigned int DelayTimer.1_3;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  DelayTimer.0_1 ={v} DelayTimer;
  _2 = DelayTimer.0_1 + 1;
  DelayTimer ={v} _2;

  <bb 4> :
  DelayTimer.1_3 ={v} DelayTimer;
  if (delay_6(D) > DelayTimer.1_3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DelayTimer ={v} 0;
  return;

}


