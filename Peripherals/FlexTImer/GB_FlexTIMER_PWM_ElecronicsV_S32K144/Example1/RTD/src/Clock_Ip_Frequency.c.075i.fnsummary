Symbol table:

FreqTable.6511/89 (FreqTable) @06de3e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_Zero_Frequency/8 (addr)get_LPO_128K_CLK_Frequency/9 (addr)get_SIRC_CLK_Frequency/12 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_FIRC_CLK_Frequency/10 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SOSC_CLK_Frequency/11 (addr)get_SPLL_CLK_Frequency/13 (addr)get_SIRCDIV1_CLK_Frequency/14 (addr)get_SIRCDIV2_CLK_Frequency/15 (addr)get_FIRCDIV1_CLK_Frequency/16 (addr)get_FIRCDIV2_CLK_Frequency/17 (addr)get_SOSCDIV1_CLK_Frequency/18 (addr)get_SOSCDIV2_CLK_Frequency/19 (addr)get_SPLLDIV1_CLK_Frequency/20 (addr)get_SPLLDIV2_CLK_Frequency/21 (addr)get_LPO_32K_CLK_Frequency/22 (addr)get_LPO_1K_CLK_Frequency/23 (addr)get_tclk0_ref_Frequency/24 (addr)get_tclk1_ref_Frequency/25 (addr)get_tclk2_ref_Frequency/26 (addr)get_rtc_clkin_Frequency/27 (addr)get_SCS_CLK_Frequency/28 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_CORE_CLK_Frequency/29 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_BUS_CLK_Frequency/30 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SLOW_CLK_Frequency/31 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_RTC_CLK_Frequency/32 (addr)get_LPO_CLK_Frequency/33 (addr)get_SCG_CLKOUT_CLK_Frequency/34 (addr)get_FTM0_EXT_CLK_Frequency/35 (addr)get_FTM1_EXT_CLK_Frequency/36 (addr)get_FTM2_EXT_CLK_Frequency/37 (addr)get_FTM3_EXT_CLK_Frequency/38 (addr)get_ADC0_CLK_Frequency/39 (addr)get_ADC1_CLK_Frequency/40 (addr)get_CLKOUT0_CLK_Frequency/41 (addr)get_CMP0_CLK_Frequency/42 (addr)get_CRC0_CLK_Frequency/43 (addr)get_DMA0_CLK_Frequency/44 (addr)get_DMAMUX0_CLK_Frequency/45 (addr)get_EIM0_CLK_Frequency/46 (addr)get_ERM0_CLK_Frequency/47 (addr)get_EWM0_CLK_Frequency/48 (addr)get_FLEXCAN0_CLK_Frequency/49 (addr)get_FLEXCAN1_CLK_Frequency/50 (addr)get_FLEXCAN2_CLK_Frequency/51 (addr)get_FlexIO_CLK_Frequency/56 (addr)get_FTFC_CLK_Frequency/57 (addr)get_FTM0_CLK_Frequency/52 (addr)get_FTM1_CLK_Frequency/53 (addr)get_FTM2_CLK_Frequency/54 (addr)get_FTM3_CLK_Frequency/55 (addr)get_LPI2C0_CLK_Frequency/58 (addr)get_LPIT0_CLK_Frequency/59 (addr)get_LPSPI0_CLK_Frequency/60 (addr)get_LPSPI1_CLK_Frequency/61 (addr)get_LPSPI2_CLK_Frequency/62 (addr)get_LPTMR0_CLK_Frequency/63 (addr)get_LPUART0_CLK_Frequency/64 (addr)get_LPUART1_CLK_Frequency/65 (addr)get_LPUART2_CLK_Frequency/66 (addr)get_MPU0_CLK_Frequency/67 (addr)get_MSCM0_CLK_Frequency/68 (addr)get_PDB0_CLK_Frequency/69 (addr)get_PDB1_CLK_Frequency/70 (addr)get_PORTA_CLK_Frequency/71 (addr)get_PORTB_CLK_Frequency/72 (addr)get_PORTC_CLK_Frequency/73 (addr)get_PORTD_CLK_Frequency/74 (addr)get_PORTE_CLK_Frequency/75 (addr)get_RTC0_CLK_Frequency/76 (addr)get_TRACE_CLK_Frequency/77 (addr)
  Referring: Clock_Ip_GetFreq/81 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FreqTableClkOut.6336/88 (FreqTableClkOut) @06dbe000
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_SCG_CLKOUT_CLK_Frequency/34 (addr)get_Zero_Frequency/8 (addr)get_SOSCDIV2_CLK_Frequency/19 (addr)get_Zero_Frequency/8 (addr)get_SIRCDIV2_CLK_Frequency/15 (addr)get_Zero_Frequency/8 (addr)get_FIRCDIV2_CLK_Frequency/17 (addr)get_CORE_CLK_Frequency/29 (addr)get_SPLLDIV2_CLK_Frequency/21 (addr)get_BUS_CLK_Frequency/30 (addr)get_LPO_128K_CLK_Frequency/9 (addr)get_Zero_Frequency/8 (addr)get_LPO_CLK_Frequency/33 (addr)get_Zero_Frequency/8 (addr)get_RTC_CLK_Frequency/32 (addr)get_Zero_Frequency/8 (addr)
  Referring: get_CLKOUT0_CLK_Frequency/41 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FreqTableScg.6312/87 (FreqTableScg) @06db4168
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_SLOW_CLK_Frequency/31 (addr)get_SOSC_CLK_Frequency/11 (addr)get_SIRC_CLK_Frequency/12 (addr)get_FIRC_CLK_Frequency/10 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SPLL_CLK_Frequency/13 (addr)get_Zero_Frequency/8 (addr)
  Referring: get_SCG_CLKOUT_CLK_Frequency/34 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FreqTableLpo.6308/86 (FreqTableLpo) @06dafee8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_LPO_128K_CLK_Frequency/9 (addr)get_Zero_Frequency/8 (addr)get_LPO_32K_CLK_Frequency/22 (addr)get_LPO_1K_CLK_Frequency/23 (addr)
  Referring: get_LPO_CLK_Frequency/33 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FreqTableRtc.6304/85 (FreqTableRtc) @06dafca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_SOSCDIV1_CLK_Frequency/18 (addr)get_LPO_32K_CLK_Frequency/22 (addr)get_rtc_clkin_Frequency/27 (addr)get_FIRCDIV1_CLK_Frequency/16 (addr)
  Referring: get_RTC_CLK_Frequency/32 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
FreqTableSCS.6291/84 (FreqTableSCS) @06daf558
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_Zero_Frequency/8 (addr)get_SOSC_CLK_Frequency/11 (addr)get_SIRC_CLK_Frequency/12 (addr)get_FIRC_CLK_Frequency/10 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SPLL_CLK_Frequency/13 (addr)
  Referring: get_SCS_CLK_Frequency/28 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
SpllFreq.6236/83 (SpllFreq) @06d474c8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_SPLL_CLK_Frequency/13 (write)get_SPLL_CLK_Frequency/13 (read)get_SPLL_CLK_Frequency/13 (write)get_SPLL_CLK_Frequency/13 (read)
  Availability: available
  Varpool flags: initialized
SpllChecksum.6237/82 (SpllChecksum) @06d47438
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_SPLL_CLK_Frequency/13 (read)get_SPLL_CLK_Frequency/13 (write)
  Availability: available
  Varpool flags: initialized
Clock_Ip_GetFreq/81 (Clock_Ip_GetFreq) @06d3f620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FreqTable.6511/89 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_SetExternalSignalFrequency/80 (Clock_Ip_SetExternalSignalFrequency) @06d3f2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_axExtSignalFreqEntries/6 (read)Clock_Ip_axExtSignalFreqEntries/6 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetExternalOscillatorFrequency/79 (Clock_Ip_SetExternalOscillatorFrequency) @06d3f000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_u32Sosc/7 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
PLL_VCO/78 (PLL_VCO) @06d37b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: get_SPLL_CLK_Frequency/13 
  Calls: get_SOSC_CLK_Frequency/11 
get_TRACE_CLK_Frequency/77 (get_TRACE_CLK_Frequency) @06d37620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_RTC0_CLK_Frequency/76 (get_RTC0_CLK_Frequency) @06d370e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PORTE_CLK_Frequency/75 (get_PORTE_CLK_Frequency) @06d37d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PORTD_CLK_Frequency/74 (get_PORTD_CLK_Frequency) @06d37a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PORTC_CLK_Frequency/73 (get_PORTC_CLK_Frequency) @06d377e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PORTB_CLK_Frequency/72 (get_PORTB_CLK_Frequency) @06d37540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PORTA_CLK_Frequency/71 (get_PORTA_CLK_Frequency) @06d372a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_PDB1_CLK_Frequency/70 (get_PDB1_CLK_Frequency) @06d37000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_PDB0_CLK_Frequency/69 (get_PDB0_CLK_Frequency) @06d30b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_MSCM0_CLK_Frequency/68 (get_MSCM0_CLK_Frequency) @06d30620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_MPU0_CLK_Frequency/67 (get_MPU0_CLK_Frequency) @06d300e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_LPUART2_CLK_Frequency/66 (get_LPUART2_CLK_Frequency) @06d30d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPUART1_CLK_Frequency/65 (get_LPUART1_CLK_Frequency) @06d30a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPUART0_CLK_Frequency/64 (get_LPUART0_CLK_Frequency) @06d307e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPTMR0_CLK_Frequency/63 (get_LPTMR0_CLK_Frequency) @06d30540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPSPI2_CLK_Frequency/62 (get_LPSPI2_CLK_Frequency) @06d302a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPSPI1_CLK_Frequency/61 (get_LPSPI1_CLK_Frequency) @06d30000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPSPI0_CLK_Frequency/60 (get_LPSPI0_CLK_Frequency) @06d25b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPIT0_CLK_Frequency/59 (get_LPIT0_CLK_Frequency) @06d25620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPI2C0_CLK_Frequency/58 (get_LPI2C0_CLK_Frequency) @06d250e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_FTFC_CLK_Frequency/57 (get_FTFC_CLK_Frequency) @06d25d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SLOW_CLK_Frequency/31 
get_FlexIO_CLK_Frequency/56 (get_FlexIO_CLK_Frequency) @06d25a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_FTM3_CLK_Frequency/55 (get_FTM3_CLK_Frequency) @06d257e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs1/4 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FTM3_EXT_CLK_Frequency/38 
   Indirect call
get_FTM2_CLK_Frequency/54 (get_FTM2_CLK_Frequency) @06d25540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs1/4 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FTM2_EXT_CLK_Frequency/37 
   Indirect call
get_FTM1_CLK_Frequency/53 (get_FTM1_CLK_Frequency) @06d252a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs1/4 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FTM1_EXT_CLK_Frequency/36 
   Indirect call
get_FTM0_CLK_Frequency/52 (get_FTM0_CLK_Frequency) @06d25000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs1/4 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FTM0_EXT_CLK_Frequency/35 
   Indirect call
get_FLEXCAN2_CLK_Frequency/51 (get_FLEXCAN2_CLK_Frequency) @06d20b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_FLEXCAN1_CLK_Frequency/50 (get_FLEXCAN1_CLK_Frequency) @06d20620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_FLEXCAN0_CLK_Frequency/49 (get_FLEXCAN0_CLK_Frequency) @06d200e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_EWM0_CLK_Frequency/48 (get_EWM0_CLK_Frequency) @06d20d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_ERM0_CLK_Frequency/47 (get_ERM0_CLK_Frequency) @06d20a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_EIM0_CLK_Frequency/46 (get_EIM0_CLK_Frequency) @06d207e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_DMAMUX0_CLK_Frequency/45 (get_DMAMUX0_CLK_Frequency) @06d20540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_DMA0_CLK_Frequency/44 (get_DMA0_CLK_Frequency) @06d202a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_CORE_CLK_Frequency/29 
get_CRC0_CLK_Frequency/43 (get_CRC0_CLK_Frequency) @06d20000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_CMP0_CLK_Frequency/42 (get_CMP0_CLK_Frequency) @06d19a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_BUS_CLK_Frequency/30 
get_CLKOUT0_CLK_Frequency/41 (get_CLKOUT0_CLK_Frequency) @06d19540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: FreqTableClkOut.6336/88 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_ADC1_CLK_Frequency/40 (get_ADC1_CLK_Frequency) @06d19ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_ADC0_CLK_Frequency/39 (get_ADC0_CLK_Frequency) @06d19c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTablePcs2/3 (read)Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_FTM3_EXT_CLK_Frequency/38 (get_FTM3_EXT_CLK_Frequency) @06d199a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTableSimFtm/5 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FTM3_CLK_Frequency/55 
  Calls: 
   Indirect call
get_FTM2_EXT_CLK_Frequency/37 (get_FTM2_EXT_CLK_Frequency) @06d19700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTableSimFtm/5 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FTM2_CLK_Frequency/54 
  Calls: 
   Indirect call
get_FTM1_EXT_CLK_Frequency/36 (get_FTM1_EXT_CLK_Frequency) @06d19460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTableSimFtm/5 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FTM1_CLK_Frequency/53 
  Calls: 
   Indirect call
get_FTM0_EXT_CLK_Frequency/35 (get_FTM0_EXT_CLK_Frequency) @06d191c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_apfFreqTableSimFtm/5 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FTM0_CLK_Frequency/52 
  Calls: 
   Indirect call
get_SCG_CLKOUT_CLK_Frequency/34 (get_SCG_CLKOUT_CLK_Frequency) @06d14d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: FreqTableScg.6312/87 (read)
  Referring: FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_LPO_CLK_Frequency/33 (get_LPO_CLK_Frequency) @06d147e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: FreqTableLpo.6308/86 (read)
  Referring: FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_RTC_CLK_Frequency/32 (get_RTC_CLK_Frequency) @06d142a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: FreqTableRtc.6304/85 (read)
  Referring: FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
get_SLOW_CLK_Frequency/31 (get_SLOW_CLK_Frequency) @06d14ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FreqTableScg.6312/87 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FTFC_CLK_Frequency/57 
  Calls: get_CORE_CLK_Frequency/29 
get_BUS_CLK_Frequency/30 (get_BUS_CLK_Frequency) @06d14c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_RTC0_CLK_Frequency/76 get_PORTE_CLK_Frequency/75 get_PORTD_CLK_Frequency/74 get_PORTC_CLK_Frequency/73 get_PORTB_CLK_Frequency/72 get_PORTA_CLK_Frequency/71 get_EWM0_CLK_Frequency/48 get_DMAMUX0_CLK_Frequency/45 get_CRC0_CLK_Frequency/43 get_CMP0_CLK_Frequency/42 
  Calls: get_CORE_CLK_Frequency/29 
get_CORE_CLK_Frequency/29 (get_CORE_CLK_Frequency) @06d149a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_TRACE_CLK_Frequency/77 get_PDB1_CLK_Frequency/70 get_PDB0_CLK_Frequency/69 get_MSCM0_CLK_Frequency/68 get_MPU0_CLK_Frequency/67 get_FLEXCAN2_CLK_Frequency/51 get_FLEXCAN1_CLK_Frequency/50 get_FLEXCAN0_CLK_Frequency/49 get_ERM0_CLK_Frequency/47 get_EIM0_CLK_Frequency/46 get_DMA0_CLK_Frequency/44 get_SLOW_CLK_Frequency/31 get_BUS_CLK_Frequency/30 
  Calls: get_SCS_CLK_Frequency/28 
get_SCS_CLK_Frequency/28 (get_SCS_CLK_Frequency) @06d14700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: FreqTableSCS.6291/84 (read)
  Referring: FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_CORE_CLK_Frequency/29 
  Calls: 
   Indirect call
get_rtc_clkin_Frequency/27 (get_rtc_clkin_Frequency) @06d14460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_axExtSignalFreqEntries/6 (read)
  Referring: FreqTableRtc.6304/85 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
get_tclk2_ref_Frequency/26 (get_tclk2_ref_Frequency) @06d141c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_axExtSignalFreqEntries/6 (read)
  Referring: Clock_Ip_apfFreqTableSimFtm/5 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
get_tclk1_ref_Frequency/25 (get_tclk1_ref_Frequency) @06cfdd20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_axExtSignalFreqEntries/6 (read)
  Referring: Clock_Ip_apfFreqTableSimFtm/5 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
get_tclk0_ref_Frequency/24 (get_tclk0_ref_Frequency) @06cfd7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_axExtSignalFreqEntries/6 (read)
  Referring: Clock_Ip_apfFreqTableSimFtm/5 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
get_LPO_1K_CLK_Frequency/23 (get_LPO_1K_CLK_Frequency) @06cfd2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTableLpo.6308/86 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_LPO_128K_CLK_Frequency/9 
get_LPO_32K_CLK_Frequency/22 (get_LPO_32K_CLK_Frequency) @06cfdee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableGate/1 (read)
  Referring: FreqTableRtc.6304/85 (addr)FreqTableLpo.6308/86 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_LPO_128K_CLK_Frequency/9 
get_SPLLDIV2_CLK_Frequency/21 (get_SPLLDIV2_CLK_Frequency) @06cfdc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs2/3 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SPLL_CLK_Frequency/13 
get_SPLLDIV1_CLK_Frequency/20 (get_SPLLDIV1_CLK_Frequency) @06cfd9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs1/4 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SPLL_CLK_Frequency/13 
get_SOSCDIV2_CLK_Frequency/19 (get_SOSCDIV2_CLK_Frequency) @06cfd700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs2/3 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SOSC_CLK_Frequency/11 
get_SOSCDIV1_CLK_Frequency/18 (get_SOSCDIV1_CLK_Frequency) @06cfd460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs1/4 (addr)FreqTableRtc.6304/85 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SOSC_CLK_Frequency/11 
get_FIRCDIV2_CLK_Frequency/17 (get_FIRCDIV2_CLK_Frequency) @06cfd1c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs2/3 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FIRC_CLK_Frequency/10 
get_FIRCDIV1_CLK_Frequency/16 (get_FIRCDIV1_CLK_Frequency) @06cf7d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs1/4 (addr)FreqTableRtc.6304/85 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_FIRC_CLK_Frequency/10 
get_SIRCDIV2_CLK_Frequency/15 (get_SIRCDIV2_CLK_Frequency) @06cf77e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs2/3 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SIRC_CLK_Frequency/12 
get_SIRCDIV1_CLK_Frequency/14 (get_SIRCDIV1_CLK_Frequency) @06cf72a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8DividerMappingValue/2 (read)
  Referring: Clock_Ip_apfFreqTablePcs1/4 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: get_SIRC_CLK_Frequency/12 
get_SPLL_CLK_Frequency/13 (get_SPLL_CLK_Frequency) @06cf7ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: SpllChecksum.6237/82 (read)SpllChecksum.6237/82 (write)SpllFreq.6236/83 (write)Clock_Ip_u32EnableClock/0 (read)SpllFreq.6236/83 (read)SpllFreq.6236/83 (write)SpllFreq.6236/83 (read)
  Referring: FreqTableSCS.6291/84 (addr)FreqTableScg.6312/87 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_SPLLDIV2_CLK_Frequency/21 get_SPLLDIV1_CLK_Frequency/20 
  Calls: PLL_VCO/78 
get_SIRC_CLK_Frequency/12 (get_SIRC_CLK_Frequency) @06cf7c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableClock/0 (read)
  Referring: FreqTableSCS.6291/84 (addr)FreqTableScg.6312/87 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_SIRCDIV2_CLK_Frequency/15 get_SIRCDIV1_CLK_Frequency/14 
  Calls: 
get_SOSC_CLK_Frequency/11 (get_SOSC_CLK_Frequency) @06cf79a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableClock/0 (read)Clock_Ip_u32Sosc/7 (read)
  Referring: FreqTableSCS.6291/84 (addr)FreqTableScg.6312/87 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: PLL_VCO/78 get_SOSCDIV2_CLK_Frequency/19 get_SOSCDIV1_CLK_Frequency/18 
  Calls: 
get_FIRC_CLK_Frequency/10 (get_FIRC_CLK_Frequency) @06cf7700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_u32EnableClock/0 (read)
  Referring: FreqTableSCS.6291/84 (addr)FreqTableScg.6312/87 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_FIRCDIV2_CLK_Frequency/17 get_FIRCDIV1_CLK_Frequency/16 
  Calls: 
get_LPO_128K_CLK_Frequency/9 (get_LPO_128K_CLK_Frequency) @06cf7460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FreqTableLpo.6308/86 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: get_LPO_1K_CLK_Frequency/23 get_LPO_32K_CLK_Frequency/22 
  Calls: 
get_Zero_Frequency/8 (get_Zero_Frequency) @06cf71c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_apfFreqTablePcs2/3 (addr)Clock_Ip_apfFreqTablePcs2/3 (addr)Clock_Ip_apfFreqTablePcs2/3 (addr)Clock_Ip_apfFreqTablePcs1/4 (addr)Clock_Ip_apfFreqTablePcs1/4 (addr)Clock_Ip_apfFreqTablePcs1/4 (addr)Clock_Ip_apfFreqTableSimFtm/5 (addr)FreqTableSCS.6291/84 (addr)FreqTableSCS.6291/84 (addr)FreqTableSCS.6291/84 (addr)FreqTableLpo.6308/86 (addr)FreqTableScg.6312/87 (addr)FreqTableScg.6312/87 (addr)FreqTableScg.6312/87 (addr)FreqTableClkOut.6336/88 (addr)FreqTableClkOut.6336/88 (addr)FreqTableClkOut.6336/88 (addr)FreqTableClkOut.6336/88 (addr)FreqTableClkOut.6336/88 (addr)FreqTableClkOut.6336/88 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)FreqTable.6511/89 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_u32Sosc/7 (Clock_Ip_u32Sosc) @069cb678
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_SOSC_CLK_Frequency/11 (read)Clock_Ip_SetExternalOscillatorFrequency/79 (write)
  Availability: available
  Varpool flags: initialized
Clock_Ip_axExtSignalFreqEntries/6 (Clock_Ip_axExtSignalFreqEntries) @069cb5e8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_tclk2_ref_Frequency/26 (read)get_rtc_clkin_Frequency/27 (read)get_tclk0_ref_Frequency/24 (read)get_tclk1_ref_Frequency/25 (read)Clock_Ip_SetExternalSignalFrequency/80 (read)Clock_Ip_SetExternalSignalFrequency/80 (write)
  Availability: available
  Varpool flags: initialized
Clock_Ip_apfFreqTableSimFtm/5 (Clock_Ip_apfFreqTableSimFtm) @069cb558
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_tclk0_ref_Frequency/24 (addr)get_tclk1_ref_Frequency/25 (addr)get_tclk2_ref_Frequency/26 (addr)get_Zero_Frequency/8 (addr)
  Referring: get_FTM1_EXT_CLK_Frequency/36 (read)get_FTM2_EXT_CLK_Frequency/37 (read)get_FTM0_EXT_CLK_Frequency/35 (read)get_FTM3_EXT_CLK_Frequency/38 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_apfFreqTablePcs1/4 (Clock_Ip_apfFreqTablePcs1) @069cb4c8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_Zero_Frequency/8 (addr)get_SOSCDIV1_CLK_Frequency/18 (addr)get_SIRCDIV1_CLK_Frequency/14 (addr)get_FIRCDIV1_CLK_Frequency/16 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SPLLDIV1_CLK_Frequency/20 (addr)
  Referring: get_FTM1_CLK_Frequency/53 (read)get_FTM2_CLK_Frequency/54 (read)get_FTM0_CLK_Frequency/52 (read)get_FTM3_CLK_Frequency/55 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_apfFreqTablePcs2/3 (Clock_Ip_apfFreqTablePcs2) @069cb3f0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: get_Zero_Frequency/8 (addr)get_SOSCDIV2_CLK_Frequency/19 (addr)get_SIRCDIV2_CLK_Frequency/15 (addr)get_FIRCDIV2_CLK_Frequency/17 (addr)get_Zero_Frequency/8 (addr)get_Zero_Frequency/8 (addr)get_SPLLDIV2_CLK_Frequency/21 (addr)
  Referring: get_LPUART0_CLK_Frequency/64 (read)get_LPUART1_CLK_Frequency/65 (read)get_ADC0_CLK_Frequency/39 (read)get_ADC1_CLK_Frequency/40 (read)get_FlexIO_CLK_Frequency/56 (read)get_LPI2C0_CLK_Frequency/58 (read)get_LPIT0_CLK_Frequency/59 (read)get_LPSPI0_CLK_Frequency/60 (read)get_LPSPI1_CLK_Frequency/61 (read)get_LPSPI2_CLK_Frequency/62 (read)get_LPTMR0_CLK_Frequency/63 (read)get_LPUART2_CLK_Frequency/66 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_au8DividerMappingValue/2 (Clock_Ip_au8DividerMappingValue) @069cb318
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_SOSCDIV2_CLK_Frequency/19 (read)get_SPLLDIV1_CLK_Frequency/20 (read)get_SIRCDIV1_CLK_Frequency/14 (read)get_SIRCDIV2_CLK_Frequency/15 (read)get_FIRCDIV1_CLK_Frequency/16 (read)get_FIRCDIV2_CLK_Frequency/17 (read)get_SOSCDIV1_CLK_Frequency/18 (read)get_SPLLDIV2_CLK_Frequency/21 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_u32EnableGate/1 (Clock_Ip_u32EnableGate) @069cb240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_PORTE_CLK_Frequency/75 (read)get_RTC0_CLK_Frequency/76 (read)get_LPO_32K_CLK_Frequency/22 (read)get_LPO_1K_CLK_Frequency/23 (read)get_ADC0_CLK_Frequency/39 (read)get_ADC1_CLK_Frequency/40 (read)get_CMP0_CLK_Frequency/42 (read)get_CRC0_CLK_Frequency/43 (read)get_DMA0_CLK_Frequency/44 (read)get_DMAMUX0_CLK_Frequency/45 (read)get_EIM0_CLK_Frequency/46 (read)get_ERM0_CLK_Frequency/47 (read)get_EWM0_CLK_Frequency/48 (read)get_FLEXCAN0_CLK_Frequency/49 (read)get_FLEXCAN1_CLK_Frequency/50 (read)get_FLEXCAN2_CLK_Frequency/51 (read)get_FTM0_CLK_Frequency/52 (read)get_FTM1_CLK_Frequency/53 (read)get_FTM2_CLK_Frequency/54 (read)get_FTM3_CLK_Frequency/55 (read)get_FlexIO_CLK_Frequency/56 (read)get_FTFC_CLK_Frequency/57 (read)get_LPI2C0_CLK_Frequency/58 (read)get_LPIT0_CLK_Frequency/59 (read)get_LPSPI0_CLK_Frequency/60 (read)get_LPSPI1_CLK_Frequency/61 (read)get_LPSPI2_CLK_Frequency/62 (read)get_LPTMR0_CLK_Frequency/63 (read)get_LPUART0_CLK_Frequency/64 (read)get_LPUART1_CLK_Frequency/65 (read)get_LPUART2_CLK_Frequency/66 (read)get_MPU0_CLK_Frequency/67 (read)get_MSCM0_CLK_Frequency/68 (read)get_PDB0_CLK_Frequency/69 (read)get_PDB1_CLK_Frequency/70 (read)get_PORTA_CLK_Frequency/71 (read)get_PORTB_CLK_Frequency/72 (read)get_PORTC_CLK_Frequency/73 (read)get_PORTD_CLK_Frequency/74 (read)get_TRACE_CLK_Frequency/77 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_u32EnableClock/0 (Clock_Ip_u32EnableClock) @069cb1b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: get_SOSC_CLK_Frequency/11 (read)get_SIRC_CLK_Frequency/12 (read)get_FIRC_CLK_Frequency/10 (read)get_SPLL_CLK_Frequency/13 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_GetFreq (Clock_Ip_NameType ClockName)
{
  static uint32 (*getFreqType) (void) FreqTable[87] = {get_Zero_Frequency, get_LPO_128K_CLK_Frequency, get_SIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SOSC_CLK_Frequency, get_SPLL_CLK_Frequency, get_SIRCDIV1_CLK_Frequency, get_SIRCDIV2_CLK_Frequency, get_FIRCDIV1_CLK_Frequency, get_FIRCDIV2_CLK_Frequency, get_SOSCDIV1_CLK_Frequency, get_SOSCDIV2_CLK_Frequency, get_SPLLDIV1_CLK_Frequency, get_SPLLDIV2_CLK_Frequency, get_LPO_32K_CLK_Frequency, get_LPO_1K_CLK_Frequency, get_tclk0_ref_Frequency, get_tclk1_ref_Frequency, get_tclk2_ref_Frequency, get_rtc_clkin_Frequency, get_SCS_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_CORE_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_BUS_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SLOW_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_RTC_CLK_Frequency, get_LPO_CLK_Frequency, get_SCG_CLKOUT_CLK_Frequency, get_FTM0_EXT_CLK_Frequency, get_FTM1_EXT_CLK_Frequency, get_FTM2_EXT_CLK_Frequency, get_FTM3_EXT_CLK_Frequency, 0B, get_ADC0_CLK_Frequency, get_ADC1_CLK_Frequency, get_CLKOUT0_CLK_Frequency, get_CMP0_CLK_Frequency, get_CRC0_CLK_Frequency, get_DMA0_CLK_Frequency, get_DMAMUX0_CLK_Frequency, get_EIM0_CLK_Frequency, get_ERM0_CLK_Frequency, get_EWM0_CLK_Frequency, get_FLEXCAN0_CLK_Frequency, get_FLEXCAN1_CLK_Frequency, get_FLEXCAN2_CLK_Frequency, get_FlexIO_CLK_Frequency, get_FTFC_CLK_Frequency, get_FTM0_CLK_Frequency, get_FTM1_CLK_Frequency, get_FTM2_CLK_Frequency, get_FTM3_CLK_Frequency, get_LPI2C0_CLK_Frequency, get_LPIT0_CLK_Frequency, get_LPSPI0_CLK_Frequency, get_LPSPI1_CLK_Frequency, get_LPSPI2_CLK_Frequency, get_LPTMR0_CLK_Frequency, get_LPUART0_CLK_Frequency, get_LPUART1_CLK_Frequency, get_LPUART2_CLK_Frequency, get_MPU0_CLK_Frequency, get_MSCM0_CLK_Frequency, get_PDB0_CLK_Frequency, get_PDB1_CLK_Frequency, get_PORTA_CLK_Frequency, get_PORTB_CLK_Frequency, get_PORTC_CLK_Frequency, get_PORTD_CLK_Frequency, get_PORTE_CLK_Frequency, get_RTC0_CLK_Frequency, get_TRACE_CLK_Frequency};
  uint32 D.6752;
  uint32 (*<T64d>) (void) _1;
  uint32 _5;

  <bb 2> :
  _1 = FreqTable[ClockName_3(D)];
  _5 = _1 ();

  <bb 3> :
<L0>:
  return _5;

}


Clock_Ip_SetExternalSignalFrequency (Clock_Ip_NameType SignalName, uint32 Frequency)
{
  uint32 Index;
  <unnamed type> _1;

  <bb 2> :
  Index_4 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = Clock_Ip_axExtSignalFreqEntries[Index_2].Name;
  if (SignalName_6(D) == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Clock_Ip_axExtSignalFreqEntries[Index_2].Frequency = Frequency_8(D);
  goto <bb 7>; [INV]

  <bb 5> :
  Index_7 = Index_2 + 1;

  <bb 6> :
  # Index_2 = PHI <Index_4(2), Index_7(5)>
  if (Index_2 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Clock_Ip_SetExternalOscillatorFrequency (Clock_Ip_NameType ExtOscName, uint32 Frequency)
{
  <bb 2> :
  Clock_Ip_u32Sosc = Frequency_2(D);
  return;

}


PLL_VCO (const struct SCG_Type * Base)
{
  uint32 Var2;
  uint32 Var1;
  uint32 Fout;
  uint32 Mul;
  uint32 Prediv;
  uint32 Fin;
  uint32 D.6748;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  uint32 _21;

  <bb 2> :
  Fin_13 = get_SOSC_CLK_Frequency ();
  _1 ={v} Base_14(D)->SPLLCFG;
  _2 = _1 >> 8;
  _3 = _2 & 7;
  _4 = _3 + 1;
  Prediv_15 = _4 << 1;
  _5 ={v} Base_14(D)->SPLLCFG;
  _6 = _5 >> 16;
  _7 = _6 & 31;
  Mul_16 = _7 + 16;
  Var1_17 = Mul_16 / Prediv_15;
  _8 = Var1_17 * Prediv_15;
  Var2_18 = Mul_16 - _8;
  Fout_19 = Var1_17 * Fin_13;
  _9 = Fin_13 * Var2_18;
  _10 = _9 / Prediv_15;
  Fout_20 = Fout_19 + _10;
  _21 = Fout_20;

  <bb 3> :
<L0>:
  return _21;

}


get_TRACE_CLK_Frequency ()
{
  uint32 MulValue;
  uint32 DivValue;
  uint32 Frequency;
  uint32 D.6746;
  long unsigned int D.6745;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct SIM_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct SIM_Type * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _16;
  uint32 _20;

  <bb 2> :
  Frequency_15 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->CLKDIV4;
  _3 = _2 >> 28;
  _4 = _3 & 1;
  _16 = Clock_Ip_u32EnableGate[_4];
  Frequency_17 = _16 & Frequency_15;
  _5 = 1074036736B;
  _6 ={v} _5->CLKDIV4;
  _7 = _6 >> 1;
  _8 = _7 & 7;
  DivValue_18 = _8 + 1;
  _9 = 1074036736B;
  _10 ={v} _9->CLKDIV4;
  _11 = _10 & 1;
  MulValue_19 = _11 + 1;
  _12 = Frequency_17 * MulValue_19;
  _20 = _12 / DivValue_18;

  <bb 3> :
<L0>:
  return _20;

}


get_RTC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6743;
  long unsigned int D.6742;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[61];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PORTE_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6740;
  long unsigned int D.6739;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[77];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PORTD_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6737;
  long unsigned int D.6736;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[76];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PORTC_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6734;
  long unsigned int D.6733;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[75];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PORTB_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6731;
  long unsigned int D.6730;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[74];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PORTA_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6728;
  long unsigned int D.6727;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[73];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PDB1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6725;
  long unsigned int D.6724;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[49];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_PDB0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6722;
  long unsigned int D.6721;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[54];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_MSCM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6719;
  long unsigned int D.6718;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _7;
  uint32 _9;

  <bb 2> :
  Frequency_6 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->PLATCGC;
  _3 = _2 & 1;
  _7 = Clock_Ip_u32EnableGate[_3];
  Frequency_8 = _7 & Frequency_6;
  _9 = Frequency_8;

  <bb 3> :
<L0>:
  return _9;

}


get_MPU0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6716;
  long unsigned int D.6715;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->PLATCGC;
  _3 = _2 >> 1;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_LPUART2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6713;
  long unsigned int D.6712;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[108];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[108];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPUART1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6710;
  long unsigned int D.6709;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[107];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[107];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPUART0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6707;
  long unsigned int D.6706;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[106];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[106];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPTMR0_CLK_Frequency ()
{
  uint32 MulValue;
  uint32 DivValue;
  uint32 Frequency;
  uint32 D.6704;
  long unsigned int D.6703;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  struct PCC_Type * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  struct PCC_Type * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _23;
  uint32 _25;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[64];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_20 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[64];
  _8 = _7 & 7;
  DivValue_21 = _8 + 1;
  _9 = 1074155520B;
  _10 ={v} _9->PCCn[64];
  _11 = _10 >> 3;
  _12 = _11 & 1;
  MulValue_22 = _12 + 1;
  _13 = 1074155520B;
  _14 ={v} _13->PCCn[64];
  _15 = _14 >> 30;
  _16 = _15 & 1;
  _23 = Clock_Ip_u32EnableGate[_16];
  Frequency_24 = _23 & Frequency_20;
  _17 = Frequency_24 * MulValue_22;
  _25 = _17 / DivValue_21;

  <bb 3> :
<L0>:
  return _25;

}


get_LPSPI2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6701;
  long unsigned int D.6700;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[45];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[45];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPSPI1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6698;
  long unsigned int D.6697;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[45];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[45];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPSPI0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6695;
  long unsigned int D.6694;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[44];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[44];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPIT0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6692;
  long unsigned int D.6691;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[55];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[55];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_LPI2C0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6689;
  long unsigned int D.6688;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[102];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[102];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_FTFC_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6686;
  long unsigned int D.6685;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_SLOW_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[32];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_FlexIO_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6683;
  long unsigned int D.6682;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[90];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[90];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_FTM3_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6680;
  long unsigned int D.6679;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint32 (*<T64d>) (void) _9;
  struct PCC_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _21;
  uint32 _23;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[38];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 ={v} _5->PCCn[38];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency_20 = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency_18 = get_FTM3_EXT_CLK_Frequency ();

  <bb 5> :
  # Frequency_14 = PHI <Frequency_20(3), Frequency_18(4)>
  _10 = 1074155520B;
  _11 ={v} _10->PCCn[38];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  _21 = Clock_Ip_u32EnableGate[_13];
  Frequency_22 = _21 & Frequency_14;
  _23 = Frequency_22;

  <bb 6> :
<L3>:
  return _23;

}


get_FTM2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6674;
  long unsigned int D.6673;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint32 (*<T64d>) (void) _9;
  struct PCC_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _21;
  uint32 _23;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[58];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 ={v} _5->PCCn[58];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency_20 = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency_18 = get_FTM2_EXT_CLK_Frequency ();

  <bb 5> :
  # Frequency_14 = PHI <Frequency_20(3), Frequency_18(4)>
  _10 = 1074155520B;
  _11 ={v} _10->PCCn[58];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  _21 = Clock_Ip_u32EnableGate[_13];
  Frequency_22 = _21 & Frequency_14;
  _23 = Frequency_22;

  <bb 6> :
<L3>:
  return _23;

}


get_FTM1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6668;
  long unsigned int D.6667;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint32 (*<T64d>) (void) _9;
  struct PCC_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _21;
  uint32 _23;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[57];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 ={v} _5->PCCn[57];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency_20 = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency_18 = get_FTM1_EXT_CLK_Frequency ();

  <bb 5> :
  # Frequency_14 = PHI <Frequency_20(3), Frequency_18(4)>
  _10 = 1074155520B;
  _11 ={v} _10->PCCn[57];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  _21 = Clock_Ip_u32EnableGate[_13];
  Frequency_22 = _21 & Frequency_14;
  _23 = Frequency_22;

  <bb 6> :
<L3>:
  return _23;

}


get_FTM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6662;
  long unsigned int D.6661;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct PCC_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  uint32 (*<T64d>) (void) _9;
  struct PCC_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _21;
  uint32 _23;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[56];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 ={v} _5->PCCn[56];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency_20 = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency_18 = get_FTM0_EXT_CLK_Frequency ();

  <bb 5> :
  # Frequency_14 = PHI <Frequency_20(3), Frequency_18(4)>
  _10 = 1074155520B;
  _11 ={v} _10->PCCn[56];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  _21 = Clock_Ip_u32EnableGate[_13];
  Frequency_22 = _21 & Frequency_14;
  _23 = Frequency_22;

  <bb 6> :
<L3>:
  return _23;

}


get_FLEXCAN2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6656;
  long unsigned int D.6655;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[43];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_FLEXCAN1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6653;
  long unsigned int D.6652;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[37];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_FLEXCAN0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6650;
  long unsigned int D.6649;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[36];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_EWM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6647;
  long unsigned int D.6646;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[97];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_ERM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6644;
  long unsigned int D.6643;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->PLATCGC;
  _3 = _2 >> 3;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_EIM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6641;
  long unsigned int D.6640;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->PLATCGC;
  _3 = _2 >> 4;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_DMAMUX0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6638;
  long unsigned int D.6637;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[33];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_DMA0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6635;
  long unsigned int D.6634;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 ={v} _1->PLATCGC;
  _3 = _2 >> 2;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_CRC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6632;
  long unsigned int D.6631;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[50];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_CMP0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6629;
  long unsigned int D.6628;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _8;
  uint32 _10;

  <bb 2> :
  Frequency_7 = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[115];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  _8 = Clock_Ip_u32EnableGate[_4];
  Frequency_9 = _8 & Frequency_7;
  _10 = Frequency_9;

  <bb 3> :
<L0>:
  return _10;

}


get_CLKOUT0_CLK_Frequency ()
{
  uint32 Frequency;
  const uint32 EnableDivider[2];
  static uint32 (*getFreqType) (void) FreqTableClkOut[16] = {get_SCG_CLKOUT_CLK_Frequency, get_Zero_Frequency, get_SOSCDIV2_CLK_Frequency, get_Zero_Frequency, get_SIRCDIV2_CLK_Frequency, get_Zero_Frequency, get_FIRCDIV2_CLK_Frequency, get_CORE_CLK_Frequency, get_SPLLDIV2_CLK_Frequency, get_BUS_CLK_Frequency, get_LPO_128K_CLK_Frequency, get_Zero_Frequency, get_LPO_CLK_Frequency, get_Zero_Frequency, get_RTC_CLK_Frequency, get_Zero_Frequency};
  uint32 D.6625;
  long unsigned int D.6624;
  long unsigned int D.6623;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct SIM_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  struct SIM_Type * _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _19;
  long unsigned int _21;
  uint32 _23;

  <bb 2> :
  EnableDivider[0] = 0;
  EnableDivider[1] = 4294967295;
  _1 = 1074036736B;
  _2 ={v} _1->CHIPCTL;
  _3 = _2 >> 4;
  _4 = _3 & 15;
  _5 = FreqTableClkOut[_4];
  Frequency_18 = _5 ();
  _6 = 1074036736B;
  _7 ={v} _6->CHIPCTL;
  _8 = _7 >> 11;
  _9 = _8 & 1;
  _19 = EnableDivider[_9];
  Frequency_20 = _19 & Frequency_18;
  _10 = 1074036736B;
  _11 ={v} _10->CHIPCTL;
  _12 = _11 >> 8;
  _13 = _12 & 7;
  _21 = _13 + 1;
  Frequency_22 = Frequency_20 / _21;
  _23 = Frequency_22;
  EnableDivider ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _23;

}


get_ADC1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6621;
  long unsigned int D.6620;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[39];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[39];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_ADC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6618;
  long unsigned int D.6617;
  struct PCC_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  struct PCC_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _13;
  uint32 _15;

  <bb 2> :
  _1 = 1074155520B;
  _2 ={v} _1->PCCn[59];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency_12 = _5 ();
  _6 = 1074155520B;
  _7 ={v} _6->PCCn[59];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  _13 = Clock_Ip_u32EnableGate[_9];
  Frequency_14 = _13 & Frequency_12;
  _15 = Frequency_14;

  <bb 3> :
<L0>:
  return _15;

}


get_FTM3_EXT_CLK_Frequency ()
{
  uint32 D.6615;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->FTMOPT0;
  _3 = _2 >> 30;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_FTM2_EXT_CLK_Frequency ()
{
  uint32 D.6613;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->FTMOPT0;
  _3 = _2 >> 28;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_FTM1_EXT_CLK_Frequency ()
{
  uint32 D.6611;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->FTMOPT0;
  _3 = _2 >> 26;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_FTM0_EXT_CLK_Frequency ()
{
  uint32 D.6609;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->FTMOPT0;
  _3 = _2 >> 24;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_SCG_CLKOUT_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableScg[8] = {get_SLOW_CLK_Frequency, get_SOSC_CLK_Frequency, get_SIRC_CLK_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SPLL_CLK_Frequency, get_Zero_Frequency};
  uint32 D.6607;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->CLKOUTCNFG;
  _3 = _2 >> 24;
  _4 = _3 & 15;
  _5 = FreqTableScg[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_LPO_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableLpo[4] = {get_LPO_128K_CLK_Frequency, get_Zero_Frequency, get_LPO_32K_CLK_Frequency, get_LPO_1K_CLK_Frequency};
  uint32 D.6605;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->LPOCLKS;
  _3 = _2 >> 2;
  _4 = _3 & 3;
  _5 = FreqTableLpo[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_RTC_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableRtc[4] = {get_SOSCDIV1_CLK_Frequency, get_LPO_32K_CLK_Frequency, get_rtc_clkin_Frequency, get_FIRCDIV1_CLK_Frequency};
  uint32 D.6603;
  struct SIM_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074036736B;
  _2 ={v} _1->LPOCLKS;
  _3 = _2 >> 4;
  _4 = _3 & 3;
  _5 = FreqTableRtc[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_SLOW_CLK_Frequency ()
{
  uint32 D.6601;
  long unsigned int _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  uint32 _8;

  <bb 2> :
  _1 = get_CORE_CLK_Frequency ();
  _2 = 1074151424B;
  _3 ={v} _2->CSR;
  _4 = _3 & 15;
  _5 = _4 + 1;
  _8 = _1 / _5;

  <bb 3> :
<L0>:
  return _8;

}


get_BUS_CLK_Frequency ()
{
  uint32 D.6599;
  long unsigned int _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  uint32 _9;

  <bb 2> :
  _1 = get_CORE_CLK_Frequency ();
  _2 = 1074151424B;
  _3 ={v} _2->CSR;
  _4 = _3 >> 4;
  _5 = _4 & 15;
  _6 = _5 + 1;
  _9 = _1 / _6;

  <bb 3> :
<L0>:
  return _9;

}


get_CORE_CLK_Frequency ()
{
  uint32 D.6597;
  long unsigned int _1;
  struct SCG_Type * _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  uint32 _9;

  <bb 2> :
  _1 = get_SCS_CLK_Frequency ();
  _2 = 1074151424B;
  _3 ={v} _2->CSR;
  _4 = _3 >> 16;
  _5 = _4 & 15;
  _6 = _5 + 1;
  _9 = _1 / _6;

  <bb 3> :
<L0>:
  return _9;

}


get_SCS_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableSCS[7] = {get_Zero_Frequency, get_SOSC_CLK_Frequency, get_SIRC_CLK_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SPLL_CLK_Frequency};
  uint32 D.6595;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 (*<T64d>) (void) _5;
  uint32 _8;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->CSR;
  _3 = _2 >> 24;
  _4 = _3 & 15;
  _5 = FreqTableSCS[_4];
  _8 = _5 ();

  <bb 3> :
<L0>:
  return _8;

}


get_rtc_clkin_Frequency ()
{
  uint32 D.6593;
  uint32 _2;

  <bb 2> :
  _2 = Clock_Ip_axExtSignalFreqEntries[3].Frequency;

  <bb 3> :
<L0>:
  return _2;

}


get_tclk2_ref_Frequency ()
{
  uint32 D.6591;
  uint32 _2;

  <bb 2> :
  _2 = Clock_Ip_axExtSignalFreqEntries[2].Frequency;

  <bb 3> :
<L0>:
  return _2;

}


get_tclk1_ref_Frequency ()
{
  uint32 D.6589;
  uint32 _2;

  <bb 2> :
  _2 = Clock_Ip_axExtSignalFreqEntries[1].Frequency;

  <bb 3> :
<L0>:
  return _2;

}


get_tclk0_ref_Frequency ()
{
  uint32 D.6587;
  uint32 _2;

  <bb 2> :
  _2 = Clock_Ip_axExtSignalFreqEntries[0].Frequency;

  <bb 3> :
<L0>:
  return _2;

}


get_LPO_1K_CLK_Frequency ()
{
  uint32 D.6585;
  long unsigned int _1;
  long unsigned int _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  uint32 _9;

  <bb 2> :
  _1 = get_LPO_128K_CLK_Frequency ();
  _2 = _1 >> 7;
  _3 = 1074036736B;
  _4 ={v} _3->LPOCLKS;
  _5 = _4 & 1;
  _6 = Clock_Ip_u32EnableGate[_5];
  _9 = _2 & _6;

  <bb 3> :
<L0>:
  return _9;

}


get_LPO_32K_CLK_Frequency ()
{
  uint32 D.6583;
  long unsigned int _1;
  long unsigned int _2;
  struct SIM_Type * _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  uint32 _10;

  <bb 2> :
  _1 = get_LPO_128K_CLK_Frequency ();
  _2 = _1 >> 2;
  _3 = 1074036736B;
  _4 ={v} _3->LPOCLKS;
  _5 = _4 >> 1;
  _6 = _5 & 1;
  _7 = Clock_Ip_u32EnableGate[_6];
  _10 = _2 & _7;

  <bb 3> :
<L0>:
  return _10;

}


get_SPLLDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.11;
  uint32 D.6577;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  uint32 iftmp.11_7;
  uint32 iftmp.11_11;
  uint32 iftmp.11_13;
  uint32 _14;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SPLLDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue_10 = (uint32) _5;
  if (DivValue_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SPLL_CLK_Frequency ();
  iftmp.11_13 = _6 / DivValue_10;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_11 = 0;

  <bb 5> :
  # iftmp.11_7 = PHI <iftmp.11_13(3), iftmp.11_11(4)>
  _14 = iftmp.11_7;

  <bb 6> :
<L3>:
  return _14;

}


get_SPLLDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.10;
  uint32 D.6571;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  uint32 iftmp.10_6;
  uint32 iftmp.10_10;
  uint32 iftmp.10_12;
  uint32 _13;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SPLLDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue_9 = (uint32) _4;
  if (DivValue_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SPLL_CLK_Frequency ();
  iftmp.10_12 = _5 / DivValue_9;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10_10 = 0;

  <bb 5> :
  # iftmp.10_6 = PHI <iftmp.10_12(3), iftmp.10_10(4)>
  _13 = iftmp.10_6;

  <bb 6> :
<L3>:
  return _13;

}


get_SOSCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.9;
  uint32 D.6565;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  uint32 iftmp.9_7;
  uint32 iftmp.9_11;
  uint32 iftmp.9_13;
  uint32 _14;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SOSCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue_10 = (uint32) _5;
  if (DivValue_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SOSC_CLK_Frequency ();
  iftmp.9_13 = _6 / DivValue_10;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9_11 = 0;

  <bb 5> :
  # iftmp.9_7 = PHI <iftmp.9_13(3), iftmp.9_11(4)>
  _14 = iftmp.9_7;

  <bb 6> :
<L3>:
  return _14;

}


get_SOSCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.8;
  uint32 D.6559;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  uint32 iftmp.8_6;
  uint32 iftmp.8_10;
  uint32 iftmp.8_12;
  uint32 _13;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SOSCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue_9 = (uint32) _4;
  if (DivValue_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SOSC_CLK_Frequency ();
  iftmp.8_12 = _5 / DivValue_9;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_10 = 0;

  <bb 5> :
  # iftmp.8_6 = PHI <iftmp.8_12(3), iftmp.8_10(4)>
  _13 = iftmp.8_6;

  <bb 6> :
<L3>:
  return _13;

}


get_FIRCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.7;
  uint32 D.6553;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  uint32 iftmp.7_7;
  uint32 iftmp.7_11;
  uint32 iftmp.7_13;
  uint32 _14;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->FIRCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue_10 = (uint32) _5;
  if (DivValue_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_FIRC_CLK_Frequency ();
  iftmp.7_13 = _6 / DivValue_10;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_11 = 0;

  <bb 5> :
  # iftmp.7_7 = PHI <iftmp.7_13(3), iftmp.7_11(4)>
  _14 = iftmp.7_7;

  <bb 6> :
<L3>:
  return _14;

}


get_FIRCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.6;
  uint32 D.6547;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  uint32 iftmp.6_6;
  uint32 iftmp.6_10;
  uint32 iftmp.6_12;
  uint32 _13;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->FIRCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue_9 = (uint32) _4;
  if (DivValue_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_FIRC_CLK_Frequency ();
  iftmp.6_12 = _5 / DivValue_9;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_10 = 0;

  <bb 5> :
  # iftmp.6_6 = PHI <iftmp.6_12(3), iftmp.6_10(4)>
  _13 = iftmp.6_6;

  <bb 6> :
<L3>:
  return _13;

}


get_SIRCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.5;
  uint32 D.6541;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  long unsigned int _6;
  uint32 iftmp.5_7;
  uint32 iftmp.5_11;
  uint32 iftmp.5_13;
  uint32 _14;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SIRCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue_10 = (uint32) _5;
  if (DivValue_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SIRC_CLK_Frequency ();
  iftmp.5_13 = _6 / DivValue_10;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_11 = 0;

  <bb 5> :
  # iftmp.5_7 = PHI <iftmp.5_13(3), iftmp.5_11(4)>
  _14 = iftmp.5_7;

  <bb 6> :
<L3>:
  return _14;

}


get_SIRCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.4;
  uint32 D.6535;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  uint32 iftmp.4_6;
  uint32 iftmp.4_10;
  uint32 iftmp.4_12;
  uint32 _13;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SIRCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue_9 = (uint32) _4;
  if (DivValue_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SIRC_CLK_Frequency ();
  iftmp.4_12 = _5 / DivValue_9;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_10 = 0;

  <bb 5> :
  # iftmp.4_6 = PHI <iftmp.4_12(3), iftmp.4_10(4)>
  _13 = iftmp.4_6;

  <bb 6> :
<L3>:
  return _13;

}


get_SPLL_CLK_Frequency ()
{
  static uint32 SpllChecksum = 1572864;
  static uint32 SpllFreq = 160000000;
  uint32 iftmp.3;
  uint32 D.6529;
  long unsigned int D.6528;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int SpllChecksum.1_3;
  struct SCG_Type * _4;
  long unsigned int _5;
  long unsigned int _6;
  struct SCG_Type * _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int SpllFreq.2_10;
  long unsigned int _11;
  struct SCG_Type * _12;
  long unsigned int _13;
  long unsigned int _14;
  uint32 iftmp.3_15;
  long unsigned int _21;
  uint32 iftmp.3_23;
  uint32 iftmp.3_24;
  uint32 _25;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SPLLCFG;
  SpllChecksum.1_3 = SpllChecksum;
  if (_2 != SpllChecksum.1_3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = 1074151424B;
  _5 ={v} _4->SPLLCFG;
  SpllChecksum = _5;
  _6 = PLL_VCO (1074151424B);
  SpllFreq = _6;
  _7 = 1074151424B;
  _8 ={v} _7->SPLLCSR;
  _9 = _8 & 1;
  _21 = Clock_Ip_u32EnableClock[_9];
  SpllFreq.2_10 = SpllFreq;
  _11 = _21 & SpllFreq.2_10;
  SpllFreq = _11;

  <bb 4> :
  _12 = 1074151424B;
  _13 ={v} _12->SPLLCSR;
  _14 = _13 & 16777216;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3_24 = SpllFreq;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3_23 = 0;

  <bb 7> :
  # iftmp.3_15 = PHI <iftmp.3_24(5), iftmp.3_23(6)>
  _25 = iftmp.3_15;

  <bb 8> :
<L5>:
  return _25;

}


get_SIRC_CLK_Frequency ()
{
  uint32 D.6524;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 _6;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SIRCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  _6 = _4 & 8000000;

  <bb 3> :
<L0>:
  return _6;

}


get_SOSC_CLK_Frequency ()
{
  uint32 D.6522;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int Clock_Ip_u32Sosc.0_5;
  uint32 _7;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->SOSCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  Clock_Ip_u32Sosc.0_5 = Clock_Ip_u32Sosc;
  _7 = _4 & Clock_Ip_u32Sosc.0_5;

  <bb 3> :
<L0>:
  return _7;

}


get_FIRC_CLK_Frequency ()
{
  uint32 D.6520;
  struct SCG_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 _6;

  <bb 2> :
  _1 = 1074151424B;
  _2 ={v} _1->FIRCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  _6 = _4 & 48000000;

  <bb 3> :
<L0>:
  return _6;

}


get_LPO_128K_CLK_Frequency ()
{
  uint32 D.6518;
  uint32 _1;

  <bb 2> :
  _1 = 128000;

  <bb 3> :
<L0>:
  return _1;

}


get_Zero_Frequency ()
{
  uint32 D.6516;
  uint32 _1;

  <bb 2> :
  _1 = 0;

  <bb 3> :
<L0>:
  return _1;

}


