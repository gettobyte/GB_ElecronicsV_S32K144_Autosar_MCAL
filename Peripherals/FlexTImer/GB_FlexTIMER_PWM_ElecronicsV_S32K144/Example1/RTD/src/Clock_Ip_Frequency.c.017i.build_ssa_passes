Clock_Ip_GetFreq (Clock_Ip_NameType ClockName)
{
  static uint32 (*getFreqType) (void) FreqTable[87] = {get_Zero_Frequency, get_LPO_128K_CLK_Frequency, get_SIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SOSC_CLK_Frequency, get_SPLL_CLK_Frequency, get_SIRCDIV1_CLK_Frequency, get_SIRCDIV2_CLK_Frequency, get_FIRCDIV1_CLK_Frequency, get_FIRCDIV2_CLK_Frequency, get_SOSCDIV1_CLK_Frequency, get_SOSCDIV2_CLK_Frequency, get_SPLLDIV1_CLK_Frequency, get_SPLLDIV2_CLK_Frequency, get_LPO_32K_CLK_Frequency, get_LPO_1K_CLK_Frequency, get_tclk0_ref_Frequency, get_tclk1_ref_Frequency, get_tclk2_ref_Frequency, get_rtc_clkin_Frequency, get_SCS_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_CORE_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_BUS_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SLOW_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_RTC_CLK_Frequency, get_LPO_CLK_Frequency, get_SCG_CLKOUT_CLK_Frequency, get_FTM0_EXT_CLK_Frequency, get_FTM1_EXT_CLK_Frequency, get_FTM2_EXT_CLK_Frequency, get_FTM3_EXT_CLK_Frequency, 0B, get_ADC0_CLK_Frequency, get_ADC1_CLK_Frequency, get_CLKOUT0_CLK_Frequency, get_CMP0_CLK_Frequency, get_CRC0_CLK_Frequency, get_DMA0_CLK_Frequency, get_DMAMUX0_CLK_Frequency, get_EIM0_CLK_Frequency, get_ERM0_CLK_Frequency, get_EWM0_CLK_Frequency, get_FLEXCAN0_CLK_Frequency, get_FLEXCAN1_CLK_Frequency, get_FLEXCAN2_CLK_Frequency, get_FlexIO_CLK_Frequency, get_FTFC_CLK_Frequency, get_FTM0_CLK_Frequency, get_FTM1_CLK_Frequency, get_FTM2_CLK_Frequency, get_FTM3_CLK_Frequency, get_LPI2C0_CLK_Frequency, get_LPIT0_CLK_Frequency, get_LPSPI0_CLK_Frequency, get_LPSPI1_CLK_Frequency, get_LPSPI2_CLK_Frequency, get_LPTMR0_CLK_Frequency, get_LPUART0_CLK_Frequency, get_LPUART1_CLK_Frequency, get_LPUART2_CLK_Frequency, get_MPU0_CLK_Frequency, get_MSCM0_CLK_Frequency, get_PDB0_CLK_Frequency, get_PDB1_CLK_Frequency, get_PORTA_CLK_Frequency, get_PORTB_CLK_Frequency, get_PORTC_CLK_Frequency, get_PORTD_CLK_Frequency, get_PORTE_CLK_Frequency, get_RTC0_CLK_Frequency, get_TRACE_CLK_Frequency};
  uint32 D.6752;

  <bb 2> :
  _1 = FreqTable[ClockName];
  D.6752 = _1 ();

  <bb 3> :
<L0>:
  return D.6752;

}


Clock_Ip_SetExternalSignalFrequency (Clock_Ip_NameType SignalName, uint32 Frequency)
{
  uint32 Index;

  <bb 2> :
  Index = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = Clock_Ip_axExtSignalFreqEntries[Index].Name;
  if (SignalName == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Clock_Ip_axExtSignalFreqEntries[Index].Frequency = Frequency;
  goto <bb 7>; [INV]

  <bb 5> :
  Index = Index + 1;

  <bb 6> :
  if (Index <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Clock_Ip_SetExternalOscillatorFrequency (Clock_Ip_NameType ExtOscName, uint32 Frequency)
{
  <bb 2> :
  Clock_Ip_u32Sosc = Frequency;
  return;

}


PLL_VCO (const struct SCG_Type * Base)
{
  uint32 Var2;
  uint32 Var1;
  uint32 Fout;
  uint32 Mul;
  uint32 Prediv;
  uint32 Fin;
  uint32 D.6748;

  <bb 2> :
  Fin = get_SOSC_CLK_Frequency ();
  _1 = Base->SPLLCFG;
  _2 = _1 >> 8;
  _3 = _2 & 7;
  _4 = _3 + 1;
  Prediv = _4 << 1;
  _5 = Base->SPLLCFG;
  _6 = _5 >> 16;
  _7 = _6 & 31;
  Mul = _7 + 16;
  Var1 = Mul / Prediv;
  _8 = Var1 * Prediv;
  Var2 = Mul - _8;
  Fout = Var1 * Fin;
  _9 = Fin * Var2;
  _10 = _9 / Prediv;
  Fout = Fout + _10;
  D.6748 = Fout;

  <bb 3> :
<L0>:
  return D.6748;

}


get_TRACE_CLK_Frequency ()
{
  uint32 MulValue;
  uint32 DivValue;
  uint32 Frequency;
  uint32 D.6746;
  long unsigned int D.6745;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->CLKDIV4;
  _3 = _2 >> 28;
  _4 = _3 & 1;
  D.6745 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6745 & Frequency;
  _5 = 1074036736B;
  _6 = _5->CLKDIV4;
  _7 = _6 >> 1;
  _8 = _7 & 7;
  DivValue = _8 + 1;
  _9 = 1074036736B;
  _10 = _9->CLKDIV4;
  _11 = _10 & 1;
  MulValue = _11 + 1;
  _12 = Frequency * MulValue;
  D.6746 = _12 / DivValue;

  <bb 3> :
<L0>:
  return D.6746;

}


get_RTC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6743;
  long unsigned int D.6742;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[61];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6742 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6742 & Frequency;
  D.6743 = Frequency;

  <bb 3> :
<L0>:
  return D.6743;

}


get_PORTE_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6740;
  long unsigned int D.6739;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[77];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6739 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6739 & Frequency;
  D.6740 = Frequency;

  <bb 3> :
<L0>:
  return D.6740;

}


get_PORTD_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6737;
  long unsigned int D.6736;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[76];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6736 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6736 & Frequency;
  D.6737 = Frequency;

  <bb 3> :
<L0>:
  return D.6737;

}


get_PORTC_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6734;
  long unsigned int D.6733;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[75];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6733 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6733 & Frequency;
  D.6734 = Frequency;

  <bb 3> :
<L0>:
  return D.6734;

}


get_PORTB_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6731;
  long unsigned int D.6730;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[74];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6730 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6730 & Frequency;
  D.6731 = Frequency;

  <bb 3> :
<L0>:
  return D.6731;

}


get_PORTA_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6728;
  long unsigned int D.6727;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[73];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6727 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6727 & Frequency;
  D.6728 = Frequency;

  <bb 3> :
<L0>:
  return D.6728;

}


get_PDB1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6725;
  long unsigned int D.6724;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[49];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6724 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6724 & Frequency;
  D.6725 = Frequency;

  <bb 3> :
<L0>:
  return D.6725;

}


get_PDB0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6722;
  long unsigned int D.6721;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[54];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6721 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6721 & Frequency;
  D.6722 = Frequency;

  <bb 3> :
<L0>:
  return D.6722;

}


get_MSCM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6719;
  long unsigned int D.6718;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->PLATCGC;
  _3 = _2 & 1;
  D.6718 = Clock_Ip_u32EnableGate[_3];
  Frequency = D.6718 & Frequency;
  D.6719 = Frequency;

  <bb 3> :
<L0>:
  return D.6719;

}


get_MPU0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6716;
  long unsigned int D.6715;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->PLATCGC;
  _3 = _2 >> 1;
  _4 = _3 & 1;
  D.6715 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6715 & Frequency;
  D.6716 = Frequency;

  <bb 3> :
<L0>:
  return D.6716;

}


get_LPUART2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6713;
  long unsigned int D.6712;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[108];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[108];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6712 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6712 & Frequency;
  D.6713 = Frequency;

  <bb 3> :
<L0>:
  return D.6713;

}


get_LPUART1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6710;
  long unsigned int D.6709;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[107];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[107];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6709 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6709 & Frequency;
  D.6710 = Frequency;

  <bb 3> :
<L0>:
  return D.6710;

}


get_LPUART0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6707;
  long unsigned int D.6706;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[106];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[106];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6706 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6706 & Frequency;
  D.6707 = Frequency;

  <bb 3> :
<L0>:
  return D.6707;

}


get_LPTMR0_CLK_Frequency ()
{
  uint32 MulValue;
  uint32 DivValue;
  uint32 Frequency;
  uint32 D.6704;
  long unsigned int D.6703;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[64];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[64];
  _8 = _7 & 7;
  DivValue = _8 + 1;
  _9 = 1074155520B;
  _10 = _9->PCCn[64];
  _11 = _10 >> 3;
  _12 = _11 & 1;
  MulValue = _12 + 1;
  _13 = 1074155520B;
  _14 = _13->PCCn[64];
  _15 = _14 >> 30;
  _16 = _15 & 1;
  D.6703 = Clock_Ip_u32EnableGate[_16];
  Frequency = D.6703 & Frequency;
  _17 = Frequency * MulValue;
  D.6704 = _17 / DivValue;

  <bb 3> :
<L0>:
  return D.6704;

}


get_LPSPI2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6701;
  long unsigned int D.6700;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[45];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[45];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6700 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6700 & Frequency;
  D.6701 = Frequency;

  <bb 3> :
<L0>:
  return D.6701;

}


get_LPSPI1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6698;
  long unsigned int D.6697;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[45];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[45];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6697 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6697 & Frequency;
  D.6698 = Frequency;

  <bb 3> :
<L0>:
  return D.6698;

}


get_LPSPI0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6695;
  long unsigned int D.6694;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[44];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[44];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6694 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6694 & Frequency;
  D.6695 = Frequency;

  <bb 3> :
<L0>:
  return D.6695;

}


get_LPIT0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6692;
  long unsigned int D.6691;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[55];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[55];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6691 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6691 & Frequency;
  D.6692 = Frequency;

  <bb 3> :
<L0>:
  return D.6692;

}


get_LPI2C0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6689;
  long unsigned int D.6688;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[102];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[102];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6688 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6688 & Frequency;
  D.6689 = Frequency;

  <bb 3> :
<L0>:
  return D.6689;

}


get_FTFC_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6686;
  long unsigned int D.6685;

  <bb 2> :
  Frequency = get_SLOW_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[32];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6685 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6685 & Frequency;
  D.6686 = Frequency;

  <bb 3> :
<L0>:
  return D.6686;

}


get_FlexIO_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6683;
  long unsigned int D.6682;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[90];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[90];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6682 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6682 & Frequency;
  D.6683 = Frequency;

  <bb 3> :
<L0>:
  return D.6683;

}


get_FTM3_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6680;
  long unsigned int D.6679;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[38];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 = _5->PCCn[38];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency = get_FTM3_EXT_CLK_Frequency ();

  <bb 5> :
  _10 = 1074155520B;
  _11 = _10->PCCn[38];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  D.6679 = Clock_Ip_u32EnableGate[_13];
  Frequency = D.6679 & Frequency;
  D.6680 = Frequency;

  <bb 6> :
<L3>:
  return D.6680;

}


get_FTM2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6674;
  long unsigned int D.6673;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[58];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 = _5->PCCn[58];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency = get_FTM2_EXT_CLK_Frequency ();

  <bb 5> :
  _10 = 1074155520B;
  _11 = _10->PCCn[58];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  D.6673 = Clock_Ip_u32EnableGate[_13];
  Frequency = D.6673 & Frequency;
  D.6674 = Frequency;

  <bb 6> :
<L3>:
  return D.6674;

}


get_FTM1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6668;
  long unsigned int D.6667;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[57];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 = _5->PCCn[57];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency = get_FTM1_EXT_CLK_Frequency ();

  <bb 5> :
  _10 = 1074155520B;
  _11 = _10->PCCn[57];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  D.6667 = Clock_Ip_u32EnableGate[_13];
  Frequency = D.6667 & Frequency;
  D.6668 = Frequency;

  <bb 6> :
<L3>:
  return D.6668;

}


get_FTM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6662;
  long unsigned int D.6661;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[56];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = 1074155520B;
  _6 = _5->PCCn[56];
  _7 = _6 >> 24;
  _8 = _7 & 7;
  _9 = Clock_Ip_apfFreqTablePcs1[_8];
  Frequency = _9 ();
  goto <bb 5>; [INV]

  <bb 4> :
  Frequency = get_FTM0_EXT_CLK_Frequency ();

  <bb 5> :
  _10 = 1074155520B;
  _11 = _10->PCCn[56];
  _12 = _11 >> 30;
  _13 = _12 & 1;
  D.6661 = Clock_Ip_u32EnableGate[_13];
  Frequency = D.6661 & Frequency;
  D.6662 = Frequency;

  <bb 6> :
<L3>:
  return D.6662;

}


get_FLEXCAN2_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6656;
  long unsigned int D.6655;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[43];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6655 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6655 & Frequency;
  D.6656 = Frequency;

  <bb 3> :
<L0>:
  return D.6656;

}


get_FLEXCAN1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6653;
  long unsigned int D.6652;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[37];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6652 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6652 & Frequency;
  D.6653 = Frequency;

  <bb 3> :
<L0>:
  return D.6653;

}


get_FLEXCAN0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6650;
  long unsigned int D.6649;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[36];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6649 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6649 & Frequency;
  D.6650 = Frequency;

  <bb 3> :
<L0>:
  return D.6650;

}


get_EWM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6647;
  long unsigned int D.6646;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[97];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6646 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6646 & Frequency;
  D.6647 = Frequency;

  <bb 3> :
<L0>:
  return D.6647;

}


get_ERM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6644;
  long unsigned int D.6643;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->PLATCGC;
  _3 = _2 >> 3;
  _4 = _3 & 1;
  D.6643 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6643 & Frequency;
  D.6644 = Frequency;

  <bb 3> :
<L0>:
  return D.6644;

}


get_EIM0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6641;
  long unsigned int D.6640;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->PLATCGC;
  _3 = _2 >> 4;
  _4 = _3 & 1;
  D.6640 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6640 & Frequency;
  D.6641 = Frequency;

  <bb 3> :
<L0>:
  return D.6641;

}


get_DMAMUX0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6638;
  long unsigned int D.6637;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[33];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6637 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6637 & Frequency;
  D.6638 = Frequency;

  <bb 3> :
<L0>:
  return D.6638;

}


get_DMA0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6635;
  long unsigned int D.6634;

  <bb 2> :
  Frequency = get_CORE_CLK_Frequency ();
  _1 = 1074036736B;
  _2 = _1->PLATCGC;
  _3 = _2 >> 2;
  _4 = _3 & 1;
  D.6634 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6634 & Frequency;
  D.6635 = Frequency;

  <bb 3> :
<L0>:
  return D.6635;

}


get_CRC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6632;
  long unsigned int D.6631;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[50];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6631 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6631 & Frequency;
  D.6632 = Frequency;

  <bb 3> :
<L0>:
  return D.6632;

}


get_CMP0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6629;
  long unsigned int D.6628;

  <bb 2> :
  Frequency = get_BUS_CLK_Frequency ();
  _1 = 1074155520B;
  _2 = _1->PCCn[115];
  _3 = _2 >> 30;
  _4 = _3 & 1;
  D.6628 = Clock_Ip_u32EnableGate[_4];
  Frequency = D.6628 & Frequency;
  D.6629 = Frequency;

  <bb 3> :
<L0>:
  return D.6629;

}


get_CLKOUT0_CLK_Frequency ()
{
  uint32 Frequency;
  const uint32 EnableDivider[2];
  static uint32 (*getFreqType) (void) FreqTableClkOut[16] = {get_SCG_CLKOUT_CLK_Frequency, get_Zero_Frequency, get_SOSCDIV2_CLK_Frequency, get_Zero_Frequency, get_SIRCDIV2_CLK_Frequency, get_Zero_Frequency, get_FIRCDIV2_CLK_Frequency, get_CORE_CLK_Frequency, get_SPLLDIV2_CLK_Frequency, get_BUS_CLK_Frequency, get_LPO_128K_CLK_Frequency, get_Zero_Frequency, get_LPO_CLK_Frequency, get_Zero_Frequency, get_RTC_CLK_Frequency, get_Zero_Frequency};
  uint32 D.6625;
  long unsigned int D.6624;
  long unsigned int D.6623;

  <bb 2> :
  EnableDivider[0] = 0;
  EnableDivider[1] = 4294967295;
  _1 = 1074036736B;
  _2 = _1->CHIPCTL;
  _3 = _2 >> 4;
  _4 = _3 & 15;
  _5 = FreqTableClkOut[_4];
  Frequency = _5 ();
  _6 = 1074036736B;
  _7 = _6->CHIPCTL;
  _8 = _7 >> 11;
  _9 = _8 & 1;
  D.6623 = EnableDivider[_9];
  Frequency = D.6623 & Frequency;
  _10 = 1074036736B;
  _11 = _10->CHIPCTL;
  _12 = _11 >> 8;
  _13 = _12 & 7;
  D.6624 = _13 + 1;
  Frequency = Frequency / D.6624;
  D.6625 = Frequency;
  EnableDivider = {CLOBBER};

  <bb 3> :
<L1>:
  return D.6625;

}


get_ADC1_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6621;
  long unsigned int D.6620;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[39];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[39];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6620 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6620 & Frequency;
  D.6621 = Frequency;

  <bb 3> :
<L0>:
  return D.6621;

}


get_ADC0_CLK_Frequency ()
{
  uint32 Frequency;
  uint32 D.6618;
  long unsigned int D.6617;

  <bb 2> :
  _1 = 1074155520B;
  _2 = _1->PCCn[59];
  _3 = _2 >> 24;
  _4 = _3 & 7;
  _5 = Clock_Ip_apfFreqTablePcs2[_4];
  Frequency = _5 ();
  _6 = 1074155520B;
  _7 = _6->PCCn[59];
  _8 = _7 >> 30;
  _9 = _8 & 1;
  D.6617 = Clock_Ip_u32EnableGate[_9];
  Frequency = D.6617 & Frequency;
  D.6618 = Frequency;

  <bb 3> :
<L0>:
  return D.6618;

}


get_FTM3_EXT_CLK_Frequency ()
{
  uint32 D.6615;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->FTMOPT0;
  _3 = _2 >> 30;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  D.6615 = _5 ();

  <bb 3> :
<L0>:
  return D.6615;

}


get_FTM2_EXT_CLK_Frequency ()
{
  uint32 D.6613;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->FTMOPT0;
  _3 = _2 >> 28;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  D.6613 = _5 ();

  <bb 3> :
<L0>:
  return D.6613;

}


get_FTM1_EXT_CLK_Frequency ()
{
  uint32 D.6611;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->FTMOPT0;
  _3 = _2 >> 26;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  D.6611 = _5 ();

  <bb 3> :
<L0>:
  return D.6611;

}


get_FTM0_EXT_CLK_Frequency ()
{
  uint32 D.6609;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->FTMOPT0;
  _3 = _2 >> 24;
  _4 = _3 & 3;
  _5 = Clock_Ip_apfFreqTableSimFtm[_4];
  D.6609 = _5 ();

  <bb 3> :
<L0>:
  return D.6609;

}


get_SCG_CLKOUT_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableScg[8] = {get_SLOW_CLK_Frequency, get_SOSC_CLK_Frequency, get_SIRC_CLK_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SPLL_CLK_Frequency, get_Zero_Frequency};
  uint32 D.6607;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->CLKOUTCNFG;
  _3 = _2 >> 24;
  _4 = _3 & 15;
  _5 = FreqTableScg[_4];
  D.6607 = _5 ();

  <bb 3> :
<L0>:
  return D.6607;

}


get_LPO_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableLpo[4] = {get_LPO_128K_CLK_Frequency, get_Zero_Frequency, get_LPO_32K_CLK_Frequency, get_LPO_1K_CLK_Frequency};
  uint32 D.6605;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->LPOCLKS;
  _3 = _2 >> 2;
  _4 = _3 & 3;
  _5 = FreqTableLpo[_4];
  D.6605 = _5 ();

  <bb 3> :
<L0>:
  return D.6605;

}


get_RTC_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableRtc[4] = {get_SOSCDIV1_CLK_Frequency, get_LPO_32K_CLK_Frequency, get_rtc_clkin_Frequency, get_FIRCDIV1_CLK_Frequency};
  uint32 D.6603;

  <bb 2> :
  _1 = 1074036736B;
  _2 = _1->LPOCLKS;
  _3 = _2 >> 4;
  _4 = _3 & 3;
  _5 = FreqTableRtc[_4];
  D.6603 = _5 ();

  <bb 3> :
<L0>:
  return D.6603;

}


get_SLOW_CLK_Frequency ()
{
  uint32 D.6601;

  <bb 2> :
  _1 = get_CORE_CLK_Frequency ();
  _2 = 1074151424B;
  _3 = _2->CSR;
  _4 = _3 & 15;
  _5 = _4 + 1;
  D.6601 = _1 / _5;

  <bb 3> :
<L0>:
  return D.6601;

}


get_BUS_CLK_Frequency ()
{
  uint32 D.6599;

  <bb 2> :
  _1 = get_CORE_CLK_Frequency ();
  _2 = 1074151424B;
  _3 = _2->CSR;
  _4 = _3 >> 4;
  _5 = _4 & 15;
  _6 = _5 + 1;
  D.6599 = _1 / _6;

  <bb 3> :
<L0>:
  return D.6599;

}


get_CORE_CLK_Frequency ()
{
  uint32 D.6597;

  <bb 2> :
  _1 = get_SCS_CLK_Frequency ();
  _2 = 1074151424B;
  _3 = _2->CSR;
  _4 = _3 >> 16;
  _5 = _4 & 15;
  _6 = _5 + 1;
  D.6597 = _1 / _6;

  <bb 3> :
<L0>:
  return D.6597;

}


get_SCS_CLK_Frequency ()
{
  static uint32 (*getFreqType) (void) FreqTableSCS[7] = {get_Zero_Frequency, get_SOSC_CLK_Frequency, get_SIRC_CLK_Frequency, get_FIRC_CLK_Frequency, get_Zero_Frequency, get_Zero_Frequency, get_SPLL_CLK_Frequency};
  uint32 D.6595;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->CSR;
  _3 = _2 >> 24;
  _4 = _3 & 15;
  _5 = FreqTableSCS[_4];
  D.6595 = _5 ();

  <bb 3> :
<L0>:
  return D.6595;

}


get_rtc_clkin_Frequency ()
{
  uint32 D.6593;

  <bb 2> :
  D.6593 = Clock_Ip_axExtSignalFreqEntries[3].Frequency;

  <bb 3> :
<L0>:
  return D.6593;

}


get_tclk2_ref_Frequency ()
{
  uint32 D.6591;

  <bb 2> :
  D.6591 = Clock_Ip_axExtSignalFreqEntries[2].Frequency;

  <bb 3> :
<L0>:
  return D.6591;

}


get_tclk1_ref_Frequency ()
{
  uint32 D.6589;

  <bb 2> :
  D.6589 = Clock_Ip_axExtSignalFreqEntries[1].Frequency;

  <bb 3> :
<L0>:
  return D.6589;

}


get_tclk0_ref_Frequency ()
{
  uint32 D.6587;

  <bb 2> :
  D.6587 = Clock_Ip_axExtSignalFreqEntries[0].Frequency;

  <bb 3> :
<L0>:
  return D.6587;

}


get_LPO_1K_CLK_Frequency ()
{
  uint32 D.6585;

  <bb 2> :
  _1 = get_LPO_128K_CLK_Frequency ();
  _2 = _1 >> 7;
  _3 = 1074036736B;
  _4 = _3->LPOCLKS;
  _5 = _4 & 1;
  _6 = Clock_Ip_u32EnableGate[_5];
  D.6585 = _2 & _6;

  <bb 3> :
<L0>:
  return D.6585;

}


get_LPO_32K_CLK_Frequency ()
{
  uint32 D.6583;

  <bb 2> :
  _1 = get_LPO_128K_CLK_Frequency ();
  _2 = _1 >> 2;
  _3 = 1074036736B;
  _4 = _3->LPOCLKS;
  _5 = _4 >> 1;
  _6 = _5 & 1;
  _7 = Clock_Ip_u32EnableGate[_6];
  D.6583 = _2 & _7;

  <bb 3> :
<L0>:
  return D.6583;

}


get_SPLLDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.11;
  uint32 D.6577;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SPLLDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue = (uint32) _5;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SPLL_CLK_Frequency ();
  iftmp.11 = _6 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11 = 0;

  <bb 5> :
  D.6577 = iftmp.11;

  <bb 6> :
<L3>:
  return D.6577;

}


get_SPLLDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.10;
  uint32 D.6571;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SPLLDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue = (uint32) _4;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SPLL_CLK_Frequency ();
  iftmp.10 = _5 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10 = 0;

  <bb 5> :
  D.6571 = iftmp.10;

  <bb 6> :
<L3>:
  return D.6571;

}


get_SOSCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.9;
  uint32 D.6565;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SOSCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue = (uint32) _5;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SOSC_CLK_Frequency ();
  iftmp.9 = _6 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9 = 0;

  <bb 5> :
  D.6565 = iftmp.9;

  <bb 6> :
<L3>:
  return D.6565;

}


get_SOSCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.8;
  uint32 D.6559;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SOSCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue = (uint32) _4;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SOSC_CLK_Frequency ();
  iftmp.8 = _5 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8 = 0;

  <bb 5> :
  D.6559 = iftmp.8;

  <bb 6> :
<L3>:
  return D.6559;

}


get_FIRCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.7;
  uint32 D.6553;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->FIRCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue = (uint32) _5;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_FIRC_CLK_Frequency ();
  iftmp.7 = _6 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 0;

  <bb 5> :
  D.6553 = iftmp.7;

  <bb 6> :
<L3>:
  return D.6553;

}


get_FIRCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.6;
  uint32 D.6547;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->FIRCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue = (uint32) _4;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_FIRC_CLK_Frequency ();
  iftmp.6 = _5 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6 = 0;

  <bb 5> :
  D.6547 = iftmp.6;

  <bb 6> :
<L3>:
  return D.6547;

}


get_SIRCDIV2_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.5;
  uint32 D.6541;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SIRCDIV;
  _3 = _2 >> 8;
  _4 = _3 & 7;
  _5 = Clock_Ip_au8DividerMappingValue[_4];
  DivValue = (uint32) _5;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = get_SIRC_CLK_Frequency ();
  iftmp.5 = _6 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = 0;

  <bb 5> :
  D.6541 = iftmp.5;

  <bb 6> :
<L3>:
  return D.6541;

}


get_SIRCDIV1_CLK_Frequency ()
{
  uint32 DivValue;
  uint32 iftmp.4;
  uint32 D.6535;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SIRCDIV;
  _3 = _2 & 7;
  _4 = Clock_Ip_au8DividerMappingValue[_3];
  DivValue = (uint32) _4;
  if (DivValue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = get_SIRC_CLK_Frequency ();
  iftmp.4 = _5 / DivValue;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4 = 0;

  <bb 5> :
  D.6535 = iftmp.4;

  <bb 6> :
<L3>:
  return D.6535;

}


get_SPLL_CLK_Frequency ()
{
  static uint32 SpllChecksum = 1572864;
  static uint32 SpllFreq = 160000000;
  uint32 iftmp.3;
  uint32 D.6529;
  long unsigned int D.6528;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SPLLCFG;
  SpllChecksum.1_3 = SpllChecksum;
  if (_2 != SpllChecksum.1_3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = 1074151424B;
  _5 = _4->SPLLCFG;
  SpllChecksum = _5;
  _6 = PLL_VCO (1074151424B);
  SpllFreq = _6;
  _7 = 1074151424B;
  _8 = _7->SPLLCSR;
  _9 = _8 & 1;
  D.6528 = Clock_Ip_u32EnableClock[_9];
  SpllFreq.2_10 = SpllFreq;
  _11 = D.6528 & SpllFreq.2_10;
  SpllFreq = _11;

  <bb 4> :
  _12 = 1074151424B;
  _13 = _12->SPLLCSR;
  _14 = _13 & 16777216;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3 = SpllFreq;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3 = 0;

  <bb 7> :
  D.6529 = iftmp.3;

  <bb 8> :
<L5>:
  return D.6529;

}


get_SIRC_CLK_Frequency ()
{
  uint32 D.6524;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SIRCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  D.6524 = _4 & 8000000;

  <bb 3> :
<L0>:
  return D.6524;

}


get_SOSC_CLK_Frequency ()
{
  uint32 D.6522;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->SOSCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  Clock_Ip_u32Sosc.0_5 = Clock_Ip_u32Sosc;
  D.6522 = _4 & Clock_Ip_u32Sosc.0_5;

  <bb 3> :
<L0>:
  return D.6522;

}


get_FIRC_CLK_Frequency ()
{
  uint32 D.6520;

  <bb 2> :
  _1 = 1074151424B;
  _2 = _1->FIRCCSR;
  _3 = _2 & 1;
  _4 = Clock_Ip_u32EnableClock[_3];
  D.6520 = _4 & 48000000;

  <bb 3> :
<L0>:
  return D.6520;

}


get_LPO_128K_CLK_Frequency ()
{
  uint32 D.6518;

  <bb 2> :
  D.6518 = 128000;

  <bb 3> :
<L0>:
  return D.6518;

}


get_Zero_Frequency ()
{
  uint32 D.6516;

  <bb 2> :
  D.6516 = 0;

  <bb 3> :
<L0>:
  return D.6516;

}


