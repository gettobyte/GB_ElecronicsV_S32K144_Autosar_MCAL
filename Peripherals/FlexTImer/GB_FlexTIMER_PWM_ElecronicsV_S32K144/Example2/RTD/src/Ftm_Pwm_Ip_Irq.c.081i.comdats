FTM_0_CH_2_CH_3_ISR ()
{
  const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase;
  uint8 ChfStatus;
  uint8 ChanneId;
  uint8 InstanceId;
  uint8 iftmp.13;
  int _1;
  _Bool _2;
  unsigned char ChanneId.14_3;
  uint8 iftmp.13_5;
  uint8 iftmp.13_15;
  uint8 iftmp.13_16;

  <bb 2> :
  InstanceId_8 = 0;
  ChanneId_9 = 2;
  _1 = (int) InstanceId_8;
  FtmBase_11 = Ftm_Pwm_Ip_aFtmBase[_1];
  ChanneId_12 = 2;
  goto <bb 9>; [INV]

  <bb 3> :
  _2 = Ftm_Pwm_Ip_HasChnEventOccurred (FtmBase_11, ChanneId_4);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13_16 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.13_15 = 0;

  <bb 6> :
  # iftmp.13_5 = PHI <iftmp.13_16(4), iftmp.13_15(5)>
  ChfStatus_17 = iftmp.13_5;
  if (ChfStatus_17 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_ProcessCommonInterrupt (InstanceId_8, ChanneId_4);

  <bb 8> :
  ChanneId.14_3 = ChanneId_4;
  ChanneId_19 = ChanneId.14_3 + 1;

  <bb 9> :
  # ChanneId_4 = PHI <ChanneId_12(2), ChanneId_19(8)>
  if (ChanneId_4 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  __asm__ __volatile__(" DSB");
  return;

}


FTM_0_CH_0_CH_1_ISR ()
{
  const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase;
  uint8 ChfStatus;
  uint8 ChanneId;
  uint8 InstanceId;
  uint8 iftmp.11;
  int _1;
  _Bool _2;
  unsigned char ChanneId.12_3;
  uint8 iftmp.11_5;
  uint8 iftmp.11_15;
  uint8 iftmp.11_16;

  <bb 2> :
  InstanceId_8 = 0;
  ChanneId_9 = 0;
  _1 = (int) InstanceId_8;
  FtmBase_11 = Ftm_Pwm_Ip_aFtmBase[_1];
  ChanneId_12 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _2 = Ftm_Pwm_Ip_HasChnEventOccurred (FtmBase_11, ChanneId_4);
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_16 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.11_15 = 0;

  <bb 6> :
  # iftmp.11_5 = PHI <iftmp.11_16(4), iftmp.11_15(5)>
  ChfStatus_17 = iftmp.11_5;
  if (ChfStatus_17 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_ProcessCommonInterrupt (InstanceId_8, ChanneId_4);

  <bb 8> :
  ChanneId.12_3 = ChanneId_4;
  ChanneId_19 = ChanneId.12_3 + 1;

  <bb 9> :
  # ChanneId_4 = PHI <ChanneId_12(2), ChanneId_19(8)>
  if (ChanneId_4 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  __asm__ __volatile__(" DSB");
  return;

}


FTM_0_OVF_ISR ()
{
  const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase;
  uint8 TofStatus;
  uint8 InstanceId;
  uint8 iftmp.10;
  int _1;
  _Bool _2;
  uint8 iftmp.10_3;
  uint8 iftmp.10_9;
  uint8 iftmp.10_10;

  <bb 2> :
  InstanceId_5 = 0;
  _1 = (int) InstanceId_5;
  FtmBase_7 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = Ftm_Pwm_Ip_GetTimerOverflow (FtmBase_7);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.10_10 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10_9 = 0;

  <bb 5> :
  # iftmp.10_3 = PHI <iftmp.10_10(3), iftmp.10_9(4)>
  TofStatus_11 = iftmp.10_3;
  if (TofStatus_11 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Ftm_Pwm_Ip_ProcessTofInterrupt (InstanceId_5);

  <bb 7> :
  __asm__ __volatile__(" DSB");
  return;

}


Ftm_Pwm_Ip_ProcessCommonInterrupt (uint8 Instance, uint8 HwChannel)
{
  uint8 ChfStatus;
  uint8 ChieStatus;
  Ftm_Pwm_Ip_EdgeInterruptType ChEdgeState;
  struct Ftm_Pwm_Ip_HwAddrType * FtmBase;
  uint8 iftmp.9;
  uint8 iftmp.8;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  void (*<Te3>) (void *) _9;
  int _10;
  int _11;
  void (*<Te3>) (void *) _12;
  int _13;
  int _14;
  void * _15;
  uint8 iftmp.8_16;
  uint8 iftmp.9_17;
  uint8 iftmp.8_24;
  uint8 iftmp.8_25;
  uint8 iftmp.9_28;
  uint8 iftmp.9_29;

  <bb 2> :
  _1 = (int) Instance_19(D);
  FtmBase_21 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = Ftm_Pwm_Ip_IsChnIntEnabled (FtmBase_21, HwChannel_22(D));
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8_25 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_24 = 0;

  <bb 5> :
  # iftmp.8_16 = PHI <iftmp.8_25(3), iftmp.8_24(4)>
  ChieStatus_26 = iftmp.8_16;
  _3 = Ftm_Pwm_Ip_HasChnEventOccurred (FtmBase_21, HwChannel_22(D));
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.9_29 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.9_28 = 0;

  <bb 8> :
  # iftmp.9_17 = PHI <iftmp.9_29(6), iftmp.9_28(7)>
  ChfStatus_30 = iftmp.9_17;
  _4 = (int) Instance_19(D);
  _5 = (int) HwChannel_22(D);
  _6 = Ftm_Pwm_Ip_aNotifIrq[_4][_5];
  ChEdgeState_31 = _6 & 1;
  Ftm_Pwm_Ip_ClearChnEventFlag (FtmBase_21, HwChannel_22(D));
  if (ChieStatus_26 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  if (ChfStatus_30 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  if (ChEdgeState_31 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = (int) Instance_19(D);
  _8 = (int) HwChannel_22(D);
  _9 = Ftm_Pwm_Ip_aChIrqCallbacks[_7][_8].FunctionCallback;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _10 = (int) Instance_19(D);
  _11 = (int) HwChannel_22(D);
  _12 = Ftm_Pwm_Ip_aChIrqCallbacks[_10][_11].FunctionCallback;
  _13 = (int) Instance_19(D);
  _14 = (int) HwChannel_22(D);
  _15 = Ftm_Pwm_Ip_aChIrqCallbacks[_13][_14].CbParam;
  _12 (_15);

  <bb 13> :
  return;

}


Ftm_Pwm_Ip_ProcessTofInterrupt (uint8 Instance)
{
  uint8 Index;
  Ftm_Pwm_Ip_EdgeInterruptType TofNoEdgeState;
  Ftm_Pwm_Ip_EdgeInterruptType TofState;
  uint8 TofStatus;
  uint8 ToieStatus;
  struct Ftm_Pwm_Ip_HwAddrType * FtmBase;
  uint8 iftmp.6;
  uint8 iftmp.5;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  void (*<Te3>) (void *) _11;
  int _12;
  void (*<Te3>) (void *) _13;
  int _14;
  void * _15;
  unsigned char Index.7_16;
  uint8 iftmp.5_18;
  uint8 iftmp.6_19;
  uint8 iftmp.5_28;
  uint8 iftmp.5_29;
  uint8 iftmp.6_32;
  uint8 iftmp.6_33;

  <bb 2> :
  _1 = (int) Instance_23(D);
  FtmBase_25 = Ftm_Pwm_Ip_aFtmBase[_1];
  Ftm_Pwm_Ip_ProcessErrata (Instance_23(D));
  _2 = Ftm_Pwm_Ip_IsOverflowIntEnabled (FtmBase_25);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_29 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_28 = 0;

  <bb 5> :
  # iftmp.5_18 = PHI <iftmp.5_29(3), iftmp.5_28(4)>
  ToieStatus_30 = iftmp.5_18;
  _3 = Ftm_Pwm_Ip_GetTimerOverflow (FtmBase_25);
  if (_3 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.6_33 = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.6_32 = 0;

  <bb 8> :
  # iftmp.6_19 = PHI <iftmp.6_33(6), iftmp.6_32(7)>
  TofStatus_34 = iftmp.6_19;
  Ftm_Pwm_Ip_ClearTimerOverflow (FtmBase_25);
  if (ToieStatus_30 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  if (TofStatus_34 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 10> :
  Index_36 = 0;
  goto <bb 16>; [INV]

  <bb 11> :
  _4 = (int) Instance_23(D);
  _5 = (int) Index_17;
  _6 = Ftm_Pwm_Ip_aNotifIrq[_4][_5];
  TofState_37 = _6 & 2;
  _7 = (int) Instance_23(D);
  _8 = (int) Index_17;
  _9 = Ftm_Pwm_Ip_aNotifIrq[_7][_8];
  TofNoEdgeState_38 = _9 & 4;
  if (TofState_37 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 12> :
  if (TofNoEdgeState_38 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _10 = (int) Instance_23(D);
  _11 = Ftm_Pwm_Ip_pOverflowIrqCallback[_10].FunctionCallback;
  if (_11 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _12 = (int) Instance_23(D);
  _13 = Ftm_Pwm_Ip_pOverflowIrqCallback[_12].FunctionCallback;
  _14 = (int) Instance_23(D);
  _15 = Ftm_Pwm_Ip_pOverflowIrqCallback[_14].CbParam;
  _13 (_15);

  <bb 15> :
  Index.7_16 = Index_17;
  Index_40 = Index.7_16 + 1;

  <bb 16> :
  # Index_17 = PHI <Index_36(10), Index_40(15)>
  if (Index_17 <= 7)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  return;

}


Ftm_Pwm_Ip_ProcessErrata (uint8 Instance)
{
  uint32 TemRegVal;
  boolean FaultStatus;
  struct Ftm_Pwm_Ip_HwAddrType * FtmBase;
  long unsigned int D.6440;
  long unsigned int D.6436;
  int _1;
  int _2;
  int _3;
  signed char _4;
  unsigned char Ftm_Pwm_Ip_u8FaultCheck.0_5;
  signed char Ftm_Pwm_Ip_u8FaultCheck.1_6;
  signed char _7;
  unsigned char _8;
  short unsigned int _9;
  int _10;
  unsigned int _11;
  unsigned char _12;
  unsigned char Ftm_Pwm_Ip_u8FaultCheck.2_13;
  unsigned char _14;
  short unsigned int _15;
  short unsigned int _16;
  short unsigned int _17;
  int _18;
  unsigned int _19;
  unsigned char _20;
  unsigned char _21;
  unsigned char Ftm_Pwm_Ip_u8FaultCheck.3_22;
  unsigned char _23;
  long unsigned int _37;
  long unsigned int _46;

  <bb 2> :
  _1 = (int) Instance_25(D);
  FtmBase_27 = Ftm_Pwm_Ip_aFtmBase[_1];
  FaultStatus_29 = Ftm_Pwm_Ip_GetFaultDetectionFlag (FtmBase_27);
  if (FaultStatus_29 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (int) Instance_25(D);
  _3 = 1 << _2;
  _4 = (signed char) _3;
  Ftm_Pwm_Ip_u8FaultCheck.0_5 = Ftm_Pwm_Ip_u8FaultCheck;
  Ftm_Pwm_Ip_u8FaultCheck.1_6 = (signed char) Ftm_Pwm_Ip_u8FaultCheck.0_5;
  _7 = _4 | Ftm_Pwm_Ip_u8FaultCheck.1_6;
  _8 = (unsigned char) _7;
  Ftm_Pwm_Ip_u8FaultCheck = _8;
  _9 = Ftm_Pwm_Ip_GetSoftwareOutputControl (FtmBase_27);
  TemRegVal_44 = (uint32) _9;
  _46 = Ftm_Pwm_Ip_GetOutputMask (FtmBase_27);
  TemRegVal_47 = _46 | TemRegVal_44;
  Ftm_Pwm_Ip_SetOutmaskReg (FtmBase_27, TemRegVal_47);
  TemRegVal_50 = Ftm_Pwm_Ip_GetFaultModeStatus (FtmBase_27);
  Ftm_Pwm_Ip_SetFaultModeStatus (FtmBase_27, 0);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (FtmBase_27, 1);
  goto <bb 6>; [INV]

  <bb 4> :
  _10 = (int) Instance_25(D);
  _11 = 1 << _10;
  _12 = (unsigned char) _11;
  Ftm_Pwm_Ip_u8FaultCheck.2_13 = Ftm_Pwm_Ip_u8FaultCheck;
  _14 = _12 & Ftm_Pwm_Ip_u8FaultCheck.2_13;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _15 = Ftm_Pwm_Ip_GetSoftwareOutputControl (FtmBase_27);
  TemRegVal_31 = (uint32) _15;
  Ftm_Pwm_Ip_SoftwareOutputControl (FtmBase_27, 0);
  _16 = (short unsigned int) TemRegVal_31;
  Ftm_Pwm_Ip_SoftwareOutputControl (FtmBase_27, _16);
  TemRegVal_35 = Ftm_Pwm_Ip_GetOutputMask (FtmBase_27);
  _17 = Ftm_Pwm_Ip_GetSoftwareOutputControl (FtmBase_27);
  _37 = (long unsigned int) _17;
  TemRegVal_38 = _37 & TemRegVal_35;
  Ftm_Pwm_Ip_ClearOutmaskReg (FtmBase_27, TemRegVal_38);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (FtmBase_27, 1);
  _18 = (int) Instance_25(D);
  _19 = 1 << _18;
  _20 = (unsigned char) _19;
  _21 = ~_20;
  Ftm_Pwm_Ip_u8FaultCheck.3_22 = Ftm_Pwm_Ip_u8FaultCheck;
  _23 = _21 & Ftm_Pwm_Ip_u8FaultCheck.3_22;
  Ftm_Pwm_Ip_u8FaultCheck = _23;

  <bb 6> :
  return;

}


Ftm_Pwm_Ip_SetFaultModeStatus (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, uint32 Value)
{
  <bb 2> :
  FtmBase_2(D)->FMS ={v} Value_3(D);
  return;

}


Ftm_Pwm_Ip_GetFaultModeStatus (const struct Ftm_Pwm_Ip_HwAddrType * FtmBase)
{
  uint32 D.6443;
  uint32 _3;

  <bb 2> :
  _3 ={v} FtmBase_2(D)->FMS;

  <bb 3> :
<L0>:
  return _3;

}


Ftm_Pwm_Ip_GetFaultDetectionFlag (const struct Ftm_Pwm_Ip_HwAddrType * FtmBase)
{
  boolean D.6441;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} FtmBase_4(D)->FMS;
  _2 = _1 & 128;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


Ftm_Pwm_Ip_GetSoftwareOutputControl (const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
  uint16 D.6447;
  long unsigned int _1;
  uint16 _4;

  <bb 2> :
  _1 ={v} FtmBase_3(D)->SWOCTRL;
  _4 = (uint16) _1;

  <bb 3> :
<L0>:
  return _4;

}


Ftm_Pwm_Ip_SoftwareOutputControl (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, uint16 Value)
{
  long unsigned int _1;

  <bb 2> :
  _1 = (long unsigned int) Value_2(D);
  FtmBase_4(D)->SWOCTRL ={v} _1;
  return;

}


Ftm_Pwm_Ip_GetOutputMask (const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
  uint32 D.6445;
  uint32 _3;

  <bb 2> :
  _3 ={v} FtmBase_2(D)->OUTMASK;

  <bb 3> :
<L0>:
  return _3;

}


Ftm_Pwm_Ip_ClearOutmaskReg (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, uint32 RegVal)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 ={v} FtmBase_5(D)->OUTMASK;
  _2 = ~RegVal_6(D);
  _3 = _1 & _2;
  FtmBase_5(D)->OUTMASK ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetOutmaskReg (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, uint32 RegVal)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} FtmBase_6(D)->OUTMASK;
  _2 = ~RegVal_7(D);
  _3 = _1 & _2;
  _4 = RegVal_7(D) | _3;
  FtmBase_6(D)->OUTMASK ={v} _4;
  return;

}


Ftm_Pwm_Ip_SetSoftwareTriggerCmd (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, boolean Enable)
{
  long unsigned int iftmp.4;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.4_4;
  long unsigned int iftmp.4_8;
  long unsigned int iftmp.4_9;

  <bb 2> :
  _1 ={v} FtmBase_6(D)->SYNC;
  _2 = _1 & 4294967167;
  if (Enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_8 = 0;

  <bb 5> :
  # iftmp.4_4 = PHI <iftmp.4_9(3), iftmp.4_8(4)>
  _3 = iftmp.4_4 | _2;
  FtmBase_6(D)->SYNC ={v} _3;
  return;

}


Ftm_Pwm_Ip_HasChnEventOccurred (const struct Ftm_Pwm_Ip_HwAddrType * FtmBase, uint8 Channel)
{
  boolean D.6493;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) Channel_4(D);
  _2 ={v} FtmBase_6(D)->CONTROLS[_1].CSC;
  _3 = _2 & 128;
  _7 = _3 != 0;

  <bb 3> :
<L0>:
  return _7;

}


Ftm_Pwm_Ip_ClearChnEventFlag (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase, uint8 Channel)
{
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = (int) Channel_5(D);
  _2 ={v} FtmBase_7(D)->CONTROLS[_1].CSC;
  _3 = (int) Channel_5(D);
  _4 = _2 & 4294967167;
  FtmBase_7(D)->CONTROLS[_3].CSC ={v} _4;
  return;

}


Ftm_Pwm_Ip_IsChnIntEnabled (const struct Ftm_Pwm_Ip_HwAddrType * FtmBase, uint8 Channel)
{
  boolean D.6491;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) Channel_4(D);
  _2 ={v} FtmBase_6(D)->CONTROLS[_1].CSC;
  _3 = _2 & 64;
  _7 = _3 != 0;

  <bb 3> :
<L0>:
  return _7;

}


Ftm_Pwm_Ip_ClearTimerOverflow (struct Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} FtmBase_4(D)->SC;
  _2 = _1 & 4294966783;
  FtmBase_4(D)->SC ={v} _2;
  return;

}


Ftm_Pwm_Ip_GetTimerOverflow (const struct Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
  boolean D.6473;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} FtmBase_4(D)->SC;
  _2 = _1 & 512;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


Ftm_Pwm_Ip_IsOverflowIntEnabled (const struct Ftm_Pwm_Ip_HwAddrType * FtmBase)
{
  boolean D.6471;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} FtmBase_4(D)->SC;
  _2 = _1 & 256;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


