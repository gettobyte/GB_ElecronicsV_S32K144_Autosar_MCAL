FMSTR_StrLen (unsigned char * nAddr)
{
  FMSTR_U16 nLen;
  const char * pStr;
  FMSTR_U16 D.5754;
  short unsigned int nLen.12_1;
  const char * pStr.13_2;
  char _3;
  FMSTR_U16 _11;

  <bb 2> :
  nLen_6 = 0;
  pStr_8 = nAddr_7(D);
  goto <bb 4>; [INV]

  <bb 3> :
  nLen.12_1 = nLen_5;
  nLen_12 = nLen.12_1 + 1;

  <bb 4> :
  # pStr_4 = PHI <pStr_8(2), pStr_9(3)>
  # nLen_5 = PHI <nLen_6(2), nLen_12(3)>
  pStr.13_2 = pStr_4;
  pStr_9 = pStr.13_2 + 1;
  _3 = *pStr.13_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _11 = nLen_5;

  <bb 6> :
<L3>:
  return _11;

}


FMSTR_WriteVarMask (unsigned char * pMessageIO, FMSTR_SIZE8 nSize)
{
  FMSTR_U8 nResponseCode;
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5751;
  unsigned char * nAddr.11_1;
  unsigned char * _12;

  <bb 2> :
  pResponse_3 = pMessageIO_2(D);
  pMessageIO_4 = pMessageIO_2(D) + 1;
  pMessageIO_7 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_4);
  nAddr.11_1 = nAddr;
  FMSTR_CopyFromBufferWithMask (nAddr.11_1, pMessageIO_7, nSize_8(D));
  nResponseCode_10 = 0;
  MEM[(FMSTR_U8 *)pResponse_3] = nResponseCode_10;
  _12 = pResponse_3 + 1;
  nAddr ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _12;

}


FMSTR_WriteMemMask (unsigned char * pMessageIO)
{
  FMSTR_U8 nResponseCode;
  FMSTR_U8 nSize;
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5748;
  unsigned char _1;
  unsigned char * nAddr.9_2;
  unsigned char nSize.10_3;
  unsigned char * _15;

  <bb 2> :
  pResponse_5 = pMessageIO_4(D);
  pMessageIO_6 = pMessageIO_4(D) + 2;
  _1 = MEM[(FMSTR_U8 *)pMessageIO_6];
  nSize = _1;
  pMessageIO_9 = pMessageIO_6 + 1;
  pMessageIO_11 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_9);
  nAddr.9_2 = nAddr;
  nSize.10_3 = nSize;
  FMSTR_CopyFromBufferWithMask (nAddr.9_2, pMessageIO_11, nSize.10_3);
  nResponseCode_13 = 0;
  MEM[(FMSTR_U8 *)pResponse_5] = nResponseCode_13;
  _15 = pResponse_5 + 1;
  nAddr ={v} {CLOBBER};
  nSize ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _15;

}


FMSTR_WriteVar (unsigned char * pMessageIO, FMSTR_SIZE8 nSize)
{
  FMSTR_U8 nResponseCode;
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5745;
  unsigned char * nAddr.8_1;
  unsigned char * _12;

  <bb 2> :
  pResponse_3 = pMessageIO_2(D);
  pMessageIO_4 = pMessageIO_2(D) + 1;
  pMessageIO_7 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_4);
  nAddr.8_1 = nAddr;
  FMSTR_CopyFromBuffer (nAddr.8_1, pMessageIO_7, nSize_8(D));
  nResponseCode_10 = 0;
  MEM[(FMSTR_U8 *)pResponse_3] = nResponseCode_10;
  _12 = pResponse_3 + 1;
  nAddr ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _12;

}


FMSTR_WriteMem (unsigned char * pMessageIO)
{
  FMSTR_U8 nResponseCode;
  FMSTR_U8 nSize;
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5742;
  unsigned char _1;
  unsigned char * nAddr.6_2;
  unsigned char nSize.7_3;
  unsigned char * _15;

  <bb 2> :
  pResponse_5 = pMessageIO_4(D);
  pMessageIO_6 = pMessageIO_4(D) + 2;
  _1 = MEM[(FMSTR_U8 *)pMessageIO_6];
  nSize = _1;
  pMessageIO_9 = pMessageIO_6 + 1;
  pMessageIO_11 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_9);
  nAddr.6_2 = nAddr;
  nSize.7_3 = nSize;
  FMSTR_CopyFromBuffer (nAddr.6_2, pMessageIO_11, nSize.7_3);
  nResponseCode_13 = 0;
  MEM[(FMSTR_U8 *)pResponse_5] = nResponseCode_13;
  _15 = pResponse_5 + 1;
  nAddr ={v} {CLOBBER};
  nSize ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _15;

}


FMSTR_ReadVar (unsigned char * pMessageIO, FMSTR_SIZE8 nSize)
{
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5739;
  unsigned char * nAddr.5_1;
  unsigned char * _12;

  <bb 2> :
  pResponse_3 = pMessageIO_2(D);
  pMessageIO_4 = pMessageIO_2(D) + 1;
  pMessageIO_7 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_4);
  MEM[(FMSTR_U8 *)pResponse_3] = 0;
  pResponse_9 = pResponse_3 + 1;
  nAddr.5_1 = nAddr;
  _12 = FMSTR_CopyToBuffer (pResponse_9, nAddr.5_1, nSize_10(D));
  nAddr ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _12;

}


FMSTR_ReadMem (unsigned char * pMessageIO)
{
  FMSTR_U8 nSize;
  unsigned char * nAddr;
  unsigned char * pResponse;
  unsigned char * D.5736;
  unsigned char _1;
  unsigned char nSize.2_2;
  unsigned char * nAddr.3_3;
  unsigned char nSize.4_4;
  unsigned char * _5;
  unsigned char * _18;
  unsigned char * _20;

  <bb 2> :
  pResponse_8 = pMessageIO_7(D);
  pMessageIO_9 = pMessageIO_7(D) + 2;
  _1 = MEM[(FMSTR_U8 *)pMessageIO_9];
  nSize = _1;
  pMessageIO_12 = pMessageIO_9 + 1;
  pMessageIO_14 = FMSTR_AddressFromBuffer (&nAddr, pMessageIO_12);
  nSize.2_2 = nSize;
  if (nSize.2_2 > 60)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  MEM[(FMSTR_U8 *)pResponse_8] = 132;
  _20 = pResponse_8 + 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  MEM[(FMSTR_U8 *)pResponse_8] = 0;
  pResponse_16 = pResponse_8 + 1;
  nAddr.3_3 = nAddr;
  nSize.4_4 = nSize;
  _18 = FMSTR_CopyToBuffer (pResponse_16, nAddr.3_3, nSize.4_4);

  <bb 5> :
  # _5 = PHI <_20(3), _18(4)>
  nAddr ={v} {CLOBBER};
  nSize ={v} {CLOBBER};

  <bb 6> :
<L3>:
  return _5;

}


FMSTR_GetBoardInfo (unsigned char * pMessageIO)
{
  FMSTR_U8 * pStr;
  FMSTR_U16 wTmp;
  unsigned char * pResponse;
  unsigned char * D.5732;
  unsigned char _1;
  unsigned char _2;
  short unsigned int wTmp.1_3;
  unsigned char * _35;

  <bb 2> :
  pResponse_10 = pMessageIO_9(D);
  MEM[(FMSTR_U8 *)pResponse_10] = 0;
  pResponse_13 = pResponse_10 + 1;
  MEM[(FMSTR_U8 *)pResponse_13] = 3;
  pResponse_15 = pResponse_13 + 1;
  MEM[(FMSTR_U8 *)pResponse_15] = 0;
  pResponse_17 = pResponse_15 + 1;
  MEM[(FMSTR_U8 *)pResponse_17] = 1;
  pResponse_19 = pResponse_17 + 1;
  MEM[(FMSTR_U8 *)pResponse_19] = 2;
  pResponse_21 = pResponse_19 + 1;
  MEM[(FMSTR_U8 *)pResponse_21] = 0;
  pResponse_23 = pResponse_21 + 1;
  MEM[(FMSTR_U8 *)pResponse_23] = 60;
  pResponse_25 = pResponse_23 + 1;
  wTmp_27 = FMSTR_GetRecBuffSize ();
  wTmp_28 = wTmp_27;
  pResponse_30 = FMSTR_ValueToBuffer16 (pResponse_25, wTmp_28);
  pResponse_32 = FMSTR_ValueToBuffer16 (pResponse_30, 16384);
  pStr_33 = "S32xx FreeMASTER";
  wTmp_34 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = *pStr_7;
  MEM[(FMSTR_U8 *)pResponse_4] = _1;
  pResponse_37 = pResponse_4 + 1;
  _2 = *pStr_7;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  pStr_38 = pStr_7 + 1;

  <bb 5> :
  # pStr_6 = PHI <pStr_7(3), pStr_38(4)>
  wTmp.1_3 = wTmp_5;
  wTmp_39 = wTmp.1_3 + 1;

  <bb 6> :
  # pResponse_4 = PHI <pResponse_32(2), pResponse_37(5)>
  # wTmp_5 = PHI <wTmp_34(2), wTmp_39(5)>
  # pStr_7 = PHI <pStr_33(2), pStr_6(5)>
  if (wTmp_5 <= 24)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _35 = pResponse_4;

  <bb 8> :
<L5>:
  return _35;

}


FMSTR_SendTestFrame (unsigned char * pMessageIO)
{
  unsigned char * pResponse;
  FMSTR_BOOL D.5728;
  FMSTR_BOOL _7;

  <bb 2> :
  pResponse_2 = pMessageIO_1(D);
  MEM[(FMSTR_U8 *)pResponse_2] = 169;
  pResponse_5 = pResponse_2 + 1;
  FMSTR_SendResponse (pMessageIO_1(D), 1);
  _7 = 1;

  <bb 3> :
<L0>:
  return _7;

}


FMSTR_ProtocolDecoder (unsigned char * pMessageIO)
{
  FMSTR_SIZE8 nSize;
  FMSTR_U8 nCmd;
  unsigned char * pResponseEnd;
  FMSTR_BOOL D.5725;
  unsigned char _1;
  unsigned char nCmd.0_2;
  int _3;
  int _4;
  FMSTR_BOOL _6;
  FMSTR_BOOL _60;
  FMSTR_BOOL _63;

  <bb 2> :
  FMSTR_SetExAddr (0);
  _1 = MEM[(FMSTR_U8 *)pMessageIO_11(D)];
  nCmd = _1;
  nCmd.0_2 = nCmd;
  _3 = (int) nCmd.0_2;
  switch (_3) <default: <L18> [INV], case 4: <L3> [INV], case 5: <L14> [INV], case 6: <L15> [INV], case 10: <L4> [INV], case 11: <L9> [INV], case 16: <L11> [INV], case 21: <L17> [INV], case 192: <L16> [INV], case 193: <L7> [INV], case 194: <L8> [INV], case 195: <L6> [INV], case 197: <L5> [INV], case 198: <L12> [INV], case 201: <L10> [INV], case 211: <L13> [INV], case 224: <L0> [INV], case 225: <L1> [INV], case 226: <L2> [INV]>

  <bb 3> :
<L0>:
  FMSTR_SetExAddr (1);
  pResponseEnd_21 = FMSTR_ReadVar (pMessageIO_11(D), 1);
  goto <bb 22>; [INV]

  <bb 4> :
<L1>:
  FMSTR_SetExAddr (1);
  pResponseEnd_18 = FMSTR_ReadVar (pMessageIO_11(D), 2);
  goto <bb 22>; [INV]

  <bb 5> :
<L2>:
  FMSTR_SetExAddr (1);
  pResponseEnd_15 = FMSTR_ReadVar (pMessageIO_11(D), 4);
  goto <bb 22>; [INV]

  <bb 6> :
<L3>:
  FMSTR_SetExAddr (1);
  pResponseEnd_57 = FMSTR_ReadMem (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 7> :
<L4>:
  FMSTR_SetExAddr (1);
  pResponseEnd_48 = FMSTR_SetUpScope (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 8> :
<L5>:
  pResponseEnd_30 = FMSTR_ReadScope (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 9> :
<L6>:
  pResponseEnd_32 = FMSTR_GetRecStatus (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 10> :
<L7>:
  pResponseEnd_36 = FMSTR_StartRec (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 11> :
<L8>:
  pResponseEnd_34 = FMSTR_StopRec (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 12> :
<L9>:
  FMSTR_SetExAddr (1);
  pResponseEnd_45 = FMSTR_SetUpRec (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 13> :
<L10>:
  FMSTR_SetExAddr (1);
  pResponseEnd_26 = FMSTR_GetRecBuff (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 14> :
<L11>:
  pResponseEnd_42 = FMSTR_StoreAppCmd (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 15> :
<L12>:
  pResponseEnd_28 = FMSTR_GetAppCmdStatus (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 16> :
<L13>:
  pResponseEnd_23 = FMSTR_GetAppCmdRespData (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 17> :
<L14>:
  FMSTR_SetExAddr (1);
  pResponseEnd_54 = FMSTR_WriteMem (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 18> :
<L15>:
  FMSTR_SetExAddr (1);
  pResponseEnd_51 = FMSTR_WriteMemMask (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 19> :
<L16>:
  pResponseEnd_38 = FMSTR_GetBoardInfo (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 20> :
<L17>:
  pResponseEnd_40 = FMSTR_PipeFrame (pMessageIO_11(D));
  goto <bb 22>; [INV]

  <bb 21> :
<L18>:
  MEM[(FMSTR_U8 *)pMessageIO_11(D)] = 129;
  pResponseEnd_59 = pMessageIO_11(D) + 1;

  <bb 22> :
  # pResponseEnd_5 = PHI <pResponseEnd_21(3), pResponseEnd_18(4), pResponseEnd_15(5), pResponseEnd_57(6), pResponseEnd_48(7), pResponseEnd_30(8), pResponseEnd_32(9), pResponseEnd_36(10), pResponseEnd_34(11), pResponseEnd_45(12), pResponseEnd_26(13), pResponseEnd_42(14), pResponseEnd_28(15), pResponseEnd_23(16), pResponseEnd_54(17), pResponseEnd_51(18), pResponseEnd_38(19), pResponseEnd_40(20), pResponseEnd_59(21)>
  if (pResponseEnd_5 != pMessageIO_11(D))
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _4 = pResponseEnd_5 - pMessageIO_11(D);
  nSize_61 = (FMSTR_SIZE8) _4;
  FMSTR_SendResponse (pMessageIO_11(D), nSize_61);
  _63 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 25>; [INV]

  <bb 24> :
  _60 = 0;
  // predicted unlikely by early return (on trees) predictor.

  <bb 25> :
  # _6 = PHI <_63(23), _60(24)>
  nCmd ={v} {CLOBBER};

  <bb 26> :
<L23>:
  return _6;

}


FMSTR_Init ()
{
  FMSTR_BOOL D.5721;
  unsigned char _1;
  FMSTR_BOOL _2;
  FMSTR_BOOL _9;
  FMSTR_BOOL _10;

  <bb 2> :
  FMSTR_InitScope ();
  FMSTR_InitRec ();
  FMSTR_InitAppCmds ();
  FMSTR_InitPipes ();
  _1 = FMSTR_InitSerial ();
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _10 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = 1;

  <bb 5> :
  # _2 = PHI <_10(3), _9(4)>
<L2>:
  return _2;

}


