
Marking local functions:


Marking externally visible functions: FMSTR_PipeFrame FMSTR_PipeRead FMSTR_PipePrintf FMSTR_PipePrintfS32 FMSTR_PipePrintfU32 FMSTR_PipePrintfS16 FMSTR_PipePrintfU16 FMSTR_PipePrintfS8 FMSTR_PipePrintfU8 FMSTR_PipePuts FMSTR_PipeWrite FMSTR_PipeClose FMSTR_PipeOpen FMSTR_InitPipes


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

FMSTR_CopyToBuffer/39 (FMSTR_CopyToBuffer) @0681b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipeTransmit/32 FMSTR_PipeTransmit/32 
  Calls: 
FMSTR_CopyFromBuffer/38 (FMSTR_CopyFromBuffer) @0681b2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipeReceive/31 FMSTR_PipeReceive/31 
  Calls: 
__builtin_va_end/37 (__builtin_va_end) @06802c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipePrintf/25 
  Calls: 
__builtin_va_start/36 (__builtin_va_start) @06802b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipePrintf/25 
  Calls: 
FMSTR_StrLen/35 (FMSTR_StrLen) @0677c2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipePuts/5 
  Calls: 
FMSTR_CopyMemory/34 (FMSTR_CopyMemory) @0677cee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FMSTR_PipeRead/26 FMSTR_PipeRead/26 FMSTR_PipeWrite/4 FMSTR_PipeWrite/4 
  Calls: 
FMSTR_PipeFrame/33 (FMSTR_PipeFrame) @0677c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipeTransmit/32 FMSTR_PipeGetBytesReady/29 FMSTR_PipeReceive/31 FMSTR_PipeGetBytesFree/28 FMSTR_PipeDiscardBytes/30 FMSTR_FindPipe/27 
   Indirect call
FMSTR_PipeTransmit/32 (FMSTR_PipeTransmit) @0677c460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 
  Calls: FMSTR_CopyToBuffer/39 FMSTR_CopyToBuffer/39 
FMSTR_PipeReceive/31 (FMSTR_PipeReceive) @0677c1c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 
  Calls: FMSTR_CopyFromBuffer/38 FMSTR_CopyFromBuffer/38 
FMSTR_PipeDiscardBytes/30 (FMSTR_PipeDiscardBytes) @06771d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 
  Calls: FMSTR_PipeGetBytesReady/29 
FMSTR_PipeGetBytesReady/29 (FMSTR_PipeGetBytesReady) @067717e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 FMSTR_PipeDiscardBytes/30 FMSTR_PipeRead/26 
  Calls: 
FMSTR_PipeGetBytesFree/28 (FMSTR_PipeGetBytesFree) @067712a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 FMSTR_PipePuts/5 FMSTR_PipeWrite/4 
  Calls: 
FMSTR_FindPipe/27 (FMSTR_FindPipe) @06771ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: pcm_pipes/0 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeFrame/33 
  Calls: 
FMSTR_PipeRead/26 (FMSTR_PipeRead) @06771c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_CopyMemory/34 FMSTR_CopyMemory/34 FMSTR_PipeGetBytesReady/29 
FMSTR_PipePrintf/25 (FMSTR_PipePrintf) @067719a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: __builtin_va_end/37 FMSTR_PipePrintfV/24 __builtin_va_start/36 
FMSTR_PipePrintfV/24 (FMSTR_PipePrintfV) @06771700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintf/25 
  Calls: FMSTR_PipePrintfFlush/6 FMSTR_PipePrintfPutc/7 FMSTR_PipePrintfAny/23 FMSTR_PipePuts/5 FMSTR_PipeParseFormat/15 FMSTR_PipePrintfFlush/6 FMSTR_PipePrintfPutc/7 
FMSTR_PipePrintfAny/23 (FMSTR_PipePrintfAny) @06771460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfV/24 
  Calls: FMSTR_PipeU32ToA/13 FMSTR_PipeS32ToA/14 FMSTR_PipeU16ToA/11 FMSTR_PipeS16ToA/12 FMSTR_PipeU8ToA/9 FMSTR_PipeS8ToA/10 
FMSTR_PipePrintfS32/22 (FMSTR_PipePrintfS32) @067711c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeS32ToA/14 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfU32/21 (FMSTR_PipePrintfU32) @06761d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeU32ToA/13 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfS16/20 (FMSTR_PipePrintfS16) @067617e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeS16ToA/12 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfU16/19 (FMSTR_PipePrintfU16) @06761ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeU16ToA/11 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfS8/18 (FMSTR_PipePrintfS8) @06761c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeS8ToA/10 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfU8/17 (FMSTR_PipePrintfU8) @067619a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FMSTR_PipeU8ToA/9 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FMSTR_PipePrintfOne/16 
FMSTR_PipePrintfOne/16 (FMSTR_PipePrintfOne) @06761700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfS32/22 FMSTR_PipePrintfU32/21 FMSTR_PipePrintfS16/20 FMSTR_PipePrintfU16/19 FMSTR_PipePrintfS8/18 FMSTR_PipePrintfU8/17 
  Calls: FMSTR_PipePrintfFlush/6 FMSTR_PipePrintfPutc/7 FMSTR_PipePuts/5 FMSTR_PipeParseFormat/15 FMSTR_PipePrintfFlush/6 FMSTR_PipePrintfPutc/7 
   Indirect call
FMSTR_PipeParseFormat/15 (FMSTR_PipeParseFormat) @06761460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfV/24 FMSTR_PipePrintfOne/16 
  Calls: 
FMSTR_PipeS32ToA/14 (FMSTR_PipeS32ToA) @067610e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfS32/22 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 
  Calls: FMSTR_PipeU32ToA/13 
FMSTR_PipeU32ToA/13 (FMSTR_PipeU32ToA) @06745ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfU32/21 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 FMSTR_PipeS32ToA/14 
  Calls: FMSTR_PipeIToAFinalize/8 
FMSTR_PipeS16ToA/12 (FMSTR_PipeS16ToA) @06745c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfS16/20 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 
  Calls: FMSTR_PipeU16ToA/11 
FMSTR_PipeU16ToA/11 (FMSTR_PipeU16ToA) @067459a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfU16/19 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 FMSTR_PipeS16ToA/12 
  Calls: FMSTR_PipeIToAFinalize/8 
FMSTR_PipeS8ToA/10 (FMSTR_PipeS8ToA) @06745700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfS8/18 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 
  Calls: FMSTR_PipeU8ToA/9 
FMSTR_PipeU8ToA/9 (FMSTR_PipeU8ToA) @06745460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: FMSTR_PipePrintfU8/17 (addr)
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfAny/23 FMSTR_PipeS8ToA/10 
  Calls: FMSTR_PipeIToAFinalize/8 
FMSTR_PipeIToAFinalize/8 (FMSTR_PipeIToAFinalize) @067451c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipeU32ToA/13 FMSTR_PipeU16ToA/11 FMSTR_PipeU8ToA/9 
  Calls: 
FMSTR_PipePrintfPutc/7 (FMSTR_PipePrintfPutc) @0670be00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfV/24 FMSTR_PipePrintfV/24 FMSTR_PipePrintfOne/16 FMSTR_PipePrintfOne/16 
  Calls: FMSTR_PipePrintfFlush/6 
FMSTR_PipePrintfFlush/6 (FMSTR_PipePrintfFlush) @0670b8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfV/24 FMSTR_PipePrintfV/24 FMSTR_PipePrintfOne/16 FMSTR_PipePrintfOne/16 FMSTR_PipePrintfPutc/7 
  Calls: FMSTR_PipeWrite/4 
FMSTR_PipePuts/5 (FMSTR_PipePuts) @0670b380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePrintfV/24 FMSTR_PipePrintfOne/16 
  Calls: FMSTR_PipeWrite/4 FMSTR_StrLen/35 FMSTR_PipeGetBytesFree/28 
FMSTR_PipeWrite/4 (FMSTR_PipeWrite) @0670bd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FMSTR_PipePuts/5 FMSTR_PipePrintfFlush/6 
  Calls: FMSTR_CopyMemory/34 FMSTR_CopyMemory/34 FMSTR_PipeGetBytesFree/28 
FMSTR_PipeClose/3 (FMSTR_PipeClose) @0670ba80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FMSTR_PipeOpen/2 (FMSTR_PipeOpen) @0670b7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: pcm_pipes/0 (addr)pcm_pipes/0 (addr)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FMSTR_InitPipes/1 (FMSTR_InitPipes) @0670b540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: pcm_pipes/0 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
pcm_pipes/0 (pcm_pipes) @066fbea0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FMSTR_InitPipes/1 (write)FMSTR_PipeOpen/2 (addr)FMSTR_PipeOpen/2 (addr)FMSTR_FindPipe/27 (addr)
  Availability: available
  Varpool flags:
FMSTR_PipeFrame (unsigned char * pMessageIO)
{
  FMSTR_U8 txToSend;
  FMSTR_PIPE_SIZE txAvail;
  FMSTR_U8 rxToRead;
  FMSTR_PIPE_SIZE rxFree;
  struct FMSTR_PIPE * pp;
  FMSTR_U8 nPort;
  FMSTR_U8 nByte;
  FMSTR_U8 nFrameLen;
  unsigned char * pResponse;
  unsigned char * D.6393;
  unsigned char _1;
  unsigned char nFrameLen.62_2;
  unsigned char _3;
  unsigned char nPort.63_4;
  short unsigned int _5;
  short unsigned int _6;
  unsigned char nPort.64_7;
  signed char nPort.65_8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  _Bool _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  _Bool _18;
  unsigned char nFrameLen.66_19;
  unsigned char _20;
  unsigned char nByte.67_21;
  struct FMSTR_PIPE_BUFF * _22;
  unsigned char nByte.68_23;
  unsigned char nFrameLen.69_24;
  struct FMSTR_PIPE_BUFF * _25;
  unsigned char nFrameLen.70_26;
  short unsigned int _27;
  void (*<T44e>) (void *) _28;
  void (*<T44e>) (void *) _29;
  struct FMSTR_PIPE_BUFF * _30;
  short unsigned int _31;
  unsigned char _32;
  unsigned char nFrameLen.71_33;
  unsigned char nPort.72_34;
  unsigned char _35;
  unsigned char nByte.73_36;
  unsigned char * _40;
  unsigned char * _95;
  unsigned char * _97;
  unsigned char * _99;

  <bb 2> :
  pResponse_48 = pMessageIO_47(D);
  pMessageIO_49 = pMessageIO_47(D) + 1;
  _1 = MEM[(FMSTR_U8 *)pMessageIO_49];
  nFrameLen = _1;
  pMessageIO_52 = pMessageIO_49 + 1;
  nFrameLen.62_2 = nFrameLen;
  if (nFrameLen.62_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  MEM[(FMSTR_U8 *)pResponse_48] = 140;
  _99 = pResponse_48 + 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 28>; [INV]

  <bb 4> :
  _3 = MEM[(FMSTR_U8 *)pMessageIO_52];
  nPort = _3;
  pMessageIO_54 = pMessageIO_52 + 1;
  nPort.63_4 = nPort;
  _5 = (short unsigned int) nPort.63_4;
  _6 = _5 & 127;
  pp_56 = FMSTR_FindPipe (_6);
  if (pp_56 == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  MEM[(FMSTR_U8 *)pResponse_48] = 140;
  _97 = pResponse_48 + 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 28>; [INV]

  <bb 6> :
  nPort.64_7 = nPort;
  nPort.65_8 = (signed char) nPort.64_7;
  if (nPort.65_8 < 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _9 = BIT_FIELD_REF <pp_56->flags.flg, 8, 0>;
  _10 = _9 & 1;
  if (_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  nFrameLen = 0;
  goto <bb 13>; [INV]

  <bb 9> :
  _11 = BIT_FIELD_REF <pp_56->flags.flg, 8, 0>;
  _12 = _11 & 1;
  _13 = _12 == 0;
  pp_56->flags.flg.bExpectOdd = _13;
  goto <bb 13>; [INV]

  <bb 10> :
  _14 = BIT_FIELD_REF <pp_56->flags.flg, 8, 0>;
  _15 = _14 & 1;
  if (_15 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  nFrameLen = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _16 = BIT_FIELD_REF <pp_56->flags.flg, 8, 0>;
  _17 = _16 & 1;
  _18 = _17 == 0;
  pp_56->flags.flg.bExpectOdd = _18;

  <bb 13> :
  nFrameLen.66_19 = nFrameLen;
  if (nFrameLen.66_19 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 14> :
  _20 = MEM[(FMSTR_U8 *)pMessageIO_54];
  nByte = _20;
  pMessageIO_62 = pMessageIO_54 + 1;
  nByte.67_21 = nByte;
  if (nByte.67_21 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _22 = &pp_56->tx;
  nByte.68_23 = nByte;
  FMSTR_PipeDiscardBytes (_22, nByte.68_23);

  <bb 16> :
  nFrameLen.69_24 = nFrameLen;
  if (nFrameLen.69_24 > 2)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 17> :
  _25 = &pp_56->rx;
  rxFree_66 = FMSTR_PipeGetBytesFree (_25);
  nFrameLen.70_26 = nFrameLen;
  rxToRead_67 = nFrameLen.70_26 + 254;
  rxToRead_68 = rxToRead_67;
  rxToRead_69 = rxToRead_68;
  _27 = (short unsigned int) rxToRead_69;
  if (rxFree_66 < _27)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  rxToRead_70 = (FMSTR_U8) rxFree_66;

  <bb 19> :
  # rxToRead_38 = PHI <rxToRead_69(17), rxToRead_70(18)>
  pMessageIO_72 = FMSTR_PipeReceive (pMessageIO_62, pp_56, rxToRead_38);
  pp_56->nLastBytesReceived = rxToRead_38;
  goto <bb 21>; [INV]

  <bb 20> :
  pp_56->nLastBytesReceived = 0;

  <bb 21> :
  _28 = pp_56->pCallback;
  if (_28 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  pp_56->flags.flg.bInComm = 1;
  _29 = pp_56->pCallback;
  _29 (pp_56);
  pp_56->flags.flg.bInComm = 0;

  <bb 23> :
  _30 = &pp_56->tx;
  txAvail_78 = FMSTR_PipeGetBytesReady (_30);
  txToSend_79 = 57;
  txToSend_80 = txToSend_79;
  txToSend_81 = txToSend_80;
  _31 = (short unsigned int) txToSend_81;
  if (txAvail_78 < _31)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  txToSend_82 = (FMSTR_U8) txAvail_78;

  <bb 25> :
  # txToSend_39 = PHI <txToSend_81(23), txToSend_82(24)>
  _32 = txToSend_39 + 2;
  nFrameLen = _32;
  MEM[(FMSTR_U8 *)pResponse_48] = 64;
  pResponse_85 = pResponse_48 + 1;
  nFrameLen.71_33 = nFrameLen;
  MEM[(FMSTR_U8 *)pResponse_85] = nFrameLen.71_33;
  pResponse_87 = pResponse_85 + 1;
  nPort.72_34 = nPort;
  MEM[(FMSTR_U8 *)pResponse_87] = nPort.72_34;
  pResponse_89 = pResponse_87 + 1;
  _35 = pp_56->nLastBytesReceived;
  nByte = _35;
  nByte.73_36 = nByte;
  MEM[(FMSTR_U8 *)pResponse_89] = nByte.73_36;
  pResponse_92 = pResponse_89 + 1;
  if (txToSend_39 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  pResponse_94 = FMSTR_PipeTransmit (pResponse_92, pp_56, txToSend_39);

  <bb 27> :
  # pResponse_37 = PHI <pResponse_92(25), pResponse_94(26)>
  _95 = pResponse_37;

  <bb 28> :
  # _40 = PHI <_99(3), _97(5), _95(27)>
  nFrameLen ={v} {CLOBBER};
  nByte ={v} {CLOBBER};
  nPort ={v} {CLOBBER};

  <bb 29> :
<L29>:
  return _40;

}


FMSTR_PipeTransmit (unsigned char * pMessageIO, struct FMSTR_PIPE * pp, FMSTR_SIZE8 size)
{
  FMSTR_PIPE_SIZE nRP;
  FMSTR_PIPE_SIZE s;
  struct FMSTR_PIPE_BUFF * pbuff;
  unsigned char * D.6389;
  short unsigned int _1;
  short unsigned int _2;
  unsigned char * _3;
  sizetype _4;
  unsigned char * _5;
  unsigned char _6;
  short unsigned int _7;
  unsigned char _8;
  unsigned char * _9;
  sizetype _10;
  unsigned char * _11;
  unsigned char * _31;

  <bb 2> :
  pbuff_17 = &pp_16(D)->tx;
  nRP_19 = pbuff_17->nRP;
  if (size_20(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _1 = pbuff_17->nSize;
  s_22 = _1 - nRP_19;
  _2 = (short unsigned int) size_20(D);
  if (s_22 > _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  s_23 = (FMSTR_PIPE_SIZE) size_20(D);

  <bb 5> :
  # s_13 = PHI <s_22(3), s_23(4)>
  _3 = pbuff_17->pBuff;
  _4 = (sizetype) nRP_19;
  _5 = _3 + _4;
  _6 = (unsigned char) s_13;
  pMessageIO_25 = FMSTR_CopyToBuffer (pMessageIO_21(D), _5, _6);
  nRP_26 = nRP_19 + s_13;
  _7 = pbuff_17->nSize;
  if (nRP_26 >= _7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  nRP_27 = 0;

  <bb 7> :
  # nRP_14 = PHI <nRP_26(5), nRP_27(6)>
  _8 = (unsigned char) s_13;
  size_28 = size_20(D) - _8;
  if (size_28 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _9 = pbuff_17->pBuff;
  _10 = (sizetype) nRP_14;
  _11 = _9 + _10;
  pMessageIO_30 = FMSTR_CopyToBuffer (pMessageIO_25, _11, size_28);

  <bb 9> :
  # pMessageIO_12 = PHI <pMessageIO_21(D)(2), pMessageIO_25(7), pMessageIO_30(8)>
  _31 = pMessageIO_12;

  <bb 10> :
<L8>:
  return _31;

}


FMSTR_PipeReceive (unsigned char * pMessageIO, struct FMSTR_PIPE * pp, FMSTR_SIZE8 size)
{
  FMSTR_PIPE_SIZE s;
  struct FMSTR_PIPE_BUFF * pbuff;
  unsigned char * D.6379;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  unsigned char * _4;
  short unsigned int _5;
  sizetype _6;
  unsigned char * _7;
  unsigned char _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  unsigned char _13;
  unsigned char * _14;
  short unsigned int _15;
  sizetype _16;
  unsigned char * _17;
  short unsigned int _18;
  short unsigned int _19;
  short unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;
  unsigned char * _45;

  <bb 2> :
  pbuff_30 = &pp_29(D)->rx;
  if (size_31(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _1 = pbuff_30->nSize;
  _2 = pbuff_30->nWP;
  s_34 = _1 - _2;
  _3 = (short unsigned int) size_31(D);
  if (s_34 > _3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  s_35 = (FMSTR_PIPE_SIZE) size_31(D);

  <bb 5> :
  # s_25 = PHI <s_34(3), s_35(4)>
  _4 = pbuff_30->pBuff;
  _5 = pbuff_30->nWP;
  _6 = (sizetype) _5;
  _7 = _4 + _6;
  _8 = (unsigned char) s_25;
  pMessageIO_37 = FMSTR_CopyFromBuffer (_7, pMessageIO_32(D), _8);
  _9 = pbuff_30->nWP;
  _10 = s_25 + _9;
  pbuff_30->nWP = _10;
  _11 = pbuff_30->nWP;
  _12 = pbuff_30->nSize;
  if (_11 >= _12)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  pbuff_30->nWP = 0;

  <bb 7> :
  _13 = (unsigned char) s_25;
  size_40 = size_31(D) - _13;
  if (size_40 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _14 = pbuff_30->pBuff;
  _15 = pbuff_30->nWP;
  _16 = (sizetype) _15;
  _17 = _14 + _16;
  pMessageIO_42 = FMSTR_CopyFromBuffer (_17, pMessageIO_37, size_40);
  _18 = pbuff_30->nWP;
  _19 = (short unsigned int) size_40;
  _20 = _18 + _19;
  pbuff_30->nWP = _20;

  <bb 9> :
  # pMessageIO_23 = PHI <pMessageIO_37(7), pMessageIO_42(8)>
  _21 = pbuff_30->nWP;
  _22 = pbuff_30->nRP;
  if (_21 == _22)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  pbuff_30->flags.flg.bIsFull = 1;

  <bb 11> :
  # pMessageIO_24 = PHI <pMessageIO_32(D)(2), pMessageIO_23(9), pMessageIO_23(10)>
  _45 = pMessageIO_24;

  <bb 12> :
<L10>:
  return _45;

}


FMSTR_PipeDiscardBytes (struct FMSTR_PIPE_BUFF * pbuff, FMSTR_SIZE8 count)
{
  FMSTR_PIPE_SIZE discard;
  FMSTR_PIPE_SIZE rp;
  FMSTR_PIPE_SIZE total;
  FMSTR_PIPE_SIZE rest;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;

  <bb 2> :
  _1 = pbuff_9(D)->nSize;
  _2 = pbuff_9(D)->nRP;
  rest_10 = _1 - _2;
  total_12 = FMSTR_PipeGetBytesReady (pbuff_9(D));
  _3 = (short unsigned int) count_13(D);
  discard_14 = MIN_EXPR <total_12, _3>;
  discard_15 = discard_14;
  if (discard_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (rest_10 <= discard_15)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  rp_18 = discard_15 - rest_10;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = pbuff_9(D)->nRP;
  rp_17 = discard_15 + _4;

  <bb 6> :
  # rp_5 = PHI <rp_18(4), rp_17(5)>
  pbuff_9(D)->flags.flg.bIsFull = 0;

  <bb 7> :
  # rp_6 = PHI <rp_16(D)(2), rp_5(6)>
  pbuff_9(D)->nRP = rp_6;
  return;

}


FMSTR_PipeGetBytesReady (struct FMSTR_PIPE_BUFF * pbuff)
{
  FMSTR_PIPE_SIZE full;
  FMSTR_PIPE_SIZE D.6362;
  unsigned char _1;
  unsigned char _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  FMSTR_PIPE_SIZE _17;

  <bb 2> :
  _1 = BIT_FIELD_REF <pbuff_13(D)->flags.flg, 8, 0>;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  full_16 = pbuff_13(D)->nSize;
  goto <bb 7>; [INV]

  <bb 4> :
  _3 = pbuff_13(D)->nWP;
  _4 = pbuff_13(D)->nRP;
  if (_3 >= _4)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = pbuff_13(D)->nWP;
  _6 = pbuff_13(D)->nRP;
  full_15 = _5 - _6;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = pbuff_13(D)->nSize;
  _8 = pbuff_13(D)->nRP;
  _9 = _7 - _8;
  _10 = pbuff_13(D)->nWP;
  full_14 = _9 + _10;

  <bb 7> :
  # full_11 = PHI <full_16(3), full_15(5), full_14(6)>
  _17 = full_11;

  <bb 8> :
<L6>:
  return _17;

}


FMSTR_PipeGetBytesFree (struct FMSTR_PIPE_BUFF * pbuff)
{
  FMSTR_PIPE_SIZE free;
  FMSTR_PIPE_SIZE D.6354;
  unsigned char _1;
  unsigned char _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  short unsigned int _10;
  FMSTR_PIPE_SIZE _17;

  <bb 2> :
  _1 = BIT_FIELD_REF <pbuff_13(D)->flags.flg, 8, 0>;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  free_16 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _3 = pbuff_13(D)->nWP;
  _4 = pbuff_13(D)->nRP;
  if (_3 < _4)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = pbuff_13(D)->nRP;
  _6 = pbuff_13(D)->nWP;
  free_15 = _5 - _6;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = pbuff_13(D)->nSize;
  _8 = pbuff_13(D)->nWP;
  _9 = _7 - _8;
  _10 = pbuff_13(D)->nRP;
  free_14 = _9 + _10;

  <bb 7> :
  # free_11 = PHI <free_16(3), free_15(5), free_14(6)>
  _17 = free_11;

  <bb 8> :
<L6>:
  return _17;

}


FMSTR_FindPipe (FMSTR_PIPE_PORT nPort)
{
  FMSTR_INDEX i;
  struct FMSTR_PIPE * pp;
  struct FMSTR_PIPE * D.6346;
  short unsigned int _1;
  short int i.60_2;
  unsigned short i.61_3;
  unsigned short _4;
  struct FMSTR_PIPE * _7;
  struct FMSTR_PIPE * _10;
  struct FMSTR_PIPE * _15;

  <bb 2> :
  pp_8 = &pcm_pipes[0];
  i_9 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = pp_5->nPort;
  if (nPort_12(D) == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _15 = pp_5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 5> :
  i.60_2 = i_6;
  i.61_3 = (unsigned short) i.60_2;
  _4 = i.61_3 + 1;
  i_13 = (FMSTR_INDEX) _4;
  pp_14 = pp_5 + 96;

  <bb 6> :
  # pp_5 = PHI <pp_8(2), pp_14(5)>
  # i_6 = PHI <i_9(2), i_13(5)>
  if (i_6 <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = 0B;

  <bb 8> :
  # _7 = PHI <_15(4), _10(7)>
<L5>:
  return _7;

}


FMSTR_PipeRead (void * hpipe, unsigned char * addr, FMSTR_PIPE_SIZE length, FMSTR_PIPE_SIZE granularity)
{
  FMSTR_PIPE_SIZE s;
  FMSTR_PIPE_SIZE total;
  struct FMSTR_PIPE_BUFF * pbuff;
  struct FMSTR_PIPE * pp;
  FMSTR_PIPE_SIZE D.6342;
  short unsigned int _1;
  short unsigned int _2;
  unsigned char * _3;
  short unsigned int _4;
  sizetype _5;
  unsigned char * _6;
  unsigned char _7;
  sizetype _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  unsigned char _13;
  short unsigned int _14;
  unsigned char * _15;
  short unsigned int _16;
  sizetype _17;
  unsigned char * _18;
  unsigned char _19;
  short unsigned int _20;
  short unsigned int _21;
  FMSTR_PIPE_SIZE _54;

  <bb 2> :
  pp_30 = hpipe_29(D);
  pbuff_31 = &pp_30->rx;
  total_34 = FMSTR_PipeGetBytesReady (pbuff_31);
  if (addr_35(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  length_37 = length_36(D);
  length_38 = length_37;
  if (length_38 > total_34)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  length_39 = total_34;

  <bb 5> :
  # length_22 = PHI <length_38(3), length_39(4)>
  if (granularity_40(D) > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  length_41 = length_22 / granularity_40(D);
  length_42 = length_41 * granularity_40(D);

  <bb 7> :
  # length_23 = PHI <length_22(5), length_42(6)>
  total_43 = length_23;
  if (length_23 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  _1 = pbuff_31->nSize;
  _2 = pbuff_31->nRP;
  s_44 = _1 - _2;
  if (s_44 > length_23)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  s_45 = length_23;

  <bb 10> :
  # s_25 = PHI <s_44(8), s_45(9)>
  _3 = pbuff_31->pBuff;
  _4 = pbuff_31->nRP;
  _5 = (sizetype) _4;
  _6 = _3 + _5;
  _7 = (unsigned char) s_25;
  FMSTR_CopyMemory (addr_35(D), _6, _7);
  _8 = (sizetype) s_25;
  addr_47 = addr_35(D) + _8;
  _9 = pbuff_31->nRP;
  _10 = s_25 + _9;
  pbuff_31->nRP = _10;
  _11 = pbuff_31->nRP;
  _12 = pbuff_31->nSize;
  if (_11 >= _12)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  pbuff_31->nRP = 0;

  <bb 12> :
  _13 = (unsigned char) s_25;
  _14 = (short unsigned int) _13;
  length_50 = length_23 - _14;
  if (length_50 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _15 = pbuff_31->pBuff;
  _16 = pbuff_31->nRP;
  _17 = (sizetype) _16;
  _18 = _15 + _17;
  _19 = (unsigned char) length_50;
  FMSTR_CopyMemory (addr_47, _18, _19);
  _20 = pbuff_31->nRP;
  _21 = length_50 + _20;
  pbuff_31->nRP = _21;

  <bb 14> :
  pbuff_31->flags.flg.bIsFull = 0;

  <bb 15> :
  # total_24 = PHI <total_34(2), total_43(7), total_43(14)>
  _54 = total_24;

  <bb 16> :
<L14>:
  return _54;

}


FMSTR_PipePrintf (void * hpipe, const char * pszFmt)
{
  struct va_list args;
  FMSTR_BOOL ok;
  FMSTR_BOOL D.6325;
  FMSTR_BOOL _8;

  <bb 2> :
  __builtin_va_start (&args, 0);
  ok_6 = FMSTR_PipePrintfV (hpipe_3(D), pszFmt_4(D), &args);
  __builtin_va_end (&args);
  _8 = ok_6;
  args ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _8;

}


FMSTR_PipePrintfV (void * hpipe, const char * pszFmt, struct va_list * parg)
{
  const char * psz;
  struct FMSTR_PIPE_PRINTF_CTX ctx;
  FMSTR_BOOL ok;
  int iftmp.59;
  FMSTR_BOOL D.6317;
  const char * iftmp.57;
  char _1;
  char _2;
  unsigned char _3;
  unsigned char _4;
  const char * pszFmt.58_5;
  char _6;
  char _7;
  unsigned char _8;
  const char * iftmp.57_11;
  int iftmp.59_12;
  const char * iftmp.57_33;
  const char * iftmp.57_34;
  int iftmp.59_40;
  int iftmp.59_41;
  FMSTR_BOOL _42;

  <bb 2> :
  ok_16 = 1;
  goto <bb 14>; [INV]

  <bb 3> :
  _1 = *pszFmt_9;
  if (_1 == 37)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  pszFmt_23 = pszFmt_9 + 1;
  _2 = *pszFmt_23;
  if (_2 == 37)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ok_37 = FMSTR_PipePrintfPutc (hpipe_20(D), 37);
  pszFmt_38 = pszFmt_23 + 1;
  goto <bb 14>; [INV]

  <bb 6> :
  ok_25 = FMSTR_PipePrintfFlush (hpipe_20(D));
  if (ok_25 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  pszFmt_27 = FMSTR_PipeParseFormat (pszFmt_23, &ctx);
  _3 = BIT_FIELD_REF <ctx.flags.flg, 8, 0>;
  _4 = _3 & 32;
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  psz_32 = .VA_ARG (parg_28(D), 0B, 0B);
  if (psz_32 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.57_34 = psz_32;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.57_33 = "NULL";

  <bb 11> :
  # iftmp.57_11 = PHI <iftmp.57_34(9), iftmp.57_33(10)>
  FMSTR_PipePuts (hpipe_20(D), iftmp.57_11);
  goto <bb 14>; [INV]

  <bb 12> :
  ok_30 = FMSTR_PipePrintfAny (hpipe_20(D), parg_28(D), &ctx);
  goto <bb 14>; [INV]

  <bb 13> :
  pszFmt.58_5 = pszFmt_9;
  pszFmt_19 = pszFmt.58_5 + 1;
  _6 = *pszFmt.58_5;
  ok_22 = FMSTR_PipePrintfPutc (hpipe_20(D), _6);

  <bb 14> :
  # pszFmt_9 = PHI <pszFmt_17(D)(2), pszFmt_23(6), pszFmt_19(13), pszFmt_38(5), pszFmt_27(12), pszFmt_27(11)>
  # ok_10 = PHI <ok_16(2), ok_25(6), ok_22(13), ok_37(5), ok_30(12), ok_25(11)>
  _7 = *pszFmt_9;
  if (_7 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  if (ok_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (ok_10 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _8 = FMSTR_PipePrintfFlush (hpipe_20(D));
  if (_8 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  iftmp.59_40 = 1;
  goto <bb 20>; [INV]

  <bb 19> :
  iftmp.59_41 = 0;

  <bb 20> :
  # iftmp.59_12 = PHI <iftmp.59_40(18), iftmp.59_41(19)>
  _42 = (FMSTR_BOOL) iftmp.59_12;
  ctx ={v} {CLOBBER};

  <bb 21> :
<L23>:
  return _42;

}


FMSTR_PipePrintfAny (void * hpipe, struct va_list * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_U32 arg;
  FMSTR_S32 arg;
  FMSTR_U16 arg;
  FMSTR_S16 arg;
  FMSTR_U8 arg;
  FMSTR_S8 arg;
  FMSTR_BOOL ok;
  FMSTR_BOOL D.6299;
  unsigned char _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  int _5;
  signed char _6;
  unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  int _11;
  short int _12;
  unsigned int _13;
  short unsigned int _14;
  unsigned char _15;
  unsigned char _16;
  long int _17;
  long unsigned int _18;
  FMSTR_BOOL _62;

  <bb 2> :
  ok_27 = 0;
  _1 = pctx_29(D)->dtsize;
  _2 = (int) _1;
  switch (_2) <default: <L12> [INV], case 1: <L0> [INV], case 2: <L4> [INV], case 4: <L8> [INV]>

  <bb 3> :
<L0>:
  _3 = BIT_FIELD_REF <pctx_29(D)->flags.flg, 8, 0>;
  _4 = _3 & 16;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = .VA_ARG (parg_30(D), 0B, 0B);
  _6 = (signed char) _5;
  arg = _6;
  ok_60 = FMSTR_PipeS8ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};
  goto <bb 6>; [INV]

  <bb 5> :
  _7 = .VA_ARG (parg_30(D), 0B, 0B);
  _8 = (unsigned char) _7;
  arg = _8;
  ok_55 = FMSTR_PipeU8ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};

  <bb 6> :
  # ok_19 = PHI <ok_60(4), ok_55(5)>
  goto <bb 15>; [INV]

  <bb 7> :
<L4>:
  _9 = BIT_FIELD_REF <pctx_29(D)->flags.flg, 8, 0>;
  _10 = _9 & 16;
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _11 = .VA_ARG (parg_30(D), 0B, 0B);
  _12 = (short int) _11;
  arg = _12;
  ok_50 = FMSTR_PipeS16ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};
  goto <bb 10>; [INV]

  <bb 9> :
  _13 = .VA_ARG (parg_30(D), 0B, 0B);
  _14 = (short unsigned int) _13;
  arg = _14;
  ok_45 = FMSTR_PipeU16ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};

  <bb 10> :
  # ok_20 = PHI <ok_50(8), ok_45(9)>
  goto <bb 15>; [INV]

  <bb 11> :
<L8>:
  _15 = BIT_FIELD_REF <pctx_29(D)->flags.flg, 8, 0>;
  _16 = _15 & 16;
  if (_16 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _17 = .VA_ARG (parg_30(D), 0B, 0B);
  arg = _17;
  ok_40 = FMSTR_PipeS32ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};
  goto <bb 14>; [INV]

  <bb 13> :
  _18 = .VA_ARG (parg_30(D), 0B, 0B);
  arg = _18;
  ok_35 = FMSTR_PipeU32ToA (hpipe_33(D), &arg, pctx_29(D));
  arg ={v} {CLOBBER};

  <bb 14> :
  # ok_21 = PHI <ok_40(12), ok_35(13)>

  <bb 15> :
  # ok_22 = PHI <ok_27(2), ok_19(6), ok_20(10), ok_21(14)>
<L12>:
  _62 = ok_22;

  <bb 16> :
<L14>:
  return _62;

}


FMSTR_PipePrintfS32 (void * hpipe, const char * pszFmt, FMSTR_S32 arg)
{
  FMSTR_BOOL D.6287;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeS32ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfU32 (void * hpipe, const char * pszFmt, FMSTR_U32 arg)
{
  FMSTR_BOOL D.6285;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeU32ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfS16 (void * hpipe, const char * pszFmt, FMSTR_S16 arg)
{
  FMSTR_BOOL D.6283;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeS16ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfU16 (void * hpipe, const char * pszFmt, FMSTR_U16 arg)
{
  FMSTR_BOOL D.6281;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeU16ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfS8 (void * hpipe, const char * pszFmt, FMSTR_S8 arg)
{
  FMSTR_BOOL D.6279;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeS8ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfU8 (void * hpipe, const char * pszFmt, FMSTR_U8 arg)
{
  FMSTR_BOOL D.6277;
  FMSTR_BOOL _5;

  <bb 2> :
  _5 = FMSTR_PipePrintfOne (hpipe_2(D), pszFmt_3(D), &arg, FMSTR_PipeU8ToA);

  <bb 3> :
<L0>:
  return _5;

}


FMSTR_PipePrintfOne (void * hpipe, const char * pszFmt, void * parg, FMSTR_BOOL (*FMSTR_PIPE_ITOA_FUNC) (void *, const void *, struct FMSTR_PIPE_PRINTF_CTX *) pItoaFunc)
{
  const char * psz;
  struct FMSTR_PIPE_PRINTF_CTX ctx;
  FMSTR_BOOL ok;
  int iftmp.56;
  FMSTR_BOOL D.6269;
  const char * iftmp.54;
  char _1;
  char _2;
  unsigned char _3;
  unsigned char _4;
  const char * pszFmt.55_5;
  char _6;
  char _7;
  unsigned char _8;
  const char * iftmp.54_11;
  int iftmp.56_12;
  const char * iftmp.54_33;
  const char * iftmp.54_34;
  int iftmp.56_39;
  int iftmp.56_40;
  FMSTR_BOOL _41;

  <bb 2> :
  ok_16 = 1;
  goto <bb 14>; [INV]

  <bb 3> :
  _1 = *pszFmt_9;
  if (_1 == 37)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  pszFmt_23 = pszFmt_9 + 1;
  _2 = *pszFmt_23;
  if (_2 == 37)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FMSTR_PipePrintfPutc (hpipe_20(D), 37);
  pszFmt_37 = pszFmt_23 + 1;
  // predicted unlikely by continue predictor.
  goto <bb 14>; [INV]

  <bb 6> :
  ok_25 = FMSTR_PipePrintfFlush (hpipe_20(D));
  if (ok_25 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 7> :
  pszFmt_27 = FMSTR_PipeParseFormat (pszFmt_23, &ctx);
  _3 = BIT_FIELD_REF <ctx.flags.flg, 8, 0>;
  _4 = _3 & 32;
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  psz_32 = parg_29(D);
  if (psz_32 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.54_34 = psz_32;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.54_33 = "NULL";

  <bb 11> :
  # iftmp.54_11 = PHI <iftmp.54_34(9), iftmp.54_33(10)>
  FMSTR_PipePuts (hpipe_20(D), iftmp.54_11);
  goto <bb 14>; [INV]

  <bb 12> :
  ok_31 = pItoaFunc_28(D) (hpipe_20(D), parg_29(D), &ctx);
  goto <bb 14>; [INV]

  <bb 13> :
  pszFmt.55_5 = pszFmt_9;
  pszFmt_19 = pszFmt.55_5 + 1;
  _6 = *pszFmt.55_5;
  ok_22 = FMSTR_PipePrintfPutc (hpipe_20(D), _6);

  <bb 14> :
  # pszFmt_9 = PHI <pszFmt_17(D)(2), pszFmt_37(5), pszFmt_27(11), pszFmt_19(13), pszFmt_23(6), pszFmt_27(12)>
  # ok_10 = PHI <ok_16(2), ok_10(5), ok_25(11), ok_22(13), ok_25(6), ok_31(12)>
  _7 = *pszFmt_9;
  if (_7 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  if (ok_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (ok_10 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _8 = FMSTR_PipePrintfFlush (hpipe_20(D));
  if (_8 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  iftmp.56_39 = 1;
  goto <bb 20>; [INV]

  <bb 19> :
  iftmp.56_40 = 0;

  <bb 20> :
  # iftmp.56_12 = PHI <iftmp.56_39(18), iftmp.56_40(19)>
  _41 = (FMSTR_BOOL) iftmp.56_12;
  ctx ={v} {CLOBBER};

  <bb 21> :
<L22>:
  return _41;

}


FMSTR_PipeParseFormat (const char * pszFmt, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  const char * D.6252;
  char _1;
  char _2;
  char _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  char _7;
  unsigned char _8;
  unsigned char _9;
  char _10;
  char _11;
  char _12;
  int _13;
  char _14;
  const char * pszFmt.53_15;
  char _16;
  int _17;
  const char * _63;

  <bb 2> :
  pctx_33(D)->flags.all = 0;
  _1 = *pszFmt_35(D);
  if (_1 == 37)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pszFmt_36 = pszFmt_35(D) + 1;

  <bb 4> :
  # pszFmt_18 = PHI <pszFmt_35(D)(2), pszFmt_36(3)>
  _2 = *pszFmt_18;
  if (_2 == 43)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pctx_33(D)->flags.flg.showsign = 1;
  pszFmt_38 = pszFmt_18 + 1;

  <bb 6> :
  # pszFmt_19 = PHI <pszFmt_18(4), pszFmt_38(5)>
  _3 = *pszFmt_19;
  if (_3 == 48)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  pctx_33(D)->flags.flg.zeroes = 1;
  pszFmt_40 = pszFmt_19 + 1;

  <bb 8> :
  # pszFmt_20 = PHI <pszFmt_19(6), pszFmt_40(7)>
  pctx_33(D)->alen = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _4 = pctx_33(D)->alen;
  _5 = _4 * 10;
  pctx_33(D)->alen = _5;
  _6 = pctx_33(D)->alen;
  _7 = *pszFmt_21;
  _8 = _6 + _7;
  _9 = _8 + 208;
  pctx_33(D)->alen = _9;
  pszFmt_44 = pszFmt_21 + 1;

  <bb 10> :
  # pszFmt_21 = PHI <pszFmt_20(8), pszFmt_44(9)>
  _10 = *pszFmt_21;
  if (_10 > 47)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _11 = *pszFmt_21;
  if (_11 <= 57)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  pctx_33(D)->dtsize = 4;
  _12 = *pszFmt_21;
  _13 = (int) _12;
  switch (_13) <default: <L14> [INV], case 104: <L10> [INV], case 108: <L13> [INV]>

  <bb 13> :
<L10>:
  pctx_33(D)->dtsize = 2;
  pszFmt_49 = pszFmt_21 + 1;
  _14 = *pszFmt_49;
  if (_14 == 104)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  pctx_33(D)->dtsize = 1;
  pszFmt_51 = pszFmt_49 + 1;

  <bb 15> :
  # pszFmt_22 = PHI <pszFmt_49(13), pszFmt_51(14)>
  goto <bb 17>; [INV]

  <bb 16> :
<L13>:
  pctx_33(D)->dtsize = 4;
  pszFmt_47 = pszFmt_21 + 1;

  <bb 17> :
  # pszFmt_23 = PHI <pszFmt_21(12), pszFmt_22(15), pszFmt_47(16)>
<L14>:
  pszFmt.53_15 = pszFmt_23;
  pszFmt_52 = pszFmt.53_15 + 1;
  _16 = *pszFmt.53_15;
  _17 = (int) _16;
  switch (_17) <default: <L25> [INV], case 88: <L16> [INV], case 98: <L19> [INV], case 99: <L23> [INV], case 100: <L20> [INV], case 105: <L20> [INV], case 111: <L18> [INV], case 115: <L24> [INV], case 117: <L22> [INV], case 120: <L17> [INV]>

  <bb 18> :
<L16>:
  pctx_33(D)->flags.flg.upperc = 1;

  <bb 19> :
<L17>:
  pctx_33(D)->radix = 3;
  goto <bb 26>; [INV]

  <bb 20> :
<L18>:
  pctx_33(D)->radix = 1;
  goto <bb 26>; [INV]

  <bb 21> :
<L19>:
  pctx_33(D)->radix = 0;
  goto <bb 26>; [INV]

  <bb 22> :
<L20>:
  pctx_33(D)->flags.flg.signedtype = 1;

  <bb 23> :
<L22>:
  pctx_33(D)->radix = 2;
  goto <bb 26>; [INV]

  <bb 24> :
<L23>:
  pctx_33(D)->radix = 4;
  pctx_33(D)->dtsize = 1;
  goto <bb 26>; [INV]

  <bb 25> :
<L24>:
  pctx_33(D)->flags.flg.isstring = 1;
  pctx_33(D)->dtsize = 4;

  <bb 26> :
<L25>:
  _63 = pszFmt_52;

  <bb 27> :
<L27>:
  return _63;

}


FMSTR_PipeS32ToA (void * hpipe, const FMSTR_S32 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_S32 arg;
  FMSTR_BOOL D.6238;
  long int _1;
  long int arg.51_2;
  unsigned char _3;
  unsigned char _4;
  long int arg.52_5;
  long int _6;
  FMSTR_BOOL _16;

  <bb 2> :
  _1 = *parg_9(D);
  arg = _1;
  arg.51_2 = arg;
  if (arg.51_2 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  pctx_11(D)->flags.flg.negative = 1;
  _3 = BIT_FIELD_REF <pctx_11(D)->flags.flg, 8, 0>;
  _4 = _3 & 16;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  arg.52_5 = arg;
  _6 = -arg.52_5;
  arg = _6;

  <bb 5> :
  _16 = FMSTR_PipeU32ToA (hpipe_14(D), &arg, pctx_11(D));
  arg ={v} {CLOBBER};

  <bb 6> :
<L5>:
  return _16;

}


FMSTR_PipeU32ToA (void * hpipe, const FMSTR_U32 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_INDEX i;
  FMSTR_U32 tmp;
  FMSTR_U32 arg;
  struct FMSTR_PIPE * pp;
  char iftmp.48;
  char iftmp.47;
  char iftmp.46;
  FMSTR_BOOL D.6210;
  unsigned char _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  int _6;
  char _7;
  char _8;
  char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  char _14;
  short int i.40_15;
  unsigned short i.41_16;
  unsigned short _17;
  char _18;
  char _19;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  int _23;
  char _24;
  short int i.42_25;
  unsigned short i.43_26;
  unsigned short _27;
  long unsigned int _28;
  char _29;
  unsigned char _30;
  unsigned char _31;
  unsigned char _32;
  int _33;
  char _34;
  short int i.44_35;
  unsigned short i.45_36;
  unsigned short _37;
  unsigned char _38;
  unsigned char _39;
  char _40;
  char _41;
  char _42;
  char _43;
  unsigned char _44;
  unsigned char _45;
  unsigned char _46;
  int _47;
  short int i.49_48;
  unsigned short i.50_49;
  unsigned short _50;
  char iftmp.46_59;
  char iftmp.47_60;
  char iftmp.48_61;
  char iftmp.48_92;
  char iftmp.48_93;
  char iftmp.46_94;
  char iftmp.47_95;
  char iftmp.47_96;
  char iftmp.46_97;
  FMSTR_BOOL _103;

  <bb 2> :
  pp_68 = hpipe_67(D);
  arg_71 = *parg_70(D);
  _1 = pctx_72(D)->radix;
  _2 = (int) _1;
  switch (_2) <default: <L22> [INV], case 0: <L1> [INV], case 1: <L8> [INV], case 2: <L15> [INV], case 4: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = pp_68->printfBPtr;
  _4 = _3;
  _5 = _4 + 1;
  pp_68->printfBPtr = _5;
  _6 = (int) _4;
  _7 = (char) arg_71;
  pp_68->printfBuff[_6] = _7;
  goto <bb 37>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  i_85 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _8 = (char) arg_51;
  _9 = _8 & 1;
  _10 = pp_68->printfBPtr;
  _11 = _10;
  _12 = _11 + 1;
  pp_68->printfBPtr = _12;
  _13 = (int) _11;
  _14 = _9 + 48;
  pp_68->printfBuff[_13] = _14;
  arg_88 = arg_51 >> 1;
  i.40_15 = i_55;
  i.41_16 = (unsigned short) i.40_15;
  _17 = i.41_16 + 1;
  i_89 = (FMSTR_INDEX) _17;

  <bb 7> :
  # arg_51 = PHI <arg_71(5), arg_88(6)>
  # i_55 = PHI <i_85(5), i_89(6)>
  if (arg_51 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (i_55 <= 31)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  goto <bb 37>; [INV]

  <bb 10> :
<L8>:

  <bb 11> :
  i_80 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = (char) arg_52;
  _19 = _18 & 7;
  _20 = pp_68->printfBPtr;
  _21 = _20;
  _22 = _21 + 1;
  pp_68->printfBPtr = _22;
  _23 = (int) _21;
  _24 = _19 + 48;
  pp_68->printfBuff[_23] = _24;
  arg_83 = arg_52 >> 3;
  i.42_25 = i_56;
  i.43_26 = (unsigned short) i.42_25;
  _27 = i.43_26 + 1;
  i_84 = (FMSTR_INDEX) _27;

  <bb 13> :
  # arg_52 = PHI <arg_71(11), arg_83(12)>
  # i_56 = PHI <i_80(11), i_84(12)>
  if (arg_52 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  if (i_56 <= 10)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  goto <bb 37>; [INV]

  <bb 16> :
<L15>:

  <bb 17> :
  i_75 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
  _28 = arg_53 % 10;
  _29 = (char) _28;
  _30 = pp_68->printfBPtr;
  _31 = _30;
  _32 = _31 + 1;
  pp_68->printfBPtr = _32;
  _33 = (int) _31;
  _34 = _29 + 48;
  pp_68->printfBuff[_33] = _34;
  arg_78 = arg_53 / 10;
  i.44_35 = i_57;
  i.45_36 = (unsigned short) i.44_35;
  _37 = i.45_36 + 1;
  i_79 = (FMSTR_INDEX) _37;

  <bb 19> :
  # arg_53 = PHI <arg_71(17), arg_78(18)>
  # i_57 = PHI <i_75(17), i_79(18)>
  if (arg_53 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (i_57 <= 9)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  goto <bb 37>; [INV]

  <bb 22> :
<L22>:

  <bb 23> :
  i_90 = 0;
  goto <bb 34>; [INV]

  <bb 24> :
  tmp_91 = arg_54 & 15;
  _38 = BIT_FIELD_REF <pctx_72(D)->flags.flg, 8, 0>;
  _39 = _38 & 1;
  if (_39 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 25> :
  if (tmp_91 <= 9)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _40 = (char) tmp_91;
  iftmp.47_96 = _40 + 48;
  goto <bb 28>; [INV]

  <bb 27> :
  _41 = (char) tmp_91;
  iftmp.47_95 = _41 + 55;

  <bb 28> :
  # iftmp.47_60 = PHI <iftmp.47_96(26), iftmp.47_95(27)>
  iftmp.46_97 = iftmp.47_60;
  goto <bb 33>; [INV]

  <bb 29> :
  if (tmp_91 <= 9)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  _42 = (char) tmp_91;
  iftmp.48_93 = _42 + 48;
  goto <bb 32>; [INV]

  <bb 31> :
  _43 = (char) tmp_91;
  iftmp.48_92 = _43 + 87;

  <bb 32> :
  # iftmp.48_61 = PHI <iftmp.48_93(30), iftmp.48_92(31)>
  iftmp.46_94 = iftmp.48_61;

  <bb 33> :
  # iftmp.46_59 = PHI <iftmp.46_97(28), iftmp.46_94(32)>
  _44 = pp_68->printfBPtr;
  _45 = _44;
  _46 = _45 + 1;
  pp_68->printfBPtr = _46;
  _47 = (int) _45;
  pp_68->printfBuff[_47] = iftmp.46_59;
  arg_100 = arg_54 >> 4;
  i.49_48 = i_58;
  i.50_49 = (unsigned short) i.49_48;
  _50 = i.50_49 + 1;
  i_101 = (FMSTR_INDEX) _50;

  <bb 34> :
  # arg_54 = PHI <arg_71(23), arg_100(33)>
  # i_58 = PHI <i_90(23), i_101(33)>
  if (arg_54 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  if (i_58 <= 7)
    goto <bb 24>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :

  <bb 37> :
  _103 = FMSTR_PipeIToAFinalize (hpipe_67(D), pctx_72(D));

  <bb 38> :
<L40>:
  return _103;

}


FMSTR_PipeS16ToA (void * hpipe, const FMSTR_S16 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_S16 arg;
  FMSTR_BOOL D.6205;
  short int _1;
  short int arg.37_2;
  unsigned char _3;
  unsigned char _4;
  short int arg.38_5;
  unsigned short arg.39_6;
  unsigned short _7;
  short int _8;
  FMSTR_BOOL _18;

  <bb 2> :
  _1 = *parg_11(D);
  arg = _1;
  arg.37_2 = arg;
  if (arg.37_2 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  pctx_13(D)->flags.flg.negative = 1;
  _3 = BIT_FIELD_REF <pctx_13(D)->flags.flg, 8, 0>;
  _4 = _3 & 16;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  arg.38_5 = arg;
  arg.39_6 = (unsigned short) arg.38_5;
  _7 = -arg.39_6;
  _8 = (short int) _7;
  arg = _8;

  <bb 5> :
  _18 = FMSTR_PipeU16ToA (hpipe_16(D), &arg, pctx_13(D));
  arg ={v} {CLOBBER};

  <bb 6> :
<L5>:
  return _18;

}


FMSTR_PipeU16ToA (void * hpipe, const FMSTR_U16 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_INDEX i;
  FMSTR_U16 tmp;
  FMSTR_U16 arg;
  struct FMSTR_PIPE * pp;
  char iftmp.34;
  char iftmp.33;
  char iftmp.32;
  FMSTR_BOOL D.6177;
  unsigned char _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  int _6;
  char _7;
  char _8;
  char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  char _14;
  short int i.26_15;
  unsigned short i.27_16;
  unsigned short _17;
  char _18;
  char _19;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  int _23;
  char _24;
  short int i.28_25;
  unsigned short i.29_26;
  unsigned short _27;
  short unsigned int _28;
  char _29;
  unsigned char _30;
  unsigned char _31;
  unsigned char _32;
  int _33;
  char _34;
  short int i.30_35;
  unsigned short i.31_36;
  unsigned short _37;
  unsigned char _38;
  unsigned char _39;
  char _40;
  char _41;
  char _42;
  char _43;
  unsigned char _44;
  unsigned char _45;
  unsigned char _46;
  int _47;
  short int i.35_48;
  unsigned short i.36_49;
  unsigned short _50;
  char iftmp.32_59;
  char iftmp.33_60;
  char iftmp.34_61;
  char iftmp.34_92;
  char iftmp.34_93;
  char iftmp.32_94;
  char iftmp.33_95;
  char iftmp.33_96;
  char iftmp.32_97;
  FMSTR_BOOL _103;

  <bb 2> :
  pp_68 = hpipe_67(D);
  arg_71 = *parg_70(D);
  _1 = pctx_72(D)->radix;
  _2 = (int) _1;
  switch (_2) <default: <L22> [INV], case 0: <L1> [INV], case 1: <L8> [INV], case 2: <L15> [INV], case 4: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = pp_68->printfBPtr;
  _4 = _3;
  _5 = _4 + 1;
  pp_68->printfBPtr = _5;
  _6 = (int) _4;
  _7 = (char) arg_71;
  pp_68->printfBuff[_6] = _7;
  goto <bb 37>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  i_85 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _8 = (char) arg_51;
  _9 = _8 & 1;
  _10 = pp_68->printfBPtr;
  _11 = _10;
  _12 = _11 + 1;
  pp_68->printfBPtr = _12;
  _13 = (int) _11;
  _14 = _9 + 48;
  pp_68->printfBuff[_13] = _14;
  arg_88 = arg_51 >> 1;
  i.26_15 = i_55;
  i.27_16 = (unsigned short) i.26_15;
  _17 = i.27_16 + 1;
  i_89 = (FMSTR_INDEX) _17;

  <bb 7> :
  # arg_51 = PHI <arg_71(5), arg_88(6)>
  # i_55 = PHI <i_85(5), i_89(6)>
  if (arg_51 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (i_55 <= 15)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  goto <bb 37>; [INV]

  <bb 10> :
<L8>:

  <bb 11> :
  i_80 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = (char) arg_52;
  _19 = _18 & 7;
  _20 = pp_68->printfBPtr;
  _21 = _20;
  _22 = _21 + 1;
  pp_68->printfBPtr = _22;
  _23 = (int) _21;
  _24 = _19 + 48;
  pp_68->printfBuff[_23] = _24;
  arg_83 = arg_52 >> 3;
  i.28_25 = i_56;
  i.29_26 = (unsigned short) i.28_25;
  _27 = i.29_26 + 1;
  i_84 = (FMSTR_INDEX) _27;

  <bb 13> :
  # arg_52 = PHI <arg_71(11), arg_83(12)>
  # i_56 = PHI <i_80(11), i_84(12)>
  if (arg_52 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  if (i_56 <= 5)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  goto <bb 37>; [INV]

  <bb 16> :
<L15>:

  <bb 17> :
  i_75 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
  _28 = arg_53 % 10;
  _29 = (char) _28;
  _30 = pp_68->printfBPtr;
  _31 = _30;
  _32 = _31 + 1;
  pp_68->printfBPtr = _32;
  _33 = (int) _31;
  _34 = _29 + 48;
  pp_68->printfBuff[_33] = _34;
  arg_78 = arg_53 / 10;
  i.30_35 = i_57;
  i.31_36 = (unsigned short) i.30_35;
  _37 = i.31_36 + 1;
  i_79 = (FMSTR_INDEX) _37;

  <bb 19> :
  # arg_53 = PHI <arg_71(17), arg_78(18)>
  # i_57 = PHI <i_75(17), i_79(18)>
  if (arg_53 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (i_57 <= 4)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  goto <bb 37>; [INV]

  <bb 22> :
<L22>:

  <bb 23> :
  i_90 = 0;
  goto <bb 34>; [INV]

  <bb 24> :
  tmp_91 = arg_54 & 15;
  _38 = BIT_FIELD_REF <pctx_72(D)->flags.flg, 8, 0>;
  _39 = _38 & 1;
  if (_39 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 25> :
  if (tmp_91 <= 9)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _40 = (char) tmp_91;
  iftmp.33_96 = _40 + 48;
  goto <bb 28>; [INV]

  <bb 27> :
  _41 = (char) tmp_91;
  iftmp.33_95 = _41 + 55;

  <bb 28> :
  # iftmp.33_60 = PHI <iftmp.33_96(26), iftmp.33_95(27)>
  iftmp.32_97 = iftmp.33_60;
  goto <bb 33>; [INV]

  <bb 29> :
  if (tmp_91 <= 9)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  _42 = (char) tmp_91;
  iftmp.34_93 = _42 + 48;
  goto <bb 32>; [INV]

  <bb 31> :
  _43 = (char) tmp_91;
  iftmp.34_92 = _43 + 87;

  <bb 32> :
  # iftmp.34_61 = PHI <iftmp.34_93(30), iftmp.34_92(31)>
  iftmp.32_94 = iftmp.34_61;

  <bb 33> :
  # iftmp.32_59 = PHI <iftmp.32_97(28), iftmp.32_94(32)>
  _44 = pp_68->printfBPtr;
  _45 = _44;
  _46 = _45 + 1;
  pp_68->printfBPtr = _46;
  _47 = (int) _45;
  pp_68->printfBuff[_47] = iftmp.32_59;
  arg_100 = arg_54 >> 4;
  i.35_48 = i_58;
  i.36_49 = (unsigned short) i.35_48;
  _50 = i.36_49 + 1;
  i_101 = (FMSTR_INDEX) _50;

  <bb 34> :
  # arg_54 = PHI <arg_71(23), arg_100(33)>
  # i_58 = PHI <i_90(23), i_101(33)>
  if (arg_54 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  if (i_58 <= 3)
    goto <bb 24>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :

  <bb 37> :
  _103 = FMSTR_PipeIToAFinalize (hpipe_67(D), pctx_72(D));

  <bb 38> :
<L40>:
  return _103;

}


FMSTR_PipeS8ToA (void * hpipe, const FMSTR_S8 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_S8 arg;
  FMSTR_BOOL D.6172;
  signed char _1;
  signed char arg.23_2;
  unsigned char _3;
  unsigned char _4;
  signed char arg.24_5;
  unsigned char arg.25_6;
  unsigned char _7;
  signed char _8;
  FMSTR_BOOL _18;

  <bb 2> :
  _1 = *parg_11(D);
  arg = _1;
  arg.23_2 = arg;
  if (arg.23_2 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  pctx_13(D)->flags.flg.negative = 1;
  _3 = BIT_FIELD_REF <pctx_13(D)->flags.flg, 8, 0>;
  _4 = _3 & 16;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  arg.24_5 = arg;
  arg.25_6 = (unsigned char) arg.24_5;
  _7 = -arg.25_6;
  _8 = (signed char) _7;
  arg = _8;

  <bb 5> :
  _18 = FMSTR_PipeU8ToA (hpipe_16(D), &arg, pctx_13(D));
  arg ={v} {CLOBBER};

  <bb 6> :
<L5>:
  return _18;

}


FMSTR_PipeU8ToA (void * hpipe, const FMSTR_U8 * parg, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  FMSTR_INDEX i;
  FMSTR_U8 tmp;
  FMSTR_U8 arg;
  struct FMSTR_PIPE * pp;
  char iftmp.20;
  char iftmp.19;
  char iftmp.18;
  FMSTR_BOOL D.6144;
  unsigned char _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  int _6;
  char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  int _11;
  char _12;
  short int i.12_13;
  unsigned short i.13_14;
  unsigned short _15;
  char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char _19;
  int _20;
  char _21;
  short int i.14_22;
  unsigned short i.15_23;
  unsigned short _24;
  unsigned char _25;
  unsigned char _26;
  unsigned char _27;
  unsigned char _28;
  int _29;
  char _30;
  short int i.16_31;
  unsigned short i.17_32;
  unsigned short _33;
  unsigned char _34;
  unsigned char _35;
  unsigned char _36;
  unsigned char _37;
  unsigned char _38;
  int _39;
  short int i.21_40;
  unsigned short i.22_41;
  unsigned short _42;
  char iftmp.18_51;
  char iftmp.19_52;
  char iftmp.20_53;
  char iftmp.20_84;
  char iftmp.20_85;
  char iftmp.18_86;
  char iftmp.19_87;
  char iftmp.19_88;
  char iftmp.18_89;
  FMSTR_BOOL _95;

  <bb 2> :
  pp_60 = hpipe_59(D);
  arg_63 = *parg_62(D);
  _1 = pctx_64(D)->radix;
  _2 = (int) _1;
  switch (_2) <default: <L22> [INV], case 0: <L1> [INV], case 1: <L8> [INV], case 2: <L15> [INV], case 4: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = pp_60->printfBPtr;
  _4 = _3;
  _5 = _4 + 1;
  pp_60->printfBPtr = _5;
  _6 = (int) _4;
  pp_60->printfBuff[_6] = arg_63;
  goto <bb 37>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  i_77 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = arg_43 & 1;
  _8 = pp_60->printfBPtr;
  _9 = _8;
  _10 = _9 + 1;
  pp_60->printfBPtr = _10;
  _11 = (int) _9;
  _12 = _7 + 48;
  pp_60->printfBuff[_11] = _12;
  arg_80 = arg_43 >> 1;
  i.12_13 = i_47;
  i.13_14 = (unsigned short) i.12_13;
  _15 = i.13_14 + 1;
  i_81 = (FMSTR_INDEX) _15;

  <bb 7> :
  # arg_43 = PHI <arg_63(5), arg_80(6)>
  # i_47 = PHI <i_77(5), i_81(6)>
  if (arg_43 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  if (i_47 <= 7)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  goto <bb 37>; [INV]

  <bb 10> :
<L8>:

  <bb 11> :
  i_72 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _16 = arg_44 & 7;
  _17 = pp_60->printfBPtr;
  _18 = _17;
  _19 = _18 + 1;
  pp_60->printfBPtr = _19;
  _20 = (int) _18;
  _21 = _16 + 48;
  pp_60->printfBuff[_20] = _21;
  arg_75 = arg_44 >> 3;
  i.14_22 = i_48;
  i.15_23 = (unsigned short) i.14_22;
  _24 = i.15_23 + 1;
  i_76 = (FMSTR_INDEX) _24;

  <bb 13> :
  # arg_44 = PHI <arg_63(11), arg_75(12)>
  # i_48 = PHI <i_72(11), i_76(12)>
  if (arg_44 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  if (i_48 <= 2)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  goto <bb 37>; [INV]

  <bb 16> :
<L15>:

  <bb 17> :
  i_67 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
  _25 = arg_45 % 10;
  _26 = pp_60->printfBPtr;
  _27 = _26;
  _28 = _27 + 1;
  pp_60->printfBPtr = _28;
  _29 = (int) _27;
  _30 = _25 + 48;
  pp_60->printfBuff[_29] = _30;
  arg_70 = arg_45 / 10;
  i.16_31 = i_49;
  i.17_32 = (unsigned short) i.16_31;
  _33 = i.17_32 + 1;
  i_71 = (FMSTR_INDEX) _33;

  <bb 19> :
  # arg_45 = PHI <arg_63(17), arg_70(18)>
  # i_49 = PHI <i_67(17), i_71(18)>
  if (arg_45 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  if (i_49 <= 2)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  goto <bb 37>; [INV]

  <bb 22> :
<L22>:

  <bb 23> :
  i_82 = 0;
  goto <bb 34>; [INV]

  <bb 24> :
  tmp_83 = arg_46 & 15;
  _34 = BIT_FIELD_REF <pctx_64(D)->flags.flg, 8, 0>;
  _35 = _34 & 1;
  if (_35 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 25> :
  if (tmp_83 <= 9)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  iftmp.19_88 = tmp_83 + 48;
  goto <bb 28>; [INV]

  <bb 27> :
  iftmp.19_87 = tmp_83 + 55;

  <bb 28> :
  # iftmp.19_52 = PHI <iftmp.19_88(26), iftmp.19_87(27)>
  iftmp.18_89 = iftmp.19_52;
  goto <bb 33>; [INV]

  <bb 29> :
  if (tmp_83 <= 9)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  iftmp.20_85 = tmp_83 + 48;
  goto <bb 32>; [INV]

  <bb 31> :
  iftmp.20_84 = tmp_83 + 87;

  <bb 32> :
  # iftmp.20_53 = PHI <iftmp.20_85(30), iftmp.20_84(31)>
  iftmp.18_86 = iftmp.20_53;

  <bb 33> :
  # iftmp.18_51 = PHI <iftmp.18_89(28), iftmp.18_86(32)>
  _36 = pp_60->printfBPtr;
  _37 = _36;
  _38 = _37 + 1;
  pp_60->printfBPtr = _38;
  _39 = (int) _37;
  pp_60->printfBuff[_39] = iftmp.18_51;
  arg_92 = arg_46 >> 4;
  i.21_40 = i_50;
  i.22_41 = (unsigned short) i.21_40;
  _42 = i.22_41 + 1;
  i_93 = (FMSTR_INDEX) _42;

  <bb 34> :
  # arg_46 = PHI <arg_63(23), arg_92(33)>
  # i_50 = PHI <i_82(23), i_93(33)>
  if (arg_46 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  if (i_50 <= 1)
    goto <bb 24>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :

  <bb 37> :
  _95 = FMSTR_PipeIToAFinalize (hpipe_59(D), pctx_64(D));

  <bb 38> :
<L40>:
  return _95;

}


FMSTR_PipeIToAFinalize (void * hpipe, struct FMSTR_PIPE_PRINTF_CTX * pctx)
{
  char sgn;
  char z;
  FMSTR_SIZE8 bhalf;
  FMSTR_SIZE8 i;
  FMSTR_SIZE8 minlen;
  FMSTR_SIZE8 bptr;
  struct FMSTR_PIPE * pp;
  char iftmp.6;
  FMSTR_BOOL D.6122;
  unsigned char bptr.4_1;
  int _2;
  int _3;
  char _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char minlen.5_11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  int _18;
  unsigned char _19;
  unsigned char _20;
  unsigned char _21;
  unsigned char _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  unsigned char _27;
  unsigned char bptr.7_28;
  int _29;
  unsigned char bptr.8_30;
  int _31;
  unsigned char _32;
  unsigned char _33;
  unsigned char _34;
  unsigned char bptr.9_35;
  int _36;
  unsigned char bptr.10_37;
  int _38;
  int _39;
  int _40;
  int _41;
  int _42;
  char _43;
  int _44;
  int _45;
  int _46;
  unsigned char i.11_47;
  FMSTR_BOOL _58;
  char iftmp.6_59;
  char iftmp.6_90;
  char iftmp.6_91;
  FMSTR_BOOL _102;
  FMSTR_BOOL _109;

  <bb 2> :
  pp_70 = hpipe_69(D);
  bptr_72 = pp_70->printfBPtr;
  pp_70->printfBPtr = 0;
  if (bptr_72 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pp_70->printfBuff[0] = 48;
  bptr_75 = 1;

  <bb 4> :
  # bptr_48 = PHI <bptr_72(2), bptr_75(3)>
  goto <bb 6>; [INV]

  <bb 5> :
  bptr.4_1 = bptr_49;
  bptr_76 = bptr.4_1 + 255;

  <bb 6> :
  # bptr_49 = PHI <bptr_48(4), bptr_76(5)>
  if (bptr_49 > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _2 = (int) bptr_49;
  _3 = _2 + -1;
  _4 = pp_70->printfBuff[_3];
  if (_4 == 48)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _6 = _5 & 8;
  if (_6 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  sgn_79 = 45;
  pctx_77(D)->flags.flg.showsign = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  sgn_78 = 43;

  <bb 11> :
  # sgn_57 = PHI <sgn_79(9), sgn_78(10)>
  _7 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _8 = _7 & 16;
  if (_8 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  pctx_77(D)->flags.flg.showsign = 0;

  <bb 13> :
  minlen_82 = bptr_49;
  _9 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _10 = _9 & 4;
  if (_10 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  minlen.5_11 = minlen_82;
  minlen_83 = minlen.5_11 + 1;

  <bb 15> :
  # minlen_53 = PHI <minlen_82(13), minlen_83(14)>
  if (minlen_53 > 48)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _109 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 41>; [INV]

  <bb 17> :
  _12 = pctx_77(D)->alen;
  if (_12 > 48)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  pctx_77(D)->alen = 48;

  <bb 19> :
  _13 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _14 = _13 & 2;
  if (_14 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 20> :
  z_89 = 48;
  _15 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _16 = _15 & 8;
  if (_16 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 21> :
  _17 = pctx_77(D)->radix;
  _18 = (int) _17;
  switch (_18) <default: <L25> [INV], case 0: <L19> [INV], case 1: <L20> [INV], case 3: <L21> [INV]>

  <bb 22> :
<L19>:
  z_94 = 49;
  goto <bb 28>; [INV]

  <bb 23> :
<L20>:
  z_93 = 55;
  goto <bb 28>; [INV]

  <bb 24> :
<L21>:
  _19 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _20 = _19 & 1;
  if (_20 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  iftmp.6_91 = 70;
  goto <bb 27>; [INV]

  <bb 26> :
  iftmp.6_90 = 102;

  <bb 27> :
  # iftmp.6_59 = PHI <iftmp.6_91(25), iftmp.6_90(26)>
  z_92 = iftmp.6_59;

  <bb 28> :
  # z_55 = PHI <z_89(20), z_89(21), z_94(22), z_93(23), z_92(27)>
<L25>:
  _21 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _22 = _21 & 4;
  if (_22 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 29> :
  _23 = pctx_77(D)->alen;
  _24 = _23;
  _25 = _24 + 255;
  pctx_77(D)->alen = _25;
  goto <bb 32>; [INV]

  <bb 30> :
  z_85 = 32;
  _26 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _27 = _26 & 4;
  if (_27 != 0)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  bptr.7_28 = bptr_49;
  bptr_86 = bptr.7_28 + 1;
  _29 = (int) bptr.7_28;
  pp_70->printfBuff[_29] = sgn_57;
  pctx_77(D)->flags.flg.showsign = 0;

  <bb 32> :
  # bptr_50 = PHI <bptr_49(29), bptr_49(30), bptr_86(31), bptr_49(28)>
  # z_56 = PHI <z_55(29), z_85(30), z_85(31), z_55(28)>
  goto <bb 34>; [INV]

  <bb 33> :
  bptr.8_30 = bptr_51;
  bptr_107 = bptr.8_30 + 1;
  _31 = (int) bptr.8_30;
  pp_70->printfBuff[_31] = z_56;

  <bb 34> :
  # bptr_51 = PHI <bptr_50(32), bptr_107(33)>
  _32 = pctx_77(D)->alen;
  if (bptr_51 < _32)
    goto <bb 33>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  _33 = BIT_FIELD_REF <pctx_77(D)->flags.flg, 8, 0>;
  _34 = _33 & 4;
  if (_34 != 0)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 36> :
  bptr.9_35 = bptr_51;
  bptr_96 = bptr.9_35 + 1;
  _36 = (int) bptr.9_35;
  pp_70->printfBuff[_36] = sgn_57;

  <bb 37> :
  # bptr_52 = PHI <bptr_51(35), bptr_96(36)>
  pp_70->printfBPtr = bptr_52;
  bhalf_99 = bptr_52 / 2;
  bptr.10_37 = bptr_52;
  bptr_100 = bptr.10_37 + 255;
  i_101 = 0;
  goto <bb 39>; [INV]

  <bb 38> :
  _38 = (int) i_54;
  z_103 = pp_70->printfBuff[_38];
  _39 = (int) bptr_100;
  _40 = (int) i_54;
  _41 = _39 - _40;
  _42 = (int) i_54;
  _43 = pp_70->printfBuff[_41];
  pp_70->printfBuff[_42] = _43;
  _44 = (int) bptr_100;
  _45 = (int) i_54;
  _46 = _44 - _45;
  pp_70->printfBuff[_46] = z_103;
  i.11_47 = i_54;
  i_106 = i.11_47 + 1;

  <bb 39> :
  # i_54 = PHI <i_101(37), i_106(38)>
  if (i_54 < bhalf_99)
    goto <bb 38>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 40> :
  _102 = 1;

  <bb 41> :
  # _58 = PHI <_109(16), _102(40)>
<L42>:
  return _58;

}


FMSTR_PipePrintfPutc (void * hpipe, char c)
{
  struct FMSTR_PIPE * pp;
  FMSTR_BOOL D.6108;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  unsigned char _5;
  int _6;
  FMSTR_BOOL _7;
  FMSTR_BOOL _14;
  FMSTR_BOOL _18;

  <bb 2> :
  pp_11 = hpipe_10(D);
  _1 = pp_11->printfBPtr;
  if (_1 > 47)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = FMSTR_PipePrintfFlush (hpipe_10(D));
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _14 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = pp_11->printfBPtr;
  _4 = _3;
  _5 = _4 + 1;
  pp_11->printfBPtr = _5;
  _6 = (int) _4;
  pp_11->printfBuff[_6] = c_16(D);
  _18 = 1;

  <bb 6> :
  # _7 = PHI <_14(4), _18(5)>
<L4>:
  return _7;

}


FMSTR_PipePrintfFlush (void * hpipe)
{
  FMSTR_SIZE8 sz;
  FMSTR_BOOL ok;
  struct FMSTR_PIPE * pp;
  FMSTR_BOOL D.6102;
  unsigned char _1;
  char[48] * _2;
  unsigned char _3;
  short unsigned int _4;
  short unsigned int _5;
  unsigned char _6;
  FMSTR_BOOL _18;

  <bb 2> :
  pp_11 = hpipe_10(D);
  ok_12 = 1;
  _1 = pp_11->printfBPtr;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = &pp_11->printfBuff;
  _3 = pp_11->printfBPtr;
  _4 = (short unsigned int) _3;
  _5 = FMSTR_PipeWrite (hpipe_10(D), _2, _4, 0);
  sz_15 = (FMSTR_SIZE8) _5;
  _6 = pp_11->printfBPtr;
  if (sz_15 != _6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ok_16 = 0;

  <bb 5> :
  # ok_7 = PHI <ok_12(3), ok_16(4)>
  pp_11->printfBPtr = 0;

  <bb 6> :
  # ok_8 = PHI <ok_12(2), ok_7(5)>
  _18 = ok_8;

  <bb 7> :
<L4>:
  return _18;

}


FMSTR_PipePuts (void * hpipe, const char * pszStr)
{
  FMSTR_PIPE_SIZE slen;
  FMSTR_PIPE_SIZE free;
  struct FMSTR_PIPE_BUFF * pbuff;
  struct FMSTR_PIPE * pp;
  FMSTR_BOOL D.6096;
  FMSTR_BOOL _1;
  FMSTR_BOOL _13;
  FMSTR_BOOL _14;

  <bb 2> :
  pp_4 = hpipe_3(D);
  pbuff_5 = &pp_4->tx;
  free_8 = FMSTR_PipeGetBytesFree (pbuff_5);
  slen_11 = FMSTR_StrLen (pszStr_9(D));
  if (slen_11 > free_8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _14 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  FMSTR_PipeWrite (hpipe_3(D), pszStr_9(D), slen_11, 0);
  _13 = 1;

  <bb 5> :
  # _1 = PHI <_14(3), _13(4)>
<L2>:
  return _1;

}


FMSTR_PipeWrite (void * hpipe, unsigned char * addr, FMSTR_PIPE_SIZE length, FMSTR_PIPE_SIZE granularity)
{
  FMSTR_PIPE_SIZE s;
  FMSTR_PIPE_SIZE total;
  struct FMSTR_PIPE_BUFF * pbuff;
  struct FMSTR_PIPE * pp;
  FMSTR_PIPE_SIZE D.6092;
  short unsigned int _1;
  short unsigned int _2;
  unsigned char * _3;
  short unsigned int _4;
  sizetype _5;
  unsigned char * _6;
  unsigned char _7;
  sizetype _8;
  short unsigned int _9;
  short unsigned int _10;
  short unsigned int _11;
  short unsigned int _12;
  unsigned char _13;
  short unsigned int _14;
  unsigned char * _15;
  short unsigned int _16;
  sizetype _17;
  unsigned char * _18;
  unsigned char _19;
  short unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;
  short unsigned int _23;
  FMSTR_PIPE_SIZE _54;

  <bb 2> :
  pp_32 = hpipe_31(D);
  pbuff_33 = &pp_32->tx;
  total_36 = FMSTR_PipeGetBytesFree (pbuff_33);
  if (addr_37(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  if (length_38(D) > total_36)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  length_39 = total_36;

  <bb 5> :
  # length_24 = PHI <length_38(D)(3), length_39(4)>
  if (granularity_40(D) > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  length_41 = length_24 / granularity_40(D);
  length_42 = length_41 * granularity_40(D);

  <bb 7> :
  # length_25 = PHI <length_24(5), length_42(6)>
  total_43 = length_25;
  if (length_25 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  _1 = pbuff_33->nSize;
  _2 = pbuff_33->nWP;
  s_44 = _1 - _2;
  if (s_44 > length_25)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  s_45 = length_25;

  <bb 10> :
  # s_27 = PHI <s_44(8), s_45(9)>
  _3 = pbuff_33->pBuff;
  _4 = pbuff_33->nWP;
  _5 = (sizetype) _4;
  _6 = _3 + _5;
  _7 = (unsigned char) s_27;
  FMSTR_CopyMemory (_6, addr_37(D), _7);
  _8 = (sizetype) s_27;
  addr_47 = addr_37(D) + _8;
  _9 = pbuff_33->nWP;
  _10 = s_27 + _9;
  pbuff_33->nWP = _10;
  _11 = pbuff_33->nWP;
  _12 = pbuff_33->nSize;
  if (_11 >= _12)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  pbuff_33->nWP = 0;

  <bb 12> :
  _13 = (unsigned char) s_27;
  _14 = (short unsigned int) _13;
  length_50 = length_25 - _14;
  if (length_50 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _15 = pbuff_33->pBuff;
  _16 = pbuff_33->nWP;
  _17 = (sizetype) _16;
  _18 = _15 + _17;
  _19 = (unsigned char) length_50;
  FMSTR_CopyMemory (_18, addr_47, _19);
  _20 = pbuff_33->nWP;
  _21 = length_50 + _20;
  pbuff_33->nWP = _21;

  <bb 14> :
  _22 = pbuff_33->nWP;
  _23 = pbuff_33->nRP;
  if (_22 == _23)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  pbuff_33->flags.flg.bIsFull = 1;

  <bb 16> :
  # total_26 = PHI <total_36(2), total_43(7), total_43(14), total_43(15)>
  _54 = total_26;

  <bb 17> :
<L16>:
  return _54;

}


FMSTR_PipeClose (void * hpipe)
{
  struct FMSTR_PIPE * pp;

  <bb 2> :
  pp_3 = hpipe_2(D);
  if (pp_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pp_3->nPort = 0;

  <bb 4> :
  return;

}


FMSTR_PipeOpen (FMSTR_PIPE_PORT nPort, void (*FMSTR_PPIPEFUNC) (void *) pCallback, unsigned char * pRxBuff, FMSTR_PIPE_SIZE nRxSize, unsigned char * pTxBuff, FMSTR_PIPE_SIZE nTxSize)
{
  FMSTR_INDEX i;
  FMSTR_INDEX ifree;
  struct FMSTR_PIPE * pp;
  void * D.6072;
  short unsigned int _1;
  short unsigned int _2;
  short int i.2_3;
  unsigned short i.3_4;
  unsigned short _5;
  int _6;
  void * _13;
  void * _23;
  void * _45;

  <bb 2> :
  pp_15 = &pcm_pipes[0];
  ifree_16 = -1;
  i_17 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = pp_7->nPort;
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (ifree_10 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ifree_19 = i_12;

  <bb 6> :
  # ifree_9 = PHI <ifree_10(3), ifree_10(4), ifree_19(5)>
  _2 = pp_7->nPort;
  if (nPort_20(D) == _2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
  i.2_3 = i_12;
  i.3_4 = (unsigned short) i.2_3;
  _5 = i.3_4 + 1;
  i_21 = (FMSTR_INDEX) _5;
  pp_22 = pp_7 + 96;

  <bb 9> :
  # pp_7 = PHI <pp_15(2), pp_22(8)>
  # ifree_10 = PHI <ifree_16(2), ifree_9(8)>
  # i_12 = PHI <i_17(2), i_21(8)>
  if (i_12 <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # ifree_11 = PHI <ifree_9(7), ifree_10(9)>
  if (i_12 > 2)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  if (ifree_11 >= 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _6 = (int) ifree_11;
  pp_24 = &pcm_pipes[_6];
  goto <bb 14>; [INV]

  <bb 13> :
  _23 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 14> :
  # pp_8 = PHI <pp_7(10), pp_24(12)>
  pp_8->nPort = 0;
  pp_8->rx.pBuff = pRxBuff_26(D);
  pp_8->rx.nSize = nRxSize_28(D);
  pp_8->rx.nWP = 0;
  pp_8->rx.nRP = 0;
  pp_8->rx.flags.all = 0;
  pp_8->tx.pBuff = pTxBuff_33(D);
  pp_8->tx.nSize = nTxSize_35(D);
  pp_8->tx.nWP = 0;
  pp_8->tx.nRP = 0;
  pp_8->tx.flags.all = 0;
  pp_8->flags.all = 0;
  pp_8->pCallback = pCallback_41(D);
  pp_8->printfBPtr = 0;
  pp_8->nPort = nPort_20(D);
  _45 = pp_8;

  <bb 15> :
  # _13 = PHI <_23(13), _45(14)>
<L14>:
  return _13;

}


FMSTR_InitPipes ()
{
  FMSTR_INDEX i;
  int _1;
  short int i.0_2;
  unsigned short i.1_3;
  unsigned short _4;

  <bb 2> :
  i_7 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i_5;
  pcm_pipes[_1].nPort = 0;
  i.0_2 = i_5;
  i.1_3 = (unsigned short) i.0_2;
  _4 = i.1_3 + 1;
  i_10 = (FMSTR_INDEX) _4;

  <bb 4> :
  # i_5 = PHI <i_7(2), i_10(3)>
  if (i_5 <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


