
Marking local functions:


Marking externally visible functions: Pwm_Ipw_GetMaxPeriodValue Pwm_Ipw_ValidateSetOutPutToIdle Pwm_Ipw_ValidateSetPhaseShiftParams Pwm_Ipw_ValidateSetPhaseShift Pwm_Ipw_ValidateNotification Pwm_Ipw_SetPhaseShift Pwm_Ipw_GetChannelState Pwm_Ipw_EnableNotification Pwm_Ipw_DisableNotification Pwm_Ipw_GetOutputState Pwm_Ipw_SetOutputToIdle Pwm_Ipw_SetPeriodAndDuty Pwm_Ipw_SetDutyCycle Pwm_Ipw_DeInitInstance Pwm_Ipw_DeInit Pwm_Ipw_InitInstance Pwm_Ipw_Init


Marking externally visible variables: Pwm_Ipw_aFtmDutyCycle


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Ftm_Pwm_Ip_SetPhaseShift/29 (Ftm_Pwm_Ip_SetPhaseShift) @075ed0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetPhaseShift/13 
  Calls: 
Ftm_Pwm_Ip_EnableNotification/28 (Ftm_Pwm_Ip_EnableNotification) @068dce00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_EnableNotification/11 
  Calls: 
Ftm_Pwm_Ip_DisableNotification/27 (Ftm_Pwm_Ip_DisableNotification) @068dcc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_DisableNotification/10 
  Calls: 
Ftm_Pwm_Ip_GetOutputState/26 (Ftm_Pwm_Ip_GetOutputState) @068dca80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_GetOutputState/9 
  Calls: 
Ftm_Pwm_Ip_SwOutputControl/25 (Ftm_Pwm_Ip_SwOutputControl) @068dc8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetOutputToIdle/8 
  Calls: 
Ftm_Pwm_Ip_ChannelState/24 (Ftm_Pwm_Ip_ChannelState) @075e1ca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Pwm_Ipw_SetOutputToIdle/8 (read)Pwm_Ipw_SetOutputToIdle/8 (write)
  Availability: not_available
  Varpool flags:
Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/23 (Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty) @068dc700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetPeriodAndDuty/7 
  Calls: 
Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/22 (Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel) @068dc540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_SetDutyCycle/6 
  Calls: 
Ftm_Pwm_Ip_Period/21 (Ftm_Pwm_Ip_Period) @075e16c0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Pwm_Ipw_SetDutyCycle/6 (read)
  Availability: not_available
  Varpool flags:
Ftm_Pwm_Ip_DeInit/20 (Ftm_Pwm_Ip_DeInit) @068dc380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_DeInitInstance/5 
  Calls: 
Ftm_Pwm_Ip_Init/19 (Ftm_Pwm_Ip_Init) @068dc0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Pwm_Ipw_InitInstance/3 
  Calls: 
Pwm_Ipw_GetMaxPeriodValue/18 (Pwm_Ipw_GetMaxPeriodValue) @068d52a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetOutPutToIdle/17 (Pwm_Ipw_ValidateSetOutPutToIdle) @068d5ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShiftParams/16 (Pwm_Ipw_ValidateSetPhaseShiftParams) @068d5c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateSetPhaseShift/15 (Pwm_Ipw_ValidateSetPhaseShift) @068d59a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_ValidateNotification/14 (Pwm_Ipw_ValidateNotification) @068d5700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_SetPhaseShift/13 (Pwm_Ipw_SetPhaseShift) @068d5460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetPhaseShift/29 
Pwm_Ipw_GetChannelState/12 (Pwm_Ipw_GetChannelState) @068d51c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_EnableNotification/11 (Pwm_Ipw_EnableNotification) @06839d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_EnableNotification/28 
Pwm_Ipw_DisableNotification/10 (Pwm_Ipw_DisableNotification) @068397e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_DisableNotification/27 
Pwm_Ipw_GetOutputState/9 (Pwm_Ipw_GetOutputState) @068392a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_GetOutputState/26 
Pwm_Ipw_SetOutputToIdle/8 (Pwm_Ipw_SetOutputToIdle) @06839ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_ChannelState/24 (read)Ftm_Pwm_Ip_ChannelState/24 (write)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SwOutputControl/25 
Pwm_Ipw_SetPeriodAndDuty/7 (Pwm_Ipw_SetPeriodAndDuty) @06839c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/23 
Pwm_Ipw_SetDutyCycle/6 (Pwm_Ipw_SetDutyCycle) @068399a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_Period/21 (read)Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/22 
Pwm_Ipw_DeInitInstance/5 (Pwm_Ipw_DeInitInstance) @06839700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_DeInit/20 
Pwm_Ipw_DeInit/4 (Pwm_Ipw_DeInit) @06839460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_InitInstance/3 (Pwm_Ipw_InitInstance) @068391c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_Init/19 
Pwm_Ipw_Init/2 (Pwm_Ipw_Init) @06834d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Pwm_Ipw_aFtmDutyCycle/1 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Pwm_Ipw_aFtmDutyCycle/1 (Pwm_Ipw_aFtmDutyCycle) @06835990
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Pwm_Ipw_Init/2 (write)Pwm_Ipw_DeInit/4 (write)Pwm_Ipw_SetDutyCycle/6 (write)Pwm_Ipw_SetPeriodAndDuty/7 (write)Pwm_Ipw_SetOutputToIdle/8 (write)Pwm_Ipw_GetChannelState/12 (read)
  Availability: available
  Varpool flags:
Pwm_Ipw_GetMaxPeriodValue (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint32 retVal;
  uint32 D.6208;

  <bb 2> :
  retVal = 65535;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  retVal = 65534;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  D.6208 = retVal;

  <bb 6> :
<L4>:
  return D.6208;

}


Pwm_Ipw_ValidateSetOutPutToIdle (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  Std_ReturnType retVal;
  Std_ReturnType D.6206;

  <bb 2> :
  retVal = 0;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  retVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  retVal = 1;

  <bb 5> :
  D.6206 = retVal;

  <bb 6> :
<L4>:
  return D.6206;

}


Pwm_Ipw_ValidateSetPhaseShiftParams (uint16 phaseShift)
{
  Std_ReturnType retVal;
  Std_ReturnType D.6204;

  <bb 2> :
  retVal = 0;
  if (phaseShift > 16384)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  retVal = 1;

  <bb 4> :
  D.6204 = retVal;

  <bb 5> :
<L2>:
  return D.6204;

}


Pwm_Ipw_ValidateSetPhaseShift (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  Ftm_Pwm_Ip_ChannelModeType chMode;
  Std_ReturnType retVal;
  Std_ReturnType D.6200;

  <bb 2> :
  retVal = 0;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmChConfig;
  chMode = _2->channelMode;
  if (chMode != 34)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (chMode != 98)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  if (chMode != 97)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (chMode != 33)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  retVal = 1;

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
<L9>:
  retVal = 1;

  <bb 10> :
  D.6200 = retVal;

  <bb 11> :
<L12>:
  return D.6200;

}


Pwm_Ipw_ValidateNotification (Pwm_EdgeNotificationType notification, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  Std_ReturnType retVal;
  Std_ReturnType D.6190;

  <bb 2> :
  retVal = 0;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  retVal = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  retVal = 1;

  <bb 5> :
  D.6190 = retVal;

  <bb 6> :
<L4>:
  return D.6190;

}


Pwm_Ipw_SetPhaseShift (uint16 period, uint16 phaseShift, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint16 phaseShiftVal;

  <bb 2> :
  phaseShiftVal = 0;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = (long unsigned int) period;
  _3 = (long unsigned int) phaseShift;
  _4 = _2 * _3;
  _5 = _4 >> 15;
  _6 = (short unsigned int) _5;
  phaseShiftVal = _6 + 1;
  _7 = ipConfig->channelInstanceId;
  _8 = ipConfig->ftmChConfig;
  _9 = _8->channelId;
  Ftm_Pwm_Ip_SetPhaseShift (_7, _9, period, phaseShiftVal, 1);

  <bb 4> :
  return;

}


Pwm_Ipw_GetChannelState (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint16 dutyCycle;
  uint16 D.6185;

  <bb 2> :
  dutyCycle = 0;
  _1 = ipConfig->channelType;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  _2 = ipConfig->channelInstanceId;
  _3 = (int) _2;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  _6 = (int) _5;
  dutyCycle = Pwm_Ipw_aFtmDutyCycle[_3][_6];
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:

  <bb 5> :
  D.6185 = dutyCycle;

  <bb 6> :
<L4>:
  return D.6185;

}


Pwm_Ipw_EnableNotification (Pwm_EdgeNotificationType notification, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  Ftm_Ftm_Ip_EdgeNotifType ftmNotification;

  <bb 2> :
  if (notification == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ftmNotification = 1;
  goto <bb 7>; [INV]

  <bb 4> :
  if (notification == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ftmNotification = 2;
  goto <bb 7>; [INV]

  <bb 6> :
  ftmNotification = 3;

  <bb 7> :
  _1 = ipConfig->channelType;
  switch (_1) <default: <L10> [INV], case 0: <L9> [INV], case 1: <L6> [INV]>

  <bb 8> :
<L6>:
  _2 = ipConfig->ftmChConfig;
  if (_2 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _3 = ipConfig->channelInstanceId;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  Ftm_Pwm_Ip_EnableNotification (_3, _5, ftmNotification);

  <bb 10> :
  goto <bb 13>; [INV]

  <bb 11> :
<L9>:
  goto <bb 13>; [INV]

  <bb 12> :
<L10>:

  <bb 13> :
  return;

}


Pwm_Ipw_DisableNotification (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  <bb 2> :
  _1 = ipConfig->channelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ipConfig->channelInstanceId;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  Ftm_Pwm_Ip_DisableNotification (_3, _5);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_GetOutputState (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  Ftm_Pwm_Ip_OutputStateType ftmRetVal;
  Pwm_OutputStateType retVal;
  Pwm_OutputStateType D.6173;

  <bb 2> :
  retVal = 0;
  ftmRetVal = 0;
  _1 = ipConfig->channelType;
  switch (_1) <default: <L7> [INV], case 0: <L6> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _3 = ipConfig->channelInstanceId;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  ftmRetVal = Ftm_Pwm_Ip_GetOutputState (_3, _5);
  if (ftmRetVal == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  retVal = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  retVal = 1;

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
<L6>:
  goto <bb 10>; [INV]

  <bb 9> :
<L7>:

  <bb 10> :
  D.6173 = retVal;

  <bb 11> :
<L9>:
  return D.6173;

}


Pwm_Ipw_SetOutputToIdle (const Pwm_OutputStateType idleState, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint8 channel;
  uint8 instance;

  <bb 2> :
  instance = ipConfig->channelInstanceId;
  _1 = ipConfig->ftmChConfig;
  channel = _1->channelId;
  _2 = ipConfig->channelType;
  switch (_2) <default: <L5> [INV], case 0: <L4> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = (int) instance;
  _4 = (int) channel;
  _5 = Ftm_Pwm_Ip_ChannelState[_3][_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) instance;
  _7 = (int) channel;
  Ftm_Pwm_Ip_ChannelState[_6][_7] = 2;
  _8 = ipConfig->ftmChConfig;
  _9 = _8->initOut;
  Ftm_Pwm_Ip_SwOutputControl (instance, channel, _9, 1);
  _10 = ipConfig->channelInstanceId;
  _11 = (int) _10;
  _12 = ipConfig->ftmChConfig;
  _13 = _12->channelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = 0;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetPeriodAndDuty (Pwm_PeriodType period, uint16 dutyCycle, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint16 ftmDutyCycle;

  <bb 2> :
  ftmDutyCycle = 0;
  _1 = ipConfig->channelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (long unsigned int) period;
  _4 = (long unsigned int) dutyCycle;
  _5 = _3 * _4;
  _6 = _5 / 32768;
  ftmDutyCycle = (uint16) _6;
  _7 = ipConfig->channelInstanceId;
  _8 = ipConfig->ftmChConfig;
  _9 = _8->channelId;
  Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (_7, _9, period, ftmDutyCycle, 1);
  _10 = ipConfig->channelInstanceId;
  _11 = (int) _10;
  _12 = ipConfig->ftmChConfig;
  _13 = _12->channelId;
  _14 = (int) _13;
  Pwm_Ipw_aFtmDutyCycle[_11][_14] = dutyCycle;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_SetDutyCycle (uint16 dutyCycle, const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  uint16 ftmDutyCycle;
  Std_ReturnType retVal;
  Std_ReturnType D.6161;

  <bb 2> :
  retVal = 0;
  ftmDutyCycle = 0;
  _1 = ipConfig->channelType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmChConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ipConfig->channelInstanceId;
  _4 = (int) _3;
  _5 = Ftm_Pwm_Ip_Period[_4];
  _6 = (long unsigned int) _5;
  _7 = (long unsigned int) dutyCycle;
  _8 = _6 * _7;
  _9 = _8 / 32768;
  ftmDutyCycle = (uint16) _9;
  _10 = ipConfig->channelInstanceId;
  _11 = ipConfig->ftmChConfig;
  _12 = _11->channelId;
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (_10, _12, ftmDutyCycle, 1);
  _13 = ipConfig->channelInstanceId;
  _14 = (int) _13;
  _15 = ipConfig->ftmChConfig;
  _16 = _15->channelId;
  _17 = (int) _16;
  Pwm_Ipw_aFtmDutyCycle[_14][_17] = dutyCycle;

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  D.6161 = retVal;

  <bb 9> :
<L6>:
  return D.6161;

}


Pwm_Ipw_DeInitInstance (const struct Pwm_IpwInstanceConfigType * const ipConfig)
{
  <bb 2> :
  _1 = ipConfig->instanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ipConfig->instanceId;
  Ftm_Pwm_Ip_DeInit (_3);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_DeInit (const struct Pwm_IpwChannelConfigType * const ipConfig, Pwm_OutputStateType channelIdleState)
{
  <bb 2> :
  _1 = ipConfig->channelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->channelInstanceId;
  _3 = (int) _2;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  _6 = (int) _5;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = 0;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Pwm_Ipw_InitInstance (const struct Pwm_IpwInstanceConfigType * const ipConfig)
{
  <bb 2> :
  _1 = ipConfig->instanceType;
  switch (_1) <default: <L4> [INV], case 0: <L3> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->ftmInsConfig;
  if (_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = ipConfig->instanceId;
  _4 = ipConfig->ftmInsConfig;
  Ftm_Pwm_Ip_Init (_3, _4);

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Pwm_Ipw_Init (const struct Pwm_IpwChannelConfigType * const ipConfig)
{
  <bb 2> :
  _1 = ipConfig->channelType;
  switch (_1) <default: <L2> [INV], case 0: <L1> [INV], case 1: <L0> [INV]>

  <bb 3> :
<L0>:
  _2 = ipConfig->channelInstanceId;
  _3 = (int) _2;
  _4 = ipConfig->ftmChConfig;
  _5 = _4->channelId;
  _6 = (int) _5;
  _7 = ipConfig->channelDutyCycle;
  Pwm_Ipw_aFtmDutyCycle[_3][_6] = _7;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


