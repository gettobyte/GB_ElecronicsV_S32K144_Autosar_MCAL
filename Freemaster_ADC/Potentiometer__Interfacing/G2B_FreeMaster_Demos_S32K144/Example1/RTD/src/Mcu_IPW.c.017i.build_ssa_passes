Mcu_Ipw_SleepOnExit (Mcu_SleepOnExitType SleepOnExit)
{
  <bb 2> :
  if (SleepOnExit == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Power_Ip_DisableSleepOnExit ();
  goto <bb 5>; [INV]

  <bb 4> :
  Power_Ip_EnableSleepOnExit ();

  <bb 5> :
  return;

}


Mcu_Ipw_GetResetRawValue ()
{
  Mcu_RawResetType D.6075;

  <bb 2> :
  D.6075 = Power_Ip_GetResetRawValue ();

  <bb 3> :
<L0>:
  return D.6075;

}


Mcu_Ipw_GetResetReason ()
{
  Mcu_ResetType D.6073;

  <bb 2> :
  D.6073 = Power_Ip_GetResetReason ();

  <bb 3> :
<L0>:
  return D.6073;

}


Mcu_Ipw_SetMode (const struct Mcu_ModeConfigType * Mcu_pModeConfigPtr)
{
  <bb 2> :
  Power_Ip_SetMode (Mcu_pModeConfigPtr);
  return;

}


Mcu_Ipw_GetPllStatus ()
{
  Mcu_PllStatusType ePllStatus;
  Mcu_PllStatusType D.6071;

  <bb 2> :
  _1 = Clock_Ip_GetPllStatus ();
  switch (_1) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  ePllStatus = 51;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  ePllStatus = 204;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  ePllStatus = 90;

  <bb 6> :
  D.6071 = ePllStatus;

  <bb 7> :
<L5>:
  return D.6071;

}


Mcu_Ipw_DistributePllClock ()
{
  <bb 2> :
  Clock_Ip_DistributePll ();
  return;

}


Mcu_Ipw_InitClock (const struct Mcu_ClockConfigType * Mcu_pClockConfigPtr)
{
  <bb 2> :
  Clock_Ip_InitClock (Mcu_pClockConfigPtr);
  return;

}


Mcu_Ipw_Init (const struct Mcu_HwIPsConfigType * Mcu_pHwIPsConfigPtr)
{
  <bb 2> :
  Power_Ip_InitReset (Mcu_pHwIPsConfigPtr);
  Power_Ip_InitPower (Mcu_pHwIPsConfigPtr);
  return;

}


