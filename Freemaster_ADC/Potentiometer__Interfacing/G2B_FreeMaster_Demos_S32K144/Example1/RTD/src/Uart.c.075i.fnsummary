Symbol table:

Uart_Ipw_AbortReceivingData/61 (Uart_Ipw_AbortReceivingData) @06a33620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Abort/39 
  Calls: 
Uart_Ipw_AbortSendingData/60 (Uart_Ipw_AbortSendingData) @06a33540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Abort/39 
  Calls: 
Uart_Ipw_GetBaudrate/59 (Uart_Ipw_GetBaudrate) @06a33380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetBaudrate/38 
  Calls: 
Uart_Ipw_SetBaudrate/58 (Uart_Ipw_SetBaudrate) @06a331c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_SetBaudrate/37 
  Calls: 
Uart_Ipw_Deinit/57 (Uart_Ipw_Deinit) @06a33000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Deinit/36 
  Calls: 
Uart_Ipw_Init/56 (Uart_Ipw_Init) @069a1e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_Init/35 
  Calls: 
Uart_pxPBcfgVariantPredefined/55 (Uart_pxPBcfgVariantPredefined) @069a3dc8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Uart_Init/35 (read)
  Availability: not_available
  Varpool flags: read-only
Uart_Ipw_SetRxBuffer/54 (Uart_Ipw_SetRxBuffer) @069a1b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSetBuffer/34 
  Calls: 
Uart_Ipw_SetTxBuffer/53 (Uart_Ipw_SetTxBuffer) @069a1a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSetBuffer/34 
  Calls: 
Uart_Ipw_AsyncSend/52 (Uart_Ipw_AsyncSend) @069a18c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartAsyncSend/33 
  Calls: 
Uart_Ipw_AsyncReceive/51 (Uart_Ipw_AsyncReceive) @069a1700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartAsyncReceive/32 
  Calls: 
Uart_Ipw_SyncSend/50 (Uart_Ipw_SyncSend) @069a1540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSyncSend/31 
  Calls: 
Uart_Ipw_GetTransmitStatus/49 (Uart_Ipw_GetTransmitStatus) @069a1460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetStatus/45 Uart_SetBaudrate/37 Uart_StartAsyncSend/33 Uart_StartSyncSend/31 
  Calls: 
Det_ReportRuntimeError/48 (Det_ReportRuntimeError) @069a12a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSyncSend/31 Uart_StartSyncReceive/30 
  Calls: 
Uart_Ipw_SyncReceive/47 (Uart_Ipw_SyncReceive) @069a11c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_StartSyncReceive/30 
  Calls: 
Uart_Ipw_GetReceiveStatus/46 (Uart_Ipw_GetReceiveStatus) @069a10e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Uart_GetStatus/45 Uart_SetBaudrate/37 Uart_StartAsyncReceive/32 Uart_StartSyncReceive/30 
  Calls: 
Uart_GetStatus/45 (Uart_GetStatus) @06997620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_GetReceiveStatus/46 Uart_Ipw_GetTransmitStatus/49 
Uart_AsyncSend/44 (Uart_AsyncSend) @069970e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartAsyncSend/33 
Uart_AsyncReceive/43 (Uart_AsyncReceive) @06997d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartAsyncReceive/32 
Uart_SyncReceive/42 (Uart_SyncReceive) @06997a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSyncReceive/30 
Uart_SyncSend/41 (Uart_SyncSend) @069977e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSyncSend/31 
Uart_SetBuffer/40 (Uart_SetBuffer) @06997540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_StartSetBuffer/34 
Uart_Abort/39 (Uart_Abort) @069972a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_AbortReceivingData/61 Uart_Ipw_AbortSendingData/60 
Uart_GetBaudrate/38 (Uart_GetBaudrate) @06997000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_GetBaudrate/59 
Uart_SetBaudrate/37 (Uart_SetBaudrate) @0698eb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_au32ClockFrequency/28 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_SetBaudrate/58 Uart_Ipw_GetTransmitStatus/49 Uart_Ipw_GetReceiveStatus/46 
Uart_Deinit/36 (Uart_Deinit) @0698e620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_apConfig/29 (read)Uart_au8DriverStatus/27 (write)Uart_apConfig/29 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_Deinit/57 
Uart_Init/35 (Uart_Init) @0698e0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Uart_au8DriverStatus/27 (read)Uart_pxPBcfgVariantPredefined/55 (read)Uart_apConfig/29 (write)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_apConfig/29 (read)Uart_au32ClockFrequency/28 (write)Uart_au8DriverStatus/27 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Uart_Ipw_Init/56 
Uart_StartSetBuffer/34 (Uart_StartSetBuffer) @0698ed20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SetBuffer/40 
  Calls: Uart_Ipw_SetRxBuffer/54 Uart_Ipw_SetTxBuffer/53 
Uart_StartAsyncSend/33 (Uart_StartAsyncSend) @0698ea80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_AsyncSend/44 
  Calls: Uart_Ipw_AsyncSend/52 Uart_Ipw_GetTransmitStatus/49 
Uart_StartAsyncReceive/32 (Uart_StartAsyncReceive) @0698e7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_AsyncReceive/43 
  Calls: Uart_Ipw_AsyncReceive/51 Uart_Ipw_GetReceiveStatus/46 
Uart_StartSyncSend/31 (Uart_StartSyncSend) @0698e540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SyncSend/41 
  Calls: Det_ReportRuntimeError/48 Uart_Ipw_SyncSend/50 Uart_Ipw_GetTransmitStatus/49 
Uart_StartSyncReceive/30 (Uart_StartSyncReceive) @0698e2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Uart_SyncReceive/42 
  Calls: Det_ReportRuntimeError/48 Uart_Ipw_SyncReceive/47 Uart_Ipw_GetReceiveStatus/46 
Uart_apConfig/29 (Uart_apConfig) @068be318
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_Init/35 (read)Uart_Init/35 (read)Uart_Init/35 (write)Uart_Init/35 (read)Uart_Init/35 (read)Uart_Deinit/36 (read)Uart_Deinit/36 (write)
  Availability: available
  Varpool flags:
Uart_au32ClockFrequency/28 (Uart_au32ClockFrequency) @068be240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_Init/35 (write)Uart_SetBaudrate/37 (read)
  Availability: available
  Varpool flags:
Uart_au8DriverStatus/27 (Uart_au8DriverStatus) @068be1b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Uart_SyncReceive/42 (read)Uart_AsyncReceive/43 (read)Uart_Init/35 (read)Uart_AsyncSend/44 (read)Uart_Init/35 (write)Uart_Deinit/36 (write)Uart_SetBaudrate/37 (read)Uart_GetBaudrate/38 (read)Uart_Abort/39 (read)Uart_SetBuffer/40 (read)Uart_SyncSend/41 (read)Uart_Deinit/36 (read)Uart_GetStatus/45 (read)
  Availability: available
  Varpool flags:
Uart_GetStatus (uint8 Channel, uint32 * BytesTransfered, Uart_DataDirectionType TransferType)
{
  uint8 CoreId;
  Uart_StatusType TempReturn;
  Uart_StatusType D.6423;
  int _1;
  <unnamed type> _2;
  Uart_StatusType _15;

  <bb 2> :
  TempReturn_5 = 4;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (BytesTransfered_9(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (TransferType_10(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  TempReturn_14 = Uart_Ipw_GetTransmitStatus (Channel_8(D), BytesTransfered_9(D));
  goto <bb 8>; [INV]

  <bb 7> :
  TempReturn_12 = Uart_Ipw_GetReceiveStatus (Channel_8(D), BytesTransfered_9(D));

  <bb 8> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_14(6), TempReturn_12(7)>
  _15 = TempReturn_3;

  <bb 9> :
<L12>:
  return _15;

}


Uart_AsyncSend (uint8 Channel, const uint8 * Buffer, uint32 BufferSize)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6409;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _13;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Buffer_9(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (BufferSize_10(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TempReturn_12 = Uart_StartAsyncSend (CoreId_6, Channel_8(D), Buffer_9(D), BufferSize_10(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_5(5), TempReturn_12(6)>
  _13 = TempReturn_3;

  <bb 8> :
<L12>:
  return _13;

}


Uart_AsyncReceive (uint8 Channel, uint8 * Buffer, uint32 BufferSize)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6395;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _13;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Buffer_9(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (BufferSize_10(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TempReturn_12 = Uart_StartAsyncReceive (CoreId_6, Channel_8(D), Buffer_9(D), BufferSize_10(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_5(5), TempReturn_12(6)>
  _13 = TempReturn_3;

  <bb 8> :
<L12>:
  return _13;

}


Uart_SyncReceive (uint8 Channel, uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6381;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _14;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Buffer_9(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (BufferSize_10(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TempReturn_13 = Uart_StartSyncReceive (CoreId_6, Channel_8(D), Buffer_9(D), BufferSize_10(D), Timeout_11(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_5(5), TempReturn_13(6)>
  _14 = TempReturn_3;

  <bb 8> :
<L12>:
  return _14;

}


Uart_SyncSend (uint8 Channel, const uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6367;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _14;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Buffer_9(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (BufferSize_10(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TempReturn_13 = Uart_StartSyncSend (CoreId_6, Channel_8(D), Buffer_9(D), BufferSize_10(D), Timeout_11(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_5(5), TempReturn_13(6)>
  _14 = TempReturn_3;

  <bb 8> :
<L12>:
  return _14;

}


Uart_SetBuffer (uint8 Channel, uint8 * Buffer, uint32 BufferSize, Uart_DataDirectionType Direction)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6353;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _14;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Buffer_9(D) == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (BufferSize_10(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TempReturn_13 = Uart_StartSetBuffer (CoreId_6, Channel_8(D), Buffer_9(D), BufferSize_10(D), Direction_11(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_5(5), TempReturn_13(6)>
  _14 = TempReturn_3;

  <bb 8> :
<L12>:
  return _14;

}


Uart_Abort (uint8 Channel, Uart_DataDirectionType TransmissionType)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6339;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _14;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (TransmissionType_9(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  TempReturn_13 = Uart_Ipw_AbortSendingData (Channel_8(D));
  goto <bb 7>; [INV]

  <bb 6> :
  TempReturn_11 = Uart_Ipw_AbortReceivingData (Channel_8(D));

  <bb 7> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_13(5), TempReturn_11(6)>
  _14 = TempReturn_3;

  <bb 8> :
<L9>:
  return _14;

}


Uart_GetBaudrate (uint8 Channel, uint32 * Baudrate)
{
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6328;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _12;

  <bb 2> :
  TempReturn_5 = 1;
  CoreId_6 = 0;
  _1 = (int) CoreId_6;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_8(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (Baudrate_9(D) == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Uart_Ipw_GetBaudrate (Channel_8(D), Baudrate_9(D));
  TempReturn_11 = 0;

  <bb 6> :
  # TempReturn_3 = PHI <TempReturn_5(2), TempReturn_5(3), TempReturn_5(4), TempReturn_11(5)>
  _12 = TempReturn_3;

  <bb 7> :
<L9>:
  return _12;

}


Uart_SetBaudrate (uint8 Channel, Uart_BaudrateType Baudrate)
{
  Uart_StatusType TransmitStatus;
  Uart_StatusType ReceiveStatus;
  uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6317;
  int _1;
  <unnamed type> _2;
  int _3;
  int _4;
  long unsigned int _5;
  Std_ReturnType _19;

  <bb 2> :
  TempReturn_8 = 1;
  CoreId_9 = 0;
  _1 = (int) CoreId_9;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Channel_11(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  ReceiveStatus_13 = Uart_Ipw_GetReceiveStatus (Channel_11(D), 0B);
  TransmitStatus_15 = Uart_Ipw_GetTransmitStatus (Channel_11(D), 0B);
  if (ReceiveStatus_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (TransmitStatus_15 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _3 = (int) CoreId_9;
  _4 = (int) Channel_11(D);
  _5 = Uart_au32ClockFrequency[_3][_4];
  TempReturn_18 = Uart_Ipw_SetBaudrate (Channel_11(D), Baudrate_16(D), _5);

  <bb 7> :
  # TempReturn_6 = PHI <TempReturn_8(2), TempReturn_8(3), TempReturn_8(4), TempReturn_8(5), TempReturn_18(6)>
  _19 = TempReturn_6;

  <bb 8> :
<L11>:
  return _19;

}


Uart_Deinit ()
{
  uint8 CoreId;
  uint8 u8ChLoop;
  int _1;
  <unnamed type> _2;
  int _3;
  const struct Uart_ConfigType * _4;
  int _5;
  const struct Uart_ChannelConfigType * _6;
  unsigned char _7;
  int _8;
  unsigned char u8ChLoop.1_9;
  int _10;

  <bb 2> :
  u8ChLoop_14 = 0;
  CoreId_15 = 0;
  CoreId_16 = 0;
  _1 = (int) CoreId_16;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 != 1)
    goto <bb 7>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  u8ChLoop_18 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = (int) CoreId_16;
  _4 = Uart_apConfig[_3];
  _5 = (int) u8ChLoop_11;
  _6 = _4->Configs[_5];
  _7 = _6->UartChannelId;
  Uart_Ipw_Deinit (_7);
  _8 = (int) CoreId_16;
  Uart_au8DriverStatus[_8] = 0;
  u8ChLoop.1_9 = u8ChLoop_11;
  u8ChLoop_22 = u8ChLoop.1_9 + 1;

  <bb 5> :
  # u8ChLoop_11 = PHI <u8ChLoop_18(3), u8ChLoop_22(4)>
  if (u8ChLoop_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _10 = (int) CoreId_16;
  Uart_apConfig[_10] = 0B;

  <bb 7> :
  return;

}


Uart_Init (const struct Uart_ConfigType * Config)
{
  uint8 Channel;
  uint8 CoreId;
  uint8 u8ChLoop;
  int _1;
  <unnamed type> _2;
  int _3;
  int _4;
  const struct Uart_ConfigType * _5;
  int _6;
  const struct Uart_ConfigType * _7;
  int _8;
  const struct Uart_ChannelConfigType * _9;
  int _10;
  const struct Uart_ConfigType * _11;
  int _12;
  const struct Uart_ChannelConfigType * _13;
  int _14;
  const struct Uart_ConfigType * _15;
  int _16;
  const struct Uart_ChannelConfigType * _17;
  const struct Uart_Ipw_HwConfigType * _18;
  int _19;
  const struct Uart_ConfigType * _20;
  int _21;
  const struct Uart_ChannelConfigType * _22;
  int _23;
  int _24;
  long unsigned int _25;
  int _26;
  unsigned char u8ChLoop.0_27;

  <bb 2> :
  CoreId_32 = 0;
  _1 = (int) CoreId_32;
  _2 = Uart_au8DriverStatus[_1];
  if (_2 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Config_34(D) != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _3 = (int) CoreId_32;
  _4 = (int) CoreId_32;
  _5 = Uart_pxPBcfgVariantPredefined[_3];
  Uart_apConfig[_4] = _5;
  u8ChLoop_36 = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = (int) CoreId_32;
  _7 = Uart_apConfig[_6];
  _8 = (int) u8ChLoop_28;
  _9 = _7->Configs[_8];
  if (_9 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _10 = (int) CoreId_32;
  _11 = Uart_apConfig[_10];
  _12 = (int) u8ChLoop_28;
  _13 = _11->Configs[_12];
  Channel_37 = _13->UartChannelId;
  _14 = (int) CoreId_32;
  _15 = Uart_apConfig[_14];
  _16 = (int) u8ChLoop_28;
  _17 = _15->Configs[_16];
  _18 = _17->UartChannelConfig;
  Uart_Ipw_Init (Channel_37, _18);
  _19 = (int) CoreId_32;
  _20 = Uart_apConfig[_19];
  _21 = (int) u8ChLoop_28;
  _22 = _20->Configs[_21];
  _23 = (int) CoreId_32;
  _24 = (int) Channel_37;
  _25 = _22->ChannelClockFrequency;
  Uart_au32ClockFrequency[_23][_24] = _25;
  _26 = (int) CoreId_32;
  Uart_au8DriverStatus[_26] = 1;

  <bb 7> :
  u8ChLoop.0_27 = u8ChLoop_28;
  u8ChLoop_41 = u8ChLoop.0_27 + 1;

  <bb 8> :
  # u8ChLoop_28 = PHI <u8ChLoop_36(4), u8ChLoop_41(7)>
  if (u8ChLoop_28 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Uart_StartSetBuffer (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize, Uart_DataDirectionType Direction)
{
  Std_ReturnType TempReturn;
  Std_ReturnType D.6293;
  Std_ReturnType _11;

  <bb 2> :
  TempReturn_2 = 1;
  if (Direction_3(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Uart_Ipw_SetTxBuffer (Channel_5(D), Buffer_6(D), BufferSize_7(D));
  goto <bb 5>; [INV]

  <bb 4> :
  Uart_Ipw_SetRxBuffer (Channel_5(D), Buffer_6(D), BufferSize_7(D));

  <bb 5> :
  TempReturn_10 = 0;
  _11 = TempReturn_10;

  <bb 6> :
<L3>:
  return _11;

}


Uart_StartAsyncSend (uint8 CoreId, uint8 Channel, const uint8 * Buffer, uint32 BufferSize)
{
  Std_ReturnType TempReturn;
  Std_ReturnType D.6288;
  <unnamed type> _1;
  Std_ReturnType _12;

  <bb 2> :
  TempReturn_4 = 1;
  _1 = Uart_Ipw_GetTransmitStatus (Channel_6(D), 0B);
  if (_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  TempReturn_11 = Uart_Ipw_AsyncSend (Channel_6(D), Buffer_8(D), BufferSize_9(D));

  <bb 4> :
  # TempReturn_2 = PHI <TempReturn_4(2), TempReturn_11(3)>
  _12 = TempReturn_2;

  <bb 5> :
<L3>:
  return _12;

}


Uart_StartAsyncReceive (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize)
{
  Std_ReturnType TempReturn;
  Std_ReturnType D.6283;
  <unnamed type> _1;
  Std_ReturnType _12;

  <bb 2> :
  TempReturn_4 = 1;
  _1 = Uart_Ipw_GetReceiveStatus (Channel_6(D), 0B);
  if (_1 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  TempReturn_11 = Uart_Ipw_AsyncReceive (Channel_6(D), Buffer_8(D), BufferSize_9(D));

  <bb 4> :
  # TempReturn_2 = PHI <TempReturn_4(2), TempReturn_11(3)>
  _12 = TempReturn_2;

  <bb 5> :
<L3>:
  return _12;

}


Uart_StartSyncSend (uint8 CoreId, uint8 Channel, const uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  Std_ReturnType TempReturn;
  Std_ReturnType D.6278;
  <unnamed type> _1;
  Std_ReturnType _15;

  <bb 2> :
  TempReturn_4 = 1;
  _1 = Uart_Ipw_GetTransmitStatus (Channel_6(D), 0B);
  if (_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  TempReturn_12 = Uart_Ipw_SyncSend (Channel_6(D), Buffer_8(D), BufferSize_9(D), Timeout_10(D));
  if (TempReturn_12 == 6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportRuntimeError (255, 0, 4, 8);
  TempReturn_14 = 1;

  <bb 5> :
  # TempReturn_2 = PHI <TempReturn_4(2), TempReturn_12(3), TempReturn_14(4)>
  _15 = TempReturn_2;

  <bb 6> :
<L5>:
  return _15;

}


Uart_StartSyncReceive (uint8 CoreId, uint8 Channel, uint8 * Buffer, uint32 BufferSize, uint32 Timeout)
{
  Std_ReturnType TempReturn;
  Std_ReturnType D.6271;
  <unnamed type> _1;
  Std_ReturnType _15;

  <bb 2> :
  TempReturn_4 = 1;
  _1 = Uart_Ipw_GetReceiveStatus (Channel_6(D), 0B);
  if (_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  TempReturn_12 = Uart_Ipw_SyncReceive (Channel_6(D), Buffer_8(D), BufferSize_9(D), Timeout_10(D));
  if (TempReturn_12 == 6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Det_ReportRuntimeError (255, 0, 6, 8);
  TempReturn_14 = 1;

  <bb 5> :
  # TempReturn_2 = PHI <TempReturn_4(2), TempReturn_12(3), TempReturn_14(4)>
  _15 = TempReturn_2;

  <bb 6> :
<L5>:
  return _15;

}


