
Marking local functions: DevAssert


Marking externally visible functions: ClockTimeoutExpired ClockStartTimeout ReportClockErrors Clock_Ip_EnableModuleClock Clock_Ip_DisableModuleClock Clock_Ip_InstallNotificationsCallback Clock_Ip_PowerModeChangeNotification Clock_Ip_ClearClockMonitorStatus Clock_Ip_GetClockMonitorStatus Clock_Ip_DisableClockMonitor Clock_Ip_DistributePll Clock_Ip_GetPllStatus Clock_Ip_InitClock Clock_Ip_Init


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

functionWasCalled.6294/67 (functionWasCalled) @07456c18
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (write)
  Availability: available
  Varpool flags: initialized
clockNameTypes/66 (clockNameTypes) @0744b000
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Check_Ircosc_Clocks/21 (read)Check_Ircosc_Clocks/21 (read)Check_Xosc_Clocks/22 (read)Check_Pll_Clocks/23 (read)Check_Ext_Sig_Clocks/24 (read)Check_Ext_Sig_Clocks/24 (read)Check_Selector_Clocks/25 (read)Check_Selector_Clocks/25 (read)Check_Divider_Clocks/26 (read)Check_Divider_Clocks/26 (read)Check_Divider_Trigger_Clocks/27 (read)Check_Frac_Divider_Clocks/28 (read)Check_Gate_Clocks/29 (read)Check_Gate_Clocks/29 (read)Check_Pcfs_Clocks/30 (read)Check_Pcfs_Clocks/30 (read)Check_Cmu_Clocks/31 (read)Check_Cmu_Clocks/31 (read)
  Availability: not_available
  Varpool flags: read-only
OsIf_GetElapsed/65 (OsIf_GetElapsed) @07442a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockTimeoutExpired/19 
  Calls: 
OsIf_MicrosToTicks/64 (OsIf_MicrosToTicks) @074428c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockStartTimeout/18 
  Calls: 
OsIf_GetCounter/63 (OsIf_GetCounter) @074427e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockStartTimeout/18 
  Calls: 
ClockPowerModeChangeNotification/62 (ClockPowerModeChangeNotification) @074421c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_PowerModeChangeNotification/12 
  Calls: 
ClockInitializeObjects/61 (ClockInitializeObjects) @074420e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: UpdateDriverContext/20 Clock_Ip_PowerModeChangeNotification/12 
  Calls: 
HwPllName/60 (HwPllName) @07439cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/7 (read)Clock_Ip_GetPllStatus/7 (read)
  Availability: not_available
  Varpool flags: read-only
DisableSafeClock/59 (DisableSafeClock) @06ab70e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_DistributePll/8 Clock_Ip_InitClock/6 
  Calls: 
SpecificPeripheralClockInitialization/58 (SpecificPeripheralClockInitialization) @06ab7ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_DistributePll/8 Clock_Ip_InitClock/6 
  Calls: 
gateCallbacks/57 (gateCallbacks) @074397e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableModuleClock/14 (read)Clock_Ip_EnableModuleClock/15 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
gateCallbackIndex/56 (gateCallbackIndex) @07439798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableModuleClock/14 (read)Clock_Ip_EnableModuleClock/15 (read)
  Availability: not_available
  Varpool flags: read-only
selectorCallbacks/55 (selectorCallbacks) @074396c0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)CallEmptyCallbacks/32 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
selectorCallbackIndex/54 (selectorCallbackIndex) @07439678
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
sourceType_clockName/53 (sourceType_clockName) @07439630
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)
  Availability: not_available
  Varpool flags: read-only
fracDivCallbacks/52 (fracDivCallbacks) @07439558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
fractional_dividerCallbackIndex/51 (fractional_dividerCallbackIndex) @07439510
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
pllCallbacks/50 (pllCallbacks) @07439288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_GetPllStatus/7 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
pllCallbackIndex/49 (pllCallbackIndex) @07439240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_GetPllStatus/7 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
dividerCallbacks/48 (dividerCallbacks) @074390d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
dividerCallbackIndex/47 (dividerCallbackIndex) @07439090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
dividerTriggerCallbacks/46 (dividerTriggerCallbacks) @07433f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
dividertriggerCallbackIndex/45 (dividertriggerCallbackIndex) @07433f30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
pcfsCallbacks/44 (pcfsCallbacks) @07433e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
pcfsCallbackIndex/43 (pcfsCallbackIndex) @07433e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
extOscCallbacks/42 (extOscCallbacks) @07433cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
xoscCallbackIndex/41 (xoscCallbackIndex) @07433ca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
intOscCallbacks/40 (intOscCallbacks) @07433bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
ircoscCallbackIndex/39 (ircoscCallbackIndex) @07433b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
SpecificPlatformInitClock/38 (SpecificPlatformInitClock) @06ab7d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_InitClock/6 
  Calls: 
cmuCallbacks/37 (cmuCallbacks) @07433a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableClockMonitor/9 (read)Clock_Ip_GetClockMonitorStatus/10 (read)Clock_Ip_ClearClockMonitorStatus/11 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)
  Availability: not_available
  Varpool flags: read-only
cmuCallbackIndex/36 (cmuCallbackIndex) @074339d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableClockMonitor/9 (read)Clock_Ip_GetClockMonitorStatus/10 (read)Clock_Ip_ClearClockMonitorStatus/11 (read)
  Availability: not_available
  Varpool flags: read-only
clockFeatures/35 (clockFeatures) @07433990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_GetPllStatus/7 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableClockMonitor/9 (read)Clock_Ip_GetClockMonitorStatus/10 (read)Clock_Ip_ClearClockMonitorStatus/11 (read)Clock_Ip_DisableModuleClock/14 (read)Clock_Ip_EnableModuleClock/15 (read)ResetClockConfiguration/33 (read)ResetClockConfiguration/33 (read)ResetClockConfiguration/33 (read)ResetClockConfiguration/33 (read)
  Availability: not_available
  Varpool flags: read-only
CheckClockConfiguration/34 (CheckClockConfiguration) @06ab7540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: Check_Cmu_Clocks/31 Check_Pcfs_Clocks/30 Check_Gate_Clocks/29 Check_Frac_Divider_Clocks/28 Check_Divider_Trigger_Clocks/27 Check_Divider_Clocks/26 Check_Selector_Clocks/25 Check_Ext_Sig_Clocks/24 Check_Pll_Clocks/23 Check_Xosc_Clocks/22 Check_Ircosc_Clocks/21 
ResetClockConfiguration/33 (ResetClockConfiguration) @06ab72a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockFeatures/35 (read)fractional_dividerCallbackIndex/51 (read)fracDivCallbacks/52 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
CallEmptyCallbacks/32 (CallEmptyCallbacks) @06ab7000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: functionWasCalled.6294/67 (read)functionWasCalled.6294/67 (write)cmuCallbacks/37 (read)cmuCallbacks/37 (read)cmuCallbacks/37 (read)cmuCallbacks/37 (read)dividerCallbacks/48 (read)dividerTriggerCallbacks/46 (read)extOscCallbacks/42 (read)fracDivCallbacks/52 (read)fracDivCallbacks/52 (read)gateCallbacks/57 (read)gateCallbacks/57 (read)intOscCallbacks/40 (read)pllCallbacks/50 (read)pllCallbacks/50 (read)selectorCallbacks/55 (read)pcfsCallbacks/44 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: UpdateDriverContext/20 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Check_Cmu_Clocks/31 (Check_Cmu_Clocks) @06aac9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Pcfs_Clocks/30 (Check_Pcfs_Clocks) @06aac0e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Gate_Clocks/29 (Check_Gate_Clocks) @06aacc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
Check_Frac_Divider_Clocks/28 (Check_Frac_Divider_Clocks) @06aac8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Divider_Trigger_Clocks/27 (Check_Divider_Trigger_Clocks) @06aac620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Divider_Clocks/26 (Check_Divider_Clocks) @06aac380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Selector_Clocks/25 (Check_Selector_Clocks) @06aac000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Ext_Sig_Clocks/24 (Check_Ext_Sig_Clocks) @06aa27e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
Check_Pll_Clocks/23 (Check_Pll_Clocks) @06aa2000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Xosc_Clocks/22 (Check_Xosc_Clocks) @06aa2d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Ircosc_Clocks/21 (Check_Ircosc_Clocks) @06aa2a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
UpdateDriverContext/20 (UpdateDriverContext) @06aa2700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockObjectsAreInitialized/2 (read)clockObjectsAreInitialized/2 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: CallEmptyCallbacks/32 ClockInitializeObjects/61 
ClockTimeoutExpired/19 (ClockTimeoutExpired) @06aa2460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/65 
ClockStartTimeout/18 (ClockStartTimeout) @06aa21c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_MicrosToTicks/64 OsIf_GetCounter/63 
ReportClockErrors/17 (ReportClockErrors) @06a9dd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockNotificationsCallback/3 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
ClockNotificatonsEmptyCallback/16 (ClockNotificatonsEmptyCallback) @06a9d7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: clockNotificationsCallback/3 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_EnableModuleClock/15 (Clock_Ip_EnableModuleClock) @06a9d2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DisableModuleClock/14 (Clock_Ip_DisableModuleClock) @06a9dee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_InstallNotificationsCallback/13 (Clock_Ip_InstallNotificationsCallback) @06a9dc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockNotificationsCallback/3 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
Clock_Ip_PowerModeChangeNotification/12 (Clock_Ip_PowerModeChangeNotification) @06a9d9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockObjectsAreInitialized/2 (read)clockObjectsAreInitialized/2 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ClockPowerModeChangeNotification/62 ClockInitializeObjects/61 
Clock_Ip_ClearClockMonitorStatus/11 (Clock_Ip_ClearClockMonitorStatus) @06a9d700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_GetClockMonitorStatus/10 (Clock_Ip_GetClockMonitorStatus) @06a9d460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DisableClockMonitor/9 (Clock_Ip_DisableClockMonitor) @06a9d1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DistributePll/8 (Clock_Ip_DistributePll) @06a00e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)sourceType_clockName/53 (read)clockConfig/4 (read)clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockConfig/4 (read)clockConfig/4 (read)clockTreeIsConsumingPll/1 (read)clockConfig/4 (read)clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: DisableSafeClock/59 SpecificPeripheralClockInitialization/58 DevAssert/0 
   Indirect call
   Indirect call
   Indirect call
Clock_Ip_GetPllStatus/7 (Clock_Ip_GetPllStatus) @06a008c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: HwPllName/60 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)HwPllName/60 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: 
   Indirect call
Clock_Ip_InitClock/6 (Clock_Ip_InitClock) @06a00d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockConfig/4 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockConfig/4 (write)clockFeatures/35 (read)ircoscCallbackIndex/39 (read)intOscCallbacks/40 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)clockFeatures/35 (read)pcfsCallbackIndex/43 (read)pcfsCallbacks/44 (read)clockFeatures/35 (read)dividertriggerCallbackIndex/45 (read)dividerTriggerCallbacks/46 (read)clockFeatures/35 (read)dividerCallbackIndex/47 (read)dividerCallbacks/48 (read)clockFeatures/35 (read)dividertriggerCallbackIndex/45 (read)dividerTriggerCallbacks/46 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)fractional_dividerCallbackIndex/51 (read)fracDivCallbacks/52 (read)clockTreeIsConsumingPll/1 (write)sourceType_clockName/53 (read)clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockTreeIsConsumingPll/1 (write)clockTreeIsConsumingPll/1 (read)clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: DisableSafeClock/59 SpecificPeripheralClockInitialization/58 UpdateDriverContext/20 ResetClockConfiguration/33 SpecificPlatformInitClock/38 DevAssert/0 CheckClockConfiguration/34 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Clock_Ip_Init/5 (Clock_Ip_Init) @06a00a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockTreeIsConsumingPll/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_DistributePll/8 Clock_Ip_GetPllStatus/7 Clock_Ip_InitClock/6 DevAssert/0 
clockConfig/4 (clockConfig) @069ff360
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (write)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)
  Availability: available
  Varpool flags:
clockNotificationsCallback/3 (clockNotificationsCallback) @069ff318
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ClockNotificatonsEmptyCallback/16 (addr)
  Referring: Clock_Ip_InstallNotificationsCallback/13 (write)ReportClockErrors/17 (read)
  Availability: available
  Varpool flags: initialized
clockObjectsAreInitialized/2 (clockObjectsAreInitialized) @069ff288
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_PowerModeChangeNotification/12 (read)Clock_Ip_PowerModeChangeNotification/12 (write)UpdateDriverContext/20 (read)UpdateDriverContext/20 (write)
  Availability: available
  Varpool flags:
clockTreeIsConsumingPll/1 (clockTreeIsConsumingPll) @069ff1f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_Init/5 (read)Clock_Ip_InitClock/6 (write)Clock_Ip_InitClock/6 (write)Clock_Ip_InitClock/6 (read)Clock_Ip_DistributePll/8 (read)
  Availability: available
  Varpool flags:
DevAssert/0 (DevAssert) @06963380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Check_Cmu_Clocks/31 Check_Cmu_Clocks/31 Check_Pcfs_Clocks/30 Check_Pcfs_Clocks/30 Check_Gate_Clocks/29 Check_Gate_Clocks/29 Check_Gate_Clocks/29 Check_Frac_Divider_Clocks/28 Check_Divider_Trigger_Clocks/27 Check_Divider_Clocks/26 Check_Divider_Clocks/26 Check_Selector_Clocks/25 Check_Selector_Clocks/25 Check_Ext_Sig_Clocks/24 Check_Ext_Sig_Clocks/24 Check_Ext_Sig_Clocks/24 Check_Pll_Clocks/23 Check_Xosc_Clocks/22 Check_Ircosc_Clocks/21 Check_Ircosc_Clocks/21 Check_Ircosc_Clocks/21 Clock_Ip_InstallNotificationsCallback/13 Clock_Ip_DistributePll/8 Clock_Ip_InitClock/6 Clock_Ip_Init/5 
  Calls: 
CheckClockConfiguration (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  Check_Ircosc_Clocks (config);
  Check_Xosc_Clocks (config);
  Check_Pll_Clocks (config);
  Check_Ext_Sig_Clocks (config);
  Check_Selector_Clocks (config);
  Check_Divider_Clocks (config);
  Check_Divider_Trigger_Clocks (config);
  Check_Frac_Divider_Clocks (config);
  Check_Gate_Clocks (config);
  Check_Pcfs_Clocks (config);
  Check_Cmu_Clocks (config);
  return;

}


ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  uint32 callbackIndex;

  <bb 2> :
  _1 = config->selectorsCount;
  i = (uint32) _1;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = i + 4294967295;
  _3 = config->selectors[_2].name;
  _4 = clockFeatures[_3][1];
  _5 = (int) _4;
  _6 = selectorCallbackIndex[_5];
  callbackIndex = (uint32) _6;
  _7 = selectorCallbacks[callbackIndex].Reset;
  _8 = i + 4294967295;
  _9 = &config->selectors[_8];
  _7 (_9);
  i = i + 4294967295;

  <bb 4> :
  if (i != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _10 = config->fracDivsCount;
  i = (uint32) _10;
  goto <bb 7>; [INV]

  <bb 6> :
  _11 = i + 4294967295;
  _12 = config->fracDivs[_11].name;
  _13 = clockFeatures[_12][1];
  _14 = (int) _13;
  _15 = fractional_dividerCallbackIndex[_14];
  callbackIndex = (uint32) _15;
  _16 = fracDivCallbacks[callbackIndex].Reset;
  _17 = i + 4294967295;
  _18 = &config->fracDivs[_17];
  _16 (_18);
  i = i + 4294967295;

  <bb 7> :
  if (i != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _19 = config->pllsCount;
  i = (uint32) _19;
  goto <bb 10>; [INV]

  <bb 9> :
  _20 = i + 4294967295;
  _21 = config->plls[_20].name;
  _22 = clockFeatures[_21][1];
  _23 = (int) _22;
  _24 = pllCallbackIndex[_23];
  callbackIndex = (uint32) _24;
  _25 = pllCallbacks[callbackIndex].Reset;
  _26 = i + 4294967295;
  _27 = &config->plls[_26];
  _25 (_27);
  i = i + 4294967295;

  <bb 10> :
  if (i != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _28 = config->xoscsCount;
  i = (uint32) _28;
  goto <bb 13>; [INV]

  <bb 12> :
  _29 = i + 4294967295;
  _30 = config->xoscs[_29].name;
  _31 = clockFeatures[_30][1];
  _32 = (int) _31;
  _33 = xoscCallbackIndex[_32];
  callbackIndex = (uint32) _33;
  _34 = extOscCallbacks[callbackIndex].Reset;
  _35 = i + 4294967295;
  _36 = &config->xoscs[_35];
  _34 (_36);
  i = i + 4294967295;

  <bb 13> :
  if (i != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


CallEmptyCallbacks ()
{
  static boolean functionWasCalled = 0;

  <bb 2> :
  functionWasCalled.22_1 = functionWasCalled;
  _2 = ~functionWasCalled.22_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  functionWasCalled = 1;
  _3 = cmuCallbacks[0].Set;
  _3 (0B);
  _4 = cmuCallbacks[0].Disable;
  _4 (87);
  _5 = cmuCallbacks[0].Clear;
  _5 (87);
  _6 = cmuCallbacks[0].GetStatus;
  _6 (87);
  _7 = dividerCallbacks[0].Set;
  _7 (0B);
  _8 = dividerTriggerCallbacks[0].Configure;
  _8 (0B);
  _9 = extOscCallbacks[0].Reset;
  _9 (0B);
  _10 = fracDivCallbacks[0].Set;
  _10 (0B);
  _11 = fracDivCallbacks[0].Complete;
  _11 (87);
  _12 = gateCallbacks[0].Set;
  _12 (0B);
  _13 = gateCallbacks[0].Update;
  _13 (87, 0);
  _14 = intOscCallbacks[0].Set;
  _14 (0B);
  _15 = pllCallbacks[0].Set;
  _15 (0B);
  _16 = pllCallbacks[0].Complete;
  _16 (87);
  _17 = selectorCallbacks[0].Set;
  _17 (0B);
  _18 = pcfsCallbacks[0].Set;
  _18 (0B);

  <bb 4> :
  return;

}


Check_Cmu_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->cmusCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->cmusCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->cmus[i].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 1024;
  _6 = _5 != 0;
  DevAssert (_6);
  i = i + 1;

  <bb 6> :
  _7 = config->cmusCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config->cmusCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config->cmus[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 1024;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Pcfs_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->pcfsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->pcfsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->pcfs[i].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 512;
  _6 = _5 != 0;
  DevAssert (_6);
  i = i + 1;

  <bb 6> :
  _7 = config->pcfsCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config->pcfsCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config->pcfs[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 512;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Gate_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->gatesCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->gatesCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->gates[i].name;
  _4 = i + 1;
  _5 = config->gates[_4].name;
  _6 = _3 < _5;
  DevAssert (_6);
  _7 = config->gates[i].name;
  _8 = clockNameTypes[_7];
  _9 = _8 & 256;
  _10 = _9 != 0;
  DevAssert (_10);
  i = i + 1;

  <bb 6> :
  _11 = config->gatesCount;
  _12 = (unsigned int) _11;
  _13 = _12 + 4294967295;
  if (i < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = config->gatesCount;
  _15 = (unsigned int) _14;
  _16 = _15 + 4294967295;
  _17 = config->gates[_16].name;
  _18 = clockNameTypes[_17];
  _19 = _18 & 256;
  _20 = _19 != 0;
  DevAssert (_20);

  <bb 8> :
  return;

}


Check_Frac_Divider_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  _1 = config->fracDivsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config->fracDivsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config->fracDivs[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 64;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Divider_Trigger_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  _1 = config->dividerTriggersCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config->dividerTriggersCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config->dividerTriggers[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 32;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Divider_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->dividersCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->dividersCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->dividers[i].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 16;
  _6 = _5 != 0;
  DevAssert (_6);
  i = i + 1;

  <bb 6> :
  _7 = config->dividersCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config->dividersCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config->dividers[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 16;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Selector_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->selectorsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->selectorsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->selectors[i].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 8;
  _6 = _5 != 0;
  DevAssert (_6);
  i = i + 1;

  <bb 6> :
  _7 = config->selectorsCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config->selectorsCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config->selectors[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 8;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Ext_Sig_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->extClksCount;
  if (_1 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _2 = config->extClks[i].name;
  _3 = i + 1;
  _4 = config->extClks[_3].name;
  _5 = _2 < _4;
  DevAssert (_5);
  _6 = config->extClks[i].name;
  _7 = clockNameTypes[_6];
  _8 = _7 & 128;
  _9 = _8 != 0;
  DevAssert (_9);
  i = i + 1;

  <bb 5> :
  _10 = config->extClksCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  if (i < _12)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _13 = config->extClksCount;
  _14 = (unsigned int) _13;
  _15 = _14 + 4294967295;
  _16 = config->extClks[_15].name;
  _17 = clockNameTypes[_16];
  _18 = _17 & 128;
  _19 = _18 != 0;
  DevAssert (_19);
  return;

}


Check_Pll_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  _1 = config->pllsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config->pllsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config->plls[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 4;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Xosc_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  _1 = config->xoscsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config->xoscsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config->xoscs[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 2;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Ircosc_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;

  <bb 2> :
  _1 = config->ircoscsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config->ircoscsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config->ircoscs[i].name;
  _4 = i + 1;
  _5 = config->ircoscs[_4].name;
  _6 = _3 < _5;
  DevAssert (_6);
  _7 = config->ircoscs[i].name;
  _8 = clockNameTypes[_7];
  _9 = _8 & 1;
  _10 = _9 != 0;
  DevAssert (_10);
  i = i + 1;

  <bb 6> :
  _11 = config->ircoscsCount;
  _12 = (unsigned int) _11;
  _13 = _12 + 4294967295;
  if (i < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = config->ircoscsCount;
  _15 = (unsigned int) _14;
  _16 = _15 + 4294967295;
  _17 = config->ircoscs[_16].name;
  _18 = clockNameTypes[_17];
  _19 = _18 & 1;
  _20 = _19 != 0;
  DevAssert (_20);

  <bb 8> :
  return;

}


UpdateDriverContext (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  clockObjectsAreInitialized.21_1 = clockObjectsAreInitialized;
  _2 = ~clockObjectsAreInitialized.21_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ClockInitializeObjects ();
  clockObjectsAreInitialized = 1;

  <bb 4> :
  CallEmptyCallbacks ();
  return;

}


ClockTimeoutExpired (uint32 * startTimeInOut, uint32 * elapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean D.6354;
  long unsigned int D.6353;

  <bb 2> :
  D.6353 = OsIf_GetElapsed (startTimeInOut, 0);
  _1 = *elapsedTimeInOut;
  _2 = D.6353 + _1;
  *elapsedTimeInOut = _2;
  _3 = *elapsedTimeInOut;
  D.6354 = TimeoutTicks <= _3;

  <bb 3> :
<L0>:
  return D.6354;

}


ClockStartTimeout (uint32 * startTimeOut, uint32 * elapsedTimeOut, uint32 * timeoutTicksOut, uint32 timeoutUs)
{
  <bb 2> :
  _1 = OsIf_GetCounter (0);
  *startTimeOut = _1;
  *elapsedTimeOut = 0;
  _2 = OsIf_MicrosToTicks (timeoutUs, 0);
  *timeoutTicksOut = _2;
  return;

}


ReportClockErrors (Clock_Ip_ClockNotificationType error, Clock_Ip_NameType clockName)
{
  <bb 2> :
  clockNotificationsCallback.20_1 = clockNotificationsCallback;
  clockNotificationsCallback.20_1 (error, clockName);
  return;

}


ClockNotificatonsEmptyCallback (Clock_Ip_ClockNotificationType notification, Clock_Ip_NameType clockName)
{
  <bb 2> :
  return;

}


Clock_Ip_EnableModuleClock (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;

  <bb 2> :
  _1 = clockFeatures[clockName][1];
  _2 = (int) _1;
  _3 = gateCallbackIndex[_2];
  callbackIndex = (uint32) _3;
  _4 = gateCallbacks[callbackIndex].Update;
  _4 (clockName, 0);
  return;

}


Clock_Ip_DisableModuleClock (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;

  <bb 2> :
  _1 = clockFeatures[clockName][1];
  _2 = (int) _1;
  _3 = gateCallbackIndex[_2];
  callbackIndex = (uint32) _3;
  _4 = gateCallbacks[callbackIndex].Update;
  _4 (clockName, 1);
  return;

}


Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_ClockNotificationType, Clock_Ip_NameType) callback)
{
  <bb 2> :
  _1 = callback != 0B;
  DevAssert (_1);
  clockNotificationsCallback = callback;
  return;

}


Clock_Ip_PowerModeChangeNotification (power_modes_t powerMode, power_notification_t notification)
{
  <bb 2> :
  clockObjectsAreInitialized.19_1 = clockObjectsAreInitialized;
  _2 = ~clockObjectsAreInitialized.19_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ClockInitializeObjects ();
  clockObjectsAreInitialized = 1;

  <bb 4> :
  ClockPowerModeChangeNotification (powerMode, notification);
  return;

}


Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;

  <bb 2> :
  _1 = clockFeatures[clockName][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex].Clear;
  _4 (clockName);
  return;

}


Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  Clock_Ip_CmuStatusType D.6349;

  <bb 2> :
  _1 = clockFeatures[clockName][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex].GetStatus;
  D.6349 = _4 (clockName);

  <bb 3> :
<L0>:
  return D.6349;

}


Clock_Ip_DisableClockMonitor (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;

  <bb 2> :
  _1 = clockFeatures[clockName][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex].Disable;
  _4 (clockName);
  return;

}


Clock_Ip_DistributePll ()
{
  uint32 callbackIndex;
  uint32 i;

  <bb 2> :
  clockConfig.4_1 = clockConfig;
  _2 = clockConfig.4_1 != 0B;
  DevAssert (_2);
  clockConfig.5_3 = clockConfig;
  if (clockConfig.5_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  i = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  clockConfig.6_4 = clockConfig;
  _5 = clockConfig.6_4->selectors[i].value;
  _6 = sourceType_clockName[_5];
  if (_6 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  clockConfig.7_7 = clockConfig;
  _8 = clockConfig.7_7->selectors[i].name;
  _9 = clockFeatures[_8][1];
  _10 = (int) _9;
  _11 = selectorCallbackIndex[_10];
  callbackIndex = (uint32) _11;
  _12 = selectorCallbacks[callbackIndex].Set;
  clockConfig.8_13 = clockConfig;
  _14 = &clockConfig.8_13->selectors[i];
  _12 (_14);

  <bb 6> :
  i = i + 1;

  <bb 7> :
  clockConfig.9_15 = clockConfig;
  _16 = clockConfig.9_15->selectorsCount;
  _17 = (long unsigned int) _16;
  if (i < _17)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  clockTreeIsConsumingPll.10_18 = clockTreeIsConsumingPll;
  if (clockTreeIsConsumingPll.10_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  i = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  clockConfig.11_19 = clockConfig;
  _20 = clockConfig.11_19->gates[i].name;
  _21 = clockFeatures[_20][1];
  _22 = (int) _21;
  _23 = gateCallbackIndex[_22];
  callbackIndex = (uint32) _23;
  _24 = gateCallbacks[callbackIndex].Set;
  clockConfig.12_25 = clockConfig;
  _26 = &clockConfig.12_25->gates[i];
  _24 (_26);
  i = i + 1;

  <bb 11> :
  clockConfig.13_27 = clockConfig;
  _28 = clockConfig.13_27->gatesCount;
  _29 = (long unsigned int) _28;
  if (i < _29)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  clockConfig.14_30 = clockConfig;
  _31 = &clockConfig.14_30->specificPeriphalConfiguration;
  SpecificPeripheralClockInitialization (_31);
  i = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  clockConfig.15_32 = clockConfig;
  _33 = clockConfig.15_32->cmus[i].name;
  _34 = clockFeatures[_33][1];
  _35 = (int) _34;
  _36 = cmuCallbackIndex[_35];
  callbackIndex = (uint32) _36;
  _37 = cmuCallbacks[callbackIndex].Enable;
  clockConfig.16_38 = clockConfig;
  _39 = &clockConfig.16_38->cmus[i];
  _37 (_39);
  i = i + 1;

  <bb 14> :
  clockConfig.17_40 = clockConfig;
  _41 = clockConfig.17_40->cmusCount;
  _42 = (long unsigned int) _41;
  if (i < _42)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  clockConfig.18_43 = clockConfig;
  DisableSafeClock (clockConfig.18_43);

  <bb 16> :
  return;

}


Clock_Ip_GetPllStatus ()
{
  uint32 callbackIndex;
  uint32 i;
  clock_pll_status_t pllStatus;
  Clock_Ip_PllStatusType retValue;
  Clock_Ip_PllStatusType D.6341;

  <bb 2> :
  retValue = 2;
  i = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = HwPllName[i];
  _2 = clockFeatures[_1][1];
  _3 = (int) _2;
  _4 = pllCallbackIndex[_3];
  callbackIndex = (uint32) _4;
  _5 = pllCallbacks[callbackIndex].Complete;
  _6 = HwPllName[i];
  pllStatus = _5 (_6);
  if (pllStatus == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  retValue = 1;
  goto <bb 9>; [INV]

  <bb 5> :
  if (pllStatus == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  retValue = 0;

  <bb 7> :
  i = i + 1;

  <bb 8> :
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.6341 = retValue;

  <bb 10> :
<L7>:
  return D.6341;

}


Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  uint32 callbackIndex;

  <bb 2> :
  CheckClockConfiguration (config);
  _1 = config != 0B;
  DevAssert (_1);
  clockConfig.2_2 = clockConfig;
  if (clockConfig.2_2 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = config->cmus[i].name;
  _4 = clockFeatures[_3][1];
  _5 = (int) _4;
  _6 = cmuCallbackIndex[_5];
  callbackIndex = (uint32) _6;
  _7 = cmuCallbacks[callbackIndex].Reset;
  _8 = &config->cmus[i];
  _7 (_8);
  i = i + 1;

  <bb 5> :
  _9 = config->cmusCount;
  _10 = (long unsigned int) _9;
  if (i < _10)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  clockConfig = config;
  SpecificPlatformInitClock (config);
  ResetClockConfiguration (config);
  i = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _11 = config->ircoscs[i].name;
  _12 = clockFeatures[_11][1];
  _13 = (int) _12;
  _14 = ircoscCallbackIndex[_13];
  callbackIndex = (uint32) _14;
  _15 = intOscCallbacks[callbackIndex].Set;
  _16 = &config->ircoscs[i];
  _15 (_16);
  i = i + 1;

  <bb 8> :
  _17 = config->ircoscsCount;
  _18 = (long unsigned int) _17;
  if (i < _18)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  _19 = config->xoscs[i].name;
  _20 = clockFeatures[_19][1];
  _21 = (int) _20;
  _22 = xoscCallbackIndex[_21];
  callbackIndex = (uint32) _22;
  _23 = extOscCallbacks[callbackIndex].Set;
  _24 = &config->xoscs[i];
  _23 (_24);
  i = i + 1;

  <bb 11> :
  _25 = config->xoscsCount;
  _26 = (long unsigned int) _25;
  if (i < _26)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  UpdateDriverContext (config);
  i = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  _27 = config->pcfs[i].name;
  _28 = clockFeatures[_27][1];
  _29 = (int) _28;
  _30 = pcfsCallbackIndex[_29];
  callbackIndex = (uint32) _30;
  _31 = pcfsCallbacks[callbackIndex].Set;
  _32 = &config->pcfs[i];
  _31 (_32);
  i = i + 1;

  <bb 14> :
  _33 = config->pcfsCount;
  _34 = (long unsigned int) _33;
  if (i < _34)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  i = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _35 = config->dividerTriggers[i].name;
  _36 = clockFeatures[_35][1];
  _37 = (int) _36;
  _38 = dividertriggerCallbackIndex[_37];
  callbackIndex = (uint32) _38;
  _39 = dividerTriggerCallbacks[callbackIndex].Configure;
  _40 = &config->dividerTriggers[i];
  _39 (_40);
  i = i + 1;

  <bb 17> :
  _41 = config->dividerTriggersCount;
  _42 = (long unsigned int) _41;
  if (i < _42)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  i = 0;
  goto <bb 20>; [INV]

  <bb 19> :
  _43 = config->dividers[i].name;
  _44 = clockFeatures[_43][1];
  _45 = (int) _44;
  _46 = dividerCallbackIndex[_45];
  callbackIndex = (uint32) _46;
  _47 = dividerCallbacks[callbackIndex].Set;
  _48 = &config->dividers[i];
  _47 (_48);
  i = i + 1;

  <bb 20> :
  _49 = config->dividersCount;
  _50 = (long unsigned int) _49;
  if (i < _50)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  i = 0;
  goto <bb 23>; [INV]

  <bb 22> :
  _51 = config->dividerTriggers[i].name;
  _52 = clockFeatures[_51][1];
  _53 = (int) _52;
  _54 = dividertriggerCallbackIndex[_53];
  callbackIndex = (uint32) _54;
  _55 = dividerTriggerCallbacks[callbackIndex].TriggerUpdate;
  _56 = &config->dividerTriggers[i];
  _55 (_56);
  i = i + 1;

  <bb 23> :
  _57 = config->dividerTriggersCount;
  _58 = (long unsigned int) _57;
  if (i < _58)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  i = 0;
  goto <bb 26>; [INV]

  <bb 25> :
  _59 = config->plls[i].name;
  _60 = clockFeatures[_59][1];
  _61 = (int) _60;
  _62 = pllCallbackIndex[_61];
  callbackIndex = (uint32) _62;
  _63 = pllCallbacks[callbackIndex].Set;
  _64 = &config->plls[i];
  _63 (_64);
  i = i + 1;

  <bb 26> :
  _65 = config->pllsCount;
  _66 = (long unsigned int) _65;
  if (i < _66)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  i = 0;
  goto <bb 29>; [INV]

  <bb 28> :
  _67 = config->cmus[i].name;
  _68 = clockFeatures[_67][1];
  _69 = (int) _68;
  _70 = cmuCallbackIndex[_69];
  callbackIndex = (uint32) _70;
  _71 = cmuCallbacks[callbackIndex].Set;
  _72 = &config->cmus[i];
  _71 (_72);
  i = i + 1;

  <bb 29> :
  _73 = config->cmusCount;
  _74 = (long unsigned int) _73;
  if (i < _74)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  i = 0;
  goto <bb 32>; [INV]

  <bb 31> :
  _75 = config->xoscs[i].name;
  _76 = clockFeatures[_75][1];
  _77 = (int) _76;
  _78 = xoscCallbackIndex[_77];
  callbackIndex = (uint32) _78;
  _79 = extOscCallbacks[callbackIndex].Complete;
  _80 = &config->xoscs[i];
  _79 (_80);
  i = i + 1;

  <bb 32> :
  _81 = config->xoscsCount;
  _82 = (long unsigned int) _81;
  if (i < _82)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  i = 0;
  goto <bb 35>; [INV]

  <bb 34> :
  _83 = config->plls[i].name;
  _84 = clockFeatures[_83][1];
  _85 = (int) _84;
  _86 = pllCallbackIndex[_85];
  callbackIndex = (uint32) _86;
  _87 = pllCallbacks[callbackIndex].Enable;
  _88 = &config->plls[i];
  _87 (_88);
  i = i + 1;

  <bb 35> :
  _89 = config->pllsCount;
  _90 = (long unsigned int) _89;
  if (i < _90)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  i = 0;
  goto <bb 38>; [INV]

  <bb 37> :
  _91 = config->fracDivs[i].name;
  _92 = clockFeatures[_91][1];
  _93 = (int) _92;
  _94 = fractional_dividerCallbackIndex[_93];
  callbackIndex = (uint32) _94;
  _95 = fracDivCallbacks[callbackIndex].Set;
  _96 = &config->fracDivs[i];
  _95 (_96);
  i = i + 1;

  <bb 38> :
  _97 = config->fracDivsCount;
  _98 = (long unsigned int) _97;
  if (i < _98)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  clockTreeIsConsumingPll = 0;
  i = 0;
  goto <bb 44>; [INV]

  <bb 40> :
  _99 = config->selectors[i].value;
  _100 = sourceType_clockName[_99];
  if (_100 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _101 = config->selectors[i].name;
  _102 = clockFeatures[_101][1];
  _103 = (int) _102;
  _104 = selectorCallbackIndex[_103];
  callbackIndex = (uint32) _104;
  _105 = selectorCallbacks[callbackIndex].Set;
  _106 = &config->selectors[i];
  _105 (_106);
  goto <bb 43>; [INV]

  <bb 42> :
  clockTreeIsConsumingPll = 1;

  <bb 43> :
  i = i + 1;

  <bb 44> :
  _107 = config->selectorsCount;
  _108 = (long unsigned int) _107;
  if (i < _108)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  clockTreeIsConsumingPll.3_109 = clockTreeIsConsumingPll;
  _110 = ~clockTreeIsConsumingPll.3_109;
  if (_110 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 46> :
  i = 0;
  goto <bb 48>; [INV]

  <bb 47> :
  _111 = config->gates[i].name;
  _112 = clockFeatures[_111][1];
  _113 = (int) _112;
  _114 = gateCallbackIndex[_113];
  callbackIndex = (uint32) _114;
  _115 = gateCallbacks[callbackIndex].Set;
  _116 = &config->gates[i];
  _115 (_116);
  i = i + 1;

  <bb 48> :
  _117 = config->gatesCount;
  _118 = (long unsigned int) _117;
  if (i < _118)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  _119 = &config->specificPeriphalConfiguration;
  SpecificPeripheralClockInitialization (_119);
  i = 0;
  goto <bb 51>; [INV]

  <bb 50> :
  _120 = config->cmus[i].name;
  _121 = clockFeatures[_120][1];
  _122 = (int) _121;
  _123 = cmuCallbackIndex[_122];
  callbackIndex = (uint32) _123;
  _124 = cmuCallbacks[callbackIndex].Enable;
  _125 = &config->cmus[i];
  _124 (_125);
  i = i + 1;

  <bb 51> :
  _126 = config->cmusCount;
  _127 = (long unsigned int) _126;
  if (i < _127)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  DisableSafeClock (config);

  <bb 53> :
  return;

}


Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * config)
{
  Clock_Ip_PllStatusType pllStatus;
  Clock_Ip_StatusType clockStatus;
  Clock_Ip_StatusType D.6324;

  <bb 2> :
  clockStatus = 1;
  _1 = config != 0B;
  DevAssert (_1);
  Clock_Ip_InitClock (config);
  clockTreeIsConsumingPll.0_2 = clockTreeIsConsumingPll;
  if (clockTreeIsConsumingPll.0_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  pllStatus = Clock_Ip_GetPllStatus ();
  if (pllStatus == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  Clock_Ip_DistributePll ();
  clockStatus = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  clockStatus = 0;

  <bb 6> :
  D.6324 = clockStatus;

  <bb 7> :
<L5>:
  return D.6324;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  x.1_1 = x;
  if (x.1_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


