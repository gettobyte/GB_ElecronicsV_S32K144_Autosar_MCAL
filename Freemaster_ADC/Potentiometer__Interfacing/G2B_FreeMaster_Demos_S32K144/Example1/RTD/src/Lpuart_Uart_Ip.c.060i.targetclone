Lpuart_Uart_Ip_GetData (const uint8 Instance)
{
  uint16 Data16b;
  const struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  <unnamed type> _5;
  uint8 * _6;
  unsigned char _7;
  <unnamed type> _8;
  uint8 * _9;
  unsigned char _10;
  uint8 * _11;
  unsigned char _12;
  uint8 * _13;
  uint8 * _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  long unsigned int _18;
  uint8 * _19;
  unsigned char _20;
  uint8 * _21;
  uint8 * _22;
  long unsigned int _23;
  long unsigned int _24;
  uint8 * _25;
  unsigned char _26;
  uint8 * _27;
  uint8 * _28;
  short unsigned int _29;
  uint8 * _30;
  unsigned char _31;
  uint8 * _32;
  uint8 * _33;
  long unsigned int _34;
  long unsigned int _35;

  <bb 2> :
  _1 = (int) Instance_40(D);
  Base_42 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_40(D);
  UartState_43 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_40(D);
  UartUserCfg_44 = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartUserCfg_44->BitCountPerChar;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = UartUserCfg_44->BitCountPerChar;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _6 = UartState_43->RxBuff;
  _7 = Lpuart_Uart_Ip_Getchar (Base_42);
  *_6 = _7;
  _8 = UartUserCfg_44->BitCountPerChar;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = UartState_43->RxBuff;
  _10 = *_9;
  _11 = UartState_43->RxBuff;
  _12 = _10 & 127;
  *_11 = _12;

  <bb 6> :
  _13 = UartState_43->RxBuff;
  _14 = _13 + 1;
  UartState_43->RxBuff = _14;
  _15 ={v} UartState_43->RxSize;
  _16 = _15 + 4294967295;
  UartState_43->RxSize ={v} _16;
  goto <bb 13>; [INV]

  <bb 7> :
  _17 = UartUserCfg_44->BitCountPerChar;
  if (_17 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Data16b_48 = Lpuart_Uart_Ip_Getchar9 (Base_42);
  goto <bb 10>; [INV]

  <bb 9> :
  Data16b_46 = Lpuart_Uart_Ip_Getchar10 (Base_42);

  <bb 10> :
  # Data16b_36 = PHI <Data16b_48(8), Data16b_46(9)>
  _18 ={v} UartState_43->RxSize;
  if (_18 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _19 = UartState_43->RxBuff;
  _20 = (unsigned char) Data16b_36;
  *_19 = _20;
  _21 = UartState_43->RxBuff;
  _22 = _21 + 1;
  UartState_43->RxBuff = _22;
  _23 ={v} UartState_43->RxSize;
  _24 = _23 + 4294967295;
  UartState_43->RxSize ={v} _24;
  goto <bb 13>; [INV]

  <bb 12> :
  _25 = UartState_43->RxBuff;
  _26 = (unsigned char) Data16b_36;
  *_25 = _26;
  _27 = UartState_43->RxBuff;
  _28 = _27 + 1;
  UartState_43->RxBuff = _28;
  _29 = Data16b_36 >> 8;
  _30 = UartState_43->RxBuff;
  _31 = (unsigned char) _29;
  *_30 = _31;
  _32 = UartState_43->RxBuff;
  _33 = _32 + 1;
  UartState_43->RxBuff = _33;
  _34 ={v} UartState_43->RxSize;
  _35 = _34 + 4294967294;
  UartState_43->RxSize ={v} _35;

  <bb 13> :
  return;

}


Lpuart_Uart_Ip_PutData (const uint8 Instance)
{
  uint8 Data8b;
  uint16 Data16b;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  <unnamed type> _5;
  const uint8 * _6;
  const uint8 * _7;
  const uint8 * _8;
  long unsigned int _9;
  long unsigned int _10;
  const uint8 * _11;
  unsigned char _12;
  long unsigned int _13;
  const uint8 * _14;
  const uint8 * _15;
  long unsigned int _16;
  long unsigned int _17;
  const uint8 * _18;
  const uint8 * _19;
  const uint8 * _20;
  unsigned char _21;
  short unsigned int _22;
  short unsigned int _23;
  const uint8 * _24;
  const uint8 * _25;
  long unsigned int _26;
  long unsigned int _27;
  <unnamed type> _28;

  <bb 2> :
  _1 = (int) Instance_32(D);
  Base_34 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_32(D);
  UartState_35 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_32(D);
  UartUserCfg_36 = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartUserCfg_36->BitCountPerChar;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = UartUserCfg_36->BitCountPerChar;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = UartState_35->TxBuff;
  Data8b_46 = *_6;
  _7 = UartState_35->TxBuff;
  _8 = _7 + 1;
  UartState_35->TxBuff = _8;
  _9 ={v} UartState_35->TxSize;
  _10 = _9 + 4294967295;
  UartState_35->TxSize ={v} _10;
  Lpuart_Uart_Ip_Putchar (Base_34, Data8b_46);
  goto <bb 11>; [INV]

  <bb 5> :
  _11 = UartState_35->TxBuff;
  _12 = *_11;
  Data16b_37 = (uint16) _12;
  _13 ={v} UartState_35->TxSize;
  if (_13 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = UartState_35->TxBuff;
  _15 = _14 + 1;
  UartState_35->TxBuff = _15;
  _16 ={v} UartState_35->TxSize;
  _17 = _16 + 4294967295;
  UartState_35->TxSize ={v} _17;
  goto <bb 8>; [INV]

  <bb 7> :
  _18 = UartState_35->TxBuff;
  _19 = _18 + 1;
  UartState_35->TxBuff = _19;
  _20 = UartState_35->TxBuff;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  _23 = _22 << 8;
  Data16b_39 = Data16b_37 | _23;
  _24 = UartState_35->TxBuff;
  _25 = _24 + 1;
  UartState_35->TxBuff = _25;
  _26 ={v} UartState_35->TxSize;
  _27 = _26 + 4294967294;
  UartState_35->TxSize ={v} _27;

  <bb 8> :
  # Data16b_29 = PHI <Data16b_37(6), Data16b_39(7)>
  _28 = UartUserCfg_36->BitCountPerChar;
  if (_28 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Lpuart_Uart_Ip_Putchar9 (Base_34, Data16b_29);
  goto <bb 11>; [INV]

  <bb 10> :
  Lpuart_Uart_Ip_Putchar10 (Base_34, Data16b_29);

  <bb 11> :
  return;

}


Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (const uint8 Instance)
{
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  long unsigned int TimeoutTicks.17_6;
  _Bool _7;
  _Bool _8;
  long unsigned int TimeoutTicks.18_9;
  _Bool _10;
  <unnamed type> _11;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance_18(D);
  Base_19 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_18(D);
  UartState_20 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Lpuart_Uart_Ip_SetIntMode (Base_19, 27, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_19, 24, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_19, 26, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_19, 25, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_19, 21, 0);
  _3 ={v} UartState_20->ReceiveStatus;
  if (_3 == 6)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 4> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base_19, 21);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.17_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.17_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TimeoutTicks.18_9 = TimeoutTicks;
  _10 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.18_9, 0);
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  UartState_20->ReceiveStatus ={v} 1;

  <bb 8> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base_19, 0);
  Lpuart_Uart_Ip_Getchar (Base_19);
  UartState_20->IsRxBusy ={v} 0;
  _11 ={v} UartState_20->ReceiveStatus;
  if (_11 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  UartState_20->ReceiveStatus ={v} 0;

  <bb 10> :
  StartTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  ElapsedTicks ={v} {CLOBBER};
  return;

}


Lpuart_Uart_Ip_StartReceiveDataUsingInt (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6393;
  int _1;
  int _2;
  Lpuart_Uart_Ip_StatusType _21;

  <bb 2> :
  _1 = (int) Instance_3(D);
  Base_5 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_3(D);
  UartState_6 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  UartState_6->IsRxBusy ={v} 1;
  UartState_6->RxBuff = RxBuff_8(D);
  UartState_6->RxSize ={v} RxSize_10(D);
  UartState_6->ReceiveStatus ={v} 2;
  Lpuart_Uart_Ip_ClearErrorFlags (Base_5);
  Lpuart_Uart_Ip_FlushRxBuffer (Base_5);
  Lpuart_Uart_Ip_SetReceiverCmd (Base_5, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 27, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 24, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 26, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 25, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 21, 1);
  _21 = 0;

  <bb 3> :
<L0>:
  return _21;

}


Lpuart_Uart_Ip_CompleteSendDataUsingInt (const uint8 Instance)
{
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct LPUART_Type * Base;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  long unsigned int TimeoutTicks.15_6;
  _Bool _7;
  _Bool _8;
  long unsigned int TimeoutTicks.16_9;
  _Bool _10;
  <unnamed type> _11;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance_19(D);
  Base_20 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_19(D);
  UartState_21 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 ={v} UartState_21->TransmitStatus;
  if (_3 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_SetIntMode (Base_20, 23, 0);

  <bb 4> :
  Lpuart_Uart_Ip_SetIntMode (Base_20, 22, 0);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 5> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base_20, 22);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  TimeoutTicks.15_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.15_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  TimeoutTicks.16_9 = TimeoutTicks;
  _10 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.16_9, 0);
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  UartState_21->TransmitStatus ={v} 1;

  <bb 9> :
  Lpuart_Uart_Ip_SetTransmitterCmd (Base_20, 0);
  _11 ={v} UartState_21->TransmitStatus;
  if (_11 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  UartState_21->TransmitStatus ={v} 0;

  <bb 11> :
  UartState_21->IsTxBusy ={v} 0;
  StartTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  ElapsedTicks ={v} {CLOBBER};
  return;

}


Lpuart_Uart_Ip_StartSendDataUsingInt (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6384;
  int _1;
  int _2;
  Lpuart_Uart_Ip_StatusType _14;

  <bb 2> :
  _1 = (int) Instance_3(D);
  Base_5 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_3(D);
  UartState_6 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  UartState_6->TxBuff = TxBuff_7(D);
  UartState_6->TxSize ={v} TxSize_9(D);
  UartState_6->TransmitStatus ={v} 2;
  Lpuart_Uart_Ip_SetTransmitterCmd (Base_5, 1);
  Lpuart_Uart_Ip_SetIntMode (Base_5, 23, 1);
  _14 = 0;

  <bb 3> :
<L0>:
  return _14;

}


Lpuart_Uart_Ip_ErrIrqHandler (const uint8 Instance)
{
  boolean IsReturn;
  boolean IsError;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  _Bool _12;
  _Bool _13;
  _Bool _14;
  _Bool _15;
  _Bool _16;
  _Bool _17;
  _Bool _18;
  _Bool _19;
  <unnamed type> _20;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _21;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _22;
  void * _23;

  <bb 2> :
  IsError_38 = 0;
  IsReturn_39 = 0;
  _1 = (int) Instance_40(D);
  Base_42 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_40(D);
  UartState_43 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_40(D);
  UartUserCfg_44 = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base_42, 19);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base_42, 19);
  _5 = Lpuart_Uart_Ip_GetIntMode (Base_42, 27);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  IsReturn_50 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  IsError_48 = 1;
  UartState_43->ReceiveStatus ={v} 5;

  <bb 6> :
  # IsError_24 = PHI <IsError_38(2), IsError_38(4), IsError_48(5)>
  # IsReturn_28 = PHI <IsReturn_39(2), IsReturn_50(4), IsReturn_39(5)>
  _7 = Lpuart_Uart_Ip_GetStatusFlag (Base_42, 17);
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  _8 = ~IsReturn_28;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base_42, 17);
  _9 = Lpuart_Uart_Ip_GetIntMode (Base_42, 25);
  _10 = ~_9;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  IsReturn_56 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  IsError_54 = 1;
  UartState_43->ReceiveStatus ={v} 7;

  <bb 11> :
  # IsError_25 = PHI <IsError_24(6), IsError_24(7), IsError_24(9), IsError_54(10)>
  # IsReturn_29 = PHI <IsReturn_28(6), IsReturn_28(7), IsReturn_56(9), IsReturn_28(10)>
  _11 = Lpuart_Uart_Ip_GetStatusFlag (Base_42, 16);
  if (_11 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  _12 = ~IsReturn_29;
  if (_12 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base_42, 16);
  _13 = Lpuart_Uart_Ip_GetIntMode (Base_42, 24);
  _14 = ~_13;
  if (_14 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  IsReturn_62 = 1;
  goto <bb 16>; [INV]

  <bb 15> :
  IsError_60 = 1;
  UartState_43->ReceiveStatus ={v} 8;

  <bb 16> :
  # IsError_26 = PHI <IsError_25(11), IsError_25(12), IsError_25(14), IsError_60(15)>
  # IsReturn_30 = PHI <IsReturn_29(11), IsReturn_29(12), IsReturn_62(14), IsReturn_29(15)>
  _15 = Lpuart_Uart_Ip_GetStatusFlag (Base_42, 18);
  if (_15 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  _16 = ~IsReturn_30;
  if (_16 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base_42, 18);
  _17 = Lpuart_Uart_Ip_GetIntMode (Base_42, 26);
  _18 = ~_17;
  if (_18 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  IsReturn_68 = 1;
  goto <bb 21>; [INV]

  <bb 20> :
  IsError_66 = 1;
  UartState_43->ReceiveStatus ={v} 9;

  <bb 21> :
  # IsError_27 = PHI <IsError_26(16), IsError_26(17), IsError_26(19), IsError_66(20)>
  # IsReturn_31 = PHI <IsReturn_30(16), IsReturn_30(17), IsReturn_68(19), IsReturn_30(20)>
  _19 = ~IsReturn_31;
  if (_19 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 22> :
  if (IsError_27 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 23> :
  _20 = UartUserCfg_44->TransferType;
  if (_20 == 1)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance_40(D));

  <bb 25> :
  _21 = UartUserCfg_44->Callback;
  if (_21 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _22 = UartUserCfg_44->Callback;
  _23 = UartUserCfg_44->CallbackParam;
  _22 (Instance_40(D), 3, _23);

  <bb 27> :
  return;

}


Lpuart_Uart_Ip_TxCompleteIrqHandler (const uint8 Instance)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  long unsigned int _3;
  <unnamed type> _4;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _5;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _6;
  void * _7;

  <bb 2> :
  _1 = (int) Instance_10(D);
  UartState_12 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance_10(D);
  UartUserCfg_13 = Lpuart_Uart_Ip_apUserConfig[_2];
  _3 ={v} UartState_12->TxSize;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _4 = UartUserCfg_13->TransferType;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Lpuart_Uart_Ip_CompleteSendDataUsingInt (Instance_10(D));

  <bb 5> :
  _5 = UartUserCfg_13->Callback;
  if (_5 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _6 = UartUserCfg_13->Callback;
  _7 = UartUserCfg_13->CallbackParam;
  _6 (Instance_10(D), 2, _7);

  <bb 7> :
  return;

}


Lpuart_Uart_Ip_TxEmptyIrqHandler (const uint8 Instance)
{
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _6;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _7;
  void * _8;
  long unsigned int _9;

  <bb 2> :
  _1 = (int) Instance_12(D);
  Base_14 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_12(D);
  UartState_15 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_12(D);
  UartUserCfg_16 = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 ={v} UartState_15->TxSize;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_PutData (Instance_12(D));
  _5 ={v} UartState_15->TxSize;
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _6 = UartUserCfg_16->Callback;
  if (_6 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = UartUserCfg_16->Callback;
  _8 = UartUserCfg_16->CallbackParam;
  _7 (Instance_12(D), 1, _8);

  <bb 6> :
  _9 ={v} UartState_15->TxSize;
  if (_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Lpuart_Uart_Ip_SetIntMode (Base_14, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_14, 22, 1);

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_RxIrqHandler (const uint8 Instance)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  long unsigned int _3;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _4;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _5;
  void * _6;
  long unsigned int _7;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _8;
  void (*<T4ed>) (const uint8, const Lpuart_Uart_Ip_EventType, void *) _9;
  void * _10;

  <bb 2> :
  _1 = (int) Instance_13(D);
  UartState_15 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance_13(D);
  UartUserCfg_16 = Lpuart_Uart_Ip_apUserConfig[_2];
  Lpuart_Uart_Ip_GetData (Instance_13(D));
  _3 ={v} UartState_15->RxSize;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _4 = UartUserCfg_16->Callback;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = UartUserCfg_16->Callback;
  _6 = UartUserCfg_16->CallbackParam;
  _5 (Instance_13(D), 0, _6);

  <bb 5> :
  _7 ={v} UartState_15->RxSize;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance_13(D));
  _8 = UartUserCfg_16->Callback;
  if (_8 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = UartUserCfg_16->Callback;
  _10 = UartUserCfg_16->CallbackParam;
  _9 (Instance_13(D), 2, _10);

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_IrqHandler (const uint8 Instance)
{
  boolean IsReturn;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  _Bool _10;

  <bb 2> :
  _1 = (int) Instance_17(D);
  Base_19 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_17(D);
  UartState_20 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn_21 = 0;
  if (UartState_20 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_Getchar (Base_19);
  Lpuart_Uart_Ip_ClearErrorFlags (Base_19);
  goto <bb 17>; [INV]

  <bb 4> :
  Lpuart_Uart_Ip_ErrIrqHandler (Instance_17(D));
  _3 = Lpuart_Uart_Ip_GetStatusFlag (Base_19, 21);
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _4 = Lpuart_Uart_Ip_GetIntMode (Base_19, 21);
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_RxIrqHandler (Instance_17(D));
  goto <bb 8>; [INV]

  <bb 7> :
  Lpuart_Uart_Ip_Getchar (Base_19);

  <bb 8> :
  IsReturn_27 = 1;

  <bb 9> :
  # IsReturn_11 = PHI <IsReturn_21(4), IsReturn_27(8)>
  _5 = Lpuart_Uart_Ip_GetStatusFlag (Base_19, 23);
  if (_5 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  _6 = ~IsReturn_11;
  if (_6 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = Lpuart_Uart_Ip_GetIntMode (Base_19, 23);
  if (_7 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Lpuart_Uart_Ip_TxEmptyIrqHandler (Instance_17(D));
  IsReturn_31 = 1;

  <bb 13> :
  # IsReturn_12 = PHI <IsReturn_11(9), IsReturn_11(10), IsReturn_11(11), IsReturn_31(12)>
  _8 = Lpuart_Uart_Ip_GetStatusFlag (Base_19, 22);
  if (_8 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  _9 = ~IsReturn_12;
  if (_9 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _10 = Lpuart_Uart_Ip_GetIntMode (Base_19, 22);
  if (_10 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  Lpuart_Uart_Ip_TxCompleteIrqHandler (Instance_17(D));

  <bb 17> :
  return;

}


Lpuart_Uart_Ip_SetRxBuffer (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6302;
  int _1;
  Lpuart_Uart_Ip_StatusType _9;

  <bb 2> :
  _1 = (int) Instance_2(D);
  UartState_4 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  UartState_4->RxBuff = RxBuff_5(D);
  UartState_4->RxSize ={v} RxSize_7(D);
  _9 = 0;

  <bb 3> :
<L0>:
  return _9;

}


Lpuart_Uart_Ip_SetTxBuffer (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6300;
  int _1;
  Lpuart_Uart_Ip_StatusType _9;

  <bb 2> :
  _1 = (int) Instance_2(D);
  UartState_4 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  UartState_4->TxBuff = TxBuff_5(D);
  UartState_4->TxSize ={v} TxSize_7(D);
  _9 = 0;

  <bb 3> :
<L0>:
  return _9;

}


Lpuart_Uart_Ip_GetBaudRate (const uint8 Instance, uint32 * ConfiguredBaudRate)
{
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = (int) Instance_3(D);
  UartState_5 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = UartState_5->BaudRate;
  *ConfiguredBaudRate_6(D) = _2;
  return;

}


Lpuart_Uart_Ip_SetBaudRate (const uint8 Instance, const Lpuart_Uart_Ip_BaudrateType DesiredBaudrate, const uint32 ClockFrequency)
{
  Lpuart_Uart_Ip_StatusType Status;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  uint32 ExpectedBaud;
  uint32 MaxOsr;
  uint32 BaudDiff;
  uint32 CalculatedBaud;
  uint32 TempDiff;
  uint32 Osr;
  uint16 SbrTemp;
  uint16 Idx;
  uint16 Sbr;
  Lpuart_Uart_Ip_StatusType D.6298;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  short unsigned int Idx.14_16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  Lpuart_Uart_Ip_StatusType _67;

  <bb 2> :
  ExpectedBaud_38 = DesiredBaudrate_37(D);
  _1 = (int) Instance_39(D);
  Base_41 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_39(D);
  UartState_42 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Status_43 = 1;
  _3 ={v} UartState_42->IsTxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _4 ={v} UartState_42->IsRxBusy;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status_66 = 2;
  goto <bb 22>; [INV]

  <bb 5> :
  _5 = ExpectedBaud_38 * 5;
  Osr_44 = 4;
  _6 = ExpectedBaud_38 * Osr_44;
  _7 = ClockFrequency_45(D) / _6;
  Sbr_46 = (uint16) _7;
  _8 = (long unsigned int) Sbr_46;
  _9 = Osr_44 * _8;
  CalculatedBaud_47 = ClockFrequency_45(D) / _9;
  if (CalculatedBaud_47 > ExpectedBaud_38)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  BaudDiff_49 = CalculatedBaud_47 - ExpectedBaud_38;
  goto <bb 8>; [INV]

  <bb 7> :
  BaudDiff_48 = ExpectedBaud_38 - CalculatedBaud_47;

  <bb 8> :
  # BaudDiff_30 = PHI <BaudDiff_49(6), BaudDiff_48(7)>
  MaxOsr_50 = ClockFrequency_45(D) / ExpectedBaud_38;
  if (MaxOsr_50 > 32)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  MaxOsr_51 = 32;

  <bb 10> :
  # MaxOsr_33 = PHI <MaxOsr_50(8), MaxOsr_51(9)>
  if (MaxOsr_33 > 4)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  Idx_52 = 5;
  goto <bb 18>; [INV]

  <bb 12> :
  _10 = (long unsigned int) Idx_23;
  _11 = ExpectedBaud_38 * _10;
  _12 = ClockFrequency_45(D) / _11;
  SbrTemp_53 = (uint16) _12;
  _13 = (long unsigned int) Idx_23;
  _14 = (long unsigned int) SbrTemp_53;
  _15 = _13 * _14;
  CalculatedBaud_54 = ClockFrequency_45(D) / _15;
  if (CalculatedBaud_54 > ExpectedBaud_38)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  TempDiff_56 = CalculatedBaud_54 - ExpectedBaud_38;
  goto <bb 15>; [INV]

  <bb 14> :
  TempDiff_55 = ExpectedBaud_38 - CalculatedBaud_54;

  <bb 15> :
  # TempDiff_27 = PHI <TempDiff_56(13), TempDiff_55(14)>
  if (TempDiff_27 <= BaudDiff_32)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  BaudDiff_57 = TempDiff_27;
  Osr_58 = (uint32) Idx_23;
  Sbr_59 = SbrTemp_53;

  <bb 17> :
  # Sbr_20 = PHI <Sbr_21(15), Sbr_59(16)>
  # Osr_24 = PHI <Osr_25(15), Osr_58(16)>
  # BaudDiff_31 = PHI <BaudDiff_32(15), BaudDiff_57(16)>
  Idx.14_16 = Idx_23;
  Idx_60 = Idx.14_16 + 1;

  <bb 18> :
  # Sbr_21 = PHI <Sbr_46(11), Sbr_20(17)>
  # Idx_23 = PHI <Idx_52(11), Idx_60(17)>
  # Osr_25 = PHI <Osr_44(11), Osr_24(17)>
  # CalculatedBaud_28 = PHI <CalculatedBaud_47(11), CalculatedBaud_54(17)>
  # BaudDiff_32 = PHI <BaudDiff_30(11), BaudDiff_31(17)>
  _17 = (long unsigned int) Idx_23;
  if (MaxOsr_33 >= _17)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  # Sbr_22 = PHI <Sbr_46(10), Sbr_21(18)>
  # Osr_26 = PHI <Osr_44(10), Osr_25(18)>
  # CalculatedBaud_29 = PHI <CalculatedBaud_47(10), CalculatedBaud_28(18)>
  if (Osr_26 <= 7)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (Base_41);

  <bb 21> :
  _18 = Osr_26 + 4294967295;
  Lpuart_Uart_Ip_SetOversamplingRatio (Base_41, _18);
  _19 = (long unsigned int) Sbr_22;
  Lpuart_Uart_Ip_SetBaudRateDivisor (Base_41, _19);
  UartState_42->BaudRate = CalculatedBaud_29;
  Status_65 = 0;

  <bb 22> :
  # Status_34 = PHI <Status_66(4), Status_65(21)>
  _67 = Status_34;

  <bb 23> :
<L21>:
  return _67;

}


Lpuart_Uart_Ip_AbortReceivingData (const uint8 Instance)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6278;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  <unnamed type> _7;
  Lpuart_Uart_Ip_StatusType _27;

  <bb 2> :
  _1 = (int) Instance_13(D);
  Base_15 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_13(D);
  UartState_16 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_13(D);
  UartUserCfg_17 = Lpuart_Uart_Ip_apUserConfig[_3];
  IsReturn_18 = 0;
  RetVal_19 = 1;
  _4 ={v} UartState_16->IsRxBusy;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_20 = 0;
  IsReturn_21 = 1;

  <bb 4> :
  # IsReturn_8 = PHI <IsReturn_18(2), IsReturn_21(3)>
  # RetVal_9 = PHI <RetVal_19(2), RetVal_20(3)>
  _6 = ~IsReturn_8;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  UartState_16->ReceiveStatus ={v} 6;
  _7 = UartUserCfg_17->TransferType;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance_13(D));

  <bb 7> :
  Lpuart_Uart_Ip_ClearErrorFlags (Base_15);
  Lpuart_Uart_Ip_FlushRxBuffer (Base_15);
  RetVal_26 = 0;

  <bb 8> :
  # RetVal_10 = PHI <RetVal_9(4), RetVal_26(7)>
  _27 = RetVal_10;

  <bb 9> :
<L6>:
  return _27;

}


Lpuart_Uart_Ip_GetReceiveStatus (const uint8 Instance, uint32 * BytesRemaining)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6270;
  int _1;
  int _2;
  _Bool _3;
  <unnamed type> _4;
  long unsigned int _5;
  Lpuart_Uart_Ip_StatusType _14;

  <bb 2> :
  _1 = (int) Instance_7(D);
  UartState_9 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance_7(D);
  UartUserCfg_10 = Lpuart_Uart_Ip_apUserConfig[_2];
  if (BytesRemaining_11(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 ={v} UartState_9->IsRxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = UartUserCfg_10->TransferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 ={v} UartState_9->RxSize;
  *BytesRemaining_11(D) = _5;
  goto <bb 7>; [INV]

  <bb 6> :
  *BytesRemaining_11(D) = 0;

  <bb 7> :
  _14 ={v} UartState_9->ReceiveStatus;

  <bb 8> :
<L7>:
  return _14;

}


Lpuart_Uart_Ip_AsyncReceive (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  boolean IsReturn;
  Lpuart_Uart_Ip_StatusType RetVal;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  Lpuart_Uart_Ip_StatusType D.6261;
  int iftmp.13;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  <unnamed type> _5;
  <unnamed type> _6;
  <unnamed type> _7;
  int iftmp.13_25;
  int iftmp.13_26;
  Lpuart_Uart_Ip_StatusType _31;

  <bb 2> :
  RetVal_13 = 0;
  _1 = (int) Instance_14(D);
  UartUserCfg_16 = Lpuart_Uart_Ip_apUserConfig[_1];
  _2 = (int) Instance_14(D);
  UartState_17 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn_18 = 0;
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_03 ();
  _3 ={v} UartState_17->IsRxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_03 ();
  RetVal_21 = 2;
  IsReturn_22 = 1;

  <bb 4> :
  # RetVal_8 = PHI <RetVal_13(2), RetVal_21(3)>
  # IsReturn_10 = PHI <IsReturn_18(2), IsReturn_22(3)>
  _4 = ~IsReturn_10;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  UartState_17->IsRxBusy ={v} 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_03 ();
  _5 = UartUserCfg_16->TransferType;
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _6 = UartUserCfg_16->TransferType;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.13_26 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.13_25 = 0;

  <bb 9> :
  _7 = UartUserCfg_16->TransferType;
  if (_7 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  RetVal_30 = Lpuart_Uart_Ip_StartReceiveDataUsingInt (Instance_14(D), RxBuff_27(D), RxSize_28(D));

  <bb 11> :
  # RetVal_9 = PHI <RetVal_8(4), RetVal_8(9), RetVal_30(10)>
  _31 = RetVal_9;

  <bb 12> :
<L10>:
  return _31;

}


Lpuart_Uart_Ip_StartGetData (const uint8 Instance, uint32 * StartTime, uint32 * ElapsedTicks, uint32 TimeoutTicks)
{
  const uint32 Lpuart_Uart_Ip_StatusRegMask[4];
  const Lpuart_Uart_Ip_StatusType Lpuart_Uart_Ip_ReceiveStatusArray[4];
  const Lpuart_Uart_Ip_StatusFlagType Lpuart_Uart_Ip_StatusFlagTypeArray[4];
  uint32 Mask;
  uint8 StatusIndex;
  struct LPUART_Type * Base;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  int _7;
  <unnamed type> _8;
  _Bool _9;
  int _10;
  <unnamed type> _11;
  int _12;
  long unsigned int _13;
  unsigned char StatusIndex.12_14;
  long unsigned int _15;
  _Bool _16;
  _Bool _17;

  <bb 2> :
  _1 = (int) Instance_28(D);
  UartState_30 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance_28(D);
  Base_31 = Lpuart_Uart_Ip_apBases[_2];
  StatusIndex_32 = 0;
  Mask_33 = 0;
  Lpuart_Uart_Ip_StatusFlagTypeArray = *.LC0;
  Lpuart_Uart_Ip_ReceiveStatusArray = *.LC1;
  Lpuart_Uart_Ip_StatusRegMask = *.LC2;
  goto <bb 14>; [INV]

  <bb 3> :

  <bb 4> :
  _3 = Lpuart_Uart_Ip_GetStatusFlag (Base_31, 21);
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = Lpuart_Uart_Ip_CheckTimeout (StartTime_37(D), ElapsedTicks_38(D), TimeoutTicks_39(D), 0);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  StatusIndex_43 = 0;
  goto <bb 10>; [INV]

  <bb 7> :
  _7 = (int) StatusIndex_18;
  _8 = Lpuart_Uart_Ip_StatusFlagTypeArray[_7];
  _9 = Lpuart_Uart_Ip_GetStatusFlag (Base_31, _8);
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = (int) StatusIndex_18;
  _11 = Lpuart_Uart_Ip_ReceiveStatusArray[_10];
  UartState_30->ReceiveStatus ={v} _11;
  _12 = (int) StatusIndex_18;
  _13 = Lpuart_Uart_Ip_StatusRegMask[_12];
  Mask_49 = Mask_20 | _13;

  <bb 9> :
  # Mask_19 = PHI <Mask_20(7), Mask_49(8)>
  StatusIndex.12_14 = StatusIndex_18;
  StatusIndex_50 = StatusIndex.12_14 + 1;

  <bb 10> :
  # StatusIndex_18 = PHI <StatusIndex_43(6), StatusIndex_50(9)>
  # Mask_20 = PHI <Mask_21(6), Mask_19(9)>
  if (StatusIndex_18 <= 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (Mask_20 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base_31, 0);
  Lpuart_Uart_Ip_ClearStatusFlagWithMask (Base_31, Mask_20);
  goto <bb 16>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_GetData (Instance_28(D));

  <bb 14> :
  # Mask_21 = PHI <Mask_33(2), Mask_20(13)>
  _15 ={v} UartState_30->RxSize;
  if (_15 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = Lpuart_Uart_Ip_CheckTimeout (StartTime_37(D), ElapsedTicks_38(D), TimeoutTicks_39(D), 0);
  _17 = ~_16;
  if (_17 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  Lpuart_Uart_Ip_StatusFlagTypeArray ={v} {CLOBBER};
  Lpuart_Uart_Ip_ReceiveStatusArray ={v} {CLOBBER};
  Lpuart_Uart_Ip_StatusRegMask ={v} {CLOBBER};
  return;

}


Lpuart_Uart_Ip_SyncReceive (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize, const uint32 Timeout)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6232;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  long unsigned int TimeoutTicks.9_5;
  long unsigned int TimeoutTicks.10_6;
  _Bool _7;
  <unnamed type> _8;
  long unsigned int _9;
  <unnamed type> _10;
  Lpuart_Uart_Ip_StatusType _50;

  <bb 2> :
  _1 = (int) Instance_19(D);
  Base_21 = Lpuart_Uart_Ip_apBases[_1];
  ElapsedTicks = 0;
  IsReturn_23 = 0;
  RetVal_24 = 0;
  _2 = (int) Instance_19(D);
  UartState_25 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_02 ();
  _3 ={v} UartState_25->IsRxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_02 ();
  RetVal_28 = 2;
  IsReturn_29 = 1;

  <bb 4> :
  # IsReturn_11 = PHI <IsReturn_23(2), IsReturn_29(3)>
  # RetVal_12 = PHI <RetVal_24(2), RetVal_28(3)>
  _4 = ~IsReturn_11;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  UartState_25->IsRxBusy ={v} 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_02 ();
  UartState_25->RxBuff = RxBuff_32(D);
  UartState_25->RxSize ={v} RxSize_34(D);
  UartState_25->ReceiveStatus ={v} 2;
  Lpuart_Uart_Ip_SetIntMode (Base_21, 21, 0);
  Lpuart_Uart_Ip_SetReceiverCmd (Base_21, 1);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, Timeout_39(D), 0);
  TimeoutTicks.9_5 = TimeoutTicks;
  Lpuart_Uart_Ip_StartGetData (Instance_19(D), &StartTime, &ElapsedTicks, TimeoutTicks.9_5);
  TimeoutTicks.10_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.10_6, 0);
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  UartState_25->ReceiveStatus ={v} 3;

  <bb 7> :
  _8 ={v} UartState_25->ReceiveStatus;
  if (_8 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  UartState_25->ReceiveStatus ={v} 0;

  <bb 9> :
  _9 ={v} UartState_25->RxSize;
  if (_9 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _10 ={v} UartState_25->ReceiveStatus;
  if (_10 == 5)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  UartState_25->ReceiveStatus ={v} 0;

  <bb 12> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base_21, 0);
  UartState_25->IsRxBusy ={v} 0;
  Lpuart_Uart_Ip_Getchar (Base_21);
  RetVal_49 ={v} UartState_25->ReceiveStatus;

  <bb 13> :
  # RetVal_13 = PHI <RetVal_12(4), RetVal_49(12)>
  _50 = RetVal_13;
  StartTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  ElapsedTicks ={v} {CLOBBER};

  <bb 14> :
<L13>:
  return _50;

}


Lpuart_Uart_Ip_AbortSendingData (const uint8 Instance)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6218;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  <unnamed type> _7;
  Lpuart_Uart_Ip_StatusType _26;

  <bb 2> :
  _1 = (int) Instance_13(D);
  Base_15 = Lpuart_Uart_Ip_apBases[_1];
  IsReturn_16 = 0;
  RetVal_17 = 0;
  _2 = (int) Instance_13(D);
  UartState_18 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance_13(D);
  UartUserCfg_19 = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 ={v} UartState_18->IsTxBusy;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_20 = 0;
  IsReturn_21 = 1;

  <bb 4> :
  # IsReturn_8 = PHI <IsReturn_16(2), IsReturn_21(3)>
  # RetVal_9 = PHI <RetVal_17(2), RetVal_20(3)>
  _6 = ~IsReturn_8;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  UartState_18->TransmitStatus ={v} 6;
  _7 = UartUserCfg_19->TransferType;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteSendDataUsingInt (Instance_13(D));

  <bb 7> :
  Lpuart_Uart_Ip_FlushTxBuffer (Base_15);
  RetVal_25 = 0;

  <bb 8> :
  # RetVal_10 = PHI <RetVal_9(4), RetVal_25(7)>
  _26 = RetVal_10;

  <bb 9> :
<L6>:
  return _26;

}


Lpuart_Uart_Ip_GetTransmitStatus (const uint8 Instance, uint32 * BytesRemaining)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6210;
  int _1;
  int _2;
  _Bool _3;
  <unnamed type> _4;
  long unsigned int _5;
  Lpuart_Uart_Ip_StatusType _14;

  <bb 2> :
  _1 = (int) Instance_7(D);
  UartState_9 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance_7(D);
  UartUserCfg_10 = Lpuart_Uart_Ip_apUserConfig[_2];
  if (BytesRemaining_11(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 ={v} UartState_9->IsTxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = UartUserCfg_10->TransferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 ={v} UartState_9->TxSize;
  *BytesRemaining_11(D) = _5;
  goto <bb 7>; [INV]

  <bb 6> :
  *BytesRemaining_11(D) = 0;

  <bb 7> :
  _14 ={v} UartState_9->TransmitStatus;

  <bb 8> :
<L7>:
  return _14;

}


Lpuart_Uart_Ip_AsyncSend (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  boolean IsReturn;
  Lpuart_Uart_Ip_StatusType RetVal;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  Lpuart_Uart_Ip_StatusType D.6201;
  int iftmp.8;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  <unnamed type> _5;
  <unnamed type> _6;
  <unnamed type> _7;
  int iftmp.8_25;
  int iftmp.8_26;
  Lpuart_Uart_Ip_StatusType _31;

  <bb 2> :
  RetVal_13 = 0;
  _1 = (int) Instance_14(D);
  UartUserCfg_16 = Lpuart_Uart_Ip_apUserConfig[_1];
  _2 = (int) Instance_14(D);
  UartState_17 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn_18 = 0;
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_01 ();
  _3 ={v} UartState_17->IsTxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_01 ();
  RetVal_21 = 2;
  IsReturn_22 = 1;

  <bb 4> :
  # RetVal_8 = PHI <RetVal_13(2), RetVal_21(3)>
  # IsReturn_10 = PHI <IsReturn_18(2), IsReturn_22(3)>
  _4 = ~IsReturn_10;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  UartState_17->IsTxBusy ={v} 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_01 ();
  _5 = UartUserCfg_16->TransferType;
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _6 = UartUserCfg_16->TransferType;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.8_26 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.8_25 = 0;

  <bb 9> :
  _7 = UartUserCfg_16->TransferType;
  if (_7 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  RetVal_30 = Lpuart_Uart_Ip_StartSendDataUsingInt (Instance_14(D), TxBuff_27(D), TxSize_28(D));

  <bb 11> :
  # RetVal_9 = PHI <RetVal_8(4), RetVal_8(9), RetVal_30(10)>
  _31 = RetVal_9;

  <bb 12> :
<L10>:
  return _31;

}


Lpuart_Uart_Ip_SyncSend (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize, const uint32 Timeout)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6183;
  int _1;
  int _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  long unsigned int TimeoutTicks.4_7;
  _Bool _8;
  _Bool _9;
  long unsigned int _10;
  long unsigned int TimeoutTicks.5_11;
  _Bool _12;
  _Bool _13;
  long unsigned int TimeoutTicks.6_14;
  _Bool _15;
  Lpuart_Uart_Ip_StatusType _58;

  <bb 2> :
  ElapsedTicks = 0;
  IsReturn_27 = 0;
  RetVal_28 = 0;
  _1 = (int) Instance_29(D);
  Base_30 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_29(D);
  UartState_31 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_00 ();
  _3 ={v} UartState_31->IsTxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_00 ();
  RetVal_34 = 2;
  IsReturn_35 = 1;

  <bb 4> :
  # IsReturn_16 = PHI <IsReturn_27(2), IsReturn_35(3)>
  # RetVal_17 = PHI <RetVal_28(2), RetVal_34(3)>
  _4 = ~IsReturn_16;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  UartState_31->IsTxBusy ={v} 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_00 ();
  UartState_31->TxBuff = TxBuff_38(D);
  UartState_31->TxSize ={v} TxSize_40(D);
  UartState_31->TransmitStatus ={v} 2;
  Lpuart_Uart_Ip_SetIntMode (Base_30, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_30, 22, 0);
  Lpuart_Uart_Ip_SetTransmitterCmd (Base_30, 1);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, Timeout_46(D), 0);
  goto <bb 9>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_PutData (Instance_29(D));

  <bb 7> :
  _5 = Lpuart_Uart_Ip_GetStatusFlag (Base_30, 23);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  TimeoutTicks.4_7 = TimeoutTicks;
  _8 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.4_7, 0);
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _10 ={v} UartState_31->TxSize;
  if (_10 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  TimeoutTicks.5_11 = TimeoutTicks;
  _12 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.5_11, 0);
  _13 = ~_12;
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  Lpuart_Uart_Ip_SetTransmitterCmd (Base_30, 0);
  TimeoutTicks.6_14 = TimeoutTicks;
  _15 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.6_14, 0);
  if (_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  UartState_31->TransmitStatus ={v} 3;
  goto <bb 14>; [INV]

  <bb 13> :
  UartState_31->TransmitStatus ={v} 0;

  <bb 14> :
  UartState_31->IsTxBusy ={v} 0;
  RetVal_57 ={v} UartState_31->TransmitStatus;

  <bb 15> :
  # RetVal_18 = PHI <RetVal_17(4), RetVal_57(14)>
  _58 = RetVal_18;
  StartTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  ElapsedTicks ={v} {CLOBBER};

  <bb 16> :
<L16>:
  return _58;

}


Lpuart_Uart_Ip_Deinit (const uint8 Instance)
{
  struct LPUART_Type * Base;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  int _1;
  int _2;
  struct Lpuart_Uart_Ip_StateStructureType * _3;
  _Bool _4;
  _Bool _5;
  long unsigned int TimeoutTicks.2_6;
  _Bool _7;
  _Bool _8;
  int _9;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance_14(D);
  Base_15 = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance_14(D);
  _3 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 3> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base_15, 22);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  TimeoutTicks.2_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.2_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Lpuart_Uart_Ip_SetIntMode (Base_15, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 22, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 21, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 27, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 24, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 26, 0);
  Lpuart_Uart_Ip_SetIntMode (Base_15, 25, 0);
  _9 = (int) Instance_14(D);
  Lpuart_Uart_Ip_apStateStructuresArray[_9] = 0B;
  StartTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  ElapsedTicks ={v} {CLOBBER};
  return;

}


Lpuart_Uart_Ip_Init (const uint8 Instance, const struct Lpuart_Uart_Ip_UserConfigType * UserConfig)
{
  uint8 * ClearStructPtr;
  uint32 Index;
  struct Lpuart_Uart_Ip_StateStructureType * UartStatePtr;
  struct LPUART_Type * Base;
  int iftmp.1;
  int iftmp.0;
  int _1;
  struct Lpuart_Uart_Ip_StateStructureType * _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  int _7;
  struct Lpuart_Uart_Ip_StateStructureType * _8;
  int _9;
  int _10;
  <unnamed type> _11;
  <unnamed type> _12;
  uint8 * _13;
  unsigned char _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  <unnamed type> _19;
  <unnamed type> _20;
  <unnamed type> _21;
  <unnamed type> _22;
  <unnamed type> _23;
  long unsigned int _24;
  int iftmp.0_32;
  int iftmp.0_33;
  int iftmp.1_39;
  int iftmp.1_40;

  <bb 2> :
  _1 = (int) Instance_29(D);
  _2 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _3 = UserConfig_31(D)->BaudOverSamplingRatio;
  _4 = UserConfig_31(D)->BaudRateDivisor;
  if (_4 <= 8191)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _5 = UserConfig_31(D)->BaudRateDivisor;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_32 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0_33 = 0;

  <bb 6> :
  _6 = (int) Instance_29(D);
  Base_34 = Lpuart_Uart_Ip_apBases[_6];
  _7 = (int) Instance_29(D);
  _8 = UserConfig_31(D)->StateStruct;
  Lpuart_Uart_Ip_apStateStructuresArray[_7] = _8;
  _9 = (int) Instance_29(D);
  UartStatePtr_36 = Lpuart_Uart_Ip_apStateStructuresArray[_9];
  _10 = (int) Instance_29(D);
  Lpuart_Uart_Ip_apUserConfig[_10] = UserConfig_31(D);
  ClearStructPtr_38 = UartStatePtr_36;
  _11 = UserConfig_31(D)->BitCountPerChar;
  if (_11 != 3)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _12 = UserConfig_31(D)->ParityMode;
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1_40 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1_39 = 0;

  <bb 10> :
  Index_41 = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _13 = ClearStructPtr_38 + Index_25;
  *_13 = 0;
  Index_54 = Index_25 + 1;

  <bb 12> :
  # Index_25 = PHI <Index_41(10), Index_54(11)>
  if (Index_25 <= 31)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_Hw_Init (Base_34);
  _14 = UserConfig_31(D)->BaudOverSamplingRatio;
  if (_14 <= 7)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (Base_34);

  <bb 15> :
  _15 = UserConfig_31(D)->BaudOverSamplingRatio;
  _16 = (long unsigned int) _15;
  _17 = _16 + 4294967295;
  Lpuart_Uart_Ip_SetOversamplingRatio (Base_34, _17);
  _18 = UserConfig_31(D)->BaudRateDivisor;
  Lpuart_Uart_Ip_SetBaudRateDivisor (Base_34, _18);
  _19 = UserConfig_31(D)->ParityMode;
  if (_19 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _20 = UserConfig_31(D)->BitCountPerChar;
  Lpuart_Uart_Ip_SetBitCountPerChar (Base_34, _20, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  _21 = UserConfig_31(D)->BitCountPerChar;
  Lpuart_Uart_Ip_SetBitCountPerChar (Base_34, _21, 0);

  <bb 18> :
  _22 = UserConfig_31(D)->ParityMode;
  Lpuart_Uart_Ip_SetParityMode (Base_34, _22);
  _23 = UserConfig_31(D)->StopBitsCount;
  Lpuart_Uart_Ip_SetStopBitCount (Base_34, _23);
  UartStatePtr_36->TransmitStatus ={v} 0;
  UartStatePtr_36->ReceiveStatus ={v} 0;
  _24 = UserConfig_31(D)->BaudRate;
  UartStatePtr_36->BaudRate = _24;
  return;

}


Lpuart_Uart_Ip_FlushRxBuffer (struct LPUART_Type * Base)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} Base_4(D)->FIFO;
  _2 = _1 | 16384;
  Base_4(D)->FIFO ={v} _2;
  return;

}


Lpuart_Uart_Ip_FlushTxBuffer (struct LPUART_Type * Base)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} Base_4(D)->FIFO;
  _2 = _1 | 32768;
  Base_4(D)->FIFO ={v} _2;
  return;

}


Lpuart_Uart_Ip_CheckTimeout (uint32 * StartTime, uint32 * ElapsedTicks, uint32 TimeoutTicks, OsIf_CounterType OsifCounter)
{
  uint32 CurrentElapsedTicks;
  boolean D.6168;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _12;

  <bb 2> :
  CurrentElapsedTicks_8 = OsIf_GetElapsed (StartTime_5(D), OsifCounter_6(D));
  _1 = *ElapsedTicks_9(D);
  _2 = CurrentElapsedTicks_8 + _1;
  *ElapsedTicks_9(D) = _2;
  _3 = *ElapsedTicks_9(D);
  _12 = TimeoutTicks_11(D) <= _3;

  <bb 3> :
<L0>:
  return _12;

}


Lpuart_Uart_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs, OsIf_CounterType OsifCounter)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = OsIf_GetCounter (OsifCounter_4(D));
  *StartTimeOut_6(D) = _1;
  _2 = OsIf_MicrosToTicks (TimeoutUs_8(D), OsifCounter_4(D));
  *TimeoutTicksOut_10(D) = _2;
  return;

}


Lpuart_Uart_Ip_ClearErrorFlags (struct LPUART_Type * Base)
{
  uint32 Mask;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  Mask_4 = 983040;
  _1 ={v} Base_6(D)->STAT;
  _2 = _1 & 1071661055;
  _3 = Mask_4 | _2;
  Base_6(D)->STAT ={v} _3;
  return;

}


Lpuart_Uart_Ip_ClearStatusFlagWithMask (struct LPUART_Type * Base, uint32 Mask)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 ={v} Base_5(D)->STAT;
  _2 = _1 & 1071661055;
  _3 = Mask_6(D) | _2;
  Base_5(D)->STAT ={v} _3;
  return;

}


Lpuart_Uart_Ip_ClearStatusFlag (struct LPUART_Type * Base, Lpuart_Uart_Ip_StatusFlagType StatusFlag)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  switch (StatusFlag_14(D)) <default: <L4> [INV], case 16: <L3> [INV], case 17: <L2> [INV], case 18: <L1> [INV], case 19: <L0> [INV]>

  <bb 3> :
<L0>:
  _1 ={v} Base_16(D)->STAT;
  _2 = _1 & 1071661055;
  _3 = _2 | 524288;
  Base_16(D)->STAT ={v} _3;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  _4 ={v} Base_16(D)->STAT;
  _5 = _4 & 1071661055;
  _6 = _5 | 262144;
  Base_16(D)->STAT ={v} _6;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  _7 ={v} Base_16(D)->STAT;
  _8 = _7 & 1071661055;
  _9 = _8 | 131072;
  Base_16(D)->STAT ={v} _9;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  _10 ={v} Base_16(D)->STAT;
  _11 = _10 & 1071661055;
  _12 = _11 | 65536;
  Base_16(D)->STAT ={v} _12;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_GetStatusFlag (const struct LPUART_Type * Base, Lpuart_Uart_Ip_StatusFlagType StatusFlag)
{
  boolean RetVal;
  boolean D.6166;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _9;

  <bb 2> :
  RetVal_4 = 0;
  _1 ={v} Base_6(D)->STAT;
  _2 = _1 >> StatusFlag_7(D);
  _3 = _2 & 1;
  RetVal_8 = _3 != 0;
  _9 = RetVal_8;

  <bb 3> :
<L0>:
  return _9;

}


Lpuart_Uart_Ip_Getchar10 (const struct LPUART_Type * Base)
{
  uint16 ReadData;
  uint16 D.6429;
  unsigned char D.6428;
  short unsigned int D.6427;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  long unsigned int _9;
  short unsigned int _10;
  short unsigned int _14;
  unsigned char _16;
  uint16 _18;

  <bb 2> :
  _1 ={v} Base_12(D)->CTRL;
  _2 = _1 >> 30;
  _3 = (short unsigned int) _2;
  _4 = _3 << 9;
  ReadData_13 = _4 & 512;
  _5 ={v} Base_12(D)->CTRL;
  _6 = _5 >> 31;
  _7 = (short unsigned int) _6;
  _8 = _7 << 8;
  _14 = _8 & 256;
  ReadData_15 = _14 | ReadData_13;
  _9 ={v} Base_12(D)->DATA;
  _16 = (unsigned char) _9;
  _10 = (short unsigned int) _16;
  ReadData_17 = ReadData_15 | _10;
  _18 = ReadData_17;

  <bb 3> :
<L0>:
  return _18;

}


Lpuart_Uart_Ip_Getchar9 (const struct LPUART_Type * Base)
{
  uint16 ReadData;
  uint16 D.6425;
  unsigned char D.6424;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  long unsigned int _5;
  short unsigned int _6;
  unsigned char _10;
  uint16 _12;

  <bb 2> :
  _1 ={v} Base_8(D)->CTRL;
  _2 = _1 >> 31;
  _3 = (short unsigned int) _2;
  _4 = _3 << 8;
  ReadData_9 = _4 & 256;
  _5 ={v} Base_8(D)->DATA;
  _10 = (unsigned char) _5;
  _6 = (short unsigned int) _10;
  ReadData_11 = ReadData_9 | _6;
  _12 = ReadData_11;

  <bb 3> :
<L0>:
  return _12;

}


Lpuart_Uart_Ip_Getchar (const struct LPUART_Type * Base)
{
  uint8 D.6239;
  long unsigned int _1;
  uint8 _4;

  <bb 2> :
  _1 ={v} Base_3(D)->DATA;
  _4 = (uint8) _1;

  <bb 3> :
<L0>:
  return _4;

}


Lpuart_Uart_Ip_Putchar10 (struct LPUART_Type * Base, uint16 Data)
{
  volatile uint8 * DataRegBytes;
  uint32 CtrlRegVal;
  uint8 TenthDataBit;
  uint8 NinthDataBit;
  short unsigned int _1;
  unsigned char _2;
  short unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned char _11;

  <bb 2> :
  DataRegBytes_13 = &Base_12(D)->DATA;
  _1 = Data_14(D) >> 8;
  _2 = (unsigned char) _1;
  NinthDataBit_15 = _2 & 1;
  _3 = Data_14(D) >> 9;
  _4 = (unsigned char) _3;
  TenthDataBit_16 = _4 & 1;
  CtrlRegVal_18 ={v} Base_12(D)->CTRL;
  _5 = CtrlRegVal_18 & 3221225471;
  _6 = (long unsigned int) NinthDataBit_15;
  _7 = _6 << 30;
  CtrlRegVal_19 = _5 | _7;
  _8 = CtrlRegVal_19 & 2147483647;
  _9 = (long unsigned int) TenthDataBit_16;
  _10 = _9 << 31;
  CtrlRegVal_20 = _8 | _10;
  Base_12(D)->CTRL ={v} CtrlRegVal_20;
  _11 = (unsigned char) Data_14(D);
  *DataRegBytes_13 ={v} _11;
  return;

}


Lpuart_Uart_Ip_Putchar9 (struct LPUART_Type * Base, uint16 Data)
{
  volatile uint8 * DataRegBytes;
  uint8 NinthDataBit;
  short unsigned int _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;

  <bb 2> :
  DataRegBytes_10 = &Base_9(D)->DATA;
  _1 = Data_11(D) >> 8;
  _2 = (unsigned char) _1;
  NinthDataBit_12 = _2 & 1;
  _3 ={v} Base_9(D)->CTRL;
  _4 = _3 & 3221225471;
  _5 = (long unsigned int) NinthDataBit_12;
  _6 = _5 << 30;
  _7 = _4 | _6;
  Base_9(D)->CTRL ={v} _7;
  _8 = (unsigned char) Data_11(D);
  *DataRegBytes_10 ={v} _8;
  return;

}


Lpuart_Uart_Ip_Putchar (struct LPUART_Type * Base, uint8 Data)
{
  volatile uint8 * DataRegBytes;

  <bb 2> :
  DataRegBytes_2 = &Base_1(D)->DATA;
  *DataRegBytes_2 ={v} Data_4(D);
  return;

}


Lpuart_Uart_Ip_GetIntMode (const struct LPUART_Type * Base, Lpuart_Uart_Ip_InterruptType IntSrc)
{
  boolean RetVal;
  boolean D.6326;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _9;

  <bb 2> :
  RetVal_4 = 0;
  _1 ={v} Base_6(D)->CTRL;
  _2 = _1 >> IntSrc_7(D);
  _3 = _2 & 1;
  RetVal_8 = _3 != 0;
  _9 = RetVal_8;

  <bb 3> :
<L0>:
  return _9;

}


Lpuart_Uart_Ip_SetIntMode (struct LPUART_Type * Base, Lpuart_Uart_Ip_InterruptType IntSrc, boolean Enable)
{
  unsigned int iftmp.3;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned int _5;
  long unsigned int _6;
  unsigned int iftmp.3_7;
  unsigned int iftmp.3_12;
  unsigned int iftmp.3_13;

  <bb 2> :
  _1 ={v} Base_9(D)->CTRL;
  _2 = 1 << IntSrc_10(D);
  _3 = ~_2;
  _4 = _1 & _3;
  if (Enable_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3_13 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_12 = 0;

  <bb 5> :
  # iftmp.3_7 = PHI <iftmp.3_13(3), iftmp.3_12(4)>
  _5 = iftmp.3_7 << IntSrc_10(D);
  _6 = _4 | _5;
  Base_9(D)->CTRL ={v} _6;
  return;

}


Lpuart_Uart_Ip_SetStopBitCount (struct LPUART_Type * Base, Lpuart_Uart_Ip_StopBitCountType StopBitCount)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} Base_6(D)->BAUD;
  _2 = _1 & 4294959103;
  _3 = StopBitCount_7(D) << 13;
  _4 = _2 | _3;
  Base_6(D)->BAUD ={v} _4;
  return;

}


Lpuart_Uart_Ip_SetParityMode (struct LPUART_Type * Base, Lpuart_Uart_Ip_ParityModeType ParityModeType)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  _1 ={v} Base_10(D)->CTRL;
  _2 = _1 & 4294967293;
  _3 = ParityModeType_11(D) & 4294967294;
  _4 = _2 | _3;
  Base_10(D)->CTRL ={v} _4;
  _5 ={v} Base_10(D)->CTRL;
  _6 = _5 & 4294967294;
  _7 = ParityModeType_11(D) & 1;
  _8 = _6 | _7;
  Base_10(D)->CTRL ={v} _8;
  return;

}


Lpuart_Uart_Ip_SetBitCountPerChar (struct LPUART_Type * Base, Lpuart_Uart_Ip_BitCountPerCharType BitCountPerChar, boolean Parity)
{
  uint32 TmpBitCountPerChar;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  TmpBitCountPerChar_17 = BitCountPerChar_16(D);
  if (Parity_18(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  TmpBitCountPerChar_19 = TmpBitCountPerChar_17 + 1;

  <bb 4> :
  # TmpBitCountPerChar_13 = PHI <TmpBitCountPerChar_17(2), TmpBitCountPerChar_19(3)>
  if (TmpBitCountPerChar_13 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _1 ={v} Base_22(D)->BAUD;
  _2 = _1 | 536870912;
  Base_22(D)->BAUD ={v} _2;
  goto <bb 12>; [INV]

  <bb 6> :
  if (BitCountPerChar_16(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  if (Parity_18(D) != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _3 ={v} Base_22(D)->CTRL;
  _4 = _3 & 4294965231;
  Base_22(D)->CTRL ={v} _4;
  goto <bb 11>; [INV]

  <bb 9> :
  _5 ={v} Base_22(D)->CTRL;
  _6 = _5 | 2048;
  Base_22(D)->CTRL ={v} _6;
  goto <bb 11>; [INV]

  <bb 10> :
  TmpBitCountPerChar_20 = TmpBitCountPerChar_13 + 4294967295;
  _7 ={v} Base_22(D)->CTRL;
  _8 = _7 & 4294967279;
  _9 = TmpBitCountPerChar_20 << 4;
  _10 = _8 | _9;
  Base_22(D)->CTRL ={v} _10;

  <bb 11> :
  _11 ={v} Base_22(D)->BAUD;
  _12 = _11 & 3758096383;
  Base_22(D)->BAUD ={v} _12;

  <bb 12> :
  return;

}


Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (struct LPUART_Type * Base)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} Base_4(D)->BAUD;
  _2 = _1 | 131072;
  Base_4(D)->BAUD ={v} _2;
  return;

}


Lpuart_Uart_Ip_SetOversamplingRatio (struct LPUART_Type * Base, uint32 OverSamplingRatio)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} Base_7(D)->BAUD;
  _2 = _1 & 3774873599;
  _3 = OverSamplingRatio_8(D) << 24;
  _4 = _3 & 520093696;
  _5 = _2 | _4;
  Base_7(D)->BAUD ={v} _5;
  return;

}


Lpuart_Uart_Ip_SetBaudRateDivisor (struct LPUART_Type * Base, uint32 baudRateDivisor)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} Base_6(D)->BAUD;
  _2 = _1 & 4294959104;
  _3 = baudRateDivisor_7(D) & 8191;
  _4 = _2 | _3;
  Base_6(D)->BAUD ={v} _4;
  return;

}


Lpuart_Uart_Ip_SetReceiverCmd (struct LPUART_Type * Base, boolean Enable)
{
  long unsigned int iftmp.11;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.11_4;
  long unsigned int iftmp.11_8;
  long unsigned int iftmp.11_9;

  <bb 2> :
  _1 ={v} Base_6(D)->CTRL;
  _2 = _1 & 4294705151;
  if (Enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11_9 = 262144;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_8 = 0;

  <bb 5> :
  # iftmp.11_4 = PHI <iftmp.11_9(3), iftmp.11_8(4)>
  _3 = iftmp.11_4 | _2;
  Base_6(D)->CTRL ={v} _3;
  return;

}


Lpuart_Uart_Ip_SetTransmitterCmd (struct LPUART_Type * Base, boolean Enable)
{
  long unsigned int iftmp.7;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.7_4;
  long unsigned int iftmp.7_8;
  long unsigned int iftmp.7_9;

  <bb 2> :
  _1 ={v} Base_6(D)->CTRL;
  _2 = _1 & 4294443007;
  if (Enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_9 = 524288;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_8 = 0;

  <bb 5> :
  # iftmp.7_4 = PHI <iftmp.7_9(3), iftmp.7_8(4)>
  _3 = iftmp.7_4 | _2;
  Base_6(D)->CTRL ={v} _3;
  return;

}


Lpuart_Uart_Ip_Hw_Init (struct LPUART_Type * Base)
{
  <bb 2> :
  Base_2(D)->BAUD ={v} 251658244;
  Base_2(D)->STAT ={v} 3223306240;
  Base_2(D)->CTRL ={v} 0;
  return;

}


