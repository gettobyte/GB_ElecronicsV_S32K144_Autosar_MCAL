Lpuart_Uart_Ip_GetData (const uint8 Instance)
{
  uint16 Data16b;
  const struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartUserCfg->BitCountPerChar;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = UartUserCfg->BitCountPerChar;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _6 = UartState->RxBuff;
  _7 = Lpuart_Uart_Ip_Getchar (Base);
  *_6 = _7;
  _8 = UartUserCfg->BitCountPerChar;
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = UartState->RxBuff;
  _10 = *_9;
  _11 = UartState->RxBuff;
  _12 = _10 & 127;
  *_11 = _12;

  <bb 6> :
  _13 = UartState->RxBuff;
  _14 = _13 + 1;
  UartState->RxBuff = _14;
  _15 = UartState->RxSize;
  _16 = _15 + 4294967295;
  UartState->RxSize = _16;
  goto <bb 13>; [INV]

  <bb 7> :
  _17 = UartUserCfg->BitCountPerChar;
  if (_17 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Data16b = Lpuart_Uart_Ip_Getchar9 (Base);
  goto <bb 10>; [INV]

  <bb 9> :
  Data16b = Lpuart_Uart_Ip_Getchar10 (Base);

  <bb 10> :
  _18 = UartState->RxSize;
  if (_18 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _19 = UartState->RxBuff;
  _20 = (unsigned char) Data16b;
  *_19 = _20;
  _21 = UartState->RxBuff;
  _22 = _21 + 1;
  UartState->RxBuff = _22;
  _23 = UartState->RxSize;
  _24 = _23 + 4294967295;
  UartState->RxSize = _24;
  goto <bb 13>; [INV]

  <bb 12> :
  _25 = UartState->RxBuff;
  _26 = (unsigned char) Data16b;
  *_25 = _26;
  _27 = UartState->RxBuff;
  _28 = _27 + 1;
  UartState->RxBuff = _28;
  _29 = Data16b >> 8;
  _30 = UartState->RxBuff;
  _31 = (unsigned char) _29;
  *_30 = _31;
  _32 = UartState->RxBuff;
  _33 = _32 + 1;
  UartState->RxBuff = _33;
  _34 = UartState->RxSize;
  _35 = _34 + 4294967294;
  UartState->RxSize = _35;

  <bb 13> :
  return;

}


Lpuart_Uart_Ip_PutData (const uint8 Instance)
{
  uint8 Data8b;
  uint16 Data16b;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartUserCfg->BitCountPerChar;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = UartUserCfg->BitCountPerChar;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = UartState->TxBuff;
  Data8b = *_6;
  _7 = UartState->TxBuff;
  _8 = _7 + 1;
  UartState->TxBuff = _8;
  _9 = UartState->TxSize;
  _10 = _9 + 4294967295;
  UartState->TxSize = _10;
  Lpuart_Uart_Ip_Putchar (Base, Data8b);
  goto <bb 11>; [INV]

  <bb 5> :
  _11 = UartState->TxBuff;
  _12 = *_11;
  Data16b = (uint16) _12;
  _13 = UartState->TxSize;
  if (_13 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = UartState->TxBuff;
  _15 = _14 + 1;
  UartState->TxBuff = _15;
  _16 = UartState->TxSize;
  _17 = _16 + 4294967295;
  UartState->TxSize = _17;
  goto <bb 8>; [INV]

  <bb 7> :
  _18 = UartState->TxBuff;
  _19 = _18 + 1;
  UartState->TxBuff = _19;
  _20 = UartState->TxBuff;
  _21 = *_20;
  _22 = (short unsigned int) _21;
  _23 = _22 << 8;
  Data16b = Data16b | _23;
  _24 = UartState->TxBuff;
  _25 = _24 + 1;
  UartState->TxBuff = _25;
  _26 = UartState->TxSize;
  _27 = _26 + 4294967294;
  UartState->TxSize = _27;

  <bb 8> :
  _28 = UartUserCfg->BitCountPerChar;
  if (_28 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Lpuart_Uart_Ip_Putchar9 (Base, Data16b);
  goto <bb 11>; [INV]

  <bb 10> :
  Lpuart_Uart_Ip_Putchar10 (Base, Data16b);

  <bb 11> :
  return;

}


Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (const uint8 Instance)
{
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Lpuart_Uart_Ip_SetIntMode (Base, 27, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 24, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 26, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 25, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 21, 0);
  _3 = UartState->ReceiveStatus;
  if (_3 == 6)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 4> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base, 21);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.17_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.17_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  TimeoutTicks.18_9 = TimeoutTicks;
  _10 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.18_9, 0);
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  UartState->ReceiveStatus = 1;

  <bb 8> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base, 0);
  Lpuart_Uart_Ip_Getchar (Base);
  UartState->IsRxBusy = 0;
  _11 = UartState->ReceiveStatus;
  if (_11 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  UartState->ReceiveStatus = 0;

  <bb 10> :
  StartTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  ElapsedTicks = {CLOBBER};
  return;

}


Lpuart_Uart_Ip_StartReceiveDataUsingInt (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6393;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  UartState->IsRxBusy = 1;
  UartState->RxBuff = RxBuff;
  UartState->RxSize = RxSize;
  UartState->ReceiveStatus = 2;
  Lpuart_Uart_Ip_ClearErrorFlags (Base);
  Lpuart_Uart_Ip_FlushRxBuffer (Base);
  Lpuart_Uart_Ip_SetReceiverCmd (Base, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 27, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 24, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 26, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 25, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 21, 1);
  D.6393 = 0;

  <bb 3> :
<L0>:
  return D.6393;

}


Lpuart_Uart_Ip_CompleteSendDataUsingInt (const uint8 Instance)
{
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct LPUART_Type * Base;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = UartState->TransmitStatus;
  if (_3 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_SetIntMode (Base, 23, 0);

  <bb 4> :
  Lpuart_Uart_Ip_SetIntMode (Base, 22, 0);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 5> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base, 22);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  TimeoutTicks.15_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.15_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  TimeoutTicks.16_9 = TimeoutTicks;
  _10 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.16_9, 0);
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  UartState->TransmitStatus = 1;

  <bb 9> :
  Lpuart_Uart_Ip_SetTransmitterCmd (Base, 0);
  _11 = UartState->TransmitStatus;
  if (_11 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  UartState->TransmitStatus = 0;

  <bb 11> :
  UartState->IsTxBusy = 0;
  StartTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  ElapsedTicks = {CLOBBER};
  return;

}


Lpuart_Uart_Ip_StartSendDataUsingInt (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6384;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  UartState->TxBuff = TxBuff;
  UartState->TxSize = TxSize;
  UartState->TransmitStatus = 2;
  Lpuart_Uart_Ip_SetTransmitterCmd (Base, 1);
  Lpuart_Uart_Ip_SetIntMode (Base, 23, 1);
  D.6384 = 0;

  <bb 3> :
<L0>:
  return D.6384;

}


Lpuart_Uart_Ip_ErrIrqHandler (const uint8 Instance)
{
  boolean IsReturn;
  boolean IsError;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  IsError = 0;
  IsReturn = 0;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base, 19);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base, 19);
  _5 = Lpuart_Uart_Ip_GetIntMode (Base, 27);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  IsReturn = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  IsError = 1;
  UartState->ReceiveStatus = 5;

  <bb 6> :
  _7 = Lpuart_Uart_Ip_GetStatusFlag (Base, 17);
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  _8 = ~IsReturn;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base, 17);
  _9 = Lpuart_Uart_Ip_GetIntMode (Base, 25);
  _10 = ~_9;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  IsReturn = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  IsError = 1;
  UartState->ReceiveStatus = 7;

  <bb 11> :
  _11 = Lpuart_Uart_Ip_GetStatusFlag (Base, 16);
  if (_11 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  _12 = ~IsReturn;
  if (_12 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base, 16);
  _13 = Lpuart_Uart_Ip_GetIntMode (Base, 24);
  _14 = ~_13;
  if (_14 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  IsReturn = 1;
  goto <bb 16>; [INV]

  <bb 15> :
  IsError = 1;
  UartState->ReceiveStatus = 8;

  <bb 16> :
  _15 = Lpuart_Uart_Ip_GetStatusFlag (Base, 18);
  if (_15 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  _16 = ~IsReturn;
  if (_16 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  Lpuart_Uart_Ip_ClearStatusFlag (Base, 18);
  _17 = Lpuart_Uart_Ip_GetIntMode (Base, 26);
  _18 = ~_17;
  if (_18 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  IsReturn = 1;
  goto <bb 21>; [INV]

  <bb 20> :
  IsError = 1;
  UartState->ReceiveStatus = 9;

  <bb 21> :
  _19 = ~IsReturn;
  if (_19 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 22> :
  if (IsError != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 23> :
  _20 = UartUserCfg->TransferType;
  if (_20 == 1)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance);

  <bb 25> :
  _21 = UartUserCfg->Callback;
  if (_21 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _22 = UartUserCfg->Callback;
  _23 = UartUserCfg->CallbackParam;
  _22 (Instance, 3, _23);

  <bb 27> :
  return;

}


Lpuart_Uart_Ip_TxCompleteIrqHandler (const uint8 Instance)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_2];
  _3 = UartState->TxSize;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _4 = UartUserCfg->TransferType;
  if (_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Lpuart_Uart_Ip_CompleteSendDataUsingInt (Instance);

  <bb 5> :
  _5 = UartUserCfg->Callback;
  if (_5 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _6 = UartUserCfg->Callback;
  _7 = UartUserCfg->CallbackParam;
  _6 (Instance, 2, _7);

  <bb 7> :
  return;

}


Lpuart_Uart_Ip_TxEmptyIrqHandler (const uint8 Instance)
{
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartState->TxSize;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_PutData (Instance);
  _5 = UartState->TxSize;
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _6 = UartUserCfg->Callback;
  if (_6 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = UartUserCfg->Callback;
  _8 = UartUserCfg->CallbackParam;
  _7 (Instance, 1, _8);

  <bb 6> :
  _9 = UartState->TxSize;
  if (_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Lpuart_Uart_Ip_SetIntMode (Base, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 22, 1);

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_RxIrqHandler (const uint8 Instance)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_2];
  Lpuart_Uart_Ip_GetData (Instance);
  _3 = UartState->RxSize;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _4 = UartUserCfg->Callback;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = UartUserCfg->Callback;
  _6 = UartUserCfg->CallbackParam;
  _5 (Instance, 0, _6);

  <bb 5> :
  _7 = UartState->RxSize;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance);
  _8 = UartUserCfg->Callback;
  if (_8 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = UartUserCfg->Callback;
  _10 = UartUserCfg->CallbackParam;
  _9 (Instance, 2, _10);

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_IrqHandler (const uint8 Instance)
{
  boolean IsReturn;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn = 0;
  if (UartState == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Lpuart_Uart_Ip_Getchar (Base);
  Lpuart_Uart_Ip_ClearErrorFlags (Base);
  goto <bb 17>; [INV]

  <bb 4> :
  Lpuart_Uart_Ip_ErrIrqHandler (Instance);
  _3 = Lpuart_Uart_Ip_GetStatusFlag (Base, 21);
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _4 = Lpuart_Uart_Ip_GetIntMode (Base, 21);
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_RxIrqHandler (Instance);
  goto <bb 8>; [INV]

  <bb 7> :
  Lpuart_Uart_Ip_Getchar (Base);

  <bb 8> :
  IsReturn = 1;

  <bb 9> :
  _5 = Lpuart_Uart_Ip_GetStatusFlag (Base, 23);
  if (_5 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  _6 = ~IsReturn;
  if (_6 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = Lpuart_Uart_Ip_GetIntMode (Base, 23);
  if (_7 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Lpuart_Uart_Ip_TxEmptyIrqHandler (Instance);
  IsReturn = 1;

  <bb 13> :
  _8 = Lpuart_Uart_Ip_GetStatusFlag (Base, 22);
  if (_8 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  _9 = ~IsReturn;
  if (_9 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 15> :
  _10 = Lpuart_Uart_Ip_GetIntMode (Base, 22);
  if (_10 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  Lpuart_Uart_Ip_TxCompleteIrqHandler (Instance);

  <bb 17> :
  return;

}


Lpuart_Uart_Ip_SetRxBuffer (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6302;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  UartState->RxBuff = RxBuff;
  UartState->RxSize = RxSize;
  D.6302 = 0;

  <bb 3> :
<L0>:
  return D.6302;

}


Lpuart_Uart_Ip_SetTxBuffer (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6300;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  UartState->TxBuff = TxBuff;
  UartState->TxSize = TxSize;
  D.6300 = 0;

  <bb 3> :
<L0>:
  return D.6300;

}


Lpuart_Uart_Ip_GetBaudRate (const uint8 Instance, uint32 * ConfiguredBaudRate)
{
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = UartState->BaudRate;
  *ConfiguredBaudRate = _2;
  return;

}


Lpuart_Uart_Ip_SetBaudRate (const uint8 Instance, const Lpuart_Uart_Ip_BaudrateType DesiredBaudrate, const uint32 ClockFrequency)
{
  Lpuart_Uart_Ip_StatusType Status;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  uint32 ExpectedBaud;
  uint32 MaxOsr;
  uint32 BaudDiff;
  uint32 CalculatedBaud;
  uint32 TempDiff;
  uint32 Osr;
  uint16 SbrTemp;
  uint16 Idx;
  uint16 Sbr;
  Lpuart_Uart_Ip_StatusType D.6298;

  <bb 2> :
  ExpectedBaud = DesiredBaudrate;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Status = 1;
  _3 = UartState->IsTxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _4 = UartState->IsRxBusy;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 2;
  goto <bb 22>; [INV]

  <bb 5> :
  _5 = ExpectedBaud * 5;
  Osr = 4;
  _6 = ExpectedBaud * Osr;
  _7 = ClockFrequency / _6;
  Sbr = (uint16) _7;
  _8 = (long unsigned int) Sbr;
  _9 = Osr * _8;
  CalculatedBaud = ClockFrequency / _9;
  if (CalculatedBaud > ExpectedBaud)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  BaudDiff = CalculatedBaud - ExpectedBaud;
  goto <bb 8>; [INV]

  <bb 7> :
  BaudDiff = ExpectedBaud - CalculatedBaud;

  <bb 8> :
  MaxOsr = ClockFrequency / ExpectedBaud;
  if (MaxOsr > 32)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  MaxOsr = 32;

  <bb 10> :
  if (MaxOsr > 4)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 11> :
  Idx = 5;
  goto <bb 18>; [INV]

  <bb 12> :
  _10 = (long unsigned int) Idx;
  _11 = ExpectedBaud * _10;
  _12 = ClockFrequency / _11;
  SbrTemp = (uint16) _12;
  _13 = (long unsigned int) Idx;
  _14 = (long unsigned int) SbrTemp;
  _15 = _13 * _14;
  CalculatedBaud = ClockFrequency / _15;
  if (CalculatedBaud > ExpectedBaud)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  TempDiff = CalculatedBaud - ExpectedBaud;
  goto <bb 15>; [INV]

  <bb 14> :
  TempDiff = ExpectedBaud - CalculatedBaud;

  <bb 15> :
  if (TempDiff <= BaudDiff)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  BaudDiff = TempDiff;
  Osr = (uint32) Idx;
  Sbr = SbrTemp;

  <bb 17> :
  Idx.14_16 = Idx;
  Idx = Idx.14_16 + 1;

  <bb 18> :
  _17 = (long unsigned int) Idx;
  if (MaxOsr >= _17)
    goto <bb 12>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (Osr <= 7)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (Base);

  <bb 21> :
  _18 = Osr + 4294967295;
  Lpuart_Uart_Ip_SetOversamplingRatio (Base, _18);
  _19 = (long unsigned int) Sbr;
  Lpuart_Uart_Ip_SetBaudRateDivisor (Base, _19);
  UartState->BaudRate = CalculatedBaud;
  Status = 0;

  <bb 22> :
  D.6298 = Status;

  <bb 23> :
<L21>:
  return D.6298;

}


Lpuart_Uart_Ip_AbortReceivingData (const uint8 Instance)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6278;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  IsReturn = 0;
  RetVal = 1;
  _4 = UartState->IsRxBusy;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 0;
  IsReturn = 1;

  <bb 4> :
  _6 = ~IsReturn;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  UartState->ReceiveStatus = 6;
  _7 = UartUserCfg->TransferType;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteReceiveDataUsingInt (Instance);

  <bb 7> :
  Lpuart_Uart_Ip_ClearErrorFlags (Base);
  Lpuart_Uart_Ip_FlushRxBuffer (Base);
  RetVal = 0;

  <bb 8> :
  D.6278 = RetVal;

  <bb 9> :
<L6>:
  return D.6278;

}


Lpuart_Uart_Ip_GetReceiveStatus (const uint8 Instance, uint32 * BytesRemaining)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6270;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_2];
  if (BytesRemaining != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 = UartState->IsRxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = UartUserCfg->TransferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = UartState->RxSize;
  *BytesRemaining = _5;
  goto <bb 7>; [INV]

  <bb 6> :
  *BytesRemaining = 0;

  <bb 7> :
  D.6270 = UartState->ReceiveStatus;

  <bb 8> :
<L7>:
  return D.6270;

}


Lpuart_Uart_Ip_AsyncReceive (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize)
{
  boolean IsReturn;
  Lpuart_Uart_Ip_StatusType RetVal;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  Lpuart_Uart_Ip_StatusType D.6261;
  int iftmp.13;

  <bb 2> :
  RetVal = 0;
  _1 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn = 0;
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_03 ();
  _3 = UartState->IsRxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_03 ();
  RetVal = 2;
  IsReturn = 1;

  <bb 4> :
  _4 = ~IsReturn;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  UartState->IsRxBusy = 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_03 ();
  _5 = UartUserCfg->TransferType;
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _6 = UartUserCfg->TransferType;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.13 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.13 = 0;

  <bb 9> :
  _7 = UartUserCfg->TransferType;
  if (_7 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  RetVal = Lpuart_Uart_Ip_StartReceiveDataUsingInt (Instance, RxBuff, RxSize);

  <bb 11> :
  D.6261 = RetVal;

  <bb 12> :
<L10>:
  return D.6261;

}


Lpuart_Uart_Ip_StartGetData (const uint8 Instance, uint32 * StartTime, uint32 * ElapsedTicks, uint32 TimeoutTicks)
{
  const uint32 Lpuart_Uart_Ip_StatusRegMask[4];
  const Lpuart_Uart_Ip_StatusType Lpuart_Uart_Ip_ReceiveStatusArray[4];
  const Lpuart_Uart_Ip_StatusFlagType Lpuart_Uart_Ip_StatusFlagTypeArray[4];
  uint32 Mask;
  uint8 StatusIndex;
  struct LPUART_Type * Base;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_2];
  StatusIndex = 0;
  Mask = 0;
  Lpuart_Uart_Ip_StatusFlagTypeArray = *.LC0;
  Lpuart_Uart_Ip_ReceiveStatusArray = *.LC1;
  Lpuart_Uart_Ip_StatusRegMask = *.LC2;
  goto <bb 14>; [INV]

  <bb 3> :

  <bb 4> :
  _3 = Lpuart_Uart_Ip_GetStatusFlag (Base, 21);
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = Lpuart_Uart_Ip_CheckTimeout (StartTime, ElapsedTicks, TimeoutTicks, 0);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  StatusIndex = 0;
  goto <bb 10>; [INV]

  <bb 7> :
  _7 = (int) StatusIndex;
  _8 = Lpuart_Uart_Ip_StatusFlagTypeArray[_7];
  _9 = Lpuart_Uart_Ip_GetStatusFlag (Base, _8);
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = (int) StatusIndex;
  _11 = Lpuart_Uart_Ip_ReceiveStatusArray[_10];
  UartState->ReceiveStatus = _11;
  _12 = (int) StatusIndex;
  _13 = Lpuart_Uart_Ip_StatusRegMask[_12];
  Mask = Mask | _13;

  <bb 9> :
  StatusIndex.12_14 = StatusIndex;
  StatusIndex = StatusIndex.12_14 + 1;

  <bb 10> :
  if (StatusIndex <= 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (Mask != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base, 0);
  Lpuart_Uart_Ip_ClearStatusFlagWithMask (Base, Mask);
  goto <bb 16>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_GetData (Instance);

  <bb 14> :
  _15 = UartState->RxSize;
  if (_15 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = Lpuart_Uart_Ip_CheckTimeout (StartTime, ElapsedTicks, TimeoutTicks, 0);
  _17 = ~_16;
  if (_17 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  Lpuart_Uart_Ip_StatusFlagTypeArray = {CLOBBER};
  Lpuart_Uart_Ip_ReceiveStatusArray = {CLOBBER};
  Lpuart_Uart_Ip_StatusRegMask = {CLOBBER};
  return;

}


Lpuart_Uart_Ip_SyncReceive (const uint8 Instance, uint8 * RxBuff, const uint32 RxSize, const uint32 Timeout)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6232;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  ElapsedTicks = 0;
  IsReturn = 0;
  RetVal = 0;
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_02 ();
  _3 = UartState->IsRxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_02 ();
  RetVal = 2;
  IsReturn = 1;

  <bb 4> :
  _4 = ~IsReturn;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  UartState->IsRxBusy = 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_02 ();
  UartState->RxBuff = RxBuff;
  UartState->RxSize = RxSize;
  UartState->ReceiveStatus = 2;
  Lpuart_Uart_Ip_SetIntMode (Base, 21, 0);
  Lpuart_Uart_Ip_SetReceiverCmd (Base, 1);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, Timeout, 0);
  TimeoutTicks.9_5 = TimeoutTicks;
  Lpuart_Uart_Ip_StartGetData (Instance, &StartTime, &ElapsedTicks, TimeoutTicks.9_5);
  TimeoutTicks.10_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.10_6, 0);
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  UartState->ReceiveStatus = 3;

  <bb 7> :
  _8 = UartState->ReceiveStatus;
  if (_8 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  UartState->ReceiveStatus = 0;

  <bb 9> :
  _9 = UartState->RxSize;
  if (_9 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _10 = UartState->ReceiveStatus;
  if (_10 == 5)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  UartState->ReceiveStatus = 0;

  <bb 12> :
  Lpuart_Uart_Ip_SetReceiverCmd (Base, 0);
  UartState->IsRxBusy = 0;
  Lpuart_Uart_Ip_Getchar (Base);
  RetVal = UartState->ReceiveStatus;

  <bb 13> :
  D.6232 = RetVal;
  StartTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  ElapsedTicks = {CLOBBER};

  <bb 14> :
<L13>:
  return D.6232;

}


Lpuart_Uart_Ip_AbortSendingData (const uint8 Instance)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  struct LPUART_Type * Base;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6218;

  <bb 2> :
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  IsReturn = 0;
  RetVal = 0;
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  _3 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_3];
  _4 = UartState->IsTxBusy;
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 0;
  IsReturn = 1;

  <bb 4> :
  _6 = ~IsReturn;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  UartState->TransmitStatus = 6;
  _7 = UartUserCfg->TransferType;
  if (_7 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_CompleteSendDataUsingInt (Instance);

  <bb 7> :
  Lpuart_Uart_Ip_FlushTxBuffer (Base);
  RetVal = 0;

  <bb 8> :
  D.6218 = RetVal;

  <bb 9> :
<L6>:
  return D.6218;

}


Lpuart_Uart_Ip_GetTransmitStatus (const uint8 Instance, uint32 * BytesRemaining)
{
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  const struct Lpuart_Uart_Ip_StateStructureType * UartState;
  Lpuart_Uart_Ip_StatusType D.6210;

  <bb 2> :
  _1 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _2 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_2];
  if (BytesRemaining != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 = UartState->IsTxBusy;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = UartUserCfg->TransferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = UartState->TxSize;
  *BytesRemaining = _5;
  goto <bb 7>; [INV]

  <bb 6> :
  *BytesRemaining = 0;

  <bb 7> :
  D.6210 = UartState->TransmitStatus;

  <bb 8> :
<L7>:
  return D.6210;

}


Lpuart_Uart_Ip_AsyncSend (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize)
{
  boolean IsReturn;
  Lpuart_Uart_Ip_StatusType RetVal;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  const struct Lpuart_Uart_Ip_UserConfigType * UartUserCfg;
  Lpuart_Uart_Ip_StatusType D.6201;
  int iftmp.8;

  <bb 2> :
  RetVal = 0;
  _1 = (int) Instance;
  UartUserCfg = Lpuart_Uart_Ip_apUserConfig[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  IsReturn = 0;
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_01 ();
  _3 = UartState->IsTxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_01 ();
  RetVal = 2;
  IsReturn = 1;

  <bb 4> :
  _4 = ~IsReturn;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 5> :
  UartState->IsTxBusy = 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_01 ();
  _5 = UartUserCfg->TransferType;
  if (_5 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _6 = UartUserCfg->TransferType;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.8 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.8 = 0;

  <bb 9> :
  _7 = UartUserCfg->TransferType;
  if (_7 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  RetVal = Lpuart_Uart_Ip_StartSendDataUsingInt (Instance, TxBuff, TxSize);

  <bb 11> :
  D.6201 = RetVal;

  <bb 12> :
<L10>:
  return D.6201;

}


Lpuart_Uart_Ip_SyncSend (const uint8 Instance, const uint8 * TxBuff, const uint32 TxSize, const uint32 Timeout)
{
  Lpuart_Uart_Ip_StatusType RetVal;
  boolean IsReturn;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;
  struct Lpuart_Uart_Ip_StateStructureType * UartState;
  struct LPUART_Type * Base;
  Lpuart_Uart_Ip_StatusType D.6183;

  <bb 2> :
  ElapsedTicks = 0;
  IsReturn = 0;
  RetVal = 0;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  UartState = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  SchM_Enter_Uart_UART_EXCLUSIVE_AREA_00 ();
  _3 = UartState->IsTxBusy;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_00 ();
  RetVal = 2;
  IsReturn = 1;

  <bb 4> :
  _4 = ~IsReturn;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 5> :
  UartState->IsTxBusy = 1;
  SchM_Exit_Uart_UART_EXCLUSIVE_AREA_00 ();
  UartState->TxBuff = TxBuff;
  UartState->TxSize = TxSize;
  UartState->TransmitStatus = 2;
  Lpuart_Uart_Ip_SetIntMode (Base, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 22, 0);
  Lpuart_Uart_Ip_SetTransmitterCmd (Base, 1);
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, Timeout, 0);
  goto <bb 9>; [INV]

  <bb 6> :
  Lpuart_Uart_Ip_PutData (Instance);

  <bb 7> :
  _5 = Lpuart_Uart_Ip_GetStatusFlag (Base, 23);
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  TimeoutTicks.4_7 = TimeoutTicks;
  _8 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.4_7, 0);
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _10 = UartState->TxSize;
  if (_10 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  TimeoutTicks.5_11 = TimeoutTicks;
  _12 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.5_11, 0);
  _13 = ~_12;
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  Lpuart_Uart_Ip_SetTransmitterCmd (Base, 0);
  TimeoutTicks.6_14 = TimeoutTicks;
  _15 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.6_14, 0);
  if (_15 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  UartState->TransmitStatus = 3;
  goto <bb 14>; [INV]

  <bb 13> :
  UartState->TransmitStatus = 0;

  <bb 14> :
  UartState->IsTxBusy = 0;
  RetVal = UartState->TransmitStatus;

  <bb 15> :
  D.6183 = RetVal;
  StartTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  ElapsedTicks = {CLOBBER};

  <bb 16> :
<L16>:
  return D.6183;

}


Lpuart_Uart_Ip_Deinit (const uint8 Instance)
{
  struct LPUART_Type * Base;
  uint32 ElapsedTicks;
  uint32 TimeoutTicks;
  uint32 StartTime;

  <bb 2> :
  ElapsedTicks = 0;
  _1 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_1];
  _2 = (int) Instance;
  _3 = Lpuart_Uart_Ip_apStateStructuresArray[_2];
  Lpuart_Uart_Ip_StartTimeout (&StartTime, &TimeoutTicks, 0, 0);

  <bb 3> :
  _4 = Lpuart_Uart_Ip_GetStatusFlag (Base, 22);
  _5 = ~_4;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  TimeoutTicks.2_6 = TimeoutTicks;
  _7 = Lpuart_Uart_Ip_CheckTimeout (&StartTime, &ElapsedTicks, TimeoutTicks.2_6, 0);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Lpuart_Uart_Ip_SetIntMode (Base, 23, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 22, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 21, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 27, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 24, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 26, 0);
  Lpuart_Uart_Ip_SetIntMode (Base, 25, 0);
  _9 = (int) Instance;
  Lpuart_Uart_Ip_apStateStructuresArray[_9] = 0B;
  StartTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  ElapsedTicks = {CLOBBER};
  return;

}


Lpuart_Uart_Ip_Init (const uint8 Instance, const struct Lpuart_Uart_Ip_UserConfigType * UserConfig)
{
  uint8 * ClearStructPtr;
  uint32 Index;
  struct Lpuart_Uart_Ip_StateStructureType * UartStatePtr;
  struct LPUART_Type * Base;
  int iftmp.1;
  int iftmp.0;

  <bb 2> :
  _1 = (int) Instance;
  _2 = Lpuart_Uart_Ip_apStateStructuresArray[_1];
  _3 = UserConfig->BaudOverSamplingRatio;
  _4 = UserConfig->BaudRateDivisor;
  if (_4 <= 8191)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _5 = UserConfig->BaudRateDivisor;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0 = 0;

  <bb 6> :
  _6 = (int) Instance;
  Base = Lpuart_Uart_Ip_apBases[_6];
  _7 = (int) Instance;
  _8 = UserConfig->StateStruct;
  Lpuart_Uart_Ip_apStateStructuresArray[_7] = _8;
  _9 = (int) Instance;
  UartStatePtr = Lpuart_Uart_Ip_apStateStructuresArray[_9];
  _10 = (int) Instance;
  Lpuart_Uart_Ip_apUserConfig[_10] = UserConfig;
  ClearStructPtr = UartStatePtr;
  _11 = UserConfig->BitCountPerChar;
  if (_11 != 3)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _12 = UserConfig->ParityMode;
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1 = 0;

  <bb 10> :
  Index = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _13 = ClearStructPtr + Index;
  *_13 = 0;
  Index = Index + 1;

  <bb 12> :
  if (Index <= 31)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  Lpuart_Uart_Ip_Hw_Init (Base);
  _14 = UserConfig->BaudOverSamplingRatio;
  if (_14 <= 7)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (Base);

  <bb 15> :
  _15 = UserConfig->BaudOverSamplingRatio;
  _16 = (long unsigned int) _15;
  _17 = _16 + 4294967295;
  Lpuart_Uart_Ip_SetOversamplingRatio (Base, _17);
  _18 = UserConfig->BaudRateDivisor;
  Lpuart_Uart_Ip_SetBaudRateDivisor (Base, _18);
  _19 = UserConfig->ParityMode;
  if (_19 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _20 = UserConfig->BitCountPerChar;
  Lpuart_Uart_Ip_SetBitCountPerChar (Base, _20, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  _21 = UserConfig->BitCountPerChar;
  Lpuart_Uart_Ip_SetBitCountPerChar (Base, _21, 0);

  <bb 18> :
  _22 = UserConfig->ParityMode;
  Lpuart_Uart_Ip_SetParityMode (Base, _22);
  _23 = UserConfig->StopBitsCount;
  Lpuart_Uart_Ip_SetStopBitCount (Base, _23);
  UartStatePtr->TransmitStatus = 0;
  UartStatePtr->ReceiveStatus = 0;
  _24 = UserConfig->BaudRate;
  UartStatePtr->BaudRate = _24;
  return;

}


Lpuart_Uart_Ip_FlushRxBuffer (struct LPUART_Type * Base)
{
  <bb 2> :
  _1 = Base->FIFO;
  _2 = _1 | 16384;
  Base->FIFO = _2;
  return;

}


Lpuart_Uart_Ip_FlushTxBuffer (struct LPUART_Type * Base)
{
  <bb 2> :
  _1 = Base->FIFO;
  _2 = _1 | 32768;
  Base->FIFO = _2;
  return;

}


Lpuart_Uart_Ip_CheckTimeout (uint32 * StartTime, uint32 * ElapsedTicks, uint32 TimeoutTicks, OsIf_CounterType OsifCounter)
{
  uint32 CurrentElapsedTicks;
  boolean D.6168;

  <bb 2> :
  CurrentElapsedTicks = OsIf_GetElapsed (StartTime, OsifCounter);
  _1 = *ElapsedTicks;
  _2 = CurrentElapsedTicks + _1;
  *ElapsedTicks = _2;
  _3 = *ElapsedTicks;
  D.6168 = TimeoutTicks <= _3;

  <bb 3> :
<L0>:
  return D.6168;

}


Lpuart_Uart_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs, OsIf_CounterType OsifCounter)
{
  <bb 2> :
  _1 = OsIf_GetCounter (OsifCounter);
  *StartTimeOut = _1;
  _2 = OsIf_MicrosToTicks (TimeoutUs, OsifCounter);
  *TimeoutTicksOut = _2;
  return;

}


Lpuart_Uart_Ip_ClearErrorFlags (struct LPUART_Type * Base)
{
  uint32 Mask;

  <bb 2> :
  Mask = 983040;
  _1 = Base->STAT;
  _2 = _1 & 1071661055;
  _3 = Mask | _2;
  Base->STAT = _3;
  return;

}


Lpuart_Uart_Ip_ClearStatusFlagWithMask (struct LPUART_Type * Base, uint32 Mask)
{
  <bb 2> :
  _1 = Base->STAT;
  _2 = _1 & 1071661055;
  _3 = Mask | _2;
  Base->STAT = _3;
  return;

}


Lpuart_Uart_Ip_ClearStatusFlag (struct LPUART_Type * Base, Lpuart_Uart_Ip_StatusFlagType StatusFlag)
{
  <bb 2> :
  switch (StatusFlag) <default: <L4> [INV], case 16: <L3> [INV], case 17: <L2> [INV], case 18: <L1> [INV], case 19: <L0> [INV]>

  <bb 3> :
<L0>:
  _1 = Base->STAT;
  _2 = _1 & 1071661055;
  _3 = _2 | 524288;
  Base->STAT = _3;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  _4 = Base->STAT;
  _5 = _4 & 1071661055;
  _6 = _5 | 262144;
  Base->STAT = _6;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  _7 = Base->STAT;
  _8 = _7 & 1071661055;
  _9 = _8 | 131072;
  Base->STAT = _9;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  _10 = Base->STAT;
  _11 = _10 & 1071661055;
  _12 = _11 | 65536;
  Base->STAT = _12;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Lpuart_Uart_Ip_GetStatusFlag (const struct LPUART_Type * Base, Lpuart_Uart_Ip_StatusFlagType StatusFlag)
{
  boolean RetVal;
  boolean D.6166;

  <bb 2> :
  RetVal = 0;
  _1 = Base->STAT;
  _2 = _1 >> StatusFlag;
  _3 = _2 & 1;
  RetVal = _3 != 0;
  D.6166 = RetVal;

  <bb 3> :
<L0>:
  return D.6166;

}


Lpuart_Uart_Ip_Getchar10 (const struct LPUART_Type * Base)
{
  uint16 ReadData;
  uint16 D.6429;
  unsigned char D.6428;
  short unsigned int D.6427;

  <bb 2> :
  _1 = Base->CTRL;
  _2 = _1 >> 30;
  _3 = (short unsigned int) _2;
  _4 = _3 << 9;
  ReadData = _4 & 512;
  _5 = Base->CTRL;
  _6 = _5 >> 31;
  _7 = (short unsigned int) _6;
  _8 = _7 << 8;
  D.6427 = _8 & 256;
  ReadData = D.6427 | ReadData;
  _9 = Base->DATA;
  D.6428 = (unsigned char) _9;
  _10 = (short unsigned int) D.6428;
  ReadData = ReadData | _10;
  D.6429 = ReadData;

  <bb 3> :
<L0>:
  return D.6429;

}


Lpuart_Uart_Ip_Getchar9 (const struct LPUART_Type * Base)
{
  uint16 ReadData;
  uint16 D.6425;
  unsigned char D.6424;

  <bb 2> :
  _1 = Base->CTRL;
  _2 = _1 >> 31;
  _3 = (short unsigned int) _2;
  _4 = _3 << 8;
  ReadData = _4 & 256;
  _5 = Base->DATA;
  D.6424 = (unsigned char) _5;
  _6 = (short unsigned int) D.6424;
  ReadData = ReadData | _6;
  D.6425 = ReadData;

  <bb 3> :
<L0>:
  return D.6425;

}


Lpuart_Uart_Ip_Getchar (const struct LPUART_Type * Base)
{
  uint8 D.6239;

  <bb 2> :
  _1 = Base->DATA;
  D.6239 = (uint8) _1;

  <bb 3> :
<L0>:
  return D.6239;

}


Lpuart_Uart_Ip_Putchar10 (struct LPUART_Type * Base, uint16 Data)
{
  volatile uint8 * DataRegBytes;
  uint32 CtrlRegVal;
  uint8 TenthDataBit;
  uint8 NinthDataBit;

  <bb 2> :
  DataRegBytes = &Base->DATA;
  _1 = Data >> 8;
  _2 = (unsigned char) _1;
  NinthDataBit = _2 & 1;
  _3 = Data >> 9;
  _4 = (unsigned char) _3;
  TenthDataBit = _4 & 1;
  CtrlRegVal = Base->CTRL;
  _5 = CtrlRegVal & 3221225471;
  _6 = (long unsigned int) NinthDataBit;
  _7 = _6 << 30;
  CtrlRegVal = _5 | _7;
  _8 = CtrlRegVal & 2147483647;
  _9 = (long unsigned int) TenthDataBit;
  _10 = _9 << 31;
  CtrlRegVal = _8 | _10;
  Base->CTRL = CtrlRegVal;
  _11 = (unsigned char) Data;
  *DataRegBytes = _11;
  return;

}


Lpuart_Uart_Ip_Putchar9 (struct LPUART_Type * Base, uint16 Data)
{
  volatile uint8 * DataRegBytes;
  uint8 NinthDataBit;

  <bb 2> :
  DataRegBytes = &Base->DATA;
  _1 = Data >> 8;
  _2 = (unsigned char) _1;
  NinthDataBit = _2 & 1;
  _3 = Base->CTRL;
  _4 = _3 & 3221225471;
  _5 = (long unsigned int) NinthDataBit;
  _6 = _5 << 30;
  _7 = _4 | _6;
  Base->CTRL = _7;
  _8 = (unsigned char) Data;
  *DataRegBytes = _8;
  return;

}


Lpuart_Uart_Ip_Putchar (struct LPUART_Type * Base, uint8 Data)
{
  volatile uint8 * DataRegBytes;

  <bb 2> :
  DataRegBytes = &Base->DATA;
  *DataRegBytes = Data;
  return;

}


Lpuart_Uart_Ip_GetIntMode (const struct LPUART_Type * Base, Lpuart_Uart_Ip_InterruptType IntSrc)
{
  boolean RetVal;
  boolean D.6326;

  <bb 2> :
  RetVal = 0;
  _1 = Base->CTRL;
  _2 = _1 >> IntSrc;
  _3 = _2 & 1;
  RetVal = _3 != 0;
  D.6326 = RetVal;

  <bb 3> :
<L0>:
  return D.6326;

}


Lpuart_Uart_Ip_SetIntMode (struct LPUART_Type * Base, Lpuart_Uart_Ip_InterruptType IntSrc, boolean Enable)
{
  unsigned int iftmp.3;

  <bb 2> :
  _1 = Base->CTRL;
  _2 = 1 << IntSrc;
  _3 = ~_2;
  _4 = _1 & _3;
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = 0;

  <bb 5> :
  _5 = iftmp.3 << IntSrc;
  _6 = _4 | _5;
  Base->CTRL = _6;
  return;

}


Lpuart_Uart_Ip_SetStopBitCount (struct LPUART_Type * Base, Lpuart_Uart_Ip_StopBitCountType StopBitCount)
{
  <bb 2> :
  _1 = Base->BAUD;
  _2 = _1 & 4294959103;
  _3 = StopBitCount << 13;
  _4 = _2 | _3;
  Base->BAUD = _4;
  return;

}


Lpuart_Uart_Ip_SetParityMode (struct LPUART_Type * Base, Lpuart_Uart_Ip_ParityModeType ParityModeType)
{
  <bb 2> :
  _1 = Base->CTRL;
  _2 = _1 & 4294967293;
  _3 = ParityModeType & 4294967294;
  _4 = _2 | _3;
  Base->CTRL = _4;
  _5 = Base->CTRL;
  _6 = _5 & 4294967294;
  _7 = ParityModeType & 1;
  _8 = _6 | _7;
  Base->CTRL = _8;
  return;

}


Lpuart_Uart_Ip_SetBitCountPerChar (struct LPUART_Type * Base, Lpuart_Uart_Ip_BitCountPerCharType BitCountPerChar, boolean Parity)
{
  uint32 TmpBitCountPerChar;

  <bb 2> :
  TmpBitCountPerChar = BitCountPerChar;
  if (Parity != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  TmpBitCountPerChar = TmpBitCountPerChar + 1;

  <bb 4> :
  if (TmpBitCountPerChar == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _1 = Base->BAUD;
  _2 = _1 | 536870912;
  Base->BAUD = _2;
  goto <bb 12>; [INV]

  <bb 6> :
  if (BitCountPerChar == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  if (Parity != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _3 = Base->CTRL;
  _4 = _3 & 4294965231;
  Base->CTRL = _4;
  goto <bb 11>; [INV]

  <bb 9> :
  _5 = Base->CTRL;
  _6 = _5 | 2048;
  Base->CTRL = _6;
  goto <bb 11>; [INV]

  <bb 10> :
  TmpBitCountPerChar = TmpBitCountPerChar + 4294967295;
  _7 = Base->CTRL;
  _8 = _7 & 4294967279;
  _9 = TmpBitCountPerChar << 4;
  _10 = _8 | _9;
  Base->CTRL = _10;

  <bb 11> :
  _11 = Base->BAUD;
  _12 = _11 & 3758096383;
  Base->BAUD = _12;

  <bb 12> :
  return;

}


Lpuart_Uart_Ip_EnableBothEdgeSamplingCmd (struct LPUART_Type * Base)
{
  <bb 2> :
  _1 = Base->BAUD;
  _2 = _1 | 131072;
  Base->BAUD = _2;
  return;

}


Lpuart_Uart_Ip_SetOversamplingRatio (struct LPUART_Type * Base, uint32 OverSamplingRatio)
{
  <bb 2> :
  _1 = Base->BAUD;
  _2 = _1 & 3774873599;
  _3 = OverSamplingRatio << 24;
  _4 = _3 & 520093696;
  _5 = _2 | _4;
  Base->BAUD = _5;
  return;

}


Lpuart_Uart_Ip_SetBaudRateDivisor (struct LPUART_Type * Base, uint32 baudRateDivisor)
{
  <bb 2> :
  _1 = Base->BAUD;
  _2 = _1 & 4294959104;
  _3 = baudRateDivisor & 8191;
  _4 = _2 | _3;
  Base->BAUD = _4;
  return;

}


Lpuart_Uart_Ip_SetReceiverCmd (struct LPUART_Type * Base, boolean Enable)
{
  long unsigned int iftmp.11;

  <bb 2> :
  _1 = Base->CTRL;
  _2 = _1 & 4294705151;
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11 = 262144;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11 = 0;

  <bb 5> :
  _3 = iftmp.11 | _2;
  Base->CTRL = _3;
  return;

}


Lpuart_Uart_Ip_SetTransmitterCmd (struct LPUART_Type * Base, boolean Enable)
{
  long unsigned int iftmp.7;

  <bb 2> :
  _1 = Base->CTRL;
  _2 = _1 & 4294443007;
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7 = 524288;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 0;

  <bb 5> :
  _3 = iftmp.7 | _2;
  Base->CTRL = _3;
  return;

}


Lpuart_Uart_Ip_Hw_Init (struct LPUART_Type * Base)
{
  <bb 2> :
  Base->BAUD = 251658244;
  Base->STAT = 3223306240;
  Base->CTRL = 0;
  return;

}


