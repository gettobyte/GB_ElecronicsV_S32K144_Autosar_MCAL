
Marking local functions: Adc_Ipw_EndConversionNotification Adc_Ipw_ReadData Adc_Ipw_EndConversion Adc_Ipw_UpdateHardwareGroupState Adc_Ipw_UpdateSoftwareGroupState Adc_Ipw_GetCurrentSampleCount Adc_Ipw_RestartConversion Adc_Ipw_ConfigureRuntimeChannels Adc_Ipw_HandleConversionCheckFail Adc_Ipw_CheckConversionChannels Adc_Ipw_UpdateQueue Adc_Ipw_CallNotification


Marking externally visible functions: Adc_Ipw_Adc0EndConversionNotification


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Adc_Ip_ConfigChannel/28 (Adc_Ip_ConfigChannel) @069328c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_HandleConversionCheckFail/3 
  Calls: 
Adc_Ipw_StartHwTrigConversion/27 (Adc_Ipw_StartHwTrigConversion) @06932700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 
  Calls: 
Adc_Ip_DisableChannelNotification/26 (Adc_Ip_DisableChannelNotification) @06932620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 
  Calls: 
Pdb_Adc_Ip_SwTrigger/25 (Pdb_Adc_Ip_SwTrigger) @069322a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_RestartConversion/5 
  Calls: 
Adc_Ipw_StartNormalConversion/24 (Adc_Ipw_StartNormalConversion) @06932000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateQueue/1 
  Calls: 
Adc_RemoveFromQueue/23 (Adc_RemoveFromQueue) @068f27e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_UpdateQueue/1 
  Calls: 
Adc_Ipw_CheckConversionValuesInRange/22 (Adc_Ipw_CheckConversionValuesInRange) @068f2a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ip_GetConvData/21 (Adc_Ip_GetConvData) @068f29a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_CheckValidConversion/20 (Adc_Ipw_CheckValidConversion) @068f28c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_CalculateNumsBitShift/19 (Adc_Ipw_CalculateNumsBitShift) @068f2700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_ConfigureConversion/18 (Adc_Ipw_ConfigureConversion) @068f2460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_HandleConversionCheckFail/3 Adc_Ipw_RestartConversion/5 Adc_Ipw_ConfigureRuntimeChannels/4 Adc_Ipw_EndConversion/9 
  Calls: 
Adc_aGroupStatus/17 (Adc_aGroupStatus) @069293a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (write)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_CheckConversionChannels/2 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_UpdateSoftwareGroupState/7 (write)Adc_Ipw_GetCurrentSampleCount/6 (read)Adc_Ipw_RestartConversion/5 (write)Adc_Ipw_RestartConversion/5 (write)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_UpdateHardwareGroupState/8 (write)Adc_Ipw_HandleConversionCheckFail/3 (write)
  Availability: not_available
  Varpool flags:
Adc_aRuntimeGroupChannel/16 (Adc_aRuntimeGroupChannel) @069292d0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_ConfigureRuntimeChannels/4 (write)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)
  Availability: not_available
  Varpool flags:
Adc_aUnitStatus/15 (Adc_aUnitStatus) @068ebb88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_UpdateQueue/1 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_HandleConversionCheckFail/3 (read)
  Availability: not_available
  Varpool flags:
Adc_pCfgPtr/14 (Adc_pCfgPtr) @068ebb40
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Adc_Ipw_EndConversionNotification/11 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_EndConversion/9 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_CheckConversionChannels/2 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_UpdateSoftwareGroupState/7 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_RestartConversion/5 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_CallNotification/0 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_UpdateHardwareGroupState/8 (read)Adc_Ipw_HandleConversionCheckFail/3 (read)
  Availability: not_available
  Varpool flags:
Adc_GetCoreID/13 (Adc_GetCoreID) @068f21c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ipw_EndConversionNotification/11 
  Calls: 
Adc_Ipw_Adc0EndConversionNotification/12 (Adc_Ipw_Adc0EndConversionNotification) @068e7380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ipw_EndConversionNotification/11 
Adc_Ipw_EndConversionNotification/11 (Adc_Ipw_EndConversionNotification) @068e7ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aUnitStatus/15 (read)Adc_aUnitStatus/15 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_Adc0EndConversionNotification/12 
  Calls: Adc_Ipw_EndConversion/9 Adc_Ipw_EndConversion/9 Adc_GetCoreID/13 
Adc_Ipw_ReadData/10 (Adc_Ipw_ReadData) @068e7c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_CheckConversionChannels/2 Adc_Ipw_CheckConversionChannels/2 
  Calls: 
Adc_Ipw_EndConversion/9 (Adc_Ipw_EndConversion) @068e79a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversionNotification/11 Adc_Ipw_EndConversionNotification/11 
  Calls: Adc_Ipw_HandleConversionCheckFail/3 Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_ConfigureConversion/18 Adc_Ipw_CheckConversionChannels/2 Adc_Ipw_ConfigureRuntimeChannels/4 
Adc_Ipw_UpdateHardwareGroupState/8 (Adc_Ipw_UpdateHardwareGroupState) @068e7540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aGroupStatus/17 (write)Adc_aRuntimeGroupChannel/16 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_CallNotification/0 Adc_Ipw_StartHwTrigConversion/27 Adc_Ipw_CallNotification/0 Adc_Ip_DisableChannelNotification/26 Adc_Ipw_GetCurrentSampleCount/6 
Adc_Ipw_UpdateSoftwareGroupState/7 (Adc_Ipw_UpdateSoftwareGroupState) @068e72a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_CallNotification/0 Adc_Ipw_RestartConversion/5 Adc_Ipw_UpdateQueue/1 Adc_Ipw_RestartConversion/5 Adc_Ipw_UpdateQueue/1 Adc_Ipw_GetCurrentSampleCount/6 
Adc_Ipw_GetCurrentSampleCount/6 (Adc_Ipw_GetCurrentSampleCount) @068e7000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aGroupStatus/17 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: 
Adc_Ipw_RestartConversion/5 (Adc_Ipw_RestartConversion) @069cc7e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: Adc_Ipw_ConfigureConversion/18 Pdb_Adc_Ip_SwTrigger/25 Adc_Ipw_ConfigureRuntimeChannels/4 
Adc_Ipw_ConfigureRuntimeChannels/4 (Adc_Ipw_ConfigureRuntimeChannels) @069ccee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_aRuntimeGroupChannel/16 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_RestartConversion/5 Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_ConfigureConversion/18 
Adc_Ipw_HandleConversionCheckFail/3 (Adc_Ipw_HandleConversionCheckFail) @069ccc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aUnitStatus/15 (read)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_ConfigureConversion/18 Adc_Ip_ConfigChannel/28 
Adc_Ipw_CheckConversionChannels/2 (Adc_Ipw_CheckConversionChannels) @069cc9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aRuntimeGroupChannel/16 (read)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)Adc_aGroupStatus/17 (write)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_EndConversion/9 
  Calls: Adc_Ipw_ReadData/10 Adc_Ipw_ReadData/10 Adc_Ipw_CheckConversionValuesInRange/22 Adc_Ip_GetConvData/21 Adc_Ipw_CheckValidConversion/20 Adc_Ipw_CalculateNumsBitShift/19 
Adc_Ipw_UpdateQueue/1 (Adc_Ipw_UpdateQueue) @069cc700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_aUnitStatus/15 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateSoftwareGroupState/7 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: Adc_Ipw_StartNormalConversion/24 Adc_RemoveFromQueue/23 
Adc_Ipw_CallNotification/0 (Adc_Ipw_CallNotification) @069cc460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Adc_pCfgPtr/14 (read)Adc_aGroupStatus/17 (read)Adc_pCfgPtr/14 (read)Adc_pCfgPtr/14 (read)
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateHardwareGroupState/8 Adc_Ipw_UpdateSoftwareGroupState/7 
  Calls: 
   Indirect call
Adc_Ipw_Adc0EndConversionNotification (const uint8 ControlChanIdx)
{
  const Adc_HwUnitType PhysicalAdcUnit;

  <bb 2> :
  PhysicalAdcUnit = 0;
  Adc_Ipw_EndConversionNotification (PhysicalAdcUnit);
  return;

}


Adc_Ipw_EndConversionNotification (const Adc_HwUnitType PhysicalAdcUnit)
{
  const Adc_GroupType HwGroupId;
  const Adc_GroupType SwGroupId;
  const Adc_HwUnitType LogicalHwUnitId;
  const uint32 u32CoreId;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  u32CoreId = _1;
  u32CoreId.0_2 = u32CoreId;
  _3 = Adc_pCfgPtr[u32CoreId.0_2];
  _4 = _3->pAdcIpwConfig;
  _5 = (int) PhysicalAdcUnit;
  LogicalHwUnitId = _4->Mapping.aHwLogicalId[_5];
  _6 = (int) LogicalHwUnitId;
  SwGroupId = Adc_aUnitStatus[_6].SwNormalQueue[0];
  _7 = (int) LogicalHwUnitId;
  HwGroupId = Adc_aUnitStatus[_7].OngoingHwGroup;
  if (HwGroupId != 65535)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  u32CoreId.1_8 = u32CoreId;
  Adc_Ipw_EndConversion (LogicalHwUnitId, HwGroupId, 0, u32CoreId.1_8);
  goto <bb 6>; [INV]

  <bb 4> :
  _9 = (int) LogicalHwUnitId;
  _10 = Adc_aUnitStatus[_9].SwNormalQueueIndex;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  u32CoreId.2_11 = u32CoreId;
  Adc_Ipw_EndConversion (LogicalHwUnitId, SwGroupId, 1, u32CoreId.2_11);

  <bb 6> :
  return;

}


Adc_Ipw_ReadData (const struct Adc_GroupConfigurationType * GroupPtr, Adc_ValueGroupType * pResult, const Adc_StreamNumSampleType GroupSamples, const Adc_ChannelIndexType Index, const uint16 ConvResult)
{
  <bb 2> :
  _1 = (int) Index;
  _2 = (int) GroupSamples;
  _3 = _1 * _2;
  _4 = (unsigned int) _3;
  _5 = _4 * 2;
  _6 = pResult + _5;
  *_6 = ConvResult;
  return;

}


Adc_Ipw_EndConversion (Adc_HwUnitType Unit, Adc_GroupType Group, boolean IsSoftwareConversion, uint32 u32CoreId)
{
  Adc_ChannelIndexType ChannelCount;
  uint8 LeftChannel;
  Adc_ChannelIndexType NumChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  unsigned char iftmp.4;
  unsigned char iftmp.3;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex;
  _9 = _8 * 68;
  GroupPtr = _7 + _9;
  _10 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_10].ChannelCount;
  _11 = (int) Group;
  _12 = Adc_aRuntimeGroupChannel[_11].bRuntimeUpdated;
  if (_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (ChannelCount <= 15)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = ChannelCount & 15;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.3 = 16;

  <bb 6> :
  Adc_Ipw_ConfigureRuntimeChannels (Unit, GroupPtr, iftmp.3, u32CoreId);
  goto <bb 18>; [INV]

  <bb 7> :
  _13 = GroupPtr->NumSamples;
  _14 = Adc_Ipw_CheckConversionChannels (Unit, Group, _13, u32CoreId);
  if (_14 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 8> :
  _15 = (int) Group;
  _16 = Adc_aGroupStatus[_15].CurrentChannel;
  if (ChannelCount > _16)
    goto <bb 9>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 9> :
  _17 = (int) Group;
  _18 = Adc_aGroupStatus[_17].CurrentChannel;
  NumChannel = ChannelCount - _18;
  if (NumChannel <= 15)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.4 = NumChannel & 15;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.4 = 16;

  <bb 12> :
  LeftChannel = iftmp.4;
  Adc_Ipw_ConfigureConversion (Unit, Group, 15, LeftChannel, u32CoreId);
  goto <bb 18>; [INV]

  <bb 13> :
  _19 = (int) Group;
  _20 = Adc_aGroupStatus[_19].ResultIndex;
  _21 = _20;
  _22 = _21 + 1;
  Adc_aGroupStatus[_19].ResultIndex = _22;
  if (IsSoftwareConversion != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _23 = GroupPtr->NumSamples;
  Adc_Ipw_UpdateSoftwareGroupState (Unit, Group, _23, u32CoreId);
  goto <bb 18>; [INV]

  <bb 15> :
  _24 = GroupPtr->NumSamples;
  Adc_Ipw_UpdateHardwareGroupState (Unit, Group, _24, u32CoreId);
  goto <bb 18>; [INV]

  <bb 16> :
  if (IsSoftwareConversion != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Adc_Ipw_HandleConversionCheckFail (Unit, Group, GroupPtr, u32CoreId);

  <bb 18> :
  return;

}


Adc_Ipw_UpdateHardwareGroupState (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  const struct Adc_Ipw_Config * const pAdcIpwConfigPtr;
  const Adc_GroupType GroupIndex;
  Adc_ChannelIndexType ChannelCount;
  uint32 CurrentSampleCount;
  boolean NotificationCalled;

  <bb 2> :
  NotificationCalled = 0;
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  pAdcIpwConfigPtr = _6->pAdcIpwConfig;
  _7 = (int) Unit;
  PhysicalHwUnitId = pAdcIpwConfigPtr->aAdcPhysicalId[_7];
  _8 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_8].ChannelCount;
  _9 = (int) Group;
  Adc_aGroupStatus[_9].eAlreadyConverted = 1;
  _10 = (int) Group;
  _11 = Adc_aGroupStatus[_10].eConversion;
  if (_11 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _12 = (int) Group;
  Adc_aGroupStatus[_12].eConversion = 2;

  <bb 4> :
  CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount (Group);
  _13 = (long unsigned int) GroupSamples;
  if (CurrentSampleCount >= _13)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _14 = (int) Group;
  Adc_aGroupStatus[_14].eConversion = 3;
  _15 = Adc_pCfgPtr[u32CoreId];
  _16 = _15->pGroups;
  _17 = (unsigned int) GroupIndex;
  _18 = _17 * 68;
  _19 = _16 + _18;
  _20 = _19->eBufferMode;
  if (_20 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _21 = Adc_pCfgPtr[u32CoreId];
  _22 = _21->pGroups;
  _23 = (unsigned int) GroupIndex;
  _24 = _23 * 68;
  _25 = _22 + _24;
  _26 = _25->eAccessMode;
  if (_26 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _27 = (long unsigned int) PhysicalHwUnitId;
  _28 = (int) Unit;
  _29 = Adc_aUnitStatus[_28].u8Sc1Used;
  _30 = _29 + 255;
  Adc_Ip_DisableChannelNotification (_27, _30);
  Adc_Ipw_CallNotification (Group, u32CoreId);
  NotificationCalled = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  _31 = (int) Group;
  Adc_aGroupStatus[_31].ResultIndex = 0;

  <bb 9> :
  _32 = ~NotificationCalled;
  if (_32 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  if (ChannelCount > 16)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _33 = (int) Group;
  _34 = Adc_aRuntimeGroupChannel[_33].bRuntimeUpdated;
  if (_34 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Adc_Ipw_StartHwTrigConversion (Unit, Group, u32CoreId);

  <bb 13> :
  Adc_Ipw_CallNotification (Group, u32CoreId);

  <bb 14> :
  return;

}


Adc_Ipw_UpdateSoftwareGroupState (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  const Adc_GroupType GroupIndex;
  uint32 CurrentSampleCount;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = (int) Group;
  Adc_aGroupStatus[_6].eAlreadyConverted = 1;
  _7 = (int) Group;
  _8 = Adc_aGroupStatus[_7].eConversion;
  if (_8 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = (int) Group;
  Adc_aGroupStatus[_9].eConversion = 2;

  <bb 4> :
  CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount (Group);
  _10 = (long unsigned int) GroupSamples;
  if (CurrentSampleCount >= _10)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _11 = (int) Group;
  Adc_aGroupStatus[_11].eConversion = 3;
  _12 = Adc_pCfgPtr[u32CoreId];
  _13 = _12->pGroups;
  _14 = (unsigned int) GroupIndex;
  _15 = _14 * 68;
  _16 = _13 + _15;
  _17 = _16->eBufferMode;
  if (_17 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _18 = Adc_pCfgPtr[u32CoreId];
  _19 = _18->pGroups;
  _20 = (unsigned int) GroupIndex;
  _21 = _20 * 68;
  _22 = _19 + _21;
  _23 = _22->eAccessMode;
  if (_23 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_Ipw_UpdateQueue (Unit, u32CoreId);
  goto <bb 11>; [INV]

  <bb 8> :
  _24 = Adc_pCfgPtr[u32CoreId];
  _25 = _24->pGroups;
  _26 = (unsigned int) GroupIndex;
  _27 = _26 * 68;
  _28 = _25 + _27;
  _29 = _28->eMode;
  if (_29 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _30 = (int) Group;
  Adc_aGroupStatus[_30].ResultIndex = 0;
  Adc_Ipw_RestartConversion (Unit, Group, u32CoreId);
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_Ipw_UpdateQueue (Unit, u32CoreId);

  <bb 11> :
  goto <bb 13>; [INV]

  <bb 12> :
  Adc_Ipw_RestartConversion (Unit, Group, u32CoreId);

  <bb 13> :
  Adc_Ipw_CallNotification (Group, u32CoreId);
  return;

}


Adc_Ipw_GetCurrentSampleCount (Adc_GroupType Group)
{
  Adc_StreamNumSampleType CurrentSampleCount;
  uint32 D.6470;

  <bb 2> :
  _1 = (int) Group;
  CurrentSampleCount = Adc_aGroupStatus[_1].ResultIndex;
  D.6470 = (uint32) CurrentSampleCount;

  <bb 3> :
<L0>:
  return D.6470;

}


Adc_Ipw_RestartConversion (Adc_HwUnitType Unit, Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_ChannelIndexType ChannelCount;
  uint8 NumChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  unsigned char iftmp.7;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = Adc_pCfgPtr[u32CoreId];
  _7 = _6->pGroups;
  _8 = (unsigned int) GroupIndex;
  _9 = _8 * 68;
  GroupPtr = _7 + _9;
  _10 = Adc_pCfgPtr[u32CoreId];
  _11 = _10->pAdcIpwConfig;
  _12 = (int) Unit;
  PhysicalHwUnitId = _11->aAdcPhysicalId[_12];
  _13 = (int) Group;
  ChannelCount = Adc_aRuntimeGroupChannel[_13].ChannelCount;
  if (ChannelCount <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7 = ChannelCount & 15;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7 = 16;

  <bb 5> :
  NumChannel = iftmp.7;
  _14 = (int) Group;
  _15 = Adc_aRuntimeGroupChannel[_14].bRuntimeUpdated;
  if (_15 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_Ipw_ConfigureRuntimeChannels (Unit, GroupPtr, NumChannel, u32CoreId);
  goto <bb 10>; [INV]

  <bb 7> :
  if (ChannelCount <= 16)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _16 = (int) Group;
  Adc_aGroupStatus[_16].CurrentChannel = ChannelCount;
  _17 = (long unsigned int) PhysicalHwUnitId;
  Pdb_Adc_Ip_SwTrigger (_17);
  goto <bb 10>; [INV]

  <bb 9> :
  _18 = (int) Group;
  Adc_aGroupStatus[_18].CurrentChannel = 0;
  Adc_Ipw_ConfigureConversion (Unit, Group, 15, NumChannel, u32CoreId);

  <bb 10> :
  return;

}


Adc_Ipw_ConfigureRuntimeChannels (Adc_HwUnitType Unit, const struct Adc_GroupConfigurationType * GroupPtr, uint8 NumChannel, uint32 CoreId)
{
  Adc_GroupType Group;

  <bb 2> :
  Group = GroupPtr->GroupId;
  _1 = (int) Group;
  Adc_aGroupStatus[_1].CurrentChannel = 0;
  _2 = (int) Group;
  Adc_aGroupStatus[_2].ResultIndex = 0;
  _3 = GroupPtr->HwTriggerSource;
  Adc_Ipw_ConfigureConversion (Unit, Group, _3, NumChannel, CoreId);
  _4 = (int) Group;
  Adc_aRuntimeGroupChannel[_4].bRuntimeUpdated = 0;
  return;

}


Adc_Ipw_HandleConversionCheckFail (Adc_HwUnitType Unit, Adc_GroupType Group, const struct Adc_GroupConfigurationType * GroupPtr, uint32 u32CoreId)
{
  Adc_HwUnitType PhysicalHwUnitId;
  struct Adc_Ip_ChanConfigType ChannelConfig;
  uint8 Channel;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pAdcIpwConfig;
  _3 = (int) Unit;
  PhysicalHwUnitId = _2->aAdcPhysicalId[_3];
  _4 = GroupPtr->eMode;
  if (_4 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  Channel = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  ChannelConfig.ChnIdx = Channel;
  ChannelConfig.Channel = 31;
  ChannelConfig.InterruptEnable = 0;
  _5 = (long unsigned int) PhysicalHwUnitId;
  Adc_Ip_ConfigChannel (_5, &ChannelConfig);
  Channel.8_6 = Channel;
  Channel = Channel.8_6 + 1;

  <bb 5> :
  _7 = (int) Unit;
  _8 = Adc_aUnitStatus[_7].u8Sc1Used;
  if (Channel < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = (int) Group;
  Adc_aGroupStatus[_9].CurrentChannel = 0;
  Adc_Ipw_ConfigureConversion (Unit, Group, 15, 1, u32CoreId);

  <bb 7> :
  ChannelConfig = {CLOBBER};
  return;

}


Adc_Ipw_CheckConversionChannels (Adc_HwUnitType Unit, Adc_GroupType Group, Adc_StreamNumSampleType GroupSamples, uint32 u32CoreId)
{
  boolean ValidConversion;
  boolean bFlag;
  Adc_ChannelType HwChannel;
  const uint8 NumsBitShift;
  Std_ReturnType Status;
  Adc_HwUnitType PhysicalHwUnitId;
  Adc_ValueGroupType * ResultIndex;
  uint16 ConvResult;
  Adc_ChannelIndexType Index;
  Adc_ChannelIndexType Temp;
  Adc_ChannelIndexType CurrentChannel;
  const struct Adc_GroupConfigurationType * GroupPtr;
  const Adc_GroupType GroupIndex;
  Std_ReturnType D.6456;
  unsigned char iftmp.5;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = (int) Group;
  CurrentChannel = Adc_aGroupStatus[_6].CurrentChannel;
  ResultIndex = 0B;
  _7 = Adc_pCfgPtr[u32CoreId];
  _8 = _7->pAdcIpwConfig;
  _9 = (int) Unit;
  PhysicalHwUnitId = _8->aAdcPhysicalId[_9];
  Status = 0;
  _10 = Adc_pCfgPtr[u32CoreId];
  _11 = _10->pAdcIpwConfig;
  _12 = (int) Unit;
  _13 = _11->apAdcConfig[_12];
  _14 = _13->Resolution;
  NumsBitShift = Adc_Ipw_CalculateNumsBitShift (_14);
  bFlag = 0;
  ValidConversion = 1;
  _15 = (int) Group;
  Index = Adc_aRuntimeGroupChannel[_15].ChannelCount;
  _16 = Adc_pCfgPtr[u32CoreId];
  _17 = _16->pGroups;
  _18 = (unsigned int) GroupIndex;
  _19 = _18 * 68;
  GroupPtr = _17 + _19;
  if (CurrentChannel <= Index)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 3> :
  _20 = CurrentChannel & 15;
  if (_20 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5 = CurrentChannel + 240;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.5 = CurrentChannel & 240;

  <bb 6> :
  Temp = iftmp.5;
  _21 = GroupPtr->pResultsBufferPtr;
  _22 = (unsigned int) Group;
  _23 = _22 * 4;
  _24 = _21 + _23;
  _25 = *_24;
  _26 = (int) Group;
  _27 = Adc_aGroupStatus[_26].ResultIndex;
  _28 = (unsigned int) _27;
  _29 = _28 * 2;
  ResultIndex = _25 + _29;
  ValidConversion = Adc_Ipw_CheckValidConversion (PhysicalHwUnitId, Temp, CurrentChannel);
  if (ValidConversion != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 7> :
  Index = Temp;
  goto <bb 16>; [INV]

  <bb 8> :
  _30 = (long unsigned int) PhysicalHwUnitId;
  _31 = Index - Temp;
  ConvResult = Adc_Ip_GetConvData (_30, _31);
  _32 = (int) ConvResult;
  _33 = (int) NumsBitShift;
  _34 = _32 << _33;
  ConvResult = (uint16) _34;
  _35 = GroupPtr->bAdcGroupLimitcheck;
  if (_35 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _36 = (int) Group;
  _37 = Adc_aRuntimeGroupChannel[_36].bAdcRuntimeGroupLimitcheck;
  if (_37 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 10> :
  _38 = (int) Group;
  _39 = Adc_aRuntimeGroupChannel[_38].pChannel;
  _40 = (unsigned int) Index;
  _41 = _40 * 2;
  _42 = _39 + _41;
  HwChannel = *_42;
  bFlag = Adc_Ipw_CheckConversionValuesInRange (ConvResult, Unit, HwChannel, u32CoreId);
  if (bFlag != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_Ipw_ReadData (GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
  _43 = (int) Group;
  Adc_aGroupStatus[_43].bLimitCheckFailed = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _44 = (int) Group;
  Adc_aGroupStatus[_44].eAlreadyConverted = 1;
  _45 = (int) Group;
  Adc_aGroupStatus[_45].bLimitCheckFailed = 1;
  Status = 1;
  goto <bb 17>; [INV]

  <bb 13> :
  goto <bb 15>; [INV]

  <bb 14> :
  Adc_Ipw_ReadData (GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);

  <bb 15> :
  Index.6_46 = Index;
  Index = Index.6_46 + 1;

  <bb 16> :
  if (Index < CurrentChannel)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  goto <bb 19>; [INV]

  <bb 18> :
  Status = 1;

  <bb 19> :
  D.6456 = Status;

  <bb 20> :
<L18>:
  return D.6456;

}


Adc_Ipw_UpdateQueue (Adc_HwUnitType Unit, uint32 u32CoreId)
{
  <bb 2> :
  Adc_RemoveFromQueue (Unit, 0);
  _1 = (int) Unit;
  _2 = Adc_aUnitStatus[_1].SwNormalQueueIndex;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_Ipw_StartNormalConversion (Unit, u32CoreId);

  <bb 4> :
  return;

}


Adc_Ipw_CallNotification (Adc_GroupType Group, uint32 u32CoreId)
{
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = Adc_pCfgPtr[u32CoreId];
  _2 = _1->pGroupIdToIndexMap;
  _3 = (unsigned int) Group;
  _4 = _3 * 2;
  _5 = _2 + _4;
  GroupIndex = *_5;
  _6 = (int) Group;
  _7 = Adc_aGroupStatus[_6].eNotification;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _8 = Adc_pCfgPtr[u32CoreId];
  _9 = _8->pGroups;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 68;
  _12 = _9 + _11;
  _13 = _12->Notification;
  if (_13 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _14 = Adc_pCfgPtr[u32CoreId];
  _15 = _14->pGroups;
  _16 = (unsigned int) GroupIndex;
  _17 = _16 * 68;
  _18 = _15 + _17;
  _19 = _18->Notification;
  _19 ();

  <bb 5> :
  return;

}


