Symbol table:

SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13/218 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13) @06c2dee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13/217 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13) @06c2de00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12/216 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12) @06c2dc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SyncUpdate/193 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12/215 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12) @06c2db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SyncUpdate/193 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11/214 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11) @06c2d8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_EnableTrigger/192 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11/213 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11) @06c2d7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_EnableTrigger/192 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10/212 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10) @06c2d540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_DisableTrigger/191 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10/211 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10) @06c2d460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_DisableTrigger/191 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09/210 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09) @06c2d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SetPhaseShift/189 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09/209 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09) @06c2d000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_SetPhaseShift/189 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08/208 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08) @06c1ed20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UnMaskOutputChannels/188 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08/207 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08) @06c1ec40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UnMaskOutputChannels/188 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07/206 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07) @06c1e9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_MaskOutputChannels/187 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07/205 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07) @06c1e8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_MaskOutputChannels/187 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05/204 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05) @06c1e2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_EnableNotification/181 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05/203 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05) @06c1e0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_EnableNotification/181 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04/202 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04) @06c0ae00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_DisableNotification/179 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04/201 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04) @06c0ad20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_DisableNotification/179 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03/200 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03) @06c0aa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_GetOutputState/178 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03/199 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03) @06c0a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_GetOutputState/178 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01/198 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01) @06bf4ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01/197 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01) @06bf4e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 
  Calls: 
SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00/196 (SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00) @06bf4c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 
  Calls: 
SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00/195 (SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00) @06bf4a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 
  Calls: 
Ftm_Pwm_Ip_SetChannelDeadTime/194 (Ftm_Pwm_Ip_SetChannelDeadTime) @06b73d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13/218 Ftm_Pwm_Ip_SetExtDeadtimeValue/63 Ftm_Pwm_Ip_SetDeadtimeCount/60 Ftm_Pwm_Ip_SetExtDeadtimeValue/63 Ftm_Pwm_Ip_SetDeadtimeCount/60 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13/217 DevAssert/0 Ftm_Pwm_Ip_ValidateParamDeadTime/150 DevAssert/0 Ftm_Pwm_Ip_GetDualChnDeadtimeCmd/108 DevAssert/0 Ftm_Pwm_Ip_GetDualChnCompCmd/107 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_SyncUpdate/193 (Ftm_Pwm_Ip_SyncUpdate) @06b73a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12/216 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12/215 DevAssert/0 
Ftm_Pwm_Ip_EnableTrigger/192 (Ftm_Pwm_Ip_EnableTrigger) @06b737e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11/214 Ftm_Pwm_Ip_EnableTriggerMask/68 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11/213 DevAssert/0 
Ftm_Pwm_Ip_DisableTrigger/191 (Ftm_Pwm_Ip_DisableTrigger) @06b73540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10/212 Ftm_Pwm_Ip_DisableTriggerMask/67 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10/211 DevAssert/0 
Ftm_Pwm_Ip_SetDutyPhaseShift/190 (Ftm_Pwm_Ip_SetDutyPhaseShift) @06b732a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (read)Ftm_Pwm_Ip_Period/132 (read)Ftm_Pwm_Ip_PhaseShift/134 (write)Ftm_Pwm_Ip_DutyCycle/133 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_CalculatePhaseShift/151 DevAssert/0 DevAssert/0 Ftm_Pwm_Ip_GetChannelMode/109 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_SetPhaseShift/189 (Ftm_Pwm_Ip_SetPhaseShift) @06b73000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (write)Ftm_Pwm_Ip_DutyCycle/133 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09/210 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_GetCpwms/6 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09/209 DevAssert/0 DevAssert/0 Ftm_Pwm_Ip_GetChannelMode/109 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_UnMaskOutputChannels/188 (Ftm_Pwm_Ip_UnMaskOutputChannels) @06b69b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08/208 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_ClearOutmaskReg/51 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08/207 DevAssert/0 
Ftm_Pwm_Ip_MaskOutputChannels/187 (Ftm_Pwm_Ip_MaskOutputChannels) @06b69620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07/206 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetOutmaskReg/50 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07/205 DevAssert/0 
Ftm_Pwm_Ip_FastUpdatePwmDuty/186 (Ftm_Pwm_Ip_FastUpdatePwmDuty) @06b690e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_DutyCycle/133 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnCountVal/32 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_GetChannelState/185 (Ftm_Pwm_Ip_GetChannelState) @06b69d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_DutyCycle/133 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_ResetCounter/184 (Ftm_Pwm_Ip_ResetCounter) @06b69a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd/82 DevAssert/0 
Ftm_Pwm_Ip_SetClockMode/183 (Ftm_Pwm_Ip_SetClockMode) @06b697e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_AlternateClockPrescaler/145 (read)Ftm_Pwm_Ip_ClockPrescaler/144 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetClockPs/1 Ftm_Pwm_Ip_SetClockPs/1 DevAssert/0 
Ftm_Pwm_Ip_SetPowerState/182 (Ftm_Pwm_Ip_SetPowerState) @06b69540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_ClockSource/143 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_SetClockSource/3 Ftm_Pwm_Ip_SetClockSource/3 DevAssert/0 
Ftm_Pwm_Ip_EnableNotification/181 (Ftm_Pwm_Ip_EnableNotification) @06b692a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_DutyCycle/133 (read)Ftm_Pwm_Ip_Period/132 (read)Ftm_Pwm_Ip_DutyCycle/133 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05/204 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 Ftm_Pwm_Ip_UpdateNotificationState/154 Ftm_Pwm_Ip_GetChannelMode/109 Ftm_Pwm_Ip_ClearTimerOverflow/14 Ftm_Pwm_Ip_ClearChnEventFlag/29 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05/203 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_SetNormalNotificationCase/180 (Ftm_Pwm_Ip_SetNormalNotificationCase) @06b69000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_EnableNotification/181 
  Calls: Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_ClearChnEventFlag/29 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_GetChannelMode/109 
Ftm_Pwm_Ip_DisableNotification/179 (Ftm_Pwm_Ip_DisableNotification) @06b597e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04/202 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_GetChannelMode/109 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04/201 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_GetOutputState/178 (Ftm_Pwm_Ip_GetOutputState) @06b592a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03/200 Ftm_Pwm_Ip_GetChOutputValue/31 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03/199 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_UpdatePwmPeriod/177 (Ftm_Pwm_Ip_UpdatePwmPeriod) @06b59ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_GetCpwms/6 DevAssert/0 
Ftm_Pwm_Ip_UpdatePwmChannel/176 (Ftm_Pwm_Ip_UpdatePwmChannel) @06b59c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_GetCpwms/6 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_SetChnCountVal/32 Ftm_Pwm_Ip_GetClockSource/4 Ftm_Pwm_Ip_GetDualChnMCombineCmd/59 Ftm_Pwm_Ip_GetDualChnCombineCmd/54 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_SwOutputControl/175 (Ftm_Pwm_Ip_SwOutputControl) @06b599a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_ChannelState/138 (read)Ftm_Pwm_Ip_DutyCycle/133 (write)Ftm_Pwm_Ip_ChannelState/138 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_DeInitChannel/169 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SoftwareOutputControl/98 Ftm_Pwm_Ip_GetPolInstance/106 Ftm_Pwm_Ip_GetSoftwareOutputControl/105 Ftm_Pwm_Ip_SetOutputForForcedChannel/149 Ftm_Pwm_Ip_SetOutputForIdleChannel/148 DevAssert/0 DevAssert/0 Ftm_Pwm_Ip_GetChannelMode/109 
Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 (Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty) @06b59700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_ChannelState/138 (read)Ftm_Pwm_Ip_ChannelState/138 (write)Ftm_Pwm_Ip_Period/132 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01/198 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_UpdatePwmPeriod/177 Ftm_Pwm_Ip_SwOutputControl/175 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01/197 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel) @06b59460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_DutyCycle/133 (write)Ftm_Pwm_Ip_ChannelState/138 (read)Ftm_Pwm_Ip_ChannelState/138 (write)Ftm_Pwm_Ip_PhaseShift/134 (read)Ftm_Pwm_Ip_PhaseShift/134 (read)Ftm_Pwm_Ip_PhaseShift/134 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 Ftm_Pwm_Ip_InitChannel/167 
  Calls: SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00/196 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_CalculatePhaseShift/151 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_CheckNotification/161 Ftm_Pwm_Ip_GetChannelMode/109 SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00/195 
Ftm_Pwm_Ip_DeInit/172 (Ftm_Pwm_Ip_DeInit) @06b591c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_ChannelState/138 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_Reset/111 DevAssert/0 
Ftm_Pwm_Ip_Init/171 (Ftm_Pwm_Ip_Init) @06b4de00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Ftm_Pwm_Ip_FaultCheck/131 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_InitChFault/170 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitInstance/163 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_InitChFault/170 (Ftm_Pwm_Ip_InitChFault) @06b4dd20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_pFaultIrqCallback/135 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_Init/171 
  Calls: Ftm_Pwm_Ip_SetFaultInputEn/128 Ftm_Pwm_Ip_SetFaultFilterEn/129 Ftm_Pwm_Ip_SetFaultPolarity/127 
Ftm_Pwm_Ip_DeInitChannel/169 (Ftm_Pwm_Ip_DeInitChannel) @06b4da80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_IdleState/141 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_DeInit/172 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnOutputMask/49 Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd/84 Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd/45 Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_DisableCmpIrq/153 DevAssert/0 
Ftm_Pwm_Ip_DeInitInstance/168 (Ftm_Pwm_Ip_DeInitInstance) @06b4d7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_DeInit/172 
  Calls: Ftm_Pwm_Ip_SetCounter/17 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_SetBdmMode/73 Ftm_Pwm_Ip_SetDeadtimeCount/60 Ftm_Pwm_Ip_SetDeadtimePrescaler/61 Ftm_Pwm_Ip_SetExtDeadtimeValue/63 Ftm_Pwm_Ip_SetClockSource/3 DevAssert/0 
Ftm_Pwm_Ip_InitChannel/167 (Ftm_Pwm_Ip_InitChannel) @06b4d540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_DutyCycle/133 (write)Ftm_Pwm_Ip_IdleState/141 (write)Ftm_Pwm_Ip_Polarity/142 (write)Ftm_Pwm_Ip_DutyCycle/133 (read)Ftm_Pwm_Ip_ChannelState/138 (write)Ftm_Pwm_Ip_aChIrqCallbacks/136 (write)Ftm_Pwm_Ip_aChIrqCallbacks/136 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_Init/171 
  Calls: Ftm_Pwm_Ip_EnablePwmChannelOutputs/15 Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 Ftm_Pwm_Ip_SetChnMSBAMode/25 Ftm_Pwm_Ip_SetChnEdgeLevel/24 Ftm_Pwm_Ip_SetChnOutputInitStateCmd/48 Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 DevAssert/0 DevAssert/0 DevAssert/0 DevAssert/0 Ftm_Pwm_Ip_GetCpwms/6 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 (Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl) @06b4d2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_InitChannel/167 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnSoftwareCtrlVal/95 Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd/97 Ftm_Pwm_Ip_SetPwmLoadChnSelCmd/99 Ftm_Pwm_Ip_SetChnTriggerCmd/112 
Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 (Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode) @06b4d000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_InitChannel/167 
  Calls: Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_SetDualChnMCombineCmd/58 Ftm_Pwm_Ip_SetDualChnCombineCmd/53 Ftm_Pwm_Ip_SetChnEdgeLevel/24 Ftm_Pwm_Ip_SetDualChnCombineCmd/53 Ftm_Pwm_Ip_SetChnEdgeLevel/24 Ftm_Pwm_Ip_SetDualChFaultCtr/114 Ftm_Pwm_Ip_SetDualChnPwmSyncCmd/57 
Ftm_Pwm_Ip_InitInstanceStart/164 (Ftm_Pwm_Ip_InitInstanceStart) @06b3de00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_Init/171 
  Calls: Ftm_Pwm_Ip_SetClockSource/3 Ftm_Pwm_Ip_SetClockPs/1 Ftm_Pwm_Ip_SetPwmSyncMode/41 Ftm_Pwm_Ip_Enable/38 Ftm_Pwm_Ip_SetFaultInterruptEnable/115 Ftm_Pwm_Ip_SetFaultControlMode/113 Ftm_Pwm_Ip_SetFaultOutputState/126 Ftm_Pwm_Ip_SetFaultFilterValue/125 DevAssert/0 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_InitInstance/163 (Ftm_Pwm_Ip_InitInstance) @06b3db60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (write)Ftm_Pwm_Ip_ClockSource/143 (write)Ftm_Pwm_Ip_ClockPrescaler/144 (write)Ftm_Pwm_Ip_AlternateClockPrescaler/145 (write)Ftm_Pwm_Ip_pOverflowIrqCallback/137 (write)Ftm_Pwm_Ip_pOverflowIrqCallback/137 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_Init/171 
  Calls: Ftm_Pwm_Ip_SetInitTriggerMode/76 Ftm_Pwm_Ip_SetInitTriggerCmd/64 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_SetMod/19 Ftm_Pwm_Ip_SetCounterInitVal/34 Ftm_Pwm_Ip_UpdateSync/158 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 Ftm_Pwm_Ip_SetSimOutputBufferEn/130 DevAssert/0 DevAssert/0 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_ResetAndFirstConfigure/162 (Ftm_Pwm_Ip_ResetAndFirstConfigure) @06b3d8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: Ftm_Pwm_Ip_SetDeadtimePrescaler/61 Ftm_Pwm_Ip_SetExtDeadtimeValue/63 Ftm_Pwm_Ip_SetDeadtimeCount/60 Ftm_Pwm_Ip_SetBdmMode/73 Ftm_Pwm_Ip_Enable/38 Ftm_Pwm_Ip_SetCpwms/5 Ftm_Pwm_Ip_ClearTimerOverflow/14 Ftm_Pwm_Ip_SetClockSource/3 Ftm_Pwm_Ip_Reset/111 
Ftm_Pwm_Ip_CheckNotification/161 (Ftm_Pwm_Ip_CheckNotification) @06b3d620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_Period/132 (read)Ftm_Pwm_Ip_DutyCycle/133 (read)Ftm_Pwm_Ip_DutyCycle/133 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 
  Calls: Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_SpecialCheckNotification/159 
Ftm_Pwm_Ip_NormalCheckNotification/160 (Ftm_Pwm_Ip_NormalCheckNotification) @06b3d380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_CheckNotification/161 
  Calls: Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_GetChannelMode/109 
Ftm_Pwm_Ip_SpecialCheckNotification/159 (Ftm_Pwm_Ip_SpecialCheckNotification) @06b3d0e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_CheckNotification/161 
  Calls: Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_GetChannelMode/109 
Ftm_Pwm_Ip_UpdateSync/158 (Ftm_Pwm_Ip_UpdateSync) @0697ab60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: Ftm_Pwm_Ip_ConfigureSyncType/157 Ftm_Pwm_Ip_SetLoadFreq/72 Ftm_Pwm_Ip_SetHalfCycleCmd/100 Ftm_Pwm_Ip_SetMinLoadingCmd/42 Ftm_Pwm_Ip_SetMaxLoadingCmd/43 Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd/77 Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc/46 Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc/46 Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc/46 Ftm_Pwm_Ip_SetPwmSyncModeCmd/81 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_ConfigureSyncType/157 (Ftm_Pwm_Ip_ConfigureSyncType) @0697a620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd/78 Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd/80 Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd/79 Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd/45 
Ftm_Pwm_Ip_ConfigureSWandHWSync/156 (Ftm_Pwm_Ip_ConfigureSWandHWSync) @0697a0e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd/87 Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd/82 Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd/88 Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd/83 Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd/90 Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd/86 Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd/90 Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd/85 Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd/89 Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd/84 Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd/87 Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd/82 Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd/88 Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd/83 Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd/90 Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd/86 Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd/90 Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd/85 Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd/89 Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd/84 
Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (Ftm_Pwm_Ip_UpdateNotificationStateCombine) @0697ad20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_Polarity/142 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_Polarity/142 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_EnableNotification/181 
  Calls: 
Ftm_Pwm_Ip_UpdateNotificationState/154 (Ftm_Pwm_Ip_UpdateNotificationState) @0697aa80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_Polarity/142 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_Polarity/142 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_EnableNotification/181 
  Calls: 
Ftm_Pwm_Ip_DisableCmpIrq/153 (Ftm_Pwm_Ip_DisableCmpIrq) @0697a7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_SpecialCheckNotification/159 Ftm_Pwm_Ip_SpecialCheckNotification/159 Ftm_Pwm_Ip_SpecialCheckNotification/159 Ftm_Pwm_Ip_SetOutputForForcedChannel/149 Ftm_Pwm_Ip_SetOutputForIdleChannel/148 
  Calls: Ftm_Pwm_Ip_ClearTimerOverflow/14 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_ClearChnEventFlag/29 Ftm_Pwm_Ip_UpdateChnInt/27 
Ftm_Pwm_Ip_InitPair/152 (Ftm_Pwm_Ip_InitPair) @0697a540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_PhaseShift/134 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 
  Calls: Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 Ftm_Pwm_Ip_SetChnTriggerCmd/112 Ftm_Pwm_Ip_SetDualChnDeadtimeCmd/56 Ftm_Pwm_Ip_SetDualChnPwmSyncCmd/57 Ftm_Pwm_Ip_EnablePwmChannelOutputs/15 Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 Ftm_Pwm_Ip_GetChnOutputPolarity/70 Ftm_Pwm_Ip_SetDualChnCompCmd/55 DevAssert/0 DevAssert/0 DevAssert/0 DevAssert/0 
Ftm_Pwm_Ip_CalculatePhaseShift/151 (Ftm_Pwm_Ip_CalculatePhaseShift) @0697a2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_Period/132 (read)Ftm_Pwm_Ip_Period/132 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 
  Calls: 
Ftm_Pwm_Ip_ValidateParamDeadTime/150 (Ftm_Pwm_Ip_ValidateParamDeadTime) @0697a000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_Period/132 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 
  Calls: Ftm_Pwm_Ip_GetDeadtimePrescaler/62 Ftm_Pwm_Ip_GetClockPs/2 Ftm_Pwm_Ip_GetChnCountVal/33 Ftm_Pwm_Ip_GetChnCountVal/33 
Ftm_Pwm_Ip_SetOutputForForcedChannel/149 (Ftm_Pwm_Ip_SetOutputForForcedChannel) @06972e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_SwOutputControl/175 
  Calls: Ftm_Pwm_Ip_UpdateChnInt/27 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_DisableCmpIrq/153 
Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (Ftm_Pwm_Ip_SetOutputForIdleChannel) @06972b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Ftm_Pwm_Ip_aFtmBase/146 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)Ftm_Pwm_Ip_NotifIrq/140 (read)Ftm_Pwm_Ip_NotifIrq/140 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Ftm_Pwm_Ip_SwOutputControl/175 
  Calls: Ftm_Pwm_Ip_DisableCmpIrq/153 Ftm_Pwm_Ip_SetTimerOverflowInt/11 Ftm_Pwm_Ip_IsEnableFaultInput/124 Ftm_Pwm_Ip_IsEnableFaultControlMode/123 
Ftm_Pwm_Ip_aSimBase/147 (Ftm_Pwm_Ip_aSimBase) @06abf1b0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Ftm_Pwm_Ip_aFtmBase/146 (Ftm_Pwm_Ip_aFtmBase) @06abf120
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_InitPair/152 (read)Ftm_Pwm_Ip_DisableCmpIrq/153 (read)Ftm_Pwm_Ip_EnableTrigger/192 (read)Ftm_Pwm_Ip_SyncUpdate/193 (read)Ftm_Pwm_Ip_ValidateParamDeadTime/150 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (read)Ftm_Pwm_Ip_SetOutputForForcedChannel/149 (read)Ftm_Pwm_Ip_ConfigureSWandHWSync/156 (read)Ftm_Pwm_Ip_ConfigureSyncType/157 (read)Ftm_Pwm_Ip_UpdateSync/158 (read)Ftm_Pwm_Ip_SpecialCheckNotification/159 (read)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_ResetAndFirstConfigure/162 (read)Ftm_Pwm_Ip_InitInstance/163 (read)Ftm_Pwm_Ip_InitInstanceStart/164 (read)Ftm_Pwm_Ip_UpdatePwmChannel/176 (read)Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 (read)Ftm_Pwm_Ip_InitChFault/170 (read)Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 (read)Ftm_Pwm_Ip_SwOutputControl/175 (read)Ftm_Pwm_Ip_DeInit/172 (read)Ftm_Pwm_Ip_InitChannel/167 (read)Ftm_Pwm_Ip_DeInitInstance/168 (read)Ftm_Pwm_Ip_DeInitChannel/169 (read)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (read)Ftm_Pwm_Ip_UpdatePwmPeriod/177 (read)Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 (read)Ftm_Pwm_Ip_GetOutputState/178 (read)Ftm_Pwm_Ip_DisableNotification/179 (read)Ftm_Pwm_Ip_SetNormalNotificationCase/180 (read)Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_SetPowerState/182 (read)Ftm_Pwm_Ip_SetClockMode/183 (read)Ftm_Pwm_Ip_ResetCounter/184 (read)Ftm_Pwm_Ip_FastUpdatePwmDuty/186 (read)Ftm_Pwm_Ip_MaskOutputChannels/187 (read)Ftm_Pwm_Ip_UnMaskOutputChannels/188 (read)Ftm_Pwm_Ip_SetPhaseShift/189 (read)Ftm_Pwm_Ip_SetDutyPhaseShift/190 (read)Ftm_Pwm_Ip_DisableTrigger/191 (read)Ftm_Pwm_Ip_SetChannelDeadTime/194 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
Ftm_Pwm_Ip_AlternateClockPrescaler/145 (Ftm_Pwm_Ip_AlternateClockPrescaler) @06abf090
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_InitInstance/163 (write)Ftm_Pwm_Ip_SetClockMode/183 (read)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_ClockPrescaler/144 (Ftm_Pwm_Ip_ClockPrescaler) @06abf000
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_InitInstance/163 (write)Ftm_Pwm_Ip_SetClockMode/183 (read)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_ClockSource/143 (Ftm_Pwm_Ip_ClockSource) @06ab8f30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_InitInstance/163 (write)Ftm_Pwm_Ip_SetPowerState/182 (read)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_Polarity/142 (Ftm_Pwm_Ip_Polarity) @06ab8ea0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_InitChannel/167 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_IdleState/141 (Ftm_Pwm_Ip_IdleState) @06ab8e10
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_DeInitChannel/169 (read)Ftm_Pwm_Ip_InitChannel/167 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_NotifIrq/140 (Ftm_Pwm_Ip_NotifIrq) @06ab8d80
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_InitChannel/167 (write)Ftm_Pwm_Ip_NormalCheckNotification/160 (write)Ftm_Pwm_Ip_DisableNotification/179 (write)Ftm_Pwm_Ip_DisableNotification/179 (write)Ftm_Pwm_Ip_SetNormalNotificationCase/180 (read)Ftm_Pwm_Ip_SetNormalNotificationCase/180 (read)Ftm_Pwm_Ip_DisableCmpIrq/153 (read)Ftm_Pwm_Ip_DisableNotification/179 (write)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_DeInitChannel/169 (write)Ftm_Pwm_Ip_SpecialCheckNotification/159 (write)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_DeInitChannel/169 (write)Ftm_Pwm_Ip_SpecialCheckNotification/159 (read)Ftm_Pwm_Ip_SetNormalNotificationCase/180 (read)Ftm_Pwm_Ip_SetNormalNotificationCase/180 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (write)Ftm_Pwm_Ip_SpecialCheckNotification/159 (write)Ftm_Pwm_Ip_SpecialCheckNotification/159 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_SpecialCheckNotification/159 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (read)Ftm_Pwm_Ip_SetOutputForIdleChannel/148 (write)Ftm_Pwm_Ip_SetOutputForForcedChannel/149 (read)Ftm_Pwm_Ip_SetOutputForForcedChannel/149 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (write)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (write)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (write)Ftm_Pwm_Ip_UpdateNotificationState/154 (write)Ftm_Pwm_Ip_UpdateNotificationState/154 (read)Ftm_Pwm_Ip_UpdateNotificationState/154 (write)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_SpecialCheckNotification/159 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (write)Ftm_Pwm_Ip_UpdateNotificationStateCombine/155 (read)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_NormalCheckNotification/160 (write)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_NormalCheckNotification/160 (read)Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_EnableNotification/181 (write)Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_EnableNotification/181 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_PreviousChannelState/139 (Ftm_Pwm_Ip_PreviousChannelState) @06ab8cf0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_ChannelState/138 (Ftm_Pwm_Ip_ChannelState) @06ab8c60
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_DeInit/172 (read)Ftm_Pwm_Ip_InitChannel/167 (write)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (read)Ftm_Pwm_Ip_SwOutputControl/175 (read)Ftm_Pwm_Ip_SwOutputControl/175 (read)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (write)Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 (read)Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_pOverflowIrqCallback/137 (Ftm_Pwm_Ip_pOverflowIrqCallback) @06ab8bd0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_InitInstance/163 (write)Ftm_Pwm_Ip_InitInstance/163 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_aChIrqCallbacks/136 (Ftm_Pwm_Ip_aChIrqCallbacks) @06ab8b40
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_InitChannel/167 (write)Ftm_Pwm_Ip_InitChannel/167 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_pFaultIrqCallback/135 (Ftm_Pwm_Ip_pFaultIrqCallback) @06ab8ab0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_InitChFault/170 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_PhaseShift/134 (Ftm_Pwm_Ip_PhaseShift) @06ab8a20
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_InitPair/152 (write)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (read)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (read)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (read)Ftm_Pwm_Ip_SetDutyPhaseShift/190 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_DutyCycle/133 (Ftm_Pwm_Ip_DutyCycle) @06ab8990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Ftm_Pwm_Ip_GetChannelState/185 (read)Ftm_Pwm_Ip_FastUpdatePwmDuty/186 (write)Ftm_Pwm_Ip_InitChannel/167 (write)Ftm_Pwm_Ip_SwOutputControl/175 (write)Ftm_Pwm_Ip_CheckNotification/161 (read)Ftm_Pwm_Ip_SetPhaseShift/189 (write)Ftm_Pwm_Ip_CheckNotification/161 (read)Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 (write)Ftm_Pwm_Ip_InitChannel/167 (read)Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_SetDutyPhaseShift/190 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_Period/132 (Ftm_Pwm_Ip_Period) @06ab8900
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_EnableNotification/181 (read)Ftm_Pwm_Ip_CalculatePhaseShift/151 (read)Ftm_Pwm_Ip_SetPhaseShift/189 (write)Ftm_Pwm_Ip_ValidateParamDeadTime/150 (read)Ftm_Pwm_Ip_CalculatePhaseShift/151 (read)Ftm_Pwm_Ip_UpdatePwmChannel/176 (read)Ftm_Pwm_Ip_CheckNotification/161 (read)Ftm_Pwm_Ip_InitInstance/163 (write)Ftm_Pwm_Ip_UpdatePwmPeriod/177 (write)Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 (write)Ftm_Pwm_Ip_SetDutyPhaseShift/190 (read)Ftm_Pwm_Ip_SetDutyPhaseShift/190 (read)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_FaultCheck/131 (Ftm_Pwm_Ip_FaultCheck) @06ab8870
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Ftm_Pwm_Ip_Init/171 (write)
  Availability: available
  Varpool flags:
Ftm_Pwm_Ip_SetSimOutputBufferEn/130 (Ftm_Pwm_Ip_SetSimOutputBufferEn) @068d38c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: 
Ftm_Pwm_Ip_SetFaultFilterEn/129 (Ftm_Pwm_Ip_SetFaultFilterEn) @068d3620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChFault/170 
  Calls: 
Ftm_Pwm_Ip_SetFaultInputEn/128 (Ftm_Pwm_Ip_SetFaultInputEn) @068d3380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChFault/170 
  Calls: 
Ftm_Pwm_Ip_SetFaultPolarity/127 (Ftm_Pwm_Ip_SetFaultPolarity) @068d30e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChFault/170 
  Calls: 
Ftm_Pwm_Ip_SetFaultOutputState/126 (Ftm_Pwm_Ip_SetFaultOutputState) @068cee00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
Ftm_Pwm_Ip_SetFaultFilterValue/125 (Ftm_Pwm_Ip_SetFaultFilterValue) @068ceb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
Ftm_Pwm_Ip_IsEnableFaultInput/124 (Ftm_Pwm_Ip_IsEnableFaultInput) @068ce7e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetOutputForIdleChannel/148 
  Calls: 
Ftm_Pwm_Ip_IsEnableFaultControlMode/123 (Ftm_Pwm_Ip_IsEnableFaultControlMode) @068ce540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetOutputForIdleChannel/148 
  Calls: 
Ftm_Pwm_Ip_SetFaultInterruptEnable/115 (Ftm_Pwm_Ip_SetFaultInterruptEnable) @068c5ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
Ftm_Pwm_Ip_SetDualChFaultCtr/114 (Ftm_Pwm_Ip_SetDualChFaultCtr) @068c5c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 
  Calls: 
Ftm_Pwm_Ip_SetFaultControlMode/113 (Ftm_Pwm_Ip_SetFaultControlMode) @068c59a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
Ftm_Pwm_Ip_SetChnTriggerCmd/112 (Ftm_Pwm_Ip_SetChnTriggerCmd) @068c5380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_Reset/111 (Ftm_Pwm_Ip_Reset) @068c50e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInit/172 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: Ftm_Pwm_Ip_UpdateWriteProtection/110 
Ftm_Pwm_Ip_UpdateWriteProtection/110 (Ftm_Pwm_Ip_UpdateWriteProtection) @068bdb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_Reset/111 
  Calls: 
Ftm_Pwm_Ip_GetChannelMode/109 (Ftm_Pwm_Ip_GetChannelMode) @068bd700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel/173 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_SpecialCheckNotification/159 
  Calls: Ftm_Pwm_Ip_GetCpwms/6 Ftm_Pwm_Ip_GetChnMode/26 Ftm_Pwm_Ip_GetChnEdgeLevel/23 
Ftm_Pwm_Ip_GetDualChnDeadtimeCmd/108 (Ftm_Pwm_Ip_GetDualChnDeadtimeCmd) @068bd460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 
  Calls: 
Ftm_Pwm_Ip_GetDualChnCompCmd/107 (Ftm_Pwm_Ip_GetDualChnCompCmd) @068bd1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 
  Calls: 
Ftm_Pwm_Ip_GetPolInstance/106 (Ftm_Pwm_Ip_GetPolInstance) @068b8ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SwOutputControl/175 
  Calls: 
Ftm_Pwm_Ip_GetSoftwareOutputControl/105 (Ftm_Pwm_Ip_GetSoftwareOutputControl) @068b8c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SwOutputControl/175 
  Calls: 
Ftm_Pwm_Ip_SetHalfCycleCmd/100 (Ftm_Pwm_Ip_SetHalfCycleCmd) @068b3ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetPwmLoadChnSelCmd/99 (Ftm_Pwm_Ip_SetPwmLoadChnSelCmd) @068b3c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 
  Calls: 
Ftm_Pwm_Ip_SoftwareOutputControl/98 (Ftm_Pwm_Ip_SoftwareOutputControl) @068b39a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SwOutputControl/175 
  Calls: 
Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd/97 (Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd) @068b3700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 
  Calls: 
Ftm_Pwm_Ip_SetChnSoftwareCtrlVal/95 (Ftm_Pwm_Ip_SetChnSoftwareCtrlVal) @068b31c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 
  Calls: 
Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd/90 (Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd) @068af460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd/89 (Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd) @068af1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd/88 (Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd) @068abee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd/87 (Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd) @068abc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd/86 (Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd) @068ab9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd/85 (Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd) @068ab700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd/84 (Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd) @068ab460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd/83 (Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd) @068ab1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd/82 (Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd) @068a6ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ResetCounter/184 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 Ftm_Pwm_Ip_ConfigureSWandHWSync/156 
  Calls: 
Ftm_Pwm_Ip_SetPwmSyncModeCmd/81 (Ftm_Pwm_Ip_SetPwmSyncModeCmd) @068a6c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd/80 (Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd) @068a69a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSyncType/157 
  Calls: 
Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd/79 (Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd) @068a6700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSyncType/157 
  Calls: 
Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd/78 (Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd) @068a6460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigureSyncType/157 
  Calls: 
Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd/77 (Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd) @068a61c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetInitTriggerMode/76 (Ftm_Pwm_Ip_SetInitTriggerMode) @068a1ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: 
Ftm_Pwm_Ip_SetBdmMode/73 (Ftm_Pwm_Ip_SetBdmMode) @068a1620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_SetLoadFreq/72 (Ftm_Pwm_Ip_SetLoadFreq) @068a12a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_GetChnOutputPolarity/70 (Ftm_Pwm_Ip_GetChnOutputPolarity) @0689dc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_SetChnOutputPolarityCmd/69 (Ftm_Pwm_Ip_SetChnOutputPolarityCmd) @0689d9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_EnableTriggerMask/68 (Ftm_Pwm_Ip_EnableTriggerMask) @0689d700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_EnableTrigger/192 
  Calls: 
Ftm_Pwm_Ip_DisableTriggerMask/67 (Ftm_Pwm_Ip_DisableTriggerMask) @0689d460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DisableTrigger/191 
  Calls: 
Ftm_Pwm_Ip_SetInitTriggerCmd/64 (Ftm_Pwm_Ip_SetInitTriggerCmd) @0689ab60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: 
Ftm_Pwm_Ip_SetExtDeadtimeValue/63 (Ftm_Pwm_Ip_SetExtDeadtimeValue) @0689a8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_GetDeadtimePrescaler/62 (Ftm_Pwm_Ip_GetDeadtimePrescaler) @0689a540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ValidateParamDeadTime/150 
  Calls: 
Ftm_Pwm_Ip_SetDeadtimePrescaler/61 (Ftm_Pwm_Ip_SetDeadtimePrescaler) @0689a2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_SetDeadtimeCount/60 (Ftm_Pwm_Ip_SetDeadtimeCount) @06894ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_GetDualChnMCombineCmd/59 (Ftm_Pwm_Ip_GetDualChnMCombineCmd) @06894b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdatePwmChannel/176 
  Calls: 
Ftm_Pwm_Ip_SetDualChnMCombineCmd/58 (Ftm_Pwm_Ip_SetDualChnMCombineCmd) @068948c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 
  Calls: 
Ftm_Pwm_Ip_SetDualChnPwmSyncCmd/57 (Ftm_Pwm_Ip_SetDualChnPwmSyncCmd) @06894620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_SetDualChnDeadtimeCmd/56 (Ftm_Pwm_Ip_SetDualChnDeadtimeCmd) @06894380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_SetDualChnCompCmd/55 (Ftm_Pwm_Ip_SetDualChnCompCmd) @068940e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_GetDualChnCombineCmd/54 (Ftm_Pwm_Ip_GetDualChnCombineCmd) @0688ee00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdatePwmChannel/176 
  Calls: 
Ftm_Pwm_Ip_SetDualChnCombineCmd/53 (Ftm_Pwm_Ip_SetDualChnCombineCmd) @0688eb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 
  Calls: 
Ftm_Pwm_Ip_ClearOutmaskReg/51 (Ftm_Pwm_Ip_ClearOutmaskReg) @0688e620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UnMaskOutputChannels/188 
  Calls: 
Ftm_Pwm_Ip_SetOutmaskReg/50 (Ftm_Pwm_Ip_SetOutmaskReg) @0688e380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_MaskOutputChannels/187 
  Calls: 
Ftm_Pwm_Ip_SetChnOutputMask/49 (Ftm_Pwm_Ip_SetChnOutputMask) @0688e0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitChannel/169 
  Calls: 
Ftm_Pwm_Ip_SetChnOutputInitStateCmd/48 (Ftm_Pwm_Ip_SetChnOutputInitStateCmd) @0688ae00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChannel/167 
  Calls: 
Ftm_Pwm_Ip_SetSoftwareTriggerCmd/47 (Ftm_Pwm_Ip_SetSoftwareTriggerCmd) @0688ab60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SyncUpdate/193 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_UnMaskOutputChannels/188 Ftm_Pwm_Ip_MaskOutputChannels/187 Ftm_Pwm_Ip_FastUpdatePwmDuty/186 Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 Ftm_Pwm_Ip_UpdatePwmPeriod/177 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl/166 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc/46 (Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc) @0688a8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 Ftm_Pwm_Ip_UpdateSync/158 Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd/45 (Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd) @0688a620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_ConfigureSyncType/157 
  Calls: 
Ftm_Pwm_Ip_SetMaxLoadingCmd/43 (Ftm_Pwm_Ip_SetMaxLoadingCmd) @0688a0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetMinLoadingCmd/42 (Ftm_Pwm_Ip_SetMinLoadingCmd) @06884e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdateSync/158 
  Calls: 
Ftm_Pwm_Ip_SetPwmSyncMode/41 (Ftm_Pwm_Ip_SetPwmSyncMode) @06884b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
Ftm_Pwm_Ip_Enable/38 (Ftm_Pwm_Ip_Enable) @06884380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_SetCounterInitVal/34 (Ftm_Pwm_Ip_SetCounterInitVal) @068828c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitInstance/163 
  Calls: 
Ftm_Pwm_Ip_GetChnCountVal/33 (Ftm_Pwm_Ip_GetChnCountVal) @06882540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ValidateParamDeadTime/150 Ftm_Pwm_Ip_ValidateParamDeadTime/150 
  Calls: 
Ftm_Pwm_Ip_SetChnCountVal/32 (Ftm_Pwm_Ip_SetChnCountVal) @068822a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_FastUpdatePwmDuty/186 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 
  Calls: 
Ftm_Pwm_Ip_GetChOutputValue/31 (Ftm_Pwm_Ip_GetChOutputValue) @06882000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_GetOutputState/178 
  Calls: 
Ftm_Pwm_Ip_ClearChnEventFlag/29 (Ftm_Pwm_Ip_ClearChnEventFlag) @0687ea80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_DisableCmpIrq/153 
  Calls: 
Ftm_Pwm_Ip_UpdateChnInt/27 (Ftm_Pwm_Ip_UpdateChnInt) @0687e460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_SetOutputForForcedChannel/149 Ftm_Pwm_Ip_DisableCmpIrq/153 
  Calls: 
Ftm_Pwm_Ip_GetChnMode/26 (Ftm_Pwm_Ip_GetChnMode) @0687e1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_GetChannelMode/109 
  Calls: 
Ftm_Pwm_Ip_SetChnMSBAMode/25 (Ftm_Pwm_Ip_SetChnMSBAMode) @0687aee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChannel/167 
  Calls: 
Ftm_Pwm_Ip_SetChnEdgeLevel/24 (Ftm_Pwm_Ip_SetChnEdgeLevel) @0687ac40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode/165 
  Calls: 
Ftm_Pwm_Ip_GetChnEdgeLevel/23 (Ftm_Pwm_Ip_GetChnEdgeLevel) @0687a9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_GetChannelMode/109 
  Calls: 
Ftm_Pwm_Ip_SetMod/19 (Ftm_Pwm_Ip_SetMod) @0682cee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_UpdatePwmPeriod/177 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_InitInstance/163 Ftm_Pwm_Ip_InitInstance/163 
  Calls: 
Ftm_Pwm_Ip_SetCounter/17 (Ftm_Pwm_Ip_SetCounter) @0682c8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_DeInitInstance/168 
  Calls: 
Ftm_Pwm_Ip_EnablePwmChannelOutputs/15 (Ftm_Pwm_Ip_EnablePwmChannelOutputs) @0682c2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_ClearTimerOverflow/14 (Ftm_Pwm_Ip_ClearTimerOverflow) @0682c000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 Ftm_Pwm_Ip_DisableCmpIrq/153 
  Calls: 
Ftm_Pwm_Ip_SetTimerOverflowInt/11 (Ftm_Pwm_Ip_SetTimerOverflowInt) @06828700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetNormalNotificationCase/180 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_NormalCheckNotification/160 Ftm_Pwm_Ip_SetOutputForForcedChannel/149 Ftm_Pwm_Ip_SetOutputForIdleChannel/148 Ftm_Pwm_Ip_DisableCmpIrq/153 
  Calls: 
Ftm_Pwm_Ip_GetCpwms/6 (Ftm_Pwm_Ip_GetCpwms) @068228c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_UpdatePwmPeriod/177 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_GetChannelMode/109 
  Calls: 
Ftm_Pwm_Ip_SetCpwms/5 (Ftm_Pwm_Ip_SetCpwms) @06822620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_GetClockSource/4 (Ftm_Pwm_Ip_GetClockSource) @06822380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_UpdatePwmChannel/176 
  Calls: 
Ftm_Pwm_Ip_SetClockSource/3 (Ftm_Pwm_Ip_SetClockSource) @068220e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetPowerState/182 Ftm_Pwm_Ip_SetPowerState/182 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_ResetAndFirstConfigure/162 
  Calls: 
Ftm_Pwm_Ip_GetClockPs/2 (Ftm_Pwm_Ip_GetClockPs) @067d3e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_ValidateParamDeadTime/150 
  Calls: 
Ftm_Pwm_Ip_SetClockPs/1 (Ftm_Pwm_Ip_SetClockPs) @067d3b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetClockMode/183 Ftm_Pwm_Ip_SetClockMode/183 Ftm_Pwm_Ip_InitInstanceStart/164 
  Calls: 
DevAssert/0 (DevAssert) @066f9e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SetChannelDeadTime/194 Ftm_Pwm_Ip_SyncUpdate/193 Ftm_Pwm_Ip_EnableTrigger/192 Ftm_Pwm_Ip_DisableTrigger/191 Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_SetDutyPhaseShift/190 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_SetPhaseShift/189 Ftm_Pwm_Ip_UnMaskOutputChannels/188 Ftm_Pwm_Ip_MaskOutputChannels/187 Ftm_Pwm_Ip_FastUpdatePwmDuty/186 Ftm_Pwm_Ip_FastUpdatePwmDuty/186 Ftm_Pwm_Ip_GetChannelState/185 Ftm_Pwm_Ip_GetChannelState/185 Ftm_Pwm_Ip_ResetCounter/184 Ftm_Pwm_Ip_SetClockMode/183 Ftm_Pwm_Ip_SetPowerState/182 Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_EnableNotification/181 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_DisableNotification/179 Ftm_Pwm_Ip_GetOutputState/178 Ftm_Pwm_Ip_GetOutputState/178 Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty/174 Ftm_Pwm_Ip_UpdatePwmPeriod/177 Ftm_Pwm_Ip_Init/171 Ftm_Pwm_Ip_Init/171 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_InitChannel/167 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_UpdatePwmChannel/176 Ftm_Pwm_Ip_DeInit/172 Ftm_Pwm_Ip_DeInitChannel/169 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_SwOutputControl/175 Ftm_Pwm_Ip_DeInitInstance/168 Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_InitInstanceStart/164 Ftm_Pwm_Ip_InitInstance/163 Ftm_Pwm_Ip_InitInstance/163 Ftm_Pwm_Ip_InitInstance/163 Ftm_Pwm_Ip_InitInstance/163 Ftm_Pwm_Ip_UpdateSync/158 Ftm_Pwm_Ip_UpdateSync/158 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 Ftm_Pwm_Ip_InitPair/152 
  Calls: 
Ftm_Pwm_Ip_SetChannelDeadTime (uint8 instance, uint8 channel, uint16 deadTimeVal)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  short unsigned int _13;
  unsigned char _14;

  <bb 2> :
  _1 = (int) instance_16(D);
  ftmBase_18 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_16(D) <= 3;
  DevAssert (_2);
  _3 = channel_20(D) <= 7;
  DevAssert (_3);
  _4 = Ftm_Pwm_Ip_GetDualChnCompCmd (ftmBase_18, channel_20(D));
  _5 = _4;
  DevAssert (_5);
  _6 = Ftm_Pwm_Ip_GetDualChnDeadtimeCmd (ftmBase_18, channel_20(D));
  _7 = _6;
  DevAssert (_7);
  _8 = Ftm_Pwm_Ip_ValidateParamDeadTime (instance_16(D), channel_20(D), deadTimeVal_26(D));
  _9 = _8;
  DevAssert (_9);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13 ();
  if (deadTimeVal_26(D) <= 63)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _10 = (unsigned char) deadTimeVal_26(D);
  Ftm_Pwm_Ip_SetDeadtimeCount (ftmBase_18, _10);
  Ftm_Pwm_Ip_SetExtDeadtimeValue (ftmBase_18, 0);
  goto <bb 5>; [INV]

  <bb 4> :
  _11 = (unsigned char) deadTimeVal_26(D);
  _12 = _11 & 63;
  Ftm_Pwm_Ip_SetDeadtimeCount (ftmBase_18, _12);
  _13 = deadTimeVal_26(D) >> 6;
  _14 = (unsigned char) _13;
  Ftm_Pwm_Ip_SetExtDeadtimeValue (ftmBase_18, _14);

  <bb 5> :
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13 ();
  return;

}


Ftm_Pwm_Ip_SyncUpdate (uint8 instance)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12 ();
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_5, 1);
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12 ();
  return;

}


Ftm_Pwm_Ip_EnableTrigger (uint8 instance, uint32 triggerMask)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11 ();
  Ftm_Pwm_Ip_EnableTriggerMask (ftmBase_5, triggerMask_8(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11 ();
  return;

}


Ftm_Pwm_Ip_DisableTrigger (uint8 instance, uint32 triggerMask)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10 ();
  Ftm_Pwm_Ip_DisableTriggerMask (ftmBase_5, triggerMask_8(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10 ();
  return;

}


Ftm_Pwm_Ip_SetDutyPhaseShift (uint8 instance, uint8 channel, uint16 dutyCycle, uint16 phaseShift, boolean syncUpdate)
{
  boolean retVal;
  boolean checkChMode;
  uint16 CnVValue;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase;
  boolean softwareTrigger;
  uint8 pairId;
  uint16 secondEdgeEdge;
  uint16 firstEdge;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  int _5;
  short unsigned int _6;
  int _7;
  short unsigned int _8;
  _Bool _9;
  int _10;
  int _11;
  int _12;
  int _13;

  <bb 2> :
  _1 = (int) instance_18(D);
  ftmBase_20 = Ftm_Pwm_Ip_aFtmBase[_1];
  CnVValue_21 = 0;
  checkChMode_22 = 1;
  retVal_23 = 1;
  _2 = instance_18(D) <= 3;
  DevAssert (_2);
  _3 = channel_25(D) <= 7;
  DevAssert (_3);
  chMode_28 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_20, channel_25(D));
  if (chMode_28 != 34)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (chMode_28 != 98)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (chMode_28 != 97)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (chMode_28 != 33)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  checkChMode_29 = 0;

  <bb 7> :
  # checkChMode_16 = PHI <checkChMode_22(2), checkChMode_22(3), checkChMode_22(4), checkChMode_22(5), checkChMode_29(6)>
  _4 = checkChMode_16;
  DevAssert (_4);
  _5 = (int) instance_18(D);
  _6 = Ftm_Pwm_Ip_Period[_5];
  if (dutyCycle_31(D) != _6)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  if (dutyCycle_31(D) != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  CnVValue_33 = phaseShift_32(D) + dutyCycle_31(D);
  if (CnVValue_33 <= phaseShift_32(D))
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _7 = (int) instance_18(D);
  _8 = Ftm_Pwm_Ip_Period[_7];
  if (CnVValue_33 >= _8)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  retVal_34 = 0;

  <bb 12> :
  # retVal_17 = PHI <retVal_23(7), retVal_23(8), retVal_23(10), retVal_34(11)>
  _9 = retVal_17;
  DevAssert (_9);
  pairId_36 = channel_25(D) >> 1;
  _10 = (int) instance_18(D);
  _11 = (int) pairId_36;
  Ftm_Pwm_Ip_PhaseShift[_10][_11] = phaseShift_32(D);
  _12 = (int) instance_18(D);
  _13 = (int) channel_25(D);
  Ftm_Pwm_Ip_DutyCycle[_12][_13] = dutyCycle_31(D);
  if (phaseShift_32(D) == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  firstEdge_40 = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  firstEdge_39 = phaseShift_32(D);

  <bb 15> :
  # firstEdge_14 = PHI <firstEdge_40(13), firstEdge_39(14)>
  secondEdgeEdge_42 = Ftm_Pwm_Ip_CalculatePhaseShift (instance_18(D), dutyCycle_31(D), phaseShift_32(D));
  if (syncUpdate_43(D) != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  softwareTrigger_45 = 0;
  goto <bb 18>; [INV]

  <bb 17> :
  softwareTrigger_44 = 1;

  <bb 18> :
  # softwareTrigger_15 = PHI <softwareTrigger_45(16), softwareTrigger_44(17)>
  Ftm_Pwm_Ip_UpdatePwmChannel (instance_18(D), channel_25(D), firstEdge_14, secondEdgeEdge_42, softwareTrigger_15);
  return;

}


Ftm_Pwm_Ip_SetPhaseShift (uint8 instance, uint8 channel, uint16 period, uint16 phaseShift, boolean softwareTrigger)
{
  boolean retVal;
  boolean checkChMode;
  uint16 CnVValue;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  uint16 dutyCycleVal;
  uint8 pairChId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  short unsigned int _5;
  _Bool _6;
  int _7;
  <unnamed type> _8;
  short unsigned int _9;
  short unsigned int _10;
  unsigned char _11;
  int _12;
  int _13;
  unsigned char _14;
  unsigned char _15;
  short unsigned int _16;

  <bb 2> :
  _1 = (int) instance_20(D);
  ftmBase_22 = Ftm_Pwm_Ip_aFtmBase[_1];
  CnVValue_23 = 0;
  checkChMode_24 = 1;
  retVal_25 = 1;
  _2 = instance_20(D) <= 3;
  DevAssert (_2);
  _3 = channel_27(D) <= 7;
  DevAssert (_3);
  chMode_30 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_22, channel_27(D));
  if (chMode_30 != 34)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  if (chMode_30 != 98)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (chMode_30 != 97)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (chMode_30 != 33)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  checkChMode_31 = 0;

  <bb 7> :
  # checkChMode_17 = PHI <checkChMode_24(2), checkChMode_24(3), checkChMode_24(4), checkChMode_24(5), checkChMode_31(6)>
  _4 = checkChMode_17;
  DevAssert (_4);
  _5 = period_33(D) >> 1;
  CnVValue_35 = phaseShift_34(D) + _5;
  if (CnVValue_35 <= phaseShift_34(D))
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (period_33(D) <= CnVValue_35)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  retVal_36 = 0;

  <bb 10> :
  # retVal_18 = PHI <retVal_25(8), retVal_36(9)>
  _6 = retVal_18;
  DevAssert (_6);
  pairChId_38 = channel_27(D) >> 1;
  _7 = (int) instance_20(D);
  Ftm_Pwm_Ip_Period[_7] = period_33(D);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09 ();
  _8 = Ftm_Pwm_Ip_GetCpwms (ftmBase_22);
  if (_8 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _9 = period_33(D) >> 1;
  Ftm_Pwm_Ip_SetMod (ftmBase_22, _9);
  goto <bb 13>; [INV]

  <bb 12> :
  _10 = period_33(D) + 65535;
  Ftm_Pwm_Ip_SetMod (ftmBase_22, _10);

  <bb 13> :
  _11 = pairChId_38 * 2;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, _11, phaseShift_34(D));
  dutyCycleVal_45 = period_33(D) >> 1;
  _12 = (int) instance_20(D);
  _13 = (int) channel_27(D);
  Ftm_Pwm_Ip_DutyCycle[_12][_13] = dutyCycleVal_45;
  _14 = pairChId_38 * 2;
  _15 = _14 + 1;
  _16 = phaseShift_34(D) + dutyCycleVal_45;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, _15, _16);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_22, softwareTrigger_48(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09 ();
  return;

}


Ftm_Pwm_Ip_UnMaskOutputChannels (uint8 instance, uint32 channelsMask, boolean softwareTrigger)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08 ();
  Ftm_Pwm_Ip_ClearOutmaskReg (ftmBase_5, channelsMask_8(D));
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_5, softwareTrigger_10(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08 ();
  return;

}


Ftm_Pwm_Ip_MaskOutputChannels (uint8 instance, uint32 channelsMask, boolean softwareTrigger)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07 ();
  Ftm_Pwm_Ip_SetOutmaskReg (ftmBase_5, channelsMask_8(D));
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_5, softwareTrigger_10(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07 ();
  return;

}


Ftm_Pwm_Ip_FastUpdatePwmDuty (uint8 instance, uint8 numberOfChannels, const uint8 * channels, const uint16 * duty, boolean softwareTrigger)
{
  uint8 index;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  sizetype _4;
  const uint8 * _5;
  unsigned char _6;
  unsigned int _7;
  unsigned int _8;
  const uint16 * _9;
  short unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  const uint16 * _13;
  int _14;
  sizetype _15;
  const uint8 * _16;
  unsigned char _17;
  int _18;
  short unsigned int _19;
  unsigned char index.36_20;

  <bb 2> :
  _1 = (int) instance_23(D);
  ftmBase_25 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_23(D) <= 3;
  DevAssert (_2);
  _3 = numberOfChannels_27(D) <= 8;
  DevAssert (_3);
  index_29 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = (sizetype) index_21;
  _5 = channels_32(D) + _4;
  _6 = *_5;
  _7 = (unsigned int) index_21;
  _8 = _7 * 2;
  _9 = duty_33(D) + _8;
  _10 = *_9;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_25, _6, _10);
  _11 = (unsigned int) index_21;
  _12 = _11 * 2;
  _13 = duty_33(D) + _12;
  _14 = (int) instance_23(D);
  _15 = (sizetype) index_21;
  _16 = channels_32(D) + _15;
  _17 = *_16;
  _18 = (int) _17;
  _19 = *_13;
  Ftm_Pwm_Ip_DutyCycle[_14][_18] = _19;
  index.36_20 = index_21;
  index_36 = index.36_20 + 1;

  <bb 4> :
  # index_21 = PHI <index_29(2), index_36(3)>
  if (index_21 < numberOfChannels_27(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_25, softwareTrigger_30(D));
  return;

}


Ftm_Pwm_Ip_GetChannelState (uint8 instance, uint8 channel)
{
  uint16 dutyCycle;
  uint16 D.7457;
  _Bool _1;
  _Bool _2;
  int _3;
  int _4;
  uint16 _11;

  <bb 2> :
  _1 = instance_5(D) <= 3;
  DevAssert (_1);
  _2 = channel_8(D) <= 7;
  DevAssert (_2);
  _3 = (int) instance_5(D);
  _4 = (int) channel_8(D);
  dutyCycle_10 = Ftm_Pwm_Ip_DutyCycle[_3][_4];
  _11 = dutyCycle_10;

  <bb 3> :
<L0>:
  return _11;

}


Ftm_Pwm_Ip_ResetCounter (uint8 instance, boolean isResetCnt)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd (ftmBase_5, isResetCnt_7(D));
  return;

}


Ftm_Pwm_Ip_SetClockMode (uint8 instance, Ftm_Pwm_Ip_PrescalerType prescaler)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  int _3;
  <unnamed type> _4;
  int _5;
  <unnamed type> _6;

  <bb 2> :
  _1 = (int) instance_8(D);
  ftmBase_10 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_8(D) <= 3;
  DevAssert (_2);
  if (prescaler_12(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) instance_8(D);
  _4 = Ftm_Pwm_Ip_AlternateClockPrescaler[_3];
  Ftm_Pwm_Ip_SetClockPs (ftmBase_10, _4);
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = (int) instance_8(D);
  _6 = Ftm_Pwm_Ip_ClockPrescaler[_5];
  Ftm_Pwm_Ip_SetClockPs (ftmBase_10, _6);

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetPowerState (uint8 instance, Ftm_Pwm_Ip_PowerStateType powerState)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  int _3;
  <unnamed type> _4;

  <bb 2> :
  _1 = (int) instance_6(D);
  ftmBase_8 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_6(D) <= 3;
  DevAssert (_2);
  if (powerState_10(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Ftm_Pwm_Ip_SetClockSource (ftmBase_8, 0);
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = (int) instance_6(D);
  _4 = Ftm_Pwm_Ip_ClockSource[_3];
  Ftm_Pwm_Ip_SetClockSource (ftmBase_8, _4);

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_EnableNotification (uint8 instance, uint8 channel, Ftm_Ftm_Ip_EdgeNotifType edgeNotif)
{
  Ftm_Pwm_Ip_ChannelModeType chMode;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  int _11;
  short unsigned int _12;
  int _13;
  short unsigned int _14;
  int _15;
  int _16;
  short unsigned int _17;
  int _18;
  int _19;
  unsigned char _20;
  int _21;
  int _22;
  unsigned char _23;

  <bb 2> :
  _1 = (int) instance_26(D);
  ftmBase_28 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_26(D) <= 3;
  DevAssert (_2);
  _3 = channel_30(D) <= 7;
  DevAssert (_3);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05 ();
  _4 = (int) instance_26(D);
  _5 = (int) channel_30(D);
  _6 = Ftm_Pwm_Ip_NotifIrq[_4][_5];
  _7 = (int) instance_26(D);
  _8 = (int) channel_30(D);
  _9 = _6 & 252;
  Ftm_Pwm_Ip_NotifIrq[_7][_8] = _9;
  Ftm_Pwm_Ip_ClearChnEventFlag (ftmBase_28, channel_30(D));
  Ftm_Pwm_Ip_ClearTimerOverflow (ftmBase_28);
  chMode_37 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_28, channel_30(D));
  if (chMode_37 == 10)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (chMode_37 == 9)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (chMode_37 == 18)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (chMode_37 == 17)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Ftm_Pwm_Ip_UpdateNotificationState (instance_26(D), channel_30(D), edgeNotif_38(D));
  goto <bb 8>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_UpdateNotificationStateCombine (instance_26(D), channel_30(D), edgeNotif_38(D));

  <bb 8> :
  _10 = (int) instance_26(D);
  _11 = (int) channel_30(D);
  _12 = Ftm_Pwm_Ip_DutyCycle[_10][_11];
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _13 = (int) instance_26(D);
  _14 = Ftm_Pwm_Ip_Period[_13];
  _15 = (int) instance_26(D);
  _16 = (int) channel_30(D);
  _17 = Ftm_Pwm_Ip_DutyCycle[_15][_16];
  if (_14 != _17)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Ftm_Pwm_Ip_SetNormalNotificationCase (instance_26(D), channel_30(D));
  goto <bb 12>; [INV]

  <bb 11> :
  _18 = (int) instance_26(D);
  _19 = (int) channel_30(D);
  _20 = Ftm_Pwm_Ip_NotifIrq[_18][_19];
  _21 = (int) instance_26(D);
  _22 = (int) channel_30(D);
  _23 = _20 | 4;
  Ftm_Pwm_Ip_NotifIrq[_21][_22] = _23;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_26(D), channel_30(D));

  <bb 12> :
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05 ();
  return;

}


Ftm_Pwm_Ip_SetNormalNotificationCase (uint8 instance, uint8 channel)
{
  uint8 pairChId;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  int _11;
  unsigned char _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  int _16;
  unsigned char _17;
  int _18;
  int _19;
  unsigned char _20;
  unsigned char _21;
  int _22;
  unsigned char _23;
  unsigned char _24;
  int _25;
  unsigned char _26;
  int _27;
  int _28;
  unsigned char _29;
  unsigned char _30;
  unsigned char _31;
  unsigned char _32;

  <bb 2> :
  _1 = (int) instance_37(D);
  ftmBase_39 = Ftm_Pwm_Ip_aFtmBase[_1];
  pairChId_41 = channel_40(D) >> 1;
  chMode_43 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_39, channel_40(D));
  _2 = (int) instance_37(D);
  _3 = (int) channel_40(D);
  _4 = Ftm_Pwm_Ip_NotifIrq[_2][_3];
  _5 = (int) _4;
  _6 = _5 & 2;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_39, 1);

  <bb 4> :
  _7 = (int) instance_37(D);
  _8 = (int) channel_40(D);
  _9 = Ftm_Pwm_Ip_NotifIrq[_7][_8];
  _10 = (int) _9;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, channel_40(D), 1);
  goto <bb 7>; [INV]

  <bb 6> :
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, channel_40(D), 0);

  <bb 7> :
  if (chMode_43 == 34)
    goto <bb 11>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (chMode_43 == 98)
    goto <bb 11>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (chMode_43 == 97)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (chMode_43 == 33)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 11> :
  _12 = pairChId_41 * 2;
  _13 = _12 + 1;
  Ftm_Pwm_Ip_ClearChnEventFlag (ftmBase_39, _13);
  _14 = (int) instance_37(D);
  _15 = pairChId_41 * 2;
  _16 = (int) _15;
  _17 = Ftm_Pwm_Ip_NotifIrq[_14][_16];
  _18 = (int) _17;
  _19 = _18 & 1;
  if (_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _20 = pairChId_41 * 2;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, _20, 1);
  goto <bb 14>; [INV]

  <bb 13> :
  _21 = pairChId_41 * 2;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, _21, 0);

  <bb 14> :
  _22 = (int) instance_37(D);
  _23 = pairChId_41 * 2;
  _24 = _23 + 1;
  _25 = (int) _24;
  _26 = Ftm_Pwm_Ip_NotifIrq[_22][_25];
  _27 = (int) _26;
  _28 = _27 & 1;
  if (_28 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _29 = pairChId_41 * 2;
  _30 = _29 + 1;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, _30, 1);
  goto <bb 17>; [INV]

  <bb 16> :
  _31 = pairChId_41 * 2;
  _32 = _31 + 1;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_39, _32, 0);

  <bb 17> :
  return;

}


Ftm_Pwm_Ip_DisableNotification (uint8 instance, uint8 channel)
{
  uint8 pairChId;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  int _6;
  unsigned char _7;
  int _8;
  int _9;
  unsigned char _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;

  <bb 2> :
  _1 = (int) instance_17(D);
  ftmBase_19 = Ftm_Pwm_Ip_aFtmBase[_1];
  pairChId_21 = channel_20(D) >> 1;
  _2 = instance_17(D) <= 3;
  DevAssert (_2);
  _3 = channel_20(D) <= 7;
  DevAssert (_3);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04 ();
  chMode_26 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_19, channel_20(D));
  _4 = (int) instance_17(D);
  _5 = (int) channel_20(D);
  Ftm_Pwm_Ip_NotifIrq[_4][_5] = 0;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_17(D), channel_20(D));
  if (chMode_26 == 34)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (chMode_26 == 98)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (chMode_26 == 97)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (chMode_26 == 33)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _6 = (int) instance_17(D);
  _7 = pairChId_21 * 2;
  _8 = (int) _7;
  Ftm_Pwm_Ip_NotifIrq[_6][_8] = 0;
  _9 = (int) instance_17(D);
  _10 = pairChId_21 * 2;
  _11 = _10 + 1;
  _12 = (int) _11;
  Ftm_Pwm_Ip_NotifIrq[_9][_12] = 0;
  _13 = pairChId_21 * 2;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_17(D), _13);
  _14 = pairChId_21 * 2;
  _15 = _14 + 1;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_17(D), _15);

  <bb 7> :
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04 ();
  return;

}


Ftm_Pwm_Ip_GetOutputState (uint8 instance, uint8 channel)
{
  Ftm_Pwm_Ip_OutputStateType outputValue;
  const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase;
  Ftm_Pwm_Ip_OutputStateType D.7415;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  Ftm_Pwm_Ip_OutputStateType _17;

  <bb 2> :
  _1 = (int) instance_6(D);
  ftmBase_8 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_6(D) <= 3;
  DevAssert (_2);
  _3 = channel_10(D) <= 7;
  DevAssert (_3);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03 ();
  _4 = Ftm_Pwm_Ip_GetChOutputValue (ftmBase_8, channel_10(D));
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  outputValue_15 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  outputValue_14 = 0;

  <bb 5> :
  # outputValue_5 = PHI <outputValue_15(3), outputValue_14(4)>
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03 ();
  _17 = outputValue_5;

  <bb 6> :
<L3>:
  return _17;

}


Ftm_Pwm_Ip_UpdatePwmPeriod (uint8 instance, uint32 newValue, boolean softwareTrigger)
{
  uint32 ftmPeriod;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  Ftm_Pwm_Ip_StatusType D.7410;
  int _1;
  _Bool _2;
  int _3;
  short unsigned int _4;
  <unnamed type> _5;
  short unsigned int _6;
  Ftm_Pwm_Ip_StatusType _22;

  <bb 2> :
  _1 = (int) instance_8(D);
  ftmBase_10 = Ftm_Pwm_Ip_aFtmBase[_1];
  ftmPeriod_11 = 0;
  _2 = instance_8(D) <= 3;
  DevAssert (_2);
  ftmPeriod_14 = newValue_13(D);
  _3 = (int) instance_8(D);
  _4 = (short unsigned int) newValue_13(D);
  Ftm_Pwm_Ip_Period[_3] = _4;
  _5 = Ftm_Pwm_Ip_GetCpwms (ftmBase_10);
  if (_5 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ftmPeriod_18 = ftmPeriod_14 >> 1;
  goto <bb 5>; [INV]

  <bb 4> :
  ftmPeriod_17 = ftmPeriod_14 + 4294967295;

  <bb 5> :
  # ftmPeriod_7 = PHI <ftmPeriod_18(3), ftmPeriod_17(4)>
  _6 = (short unsigned int) ftmPeriod_7;
  Ftm_Pwm_Ip_SetMod (ftmBase_10, _6);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_10, softwareTrigger_20(D));
  _22 = 0;

  <bb 6> :
<L3>:
  return _22;

}


Ftm_Pwm_Ip_UpdatePwmChannel (uint8 instance, uint8 channel, uint16 firstEdge, uint16 secondEdge, boolean softwareTrigger)
{
  uint8 chPairId;
  uint16 ftmPeriod;
  uint16 hwSecondEdge;
  uint16 hwFirstEdge;
  Ftm_Pwm_Ip_StatusType retStatus;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  Ftm_Pwm_Ip_StatusType D.7399;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  _Bool _5;
  _Bool _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  <unnamed type> _12;
  short unsigned int _13;
  Ftm_Pwm_Ip_StatusType _48;

  <bb 2> :
  _1 = (int) instance_20(D);
  ftmBase_22 = Ftm_Pwm_Ip_aFtmBase[_1];
  retStatus_23 = 0;
  hwFirstEdge_24 = 0;
  hwSecondEdge_25 = 0;
  ftmPeriod_26 = 0;
  chPairId_28 = channel_27(D) >> 1;
  _2 = instance_20(D) <= 3;
  DevAssert (_2);
  _3 = channel_27(D) <= 7;
  DevAssert (_3);
  _4 = (int) instance_20(D);
  ftmPeriod_31 = Ftm_Pwm_Ip_Period[_4];
  if (firstEdge_32(D) <= ftmPeriod_31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  if (secondEdge_33(D) <= ftmPeriod_31)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (ftmPeriod_31 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  hwFirstEdge_35 = firstEdge_32(D);
  hwSecondEdge_36 = secondEdge_33(D);
  goto <bb 7>; [INV]

  <bb 6> :
  retStatus_34 = 1;

  <bb 7> :
  # retStatus_14 = PHI <retStatus_23(5), retStatus_34(6)>
  # hwFirstEdge_15 = PHI <hwFirstEdge_35(5), hwFirstEdge_24(6)>
  # hwSecondEdge_16 = PHI <hwSecondEdge_36(5), hwSecondEdge_25(6)>
  if (retStatus_14 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 8> :
  _5 = Ftm_Pwm_Ip_GetDualChnCombineCmd (ftmBase_22, chPairId_28);
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  _6 = Ftm_Pwm_Ip_GetDualChnMCombineCmd (ftmBase_22, chPairId_28);
  if (_6 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _7 = Ftm_Pwm_Ip_GetClockSource (ftmBase_22);
  if (_7 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _8 = chPairId_28 * 2;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, _8, hwFirstEdge_15);
  goto <bb 13>; [INV]

  <bb 12> :
  _9 = chPairId_28 * 2;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, _9, hwFirstEdge_15);

  <bb 13> :
  _10 = chPairId_28 * 2;
  _11 = _10 + 1;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, _11, hwSecondEdge_16);
  goto <bb 17>; [INV]

  <bb 14> :
  _12 = Ftm_Pwm_Ip_GetCpwms (ftmBase_22);
  if (_12 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _13 = hwFirstEdge_15 >> 1;
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, channel_27(D), _13);
  goto <bb 17>; [INV]

  <bb 16> :
  Ftm_Pwm_Ip_SetChnCountVal (ftmBase_22, channel_27(D), hwFirstEdge_15);

  <bb 17> :
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_22, softwareTrigger_46(D));

  <bb 18> :
  _48 = retStatus_14;

  <bb 19> :
<L18>:
  return _48;

}


Ftm_Pwm_Ip_SwOutputControl (uint8 instance, uint8 channel, Ftm_Pwm_Ip_OutputStateType outputState, boolean activeState)
{
  Ftm_Pwm_Ip_ChannelModeType chMode;
  uint16 tempPolVal;
  uint16 swoCtrlBitMask;
  uint16 channelMask;
  uint16 swoCtrlRegVal;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  <unnamed type> _6;
  int _7;
  int _8;
  int _9;
  int _10;
  <unnamed type> _11;
  short unsigned int _12;
  long unsigned int _13;
  int _14;
  long unsigned int _15;
  short unsigned int _16;
  long unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  long unsigned int _20;
  short unsigned int _21;
  short unsigned int _22;
  long unsigned int _23;
  unsigned int _24;
  unsigned int _25;
  long unsigned int _26;
  short unsigned int _27;
  long unsigned int _28;
  int _29;
  long unsigned int _30;
  short unsigned int _31;
  long unsigned int _32;
  int _33;
  long unsigned int _34;
  short unsigned int _35;
  short unsigned int _36;

  <bb 2> :
  _1 = (int) instance_41(D);
  ftmBase_43 = Ftm_Pwm_Ip_aFtmBase[_1];
  swoCtrlRegVal_44 = 0;
  channelMask_45 = 0;
  swoCtrlBitMask_46 = 0;
  tempPolVal_47 = 0;
  chMode_50 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_43, channel_48(D));
  _2 = instance_41(D) <= 3;
  DevAssert (_2);
  _3 = channel_48(D) <= 7;
  DevAssert (_3);
  _4 = (int) instance_41(D);
  _5 = (int) channel_48(D);
  _6 = Ftm_Pwm_Ip_ChannelState[_4][_5];
  if (_6 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = (int) instance_41(D);
  _8 = (int) channel_48(D);
  Ftm_Pwm_Ip_DutyCycle[_7][_8] = 0;
  Ftm_Pwm_Ip_SetOutputForIdleChannel (instance_41(D), channel_48(D));
  goto <bb 6>; [INV]

  <bb 4> :
  _9 = (int) instance_41(D);
  _10 = (int) channel_48(D);
  _11 = Ftm_Pwm_Ip_ChannelState[_9][_10];
  if (_11 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_SetOutputForForcedChannel (instance_41(D), channel_48(D), activeState_53(D));

  <bb 6> :
  swoCtrlRegVal_58 = Ftm_Pwm_Ip_GetSoftwareOutputControl (ftmBase_43);
  if (chMode_50 == 34)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (chMode_50 == 98)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (chMode_50 == 97)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (chMode_50 == 33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  channelMask_60 = 3;
  goto <bb 12>; [INV]

  <bb 11> :
  channelMask_59 = 1;

  <bb 12> :
  # channelMask_38 = PHI <channelMask_60(10), channelMask_59(11)>
  _12 = Ftm_Pwm_Ip_GetPolInstance (ftmBase_43);
  _13 = (long unsigned int) channelMask_38;
  _14 = (int) channel_48(D);
  _15 = _13 << _14;
  _16 = (short unsigned int) _15;
  tempPolVal_62 = _12 & _16;
  tempPolVal_63 = tempPolVal_62 << 8;
  _17 = (long unsigned int) channelMask_38;
  _18 = (unsigned int) channel_48(D);
  _19 = _18 + 8;
  _20 = _17 << _19;
  _21 = (short unsigned int) _20;
  _22 = ~_21;
  swoCtrlRegVal_64 = swoCtrlRegVal_58 & _22;
  if (activeState_53(D) != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  if (outputState_66(D) == 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _23 = (long unsigned int) channelMask_38;
  _24 = (unsigned int) channel_48(D);
  _25 = _24 + 8;
  _26 = _23 << _25;
  swoCtrlBitMask_68 = (uint16) _26;
  goto <bb 16>; [INV]

  <bb 15> :
  swoCtrlBitMask_67 = 0;

  <bb 16> :
  # swoCtrlBitMask_39 = PHI <swoCtrlBitMask_68(14), swoCtrlBitMask_67(15)>
  _27 = swoCtrlBitMask_39 ^ tempPolVal_63;
  swoCtrlRegVal_69 = swoCtrlRegVal_64 | _27;
  _28 = (long unsigned int) channelMask_38;
  _29 = (int) channel_48(D);
  _30 = _28 << _29;
  _31 = (short unsigned int) _30;
  swoCtrlRegVal_70 = swoCtrlRegVal_69 | _31;
  goto <bb 18>; [INV]

  <bb 17> :
  _32 = (long unsigned int) channelMask_38;
  _33 = (int) channel_48(D);
  _34 = _32 << _33;
  _35 = (short unsigned int) _34;
  _36 = ~_35;
  swoCtrlRegVal_65 = swoCtrlRegVal_64 & _36;

  <bb 18> :
  # swoCtrlRegVal_37 = PHI <swoCtrlRegVal_70(16), swoCtrlRegVal_65(17)>
  Ftm_Pwm_Ip_SoftwareOutputControl (ftmBase_43, swoCtrlRegVal_37);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_43, 1);
  return;

}


Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty (uint8 instance, uint8 channel, uint16 period, uint16 dutyCycle, boolean softwareTrigger)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  uint16 tempDutyCycle;
  int _1;
  _Bool _2;
  _Bool _3;
  int _4;
  int _5;
  <unnamed type> _6;
  int _7;
  int _8;
  long unsigned int _9;
  int _10;

  <bb 2> :
  tempDutyCycle_13 = 0;
  _1 = (int) instance_14(D);
  ftmBase_16 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_14(D) <= 3;
  DevAssert (_2);
  _3 = channel_18(D) <= 7;
  DevAssert (_3);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01 ();
  _4 = (int) instance_14(D);
  _5 = (int) channel_18(D);
  _6 = Ftm_Pwm_Ip_ChannelState[_4][_5];
  if (_6 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = (int) instance_14(D);
  _8 = (int) channel_18(D);
  Ftm_Pwm_Ip_ChannelState[_7][_8] = 1;
  Ftm_Pwm_Ip_SwOutputControl (instance_14(D), channel_18(D), 0, 0);

  <bb 4> :
  _9 = (long unsigned int) period_23(D);
  Ftm_Pwm_Ip_UpdatePwmPeriod (instance_14(D), _9, 0);
  _10 = (int) instance_14(D);
  Ftm_Pwm_Ip_Period[_10] = period_23(D);
  if (period_23(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  tempDutyCycle_28 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  tempDutyCycle_27 = dutyCycle_26(D);

  <bb 7> :
  # tempDutyCycle_11 = PHI <tempDutyCycle_28(5), tempDutyCycle_27(6)>
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (instance_14(D), channel_18(D), tempDutyCycle_11, softwareTrigger_29(D));
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_16, softwareTrigger_29(D));
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01 ();
  return;

}


Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (uint8 instance, uint8 channel, uint16 dutyCycle, boolean softwareTrigger)
{
  Ftm_Pwm_Ip_ChannelModeType chMode;
  const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase;
  uint8 pairId;
  uint16 firstEdge;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  <unnamed type> _6;
  int _7;
  int _8;
  int _9;
  int _10;
  short unsigned int _11;
  int _12;
  int _13;
  short unsigned int _14;
  int _15;
  int _16;
  short unsigned int _17;

  <bb 2> :
  _1 = (int) instance_20(D);
  ftmBase_22 = Ftm_Pwm_Ip_aFtmBase[_1];
  pairId_24 = channel_23(D) >> 1;
  _2 = (int) instance_20(D);
  _3 = (int) channel_23(D);
  Ftm_Pwm_Ip_DutyCycle[_2][_3] = dutyCycle_25(D);
  SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00 ();
  chMode_29 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_22, channel_23(D));
  firstEdge_30 = dutyCycle_25(D);
  Ftm_Pwm_Ip_CheckNotification (instance_20(D), channel_23(D));
  _4 = (int) instance_20(D);
  _5 = (int) channel_23(D);
  _6 = Ftm_Pwm_Ip_ChannelState[_4][_5];
  if (_6 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = (int) instance_20(D);
  _8 = (int) channel_23(D);
  Ftm_Pwm_Ip_ChannelState[_7][_8] = 1;
  Ftm_Pwm_Ip_SwOutputControl (instance_20(D), channel_23(D), 0, 0);

  <bb 4> :
  if (chMode_29 == 10)
    goto <bb 8>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (chMode_29 == 9)
    goto <bb 8>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (chMode_29 == 18)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (chMode_29 == 17)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Ftm_Pwm_Ip_UpdatePwmChannel (instance_20(D), channel_23(D), firstEdge_30, 0, softwareTrigger_36(D));
  goto <bb 16>; [INV]

  <bb 9> :
  if (chMode_29 == 34)
    goto <bb 13>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (chMode_29 == 98)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (chMode_29 == 97)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (chMode_29 == 33)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  _9 = (int) instance_20(D);
  _10 = (int) pairId_24;
  _11 = Ftm_Pwm_Ip_PhaseShift[_9][_10];
  if (_11 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  Ftm_Pwm_Ip_UpdatePwmChannel (instance_20(D), channel_23(D), 0, firstEdge_30, softwareTrigger_36(D));
  goto <bb 16>; [INV]

  <bb 15> :
  _12 = (int) instance_20(D);
  _13 = (int) pairId_24;
  _14 = Ftm_Pwm_Ip_PhaseShift[_12][_13];
  firstEdge_35 = Ftm_Pwm_Ip_CalculatePhaseShift (instance_20(D), dutyCycle_25(D), _14);
  _15 = (int) instance_20(D);
  _16 = (int) pairId_24;
  _17 = Ftm_Pwm_Ip_PhaseShift[_15][_16];
  Ftm_Pwm_Ip_UpdatePwmChannel (instance_20(D), channel_23(D), _17, firstEdge_35, softwareTrigger_36(D));

  <bb 16> :
  SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00 ();
  return;

}


Ftm_Pwm_Ip_DeInit (uint8 instance)
{
  uint8 channelIdex;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  int _3;
  int _4;
  <unnamed type> _5;
  unsigned char channelIdex.35_6;

  <bb 2> :
  _1 = (int) instance_10(D);
  ftmBase_12 = Ftm_Pwm_Ip_aFtmBase[_1];
  channelIdex_13 = 0;
  _2 = instance_10(D) <= 3;
  DevAssert (_2);
  Ftm_Pwm_Ip_Reset (ftmBase_12);
  channelIdex_16 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _3 = (int) instance_10(D);
  _4 = (int) channelIdex_7;
  _5 = Ftm_Pwm_Ip_ChannelState[_3][_4];
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Ftm_Pwm_Ip_DeInitChannel (instance_10(D), channelIdex_7);

  <bb 5> :
  channelIdex.35_6 = channelIdex_7;
  channelIdex_19 = channelIdex.35_6 + 1;

  <bb 6> :
  # channelIdex_7 = PHI <channelIdex_16(2), channelIdex_19(5)>
  if (channelIdex_7 <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_DeInitInstance (instance_10(D));
  return;

}


Ftm_Pwm_Ip_Init (uint8 instance, const struct Ftm_Pwm_Ip_UserCfgType * userCfg)
{
  uint8 index;
  _Bool _1;
  _Bool _2;
  const struct Ftm_Pwm_Ip_InstanceCfgType * _3;
  const struct Ftm_Pwm_Ip_ChannelConfigType * const * _4;
  unsigned int _5;
  unsigned int _6;
  const struct Ftm_Pwm_Ip_ChannelConfigType * const * _7;
  const struct Ftm_Pwm_Ip_ChannelConfigType * _8;
  unsigned char index.33_9;
  unsigned char _10;
  unsigned char _11;
  const struct Ftm_Pwm_Ip_FaultChCfgType * const * _12;
  unsigned int _13;
  unsigned int _14;
  const struct Ftm_Pwm_Ip_FaultChCfgType * const * _15;
  const struct Ftm_Pwm_Ip_FaultChCfgType * _16;
  unsigned char index.34_17;
  unsigned char _18;
  const struct Ftm_Pwm_Ip_InstanceCfgType * _19;

  <bb 2> :
  index_25 = 0;
  _1 = instance_26(D) <= 3;
  DevAssert (_1);
  _2 = userCfg_29(D) != 0B;
  DevAssert (_2);
  Ftm_Pwm_Ip_FaultCheck = 0;
  _3 = userCfg_29(D)->instanceCfg;
  Ftm_Pwm_Ip_InitInstance (instance_26(D), _3);
  index_33 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = userCfg_29(D)->configuredChArray;
  _5 = (unsigned int) index_20;
  _6 = _5 * 4;
  _7 = _4 + _6;
  _8 = *_7;
  Ftm_Pwm_Ip_InitChannel (instance_26(D), _8);
  index.33_9 = index_20;
  index_39 = index.33_9 + 1;

  <bb 4> :
  # index_20 = PHI <index_33(2), index_39(3)>
  _10 = userCfg_29(D)->noOfConfiguredCh;
  if (index_20 < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _11 = userCfg_29(D)->noOfFaultCfg;
  if (_11 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  index_34 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _12 = userCfg_29(D)->configuredFaultArray;
  _13 = (unsigned int) index_21;
  _14 = _13 * 4;
  _15 = _12 + _14;
  _16 = *_15;
  Ftm_Pwm_Ip_InitChFault (instance_26(D), _16);
  index.34_17 = index_21;
  index_36 = index.34_17 + 1;

  <bb 8> :
  # index_21 = PHI <index_34(6), index_36(7)>
  _18 = userCfg_29(D)->noOfFaultCfg;
  if (index_21 < _18)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _19 = userCfg_29(D)->instanceCfg;
  Ftm_Pwm_Ip_InitInstanceStart (instance_26(D), _19);
  return;

}


Ftm_Pwm_Ip_InitChFault (uint8 instance, const struct Ftm_Pwm_Ip_FaultChCfgType * faultChCfg)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  _Bool _5;
  unsigned char _6;
  int _7;
  unsigned char _8;
  int _9;
  void (*<T4e0>) (void) _10;

  <bb 2> :
  _1 = (int) instance_11(D);
  ftmBase_13 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = faultChCfg_14(D)->faultId;
  _3 = faultChCfg_14(D)->faultPol;
  Ftm_Pwm_Ip_SetFaultPolarity (ftmBase_13, _2, _3);
  _4 = faultChCfg_14(D)->faultId;
  _5 = faultChCfg_14(D)->faultFilEn;
  Ftm_Pwm_Ip_SetFaultFilterEn (ftmBase_13, _4, _5);
  _6 = faultChCfg_14(D)->faultId;
  Ftm_Pwm_Ip_SetFaultInputEn (ftmBase_13, _6, 1);
  _7 = (int) instance_11(D);
  _8 = faultChCfg_14(D)->faultId;
  _9 = (int) _8;
  _10 = faultChCfg_14(D)->faultCb;
  Ftm_Pwm_Ip_pFaultIrqCallback[_7][_9] = _10;
  return;

}


Ftm_Pwm_Ip_DeInitChannel (uint8 instance, uint8 channel)
{
  uint8 pairId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  int _3;
  int _4;
  <unnamed type> _5;
  int _6;
  unsigned int _7;
  unsigned int _8;
  int _9;
  unsigned int _10;
  unsigned int _11;
  unsigned int _12;

  <bb 2> :
  _1 = (int) instance_13(D);
  ftmBase_15 = Ftm_Pwm_Ip_aFtmBase[_1];
  pairId_17 = channel_16(D) >> 1;
  _2 = instance_13(D) <= 3;
  DevAssert (_2);
  Ftm_Pwm_Ip_DisableCmpIrq (instance_13(D), channel_16(D));
  _3 = (int) instance_13(D);
  _4 = (int) channel_16(D);
  _5 = Ftm_Pwm_Ip_IdleState[_3][_4];
  Ftm_Pwm_Ip_SwOutputControl (instance_13(D), channel_16(D), _5, 1);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_15, 0);
  Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd (ftmBase_15, 1);
  Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd (ftmBase_15, 1);
  Ftm_Pwm_Ip_SetChnOutputMask (ftmBase_15, channel_16(D), 0);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_15, 1);
  _6 = (int) instance_13(D);
  _7 = (unsigned int) pairId_17;
  _8 = _7 * 2;
  Ftm_Pwm_Ip_NotifIrq[_6][_8] = 0;
  _9 = (int) instance_13(D);
  _10 = (unsigned int) pairId_17;
  _11 = _10 * 2;
  _12 = _11 + 1;
  Ftm_Pwm_Ip_NotifIrq[_9][_12] = 0;
  return;

}


Ftm_Pwm_Ip_DeInitInstance (uint8 instance)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  ftmBase_5 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_3(D) <= 3;
  DevAssert (_2);
  Ftm_Pwm_Ip_SetClockSource (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetExtDeadtimeValue (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetDeadtimePrescaler (ftmBase_5, 1);
  Ftm_Pwm_Ip_SetDeadtimeCount (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetBdmMode (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetMod (ftmBase_5, 0);
  Ftm_Pwm_Ip_SetCounter (ftmBase_5, 0);
  return;

}


Ftm_Pwm_Ip_InitChannel (uint8 instance, const struct Ftm_Pwm_Ip_ChannelConfigType * userChCfg)
{
  uint8 channelId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  <unnamed type> _4;
  <unnamed type> _5;
  <unnamed type> _6;
  _Bool _7;
  const struct Ftm_Pwm_Ip_PairCfgType * _8;
  unsigned char _9;
  const struct Ftm_Pwm_Ip_PairCfgType * _10;
  unsigned char _11;
  unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  <unnamed type> _15;
  <unnamed type> _16;
  <unnamed type> _17;
  <unnamed type> _18;
  const struct Ftm_Pwm_Ip_PairCfgType * _19;
  _Bool _20;
  int _21;
  int _22;
  int _23;
  int _24;
  short unsigned int _25;
  int _26;
  int _27;
  <unnamed type> _28;
  int _29;
  int _30;
  <unnamed type> _31;
  <unnamed type> _32;
  <unnamed type> _33;
  <unnamed type> _34;
  <unnamed type> _35;
  int _36;
  int _37;
  short unsigned int _38;
  _Bool _39;
  int _40;
  int _41;
  _Bool _42;
  int _43;
  int _44;
  void (*<T4cb>) (uint8) _45;
  int _46;
  int _47;
  unsigned char _48;

  <bb 2> :
  _1 = (int) instance_54(D);
  ftmBase_56 = Ftm_Pwm_Ip_aFtmBase[_1];
  channelId_57 = 0;
  _2 = instance_54(D) <= 3;
  DevAssert (_2);
  _3 = userChCfg_59(D) != 0B;
  DevAssert (_3);
  channelId_61 = userChCfg_59(D)->channelId;
  _4 = userChCfg_59(D)->channelMode;
  if (_4 == 18)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = userChCfg_59(D)->channelMode;
  if (_5 == 17)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Ftm_Pwm_Ip_GetCpwms (ftmBase_56);
  _7 = _6 == 1;
  DevAssert (_7);

  <bb 5> :
  _8 = userChCfg_59(D)->pairCfg;
  if (_8 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _9 = channelId_61 & 1;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  DevAssert (0);
  goto <bb 10>; [INV]

  <bb 8> :
  _10 = userChCfg_59(D)->pairCfg;
  _11 = _10->pairId;
  _12 = (unsigned int) _11;
  _13 = _12 * 2;
  _14 = (unsigned int) channelId_61;
  if (_13 != _14)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  DevAssert (0);

  <bb 10> :
  _15 = userChCfg_59(D)->channelMode;
  if (_15 == 34)
    goto <bb 14>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _16 = userChCfg_59(D)->channelMode;
  if (_16 == 98)
    goto <bb 14>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _17 = userChCfg_59(D)->channelMode;
  if (_17 == 97)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _18 = userChCfg_59(D)->channelMode;
  if (_18 == 33)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _19 = userChCfg_59(D)->pairCfg;
  _20 = _19 != 0B;
  DevAssert (_20);

  <bb 15> :
  _21 = (int) instance_54(D);
  _22 = (int) channelId_61;
  Ftm_Pwm_Ip_NotifIrq[_21][_22] = 0;
  _23 = (int) instance_54(D);
  _24 = (int) channelId_61;
  _25 = userChCfg_59(D)->dutyCycle;
  Ftm_Pwm_Ip_DutyCycle[_23][_24] = _25;
  _26 = (int) instance_54(D);
  _27 = (int) channelId_61;
  _28 = userChCfg_59(D)->initOut;
  Ftm_Pwm_Ip_IdleState[_26][_27] = _28;
  _29 = (int) instance_54(D);
  _30 = (int) channelId_61;
  _31 = userChCfg_59(D)->polarity;
  Ftm_Pwm_Ip_Polarity[_29][_30] = _31;
  _32 = userChCfg_59(D)->polarity;
  Ftm_Pwm_Ip_SetChnOutputPolarityCmd (ftmBase_56, channelId_61, _32);
  _33 = userChCfg_59(D)->initOut;
  Ftm_Pwm_Ip_SetChnOutputInitStateCmd (ftmBase_56, channelId_61, _33);
  _34 = userChCfg_59(D)->channelMode;
  Ftm_Pwm_Ip_SetChnEdgeLevel (ftmBase_56, channelId_61, _34);
  _35 = userChCfg_59(D)->channelMode;
  Ftm_Pwm_Ip_SetChnMSBAMode (ftmBase_56, channelId_61, _35);
  Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode (instance_54(D), userChCfg_59(D));
  _36 = (int) instance_54(D);
  _37 = (int) channelId_61;
  _38 = Ftm_Pwm_Ip_DutyCycle[_36][_37];
  Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel (instance_54(D), channelId_61, _38, 1);
  Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl (instance_54(D), userChCfg_59(D));
  _39 = userChCfg_59(D)->chOutputEn;
  if (_39 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  Ftm_Pwm_Ip_EnablePwmChannelOutputs (ftmBase_56, channelId_61);

  <bb 17> :
  _40 = (int) instance_54(D);
  _41 = (int) channelId_61;
  Ftm_Pwm_Ip_ChannelState[_40][_41] = 1;
  _42 = userChCfg_59(D)->chIrqEn;
  if (_42 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _43 = (int) instance_54(D);
  _44 = (int) channelId_61;
  _45 = userChCfg_59(D)->channelCb.functionCallback;
  Ftm_Pwm_Ip_aChIrqCallbacks[_43][_44].functionCallback = _45;
  _46 = (int) instance_54(D);
  _47 = (int) channelId_61;
  _48 = userChCfg_59(D)->channelCb.cbParam;
  Ftm_Pwm_Ip_aChIrqCallbacks[_46][_47].cbParam = _48;

  <bb 19> :
  return;

}


Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl (uint8 instance, const struct Ftm_Pwm_Ip_ChannelConfigType * userChCfg)
{
  uint8 channelId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;

  <bb 2> :
  _1 = (int) instance_6(D);
  ftmBase_8 = Ftm_Pwm_Ip_aFtmBase[_1];
  channelId_9 = 0;
  _2 = userChCfg_10(D)->extTrigEn;
  Ftm_Pwm_Ip_SetChnTriggerCmd (ftmBase_8, channelId_9, _2);
  _3 = userChCfg_10(D)->chMatchLoadEn;
  Ftm_Pwm_Ip_SetPwmLoadChnSelCmd (ftmBase_8, channelId_9, _3);
  _4 = userChCfg_10(D)->swControlEn;
  Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd (ftmBase_8, channelId_9, _4);
  _5 = userChCfg_10(D)->swControlVal;
  Ftm_Pwm_Ip_SetChnSoftwareCtrlVal (ftmBase_8, channelId_9, _5);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_8, 1);
  return;

}


Ftm_Pwm_Ip_ConfigurePairedChannelCombinedMode (uint8 instance, const struct Ftm_Pwm_Ip_ChannelConfigType * userChCfg)
{
  uint8 chPairId;
  uint8 channelId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  <unnamed type> _2;
  <unnamed type> _3;
  unsigned char _4;
  unsigned char _5;
  <unnamed type> _6;
  <unnamed type> _7;
  <unnamed type> _8;
  unsigned char _9;
  unsigned char _10;
  <unnamed type> _11;
  const struct Ftm_Pwm_Ip_PairCfgType * _12;
  const struct Ftm_Pwm_Ip_PairCfgType * _13;

  <bb 2> :
  _1 = (int) instance_16(D);
  ftmBase_18 = Ftm_Pwm_Ip_aFtmBase[_1];
  channelId_19 = 0;
  chPairId_20 = 0;
  channelId_22 = userChCfg_21(D)->channelId;
  chPairId_23 = channelId_22 >> 1;
  Ftm_Pwm_Ip_SetDualChnPwmSyncCmd (ftmBase_18, chPairId_23, 1);
  Ftm_Pwm_Ip_SetDualChFaultCtr (ftmBase_18, chPairId_23, 1);
  _2 = userChCfg_21(D)->channelMode;
  if (_2 == 34)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _3 = userChCfg_21(D)->channelMode;
  if (_3 == 33)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = chPairId_23 * 2;
  _5 = _4 + 1;
  _6 = userChCfg_21(D)->channelMode;
  Ftm_Pwm_Ip_SetChnEdgeLevel (ftmBase_18, _5, _6);
  Ftm_Pwm_Ip_SetDualChnCombineCmd (ftmBase_18, chPairId_23, 1);
  goto <bb 8>; [INV]

  <bb 5> :
  _7 = userChCfg_21(D)->channelMode;
  if (_7 == 98)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _8 = userChCfg_21(D)->channelMode;
  if (_8 == 97)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _9 = chPairId_23 * 2;
  _10 = _9 + 1;
  _11 = userChCfg_21(D)->channelMode;
  Ftm_Pwm_Ip_SetChnEdgeLevel (ftmBase_18, _10, _11);
  Ftm_Pwm_Ip_SetDualChnCombineCmd (ftmBase_18, chPairId_23, 1);
  Ftm_Pwm_Ip_SetDualChnMCombineCmd (ftmBase_18, chPairId_23, 1);

  <bb 8> :
  _12 = userChCfg_21(D)->pairCfg;
  if (_12 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _13 = userChCfg_21(D)->pairCfg;
  Ftm_Pwm_Ip_InitPair (instance_16(D), _13);

  <bb 10> :
  return;

}


Ftm_Pwm_Ip_InitInstanceStart (uint8 instance, const struct Ftm_Pwm_Ip_InstanceCfgType * userInstCfg)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  <unnamed type> _4;
  short unsigned int _5;
  _Bool _6;
  unsigned char _7;
  <unnamed type> _8;
  <unnamed type> _9;
  _Bool _10;
  <unnamed type> _11;
  <unnamed type> _12;

  <bb 2> :
  _1 = (int) instance_15(D);
  ftmBase_17 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = instance_15(D) <= 3;
  DevAssert (_2);
  _3 = userInstCfg_19(D) != 0B;
  DevAssert (_3);
  _4 = userInstCfg_19(D)->cntMode;
  if (_4 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = userInstCfg_19(D)->pwmPeriod;
  _6 = _5 <= 32766;
  DevAssert (_6);

  <bb 4> :
  _7 = userInstCfg_19(D)->faultInFilter;
  Ftm_Pwm_Ip_SetFaultFilterValue (ftmBase_17, _7);
  _8 = userInstCfg_19(D)->faultOutState;
  Ftm_Pwm_Ip_SetFaultOutputState (ftmBase_17, _8);
  _9 = userInstCfg_19(D)->faultCtrMode;
  Ftm_Pwm_Ip_SetFaultControlMode (ftmBase_17, _9);
  _10 = userInstCfg_19(D)->faultIrqEn;
  if (_10 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_SetFaultInterruptEnable (ftmBase_17, 1);

  <bb 6> :
  Ftm_Pwm_Ip_Enable (ftmBase_17, 1);
  Ftm_Pwm_Ip_SetPwmSyncMode (ftmBase_17, 1);
  _11 = userInstCfg_19(D)->clkPs;
  Ftm_Pwm_Ip_SetClockPs (ftmBase_17, _11);
  _12 = userInstCfg_19(D)->clkSrc;
  Ftm_Pwm_Ip_SetClockSource (ftmBase_17, _12);
  return;

}


Ftm_Pwm_Ip_InitInstance (uint8 instance, const struct Ftm_Pwm_Ip_InstanceCfgType * userInstCfg)
{
  struct Ftm_Pwm_Ip_SimType * simBase;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  short unsigned int _4;
  _Bool _5;
  <unnamed type> _6;
  short unsigned int _7;
  _Bool _8;
  const struct Ftm_Pwm_Ip_SyncCfgType * _9;
  int _10;
  short unsigned int _11;
  int _12;
  <unnamed type> _13;
  int _14;
  <unnamed type> _15;
  int _16;
  <unnamed type> _17;
  _Bool _18;
  int _19;
  void (*<T4cb>) (uint8) _20;
  int _21;
  unsigned char _22;
  <unnamed type> _23;
  short unsigned int _24;
  short unsigned int _25;
  short unsigned int _26;
  short unsigned int _27;
  _Bool _28;
  <unnamed type> _29;

  <bb 2> :
  _1 = (int) instance_33(D);
  ftmBase_35 = Ftm_Pwm_Ip_aFtmBase[_1];
  simBase_36 = 1074036736B;
  _2 = instance_33(D) <= 3;
  DevAssert (_2);
  _3 = userInstCfg_38(D) != 0B;
  DevAssert (_3);
  _4 = userInstCfg_38(D)->deadTimeValue;
  _5 = _4 <= 1023;
  DevAssert (_5);
  _6 = userInstCfg_38(D)->cntMode;
  if (_6 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = userInstCfg_38(D)->pwmPeriod;
  _8 = _7 <= 32766;
  DevAssert (_8);

  <bb 4> :
  Ftm_Pwm_Ip_SetSimOutputBufferEn (simBase_36, instance_33(D));
  Ftm_Pwm_Ip_ResetAndFirstConfigure (instance_33(D), userInstCfg_38(D));
  _9 = userInstCfg_38(D)->syncCfg;
  Ftm_Pwm_Ip_UpdateSync (instance_33(D), _9);
  Ftm_Pwm_Ip_SetCounterInitVal (ftmBase_35, 0);
  _10 = (int) instance_33(D);
  _11 = userInstCfg_38(D)->pwmPeriod;
  Ftm_Pwm_Ip_Period[_10] = _11;
  _12 = (int) instance_33(D);
  _13 = userInstCfg_38(D)->clkSrc;
  Ftm_Pwm_Ip_ClockSource[_12] = _13;
  _14 = (int) instance_33(D);
  _15 = userInstCfg_38(D)->clkPs;
  Ftm_Pwm_Ip_ClockPrescaler[_14] = _15;
  _16 = (int) instance_33(D);
  _17 = userInstCfg_38(D)->alternateClkPs;
  Ftm_Pwm_Ip_AlternateClockPrescaler[_16] = _17;
  _18 = userInstCfg_38(D)->overflowIrqEn;
  if (_18 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _19 = (int) instance_33(D);
  _20 = userInstCfg_38(D)->overflowCb.functionCallback;
  Ftm_Pwm_Ip_pOverflowIrqCallback[_19].functionCallback = _20;
  _21 = (int) instance_33(D);
  _22 = userInstCfg_38(D)->overflowCb.cbParam;
  Ftm_Pwm_Ip_pOverflowIrqCallback[_21].cbParam = _22;

  <bb 6> :
  _23 = userInstCfg_38(D)->cntMode;
  if (_23 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _24 = userInstCfg_38(D)->pwmPeriod;
  _25 = _24 >> 1;
  Ftm_Pwm_Ip_SetMod (ftmBase_35, _25);
  goto <bb 9>; [INV]

  <bb 8> :
  _26 = userInstCfg_38(D)->pwmPeriod;
  _27 = _26 + 65535;
  Ftm_Pwm_Ip_SetMod (ftmBase_35, _27);

  <bb 9> :
  _28 = userInstCfg_38(D)->initTriggerEn;
  Ftm_Pwm_Ip_SetInitTriggerCmd (ftmBase_35, _28);
  _29 = userInstCfg_38(D)->initTrigMode;
  Ftm_Pwm_Ip_SetInitTriggerMode (ftmBase_35, _29);
  return;

}


Ftm_Pwm_Ip_ResetAndFirstConfigure (uint8 instance, const struct Ftm_Pwm_Ip_InstanceCfgType * userInstCfg)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  <unnamed type> _2;
  _Bool _3;
  <unnamed type> _4;
  short unsigned int _5;
  unsigned char _6;
  unsigned char _7;
  short unsigned int _8;
  short unsigned int _9;
  unsigned char _10;
  <unnamed type> _11;

  <bb 2> :
  _1 = (int) instance_12(D);
  ftmBase_14 = Ftm_Pwm_Ip_aFtmBase[_1];
  Ftm_Pwm_Ip_Reset (ftmBase_14);
  Ftm_Pwm_Ip_SetClockSource (ftmBase_14, 0);
  Ftm_Pwm_Ip_ClearTimerOverflow (ftmBase_14);
  _2 = userInstCfg_18(D)->cntMode;
  _3 = _2 != 0;
  Ftm_Pwm_Ip_SetCpwms (ftmBase_14, _3);
  Ftm_Pwm_Ip_Enable (ftmBase_14, 0);
  _4 = userInstCfg_18(D)->debugMode;
  Ftm_Pwm_Ip_SetBdmMode (ftmBase_14, _4);
  _5 = userInstCfg_18(D)->deadTimeValue;
  _6 = (unsigned char) _5;
  _7 = _6 & 63;
  Ftm_Pwm_Ip_SetDeadtimeCount (ftmBase_14, _7);
  _8 = userInstCfg_18(D)->deadTimeValue;
  _9 = _8 >> 6;
  _10 = (unsigned char) _9;
  Ftm_Pwm_Ip_SetExtDeadtimeValue (ftmBase_14, _10);
  _11 = userInstCfg_18(D)->deadTimePs;
  Ftm_Pwm_Ip_SetDeadtimePrescaler (ftmBase_14, _11);
  return;

}


Ftm_Pwm_Ip_CheckNotification (uint8 instance, uint8 channel)
{
  int _1;
  short unsigned int _2;
  int _3;
  int _4;
  short unsigned int _5;
  int _6;
  int _7;
  short unsigned int _8;

  <bb 2> :
  _1 = (int) instance_10(D);
  _2 = Ftm_Pwm_Ip_Period[_1];
  _3 = (int) instance_10(D);
  _4 = (int) channel_12(D);
  _5 = Ftm_Pwm_Ip_DutyCycle[_3][_4];
  if (_2 == _5)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _6 = (int) instance_10(D);
  _7 = (int) channel_12(D);
  _8 = Ftm_Pwm_Ip_DutyCycle[_6][_7];
  if (_8 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Ftm_Pwm_Ip_SpecialCheckNotification (instance_10(D), channel_12(D));
  goto <bb 6>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_NormalCheckNotification (instance_10(D), channel_12(D));

  <bb 6> :
  return;

}


Ftm_Pwm_Ip_NormalCheckNotification (uint8 instance, uint8 channel)
{
  uint8 pairChId;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  int _11;
  unsigned char _12;
  int _13;
  int _14;
  unsigned char _15;
  int _16;
  int _17;
  int _18;
  int _19;
  unsigned char _20;
  int _21;
  int _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  int _27;
  int _28;
  unsigned char _29;
  int _30;
  int _31;
  int _32;
  unsigned char _33;
  int _34;
  unsigned char _35;
  int _36;
  int _37;
  unsigned char _38;
  int _39;
  unsigned char _40;
  unsigned char _41;
  int _42;
  unsigned char _43;
  int _44;
  int _45;
  unsigned char _46;
  unsigned char _47;

  <bb 2> :
  _1 = (int) instance_53(D);
  ftmBase_55 = Ftm_Pwm_Ip_aFtmBase[_1];
  pairChId_57 = channel_56(D) >> 1;
  chMode_59 = Ftm_Pwm_Ip_GetChannelMode (ftmBase_55, channel_56(D));
  _2 = (int) instance_53(D);
  _3 = (int) channel_56(D);
  _4 = Ftm_Pwm_Ip_NotifIrq[_2][_3];
  _5 = (int) _4;
  _6 = _5 & 2;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = (int) instance_53(D);
  _8 = (int) channel_56(D);
  _9 = Ftm_Pwm_Ip_NotifIrq[_7][_8];
  _10 = (int) instance_53(D);
  _11 = (int) channel_56(D);
  _12 = _9 & 251;
  Ftm_Pwm_Ip_NotifIrq[_10][_11] = _12;
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_55, 1);

  <bb 4> :
  _13 = (int) instance_53(D);
  _14 = (int) channel_56(D);
  _15 = Ftm_Pwm_Ip_NotifIrq[_13][_14];
  _16 = (int) _15;
  _17 = _16 & 8;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  _18 = (int) instance_53(D);
  _19 = (int) channel_56(D);
  _20 = Ftm_Pwm_Ip_NotifIrq[_18][_19];
  _21 = (int) instance_53(D);
  _22 = (int) channel_56(D);
  _23 = _20 & 247;
  Ftm_Pwm_Ip_NotifIrq[_21][_22] = _23;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_53(D), channel_56(D));
  if (chMode_59 == 34)
    goto <bb 9>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (chMode_59 == 98)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (chMode_59 == 97)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (chMode_59 == 33)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _24 = pairChId_57 * 2;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_53(D), _24);
  _25 = pairChId_57 * 2;
  _26 = _25 + 1;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_53(D), _26);

  <bb 10> :
  _27 = (int) instance_53(D);
  _28 = (int) channel_56(D);
  _29 = Ftm_Pwm_Ip_NotifIrq[_27][_28];
  _30 = (int) _29;
  _31 = _30 & 1;
  if (_31 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_55, channel_56(D), 1);

  <bb 12> :
  if (chMode_59 == 34)
    goto <bb 16>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (chMode_59 == 98)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  if (chMode_59 == 97)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  if (chMode_59 == 33)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  _32 = (int) instance_53(D);
  _33 = pairChId_57 * 2;
  _34 = (int) _33;
  _35 = Ftm_Pwm_Ip_NotifIrq[_32][_34];
  _36 = (int) _35;
  _37 = _36 & 1;
  if (_37 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _38 = pairChId_57 * 2;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_55, _38, 1);

  <bb 18> :
  _39 = (int) instance_53(D);
  _40 = pairChId_57 * 2;
  _41 = _40 + 1;
  _42 = (int) _41;
  _43 = Ftm_Pwm_Ip_NotifIrq[_39][_42];
  _44 = (int) _43;
  _45 = _44 & 1;
  if (_45 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _46 = pairChId_57 * 2;
  _47 = _46 + 1;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_55, _47, 1);

  <bb 20> :
  return;

}


Ftm_Pwm_Ip_SpecialCheckNotification (uint8 instance, uint8 channel)
{
  uint8 pairChId;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  int _1;
  struct Ftm_Pwm_Ip_HwAddrType * _2;
  int _3;
  int _4;
  unsigned char _5;
  int _6;
  int _7;
  int _8;
  int _9;
  unsigned char _10;
  int _11;
  int _12;
  unsigned char _13;
  int _14;
  int _15;
  unsigned char _16;
  int _17;
  int _18;
  int _19;
  int _20;
  unsigned char _21;
  int _22;
  int _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  unsigned char _27;

  <bb 2> :
  pairChId_32 = channel_31(D) >> 1;
  _1 = (int) instance_33(D);
  _2 = Ftm_Pwm_Ip_aFtmBase[_1];
  chMode_36 = Ftm_Pwm_Ip_GetChannelMode (_2, channel_31(D));
  _3 = (int) instance_33(D);
  _4 = (int) channel_31(D);
  _5 = Ftm_Pwm_Ip_NotifIrq[_3][_4];
  _6 = (int) _5;
  _7 = _6 & 2;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = (int) instance_33(D);
  _9 = (int) channel_31(D);
  _10 = Ftm_Pwm_Ip_NotifIrq[_8][_9];
  _11 = (int) instance_33(D);
  _12 = (int) channel_31(D);
  _13 = _10 | 4;
  Ftm_Pwm_Ip_NotifIrq[_11][_12] = _13;

  <bb 4> :
  _14 = (int) instance_33(D);
  _15 = (int) channel_31(D);
  _16 = Ftm_Pwm_Ip_NotifIrq[_14][_15];
  _17 = (int) _16;
  _18 = _17 & 8;
  if (_18 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _19 = (int) instance_33(D);
  _20 = (int) channel_31(D);
  _21 = Ftm_Pwm_Ip_NotifIrq[_19][_20];
  _22 = (int) instance_33(D);
  _23 = (int) channel_31(D);
  _24 = _21 & 247;
  Ftm_Pwm_Ip_NotifIrq[_22][_23] = _24;

  <bb 6> :
  Ftm_Pwm_Ip_DisableCmpIrq (instance_33(D), channel_31(D));
  if (chMode_36 == 34)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (chMode_36 == 98)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (chMode_36 == 97)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (chMode_36 == 33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _25 = pairChId_32 * 2;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_33(D), _25);
  _26 = pairChId_32 * 2;
  _27 = _26 + 1;
  Ftm_Pwm_Ip_DisableCmpIrq (instance_33(D), _27);

  <bb 11> :
  return;

}


Ftm_Pwm_Ip_UpdateSync (uint8 instance, const struct Ftm_Pwm_Ip_SyncCfgType * syncCfg)
{
  boolean hardwareSync;
  Ftm_Pwm_Ip_StatusType retStatus;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  Ftm_Pwm_Ip_StatusType D.7158;
  int iftmp.18;
  int _1;
  _Bool _2;
  _Bool _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;
  <unnamed type> _7;
  <unnamed type> _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  _Bool _12;
  _Bool _13;
  _Bool _14;
  _Bool _15;
  unsigned char _16;
  int iftmp.18_19;
  int iftmp.18_29;
  int iftmp.18_30;
  Ftm_Pwm_Ip_StatusType _45;

  <bb 2> :
  _1 = (int) instance_21(D);
  ftmBase_23 = Ftm_Pwm_Ip_aFtmBase[_1];
  retStatus_24 = 0;
  hardwareSync_25 = 0;
  _2 = instance_21(D) <= 3;
  DevAssert (_2);
  _3 = syncCfg_27(D) != 0B;
  DevAssert (_3);
  _4 = syncCfg_27(D)->hwSync0;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _5 = syncCfg_27(D)->hwSync1;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _6 = syncCfg_27(D)->hwSync2;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.18_30 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.18_29 = 0;

  <bb 7> :
  # iftmp.18_19 = PHI <iftmp.18_30(5), iftmp.18_29(6)>
  hardwareSync_31 = (boolean) iftmp.18_19;
  _7 = syncCfg_27(D)->syncMode;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  if (hardwareSync_31 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  retStatus_32 = 1;

  <bb 10> :
  # retStatus_17 = PHI <retStatus_24(7), retStatus_24(8), retStatus_32(9)>
  _8 = syncCfg_27(D)->counterSync;
  if (_8 == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  retStatus_33 = 1;

  <bb 12> :
  # retStatus_18 = PHI <retStatus_17(10), retStatus_33(11)>
  if (retStatus_18 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Ftm_Pwm_Ip_ConfigureSWandHWSync (instance_21(D), syncCfg_27(D));
  Ftm_Pwm_Ip_SetPwmSyncModeCmd (ftmBase_23, 1);
  _9 = syncCfg_27(D)->hwSync0;
  Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc (ftmBase_23, 0, _9);
  _10 = syncCfg_27(D)->hwSync1;
  Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc (ftmBase_23, 1, _10);
  _11 = syncCfg_27(D)->hwSync2;
  Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc (ftmBase_23, 2, _11);
  _12 = syncCfg_27(D)->hwTriggerAutoClear;
  Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd (ftmBase_23, _12);
  _13 = syncCfg_27(D)->maxLoadPoint;
  Ftm_Pwm_Ip_SetMaxLoadingCmd (ftmBase_23, _13);
  _14 = syncCfg_27(D)->minLoadPoint;
  Ftm_Pwm_Ip_SetMinLoadingCmd (ftmBase_23, _14);
  _15 = syncCfg_27(D)->halfCycleLoadPoint;
  Ftm_Pwm_Ip_SetHalfCycleCmd (ftmBase_23, _15);
  _16 = syncCfg_27(D)->loadPointFreq;
  Ftm_Pwm_Ip_SetLoadFreq (ftmBase_23, _16);
  Ftm_Pwm_Ip_ConfigureSyncType (instance_21(D), syncCfg_27(D));

  <bb 14> :
  _45 = retStatus_18;

  <bb 15> :
<L13>:
  return _45;

}


Ftm_Pwm_Ip_ConfigureSyncType (uint8 instance, const struct Ftm_Pwm_Ip_SyncCfgType * syncCfg)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  <unnamed type> _2;
  _Bool _3;
  <unnamed type> _4;
  _Bool _5;
  <unnamed type> _6;
  _Bool _7;
  <unnamed type> _8;
  _Bool _9;

  <bb 2> :
  _1 = (int) instance_10(D);
  ftmBase_12 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = syncCfg_13(D)->outMaskSync;
  _3 = _2 != 0;
  Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd (ftmBase_12, _3);
  _4 = syncCfg_13(D)->inverterSync;
  _5 = _4 != 0;
  Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd (ftmBase_12, _5);
  _6 = syncCfg_13(D)->outRegSync;
  _7 = _6 != 0;
  Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd (ftmBase_12, _7);
  _8 = syncCfg_13(D)->initCounterSync;
  _9 = _8 != 0;
  Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd (ftmBase_12, _9);
  return;

}


Ftm_Pwm_Ip_ConfigureSWandHWSync (uint8 instance, const struct Ftm_Pwm_Ip_SyncCfgType * syncCfg)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  <unnamed type> _2;
  <unnamed type> _3;
  _Bool _4;
  <unnamed type> _5;
  _Bool _6;
  <unnamed type> _7;
  _Bool _8;
  <unnamed type> _9;
  _Bool _10;
  <unnamed type> _11;
  _Bool _12;
  <unnamed type> _13;
  _Bool _14;
  <unnamed type> _15;
  _Bool _16;
  <unnamed type> _17;
  _Bool _18;
  <unnamed type> _19;
  _Bool _20;
  <unnamed type> _21;
  _Bool _22;

  <bb 2> :
  _1 = (int) instance_24(D);
  ftmBase_26 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = syncCfg_27(D)->syncMode;
  switch (_2) <default: <L2> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  _3 = syncCfg_27(D)->outMaskSync;
  _4 = _3 != 0;
  Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd (ftmBase_26, _4);
  Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd (ftmBase_26, 0);
  _5 = syncCfg_27(D)->inverterSync;
  _6 = _5 != 0;
  Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd (ftmBase_26, _6);
  Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd (ftmBase_26, 0);
  _7 = syncCfg_27(D)->outRegSync;
  _8 = _7 != 0;
  Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd (ftmBase_26, _8);
  Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd (ftmBase_26, 0);
  _9 = syncCfg_27(D)->initCounterSync;
  _10 = _9 != 0;
  Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd (ftmBase_26, _10);
  Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd (ftmBase_26, 0);
  _11 = syncCfg_27(D)->counterSync;
  _12 = _11 != 0;
  Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd (ftmBase_26, _12);
  Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd (ftmBase_26, 0);
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd (ftmBase_26, 0);
  _13 = syncCfg_27(D)->outMaskSync;
  _14 = _13 != 0;
  Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd (ftmBase_26, _14);
  Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd (ftmBase_26, 0);
  _15 = syncCfg_27(D)->inverterSync;
  _16 = _15 != 0;
  Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd (ftmBase_26, _16);
  Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd (ftmBase_26, 0);
  _17 = syncCfg_27(D)->outRegSync;
  _18 = _17 != 0;
  Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd (ftmBase_26, _18);
  Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd (ftmBase_26, 0);
  _19 = syncCfg_27(D)->initCounterSync;
  _20 = _19 != 0;
  Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd (ftmBase_26, _20);
  Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd (ftmBase_26, 0);
  _21 = syncCfg_27(D)->counterSync;
  _22 = _21 != 0;
  Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd (ftmBase_26, _22);
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Ftm_Pwm_Ip_UpdateNotificationStateCombine (uint8 instance, uint8 channel, Ftm_Ftm_Ip_EdgeNotifType edgeNotif)
{
  int _1;
  int _2;
  unsigned char _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  int _11;
  unsigned int _12;
  unsigned int _13;
  unsigned char _14;
  int _15;
  int _16;
  <unnamed type> _17;
  int _18;
  int _19;
  unsigned char _20;
  int _21;
  int _22;
  unsigned char _23;
  int _24;
  unsigned int _25;
  unsigned int _26;
  unsigned char _27;
  int _28;
  unsigned int _29;
  unsigned int _30;
  unsigned char _31;
  int _32;
  int _33;
  <unnamed type> _34;
  int _35;
  unsigned int _36;
  unsigned int _37;
  unsigned char _38;
  int _39;
  unsigned int _40;
  unsigned int _41;
  unsigned char _42;
  int _43;
  int _44;
  unsigned char _45;
  int _46;
  int _47;
  unsigned char _48;

  <bb 2> :
  switch (edgeNotif_52(D)) <default: <L9> [INV], case 1: <L1> [INV], case 2: <L5> [INV], case 3: <L0> [INV]>

  <bb 3> :
<L0>:
  _1 = (int) instance_53(D);
  _2 = (int) channel_54(D);
  _3 = Ftm_Pwm_Ip_NotifIrq[_1][_2];
  _4 = (int) instance_53(D);
  _5 = (int) channel_54(D);
  _6 = _3 | 1;
  Ftm_Pwm_Ip_NotifIrq[_4][_5] = _6;
  _7 = (int) instance_53(D);
  _8 = (unsigned int) channel_54(D);
  _9 = _8 + 1;
  _10 = Ftm_Pwm_Ip_NotifIrq[_7][_9];
  _11 = (int) instance_53(D);
  _12 = (unsigned int) channel_54(D);
  _13 = _12 + 1;
  _14 = _10 | 1;
  Ftm_Pwm_Ip_NotifIrq[_11][_13] = _14;
  goto <bb 13>; [INV]

  <bb 4> :
<L1>:
  _15 = (int) instance_53(D);
  _16 = (int) channel_54(D);
  _17 = Ftm_Pwm_Ip_Polarity[_15][_16];
  if (_17 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _18 = (int) instance_53(D);
  _19 = (int) channel_54(D);
  _20 = Ftm_Pwm_Ip_NotifIrq[_18][_19];
  _21 = (int) instance_53(D);
  _22 = (int) channel_54(D);
  _23 = _20 | 1;
  Ftm_Pwm_Ip_NotifIrq[_21][_22] = _23;
  goto <bb 7>; [INV]

  <bb 6> :
  _24 = (int) instance_53(D);
  _25 = (unsigned int) channel_54(D);
  _26 = _25 + 1;
  _27 = Ftm_Pwm_Ip_NotifIrq[_24][_26];
  _28 = (int) instance_53(D);
  _29 = (unsigned int) channel_54(D);
  _30 = _29 + 1;
  _31 = _27 | 1;
  Ftm_Pwm_Ip_NotifIrq[_28][_30] = _31;

  <bb 7> :
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  _32 = (int) instance_53(D);
  _33 = (int) channel_54(D);
  _34 = Ftm_Pwm_Ip_Polarity[_32][_33];
  if (_34 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _35 = (int) instance_53(D);
  _36 = (unsigned int) channel_54(D);
  _37 = _36 + 1;
  _38 = Ftm_Pwm_Ip_NotifIrq[_35][_37];
  _39 = (int) instance_53(D);
  _40 = (unsigned int) channel_54(D);
  _41 = _40 + 1;
  _42 = _38 | 1;
  Ftm_Pwm_Ip_NotifIrq[_39][_41] = _42;
  goto <bb 11>; [INV]

  <bb 10> :
  _43 = (int) instance_53(D);
  _44 = (int) channel_54(D);
  _45 = Ftm_Pwm_Ip_NotifIrq[_43][_44];
  _46 = (int) instance_53(D);
  _47 = (int) channel_54(D);
  _48 = _45 | 1;
  Ftm_Pwm_Ip_NotifIrq[_46][_47] = _48;

  <bb 11> :
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  return;

}


Ftm_Pwm_Ip_UpdateNotificationState (uint8 instance, uint8 channel, Ftm_Ftm_Ip_EdgeNotifType edgeNotif)
{
  int _1;
  int _2;
  unsigned char _3;
  int _4;
  int _5;
  unsigned char _6;
  int _7;
  int _8;
  <unnamed type> _9;
  int _10;
  int _11;
  unsigned char _12;
  int _13;
  int _14;
  unsigned char _15;
  int _16;
  int _17;
  unsigned char _18;
  int _19;
  int _20;
  unsigned char _21;
  int _22;
  int _23;
  <unnamed type> _24;
  int _25;
  int _26;
  unsigned char _27;
  int _28;
  int _29;
  unsigned char _30;
  int _31;
  int _32;
  unsigned char _33;
  int _34;
  int _35;
  unsigned char _36;

  <bb 2> :
  switch (edgeNotif_40(D)) <default: <L9> [INV], case 1: <L1> [INV], case 2: <L5> [INV], case 3: <L0> [INV]>

  <bb 3> :
<L0>:
  _1 = (int) instance_41(D);
  _2 = (int) channel_42(D);
  _3 = Ftm_Pwm_Ip_NotifIrq[_1][_2];
  _4 = (int) instance_41(D);
  _5 = (int) channel_42(D);
  _6 = _3 | 3;
  Ftm_Pwm_Ip_NotifIrq[_4][_5] = _6;
  goto <bb 13>; [INV]

  <bb 4> :
<L1>:
  _7 = (int) instance_41(D);
  _8 = (int) channel_42(D);
  _9 = Ftm_Pwm_Ip_Polarity[_7][_8];
  if (_9 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _10 = (int) instance_41(D);
  _11 = (int) channel_42(D);
  _12 = Ftm_Pwm_Ip_NotifIrq[_10][_11];
  _13 = (int) instance_41(D);
  _14 = (int) channel_42(D);
  _15 = _12 | 2;
  Ftm_Pwm_Ip_NotifIrq[_13][_14] = _15;
  goto <bb 7>; [INV]

  <bb 6> :
  _16 = (int) instance_41(D);
  _17 = (int) channel_42(D);
  _18 = Ftm_Pwm_Ip_NotifIrq[_16][_17];
  _19 = (int) instance_41(D);
  _20 = (int) channel_42(D);
  _21 = _18 | 1;
  Ftm_Pwm_Ip_NotifIrq[_19][_20] = _21;

  <bb 7> :
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  _22 = (int) instance_41(D);
  _23 = (int) channel_42(D);
  _24 = Ftm_Pwm_Ip_Polarity[_22][_23];
  if (_24 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _25 = (int) instance_41(D);
  _26 = (int) channel_42(D);
  _27 = Ftm_Pwm_Ip_NotifIrq[_25][_26];
  _28 = (int) instance_41(D);
  _29 = (int) channel_42(D);
  _30 = _27 | 2;
  Ftm_Pwm_Ip_NotifIrq[_28][_29] = _30;
  goto <bb 11>; [INV]

  <bb 10> :
  _31 = (int) instance_41(D);
  _32 = (int) channel_42(D);
  _33 = Ftm_Pwm_Ip_NotifIrq[_31][_32];
  _34 = (int) instance_41(D);
  _35 = (int) channel_42(D);
  _36 = _33 | 1;
  Ftm_Pwm_Ip_NotifIrq[_34][_35] = _36;

  <bb 11> :
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  return;

}


Ftm_Pwm_Ip_DisableCmpIrq (uint8 instance, uint8 channel)
{
  uint8 index;
  Ftm_Pwm_Ip_EdgeInterruptType notifyState;
  Ftm_Pwm_Ip_OutputStateType outputValue;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  unsigned char index.4_5;

  <bb 2> :
  _1 = (int) instance_9(D);
  ftmBase_11 = Ftm_Pwm_Ip_aFtmBase[_1];
  outputValue_12 = 0;
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_11, channel_13(D), 0);
  Ftm_Pwm_Ip_ClearChnEventFlag (ftmBase_11, channel_13(D));
  index_16 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) instance_9(D);
  _3 = (int) index_7;
  _4 = Ftm_Pwm_Ip_NotifIrq[_2][_3];
  notifyState_17 = _4 & 10;
  if (notifyState_17 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  outputValue_19 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  index.4_5 = index_7;
  index_18 = index.4_5 + 1;

  <bb 6> :
  # index_7 = PHI <index_16(2), index_18(5)>
  if (index_7 <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # outputValue_6 = PHI <outputValue_19(4), outputValue_12(6)>
  if (outputValue_6 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_11, 0);

  <bb 9> :
  Ftm_Pwm_Ip_ClearTimerOverflow (ftmBase_11);
  return;

}


Ftm_Pwm_Ip_InitPair (uint8 instance, const struct Ftm_Pwm_Ip_PairCfgType * userPairCfg)
{
  uint8 pairChId;
  uint8 mainChId;
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  _Bool _2;
  _Bool _3;
  unsigned char _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  int _12;
  short unsigned int _13;
  unsigned char _14;
  _Bool _15;
  _Bool _16;
  <unnamed type> _17;
  <unnamed type> _18;
  <unnamed type> _19;
  unsigned char _20;
  _Bool _21;
  unsigned char _22;
  _Bool _23;
  _Bool _24;

  <bb 2> :
  _1 = (int) instance_27(D);
  ftmBase_29 = Ftm_Pwm_Ip_aFtmBase[_1];
  mainChId_30 = 0;
  pairChId_31 = 0;
  _2 = instance_27(D) <= 3;
  DevAssert (_2);
  _3 = userPairCfg_33(D) != 0B;
  DevAssert (_3);
  _4 = userPairCfg_33(D)->pairId;
  _5 = _4 <= 3;
  DevAssert (_5);
  _6 = userPairCfg_33(D)->deadtimeEn;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = userPairCfg_33(D)->complementaryModeEn;
  _8 = _7;
  DevAssert (_8);

  <bb 4> :
  _9 = userPairCfg_33(D)->pairId;
  mainChId_37 = _9 * 2;
  pairChId_38 = mainChId_37 + 1;
  _10 = (int) instance_27(D);
  _11 = userPairCfg_33(D)->pairId;
  _12 = (int) _11;
  _13 = userPairCfg_33(D)->phaseShiftValue;
  Ftm_Pwm_Ip_PhaseShift[_10][_12] = _13;
  _14 = userPairCfg_33(D)->pairId;
  _15 = userPairCfg_33(D)->complementaryModeEn;
  Ftm_Pwm_Ip_SetDualChnCompCmd (ftmBase_29, _14, _15);
  _16 = userPairCfg_33(D)->complementaryModeEn;
  if (_16 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _17 = Ftm_Pwm_Ip_GetChnOutputPolarity (ftmBase_29, mainChId_37);
  if (_17 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _18 = userPairCfg_33(D)->pairChPolarity;
  if (_18 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_SetChnOutputPolarityCmd (ftmBase_29, pairChId_38, 0);
  goto <bb 12>; [INV]

  <bb 8> :
  Ftm_Pwm_Ip_SetChnOutputPolarityCmd (ftmBase_29, pairChId_38, 1);
  goto <bb 12>; [INV]

  <bb 9> :
  _19 = userPairCfg_33(D)->pairChPolarity;
  if (_19 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Ftm_Pwm_Ip_SetChnOutputPolarityCmd (ftmBase_29, pairChId_38, 1);
  goto <bb 12>; [INV]

  <bb 11> :
  Ftm_Pwm_Ip_SetChnOutputPolarityCmd (ftmBase_29, pairChId_38, 0);

  <bb 12> :
  Ftm_Pwm_Ip_EnablePwmChannelOutputs (ftmBase_29, pairChId_38);
  _20 = userPairCfg_33(D)->pairId;
  _21 = userPairCfg_33(D)->pairSyncEn;
  Ftm_Pwm_Ip_SetDualChnPwmSyncCmd (ftmBase_29, _20, _21);
  _22 = userPairCfg_33(D)->pairId;
  _23 = userPairCfg_33(D)->deadtimeEn;
  Ftm_Pwm_Ip_SetDualChnDeadtimeCmd (ftmBase_29, _22, _23);
  _24 = userPairCfg_33(D)->pairExtTrigEn;
  Ftm_Pwm_Ip_SetChnTriggerCmd (ftmBase_29, pairChId_38, _24);
  Ftm_Pwm_Ip_SetSoftwareTriggerCmd (ftmBase_29, 1);
  return;

}


Ftm_Pwm_Ip_CalculatePhaseShift (uint8 instance, uint16 dutyCycle, uint16 phaseShift)
{
  uint16 CnVValue;
  uint16 D.7031;
  int _1;
  short unsigned int _2;
  int _3;
  uint16 _13;

  <bb 2> :
  CnVValue_5 = 0;
  _1 = (int) instance_6(D);
  _2 = Ftm_Pwm_Ip_Period[_1];
  if (dutyCycle_8(D) == _2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) instance_6(D);
  CnVValue_12 = Ftm_Pwm_Ip_Period[_3];
  goto <bb 7>; [INV]

  <bb 4> :
  if (dutyCycle_8(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  CnVValue_11 = phaseShift_9(D);
  goto <bb 7>; [INV]

  <bb 6> :
  CnVValue_10 = phaseShift_9(D) + dutyCycle_8(D);

  <bb 7> :
  # CnVValue_4 = PHI <CnVValue_12(3), CnVValue_11(5), CnVValue_10(6)>
  _13 = CnVValue_4;

  <bb 8> :
<L6>:
  return _13;

}


Ftm_Pwm_Ip_ValidateParamDeadTime (uint8 instance, uint8 channel, uint16 deadTimeVal)
{
  uint16 compareOdd;
  uint16 compareEven;
  uint8 deadTimePs;
  uint8 prescaler;
  uint16 oddCounterVal;
  uint16 evenCounterVal;
  uint8 pairId;
  boolean retVal;
  const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase;
  boolean D.7017;
  int _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  int _5;
  short unsigned int _6;
  boolean _29;

  <bb 2> :
  _1 = (int) instance_9(D);
  ftmBase_11 = Ftm_Pwm_Ip_aFtmBase[_1];
  retVal_12 = 0;
  pairId_14 = channel_13(D) >> 1;
  _2 = pairId_14 * 2;
  evenCounterVal_16 = Ftm_Pwm_Ip_GetChnCountVal (ftmBase_11, _2);
  _3 = pairId_14 * 2;
  _4 = _3 + 1;
  oddCounterVal_18 = Ftm_Pwm_Ip_GetChnCountVal (ftmBase_11, _4);
  prescaler_20 = Ftm_Pwm_Ip_GetClockPs (ftmBase_11);
  deadTimePs_22 = Ftm_Pwm_Ip_GetDeadtimePrescaler (ftmBase_11);
  compareEven_23 = oddCounterVal_18 - evenCounterVal_16;
  _5 = (int) instance_9(D);
  _6 = Ftm_Pwm_Ip_Period[_5];
  compareOdd_24 = _6 - compareEven_23;
  if (deadTimeVal_25(D) <= 1023)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (deadTimeVal_25(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  retVal_26 = 1;

  <bb 5> :
  # retVal_7 = PHI <retVal_12(2), retVal_12(3), retVal_26(4)>
  if (prescaler_20 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  if (deadTimePs_22 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (deadTimePs_22 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  if (deadTimeVal_25(D) < compareEven_23)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (deadTimeVal_25(D) < compareOdd_24)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  retVal_27 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  retVal_28 = 0;

  <bb 12> :
  # retVal_8 = PHI <retVal_7(5), retVal_7(7), retVal_27(10), retVal_28(11)>
  _29 = retVal_8;

  <bb 13> :
<L13>:
  return _29;

}


Ftm_Pwm_Ip_SetOutputForForcedChannel (uint8 instance, uint8 channel, boolean activeState)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  int _11;

  <bb 2> :
  _1 = (int) instance_14(D);
  ftmBase_16 = Ftm_Pwm_Ip_aFtmBase[_1];
  if (activeState_17(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Ftm_Pwm_Ip_DisableCmpIrq (instance_14(D), channel_18(D));
  goto <bb 8>; [INV]

  <bb 4> :
  _2 = (int) instance_14(D);
  _3 = (int) channel_18(D);
  _4 = Ftm_Pwm_Ip_NotifIrq[_2][_3];
  _5 = (int) _4;
  _6 = _5 & 2;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_16, 1);

  <bb 6> :
  _7 = (int) instance_14(D);
  _8 = (int) channel_18(D);
  _9 = Ftm_Pwm_Ip_NotifIrq[_7][_8];
  _10 = (int) _9;
  _11 = _10 & 1;
  if (_11 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Ftm_Pwm_Ip_UpdateChnInt (ftmBase_16, channel_18(D), 1);

  <bb 8> :
  return;

}


Ftm_Pwm_Ip_SetOutputForIdleChannel (uint8 instance, uint8 channel)
{
  struct Ftm_Pwm_Ip_HwAddrType * ftmBase;
  int _1;
  int _2;
  int _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  int _8;
  unsigned char _9;
  int _10;
  int _11;
  unsigned char _12;
  _Bool _13;
  _Bool _14;
  int _15;
  int _16;
  unsigned char _17;
  int _18;
  int _19;
  unsigned char _20;

  <bb 2> :
  _1 = (int) instance_23(D);
  ftmBase_25 = Ftm_Pwm_Ip_aFtmBase[_1];
  _2 = (int) instance_23(D);
  _3 = (int) channel_26(D);
  _4 = Ftm_Pwm_Ip_NotifIrq[_2][_3];
  _5 = (int) _4;
  _6 = _5 & 2;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = (int) instance_23(D);
  _8 = (int) channel_26(D);
  _9 = Ftm_Pwm_Ip_NotifIrq[_7][_8];
  _10 = (int) instance_23(D);
  _11 = (int) channel_26(D);
  _12 = _9 | 4;
  Ftm_Pwm_Ip_NotifIrq[_10][_11] = _12;

  <bb 4> :
  _13 = Ftm_Pwm_Ip_IsEnableFaultControlMode (ftmBase_25);
  if (_13 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _14 = Ftm_Pwm_Ip_IsEnableFaultInput (ftmBase_25);
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _15 = (int) instance_23(D);
  _16 = (int) channel_26(D);
  _17 = Ftm_Pwm_Ip_NotifIrq[_15][_16];
  _18 = (int) instance_23(D);
  _19 = (int) channel_26(D);
  _20 = _17 | 8;
  Ftm_Pwm_Ip_NotifIrq[_18][_19] = _20;
  Ftm_Pwm_Ip_SetTimerOverflowInt (ftmBase_25, 1);

  <bb 7> :
  Ftm_Pwm_Ip_DisableCmpIrq (instance_23(D), channel_26(D));
  return;

}


Ftm_Pwm_Ip_SetSimOutputBufferEn (struct Ftm_Pwm_Ip_SimType * const simBase, uint8 instance)
{
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = (int) instance_5(D);
  _2 = 65536 << _1;
  _3 ={v} simBase_7(D)->MISCTRL0;
  _4 = _2 | _3;
  simBase_7(D)->MISCTRL0 ={v} _4;
  return;

}


Ftm_Pwm_Ip_SetFaultFilterEn (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 faultId, boolean faultFilEn)
{
  uint32 faultFilterEn;
  long unsigned int iftmp.31;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int iftmp.31_10;
  long unsigned int iftmp.31_12;
  long unsigned int iftmp.31_13;

  <bb 2> :
  if (faultFilEn_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.31_13 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.31_12 = 0;

  <bb 5> :
  # iftmp.31_10 = PHI <iftmp.31_13(3), iftmp.31_12(4)>
  faultFilterEn_14 = iftmp.31_10;
  _1 ={v} ftmBase_16(D)->FLTCTRL;
  _2 = (int) faultId_17(D);
  _3 = 16 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  _6 = (int) faultId_17(D);
  _7 = faultFilterEn_14 << _6;
  _8 = _7 << 4;
  _9 = _5 | _8;
  ftmBase_16(D)->FLTCTRL ={v} _9;
  return;

}


Ftm_Pwm_Ip_SetFaultInputEn (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 faultId, boolean faultEn)
{
  uint32 faultInEn;
  long unsigned int iftmp.32;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int iftmp.32_9;
  long unsigned int iftmp.32_11;
  long unsigned int iftmp.32_12;

  <bb 2> :
  if (faultEn_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.32_12 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.32_11 = 0;

  <bb 5> :
  # iftmp.32_9 = PHI <iftmp.32_12(3), iftmp.32_11(4)>
  faultInEn_13 = iftmp.32_9;
  _1 ={v} ftmBase_15(D)->FLTCTRL;
  _2 = (int) faultId_16(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  _6 = (int) faultId_16(D);
  _7 = faultInEn_13 << _6;
  _8 = _5 | _7;
  ftmBase_15(D)->FLTCTRL ={v} _8;
  return;

}


Ftm_Pwm_Ip_SetFaultPolarity (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 faultId, Ftm_Pwm_Ip_PolarityType faultPol)
{
  uint32 faultInPol;
  _Bool _1;
  int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  _1 = faultPol_11(D) != 0;
  _2 = (int) _1;
  faultInPol_12 = (uint32) _2;
  _3 ={v} ftmBase_14(D)->FLTPOL;
  _4 = (int) faultId_15(D);
  _5 = 1 << _4;
  _6 = ~_5;
  _7 = _3 & _6;
  _8 = (int) faultId_15(D);
  _9 = faultInPol_12 << _8;
  _10 = _7 | _9;
  ftmBase_14(D)->FLTPOL ={v} _10;
  return;

}


Ftm_Pwm_Ip_SetFaultOutputState (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_FaultOutputStateType faultState)
{
  long unsigned int iftmp.28;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.28_4;
  long unsigned int iftmp.28_8;
  long unsigned int iftmp.28_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->FLTCTRL;
  _2 = _1 & 4294934527;
  if (faultState_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.28_9 = 32768;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.28_8 = 0;

  <bb 5> :
  # iftmp.28_4 = PHI <iftmp.28_9(3), iftmp.28_8(4)>
  _3 = iftmp.28_4 | _2;
  ftmBase_6(D)->FLTCTRL ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetFaultFilterValue (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 faultFilterValue)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} ftmBase_8(D)->FLTCTRL;
  _2 = _1 & 4294963455;
  _3 = (long unsigned int) faultFilterValue_9(D);
  _4 = _3 << 8;
  _5 = _4 & 3840;
  _6 = _2 | _5;
  ftmBase_8(D)->FLTCTRL ={v} _6;
  return;

}


Ftm_Pwm_Ip_IsEnableFaultInput (const struct Ftm_Pwm_Ip_HwAddrType * ftmBase)
{
  boolean D.6987;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} ftmBase_4(D)->FLTCTRL;
  _2 = _1 & 15;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}


Ftm_Pwm_Ip_IsEnableFaultControlMode (const struct Ftm_Pwm_Ip_HwAddrType * ftmBase)
{
  boolean D.6985;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _6;

  <bb 2> :
  _1 ={v} ftmBase_5(D)->MODE;
  _2 = _1 >> 5;
  _3 = _2 & 3;
  _6 = _3 != 0;

  <bb 3> :
<L0>:
  return _6;

}


Ftm_Pwm_Ip_SetFaultInterruptEnable (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.29;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.29_4;
  long unsigned int iftmp.29_8;
  long unsigned int iftmp.29_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->MODE;
  _2 = _1 & 4294967167;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.29_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.29_8 = 0;

  <bb 5> :
  # iftmp.29_4 = PHI <iftmp.29_9(3), iftmp.29_8(4)>
  _3 = iftmp.29_4 | _2;
  ftmBase_6(D)->MODE ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetDualChFaultCtr (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (long unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 64 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (long unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 64 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetFaultControlMode (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_FaultControlModeType faultMode)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  switch (faultMode_12(D)) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV]>

  <bb 3> :
<L0>:
  _1 ={v} ftmBase_14(D)->MODE;
  _2 = _1 & 4294967199;
  ftmBase_14(D)->MODE ={v} _2;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  _3 ={v} ftmBase_14(D)->MODE;
  _4 = _3 & 4294967199;
  _5 = _4 | 32;
  ftmBase_14(D)->MODE ={v} _5;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  _6 ={v} ftmBase_14(D)->MODE;
  _7 = _6 & 4294967199;
  _8 = _7 | 64;
  ftmBase_14(D)->MODE ={v} _8;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  _9 ={v} ftmBase_14(D)->MODE;
  _10 = _9 | 96;
  ftmBase_14(D)->MODE ={v} _10;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  return;

}


Ftm_Pwm_Ip_SetChnTriggerCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enable)
{
  uint32 value;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;

  <bb 2> :
  value_13 = 0;
  if (channel_14(D) <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (long unsigned int) channel_14(D);
  value_17 = 16 << _1;
  goto <bb 7>; [INV]

  <bb 4> :
  if (channel_14(D) <= 5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _2 = (long unsigned int) channel_14(D);
  _3 = _2 + 4294967294;
  value_16 = 1 << _3;
  goto <bb 7>; [INV]

  <bb 6> :
  _4 = (long unsigned int) channel_14(D);
  _5 = _4 + 4294967290;
  value_15 = 256 << _5;

  <bb 7> :
  # value_11 = PHI <value_17(3), value_16(5), value_15(6)>
  if (enable_18(D) != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _6 ={v} ftmBase_20(D)->EXTTRIG;
  _7 = value_11 | _6;
  ftmBase_20(D)->EXTTRIG ={v} _7;
  goto <bb 10>; [INV]

  <bb 9> :
  _8 ={v} ftmBase_20(D)->EXTTRIG;
  _9 = ~value_11;
  _10 = _8 & _9;
  ftmBase_20(D)->EXTTRIG ={v} _10;

  <bb 10> :
  return;

}


Ftm_Pwm_Ip_Reset (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint8 chnIndex;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  int _5;
  unsigned char chnIndex.24_6;

  <bb 2> :
  Ftm_Pwm_Ip_UpdateWriteProtection (ftmBase_10(D), 0);
  _1 ={v} ftmBase_10(D)->SC;
  ftmBase_10(D)->SC ={v} _1;
  ftmBase_10(D)->CNT ={v} 0;
  ftmBase_10(D)->MOD ={v} 0;
  ftmBase_10(D)->CNTIN ={v} 0;
  _2 ={v} ftmBase_10(D)->STATUS;
  ftmBase_10(D)->STATUS ={v} _2;
  ftmBase_10(D)->MODE ={v} 4;
  ftmBase_10(D)->SYNC ={v} 0;
  ftmBase_10(D)->OUTINIT ={v} 0;
  ftmBase_10(D)->OUTMASK ={v} 0;
  ftmBase_10(D)->COMBINE ={v} 0;
  ftmBase_10(D)->DEADTIME ={v} 0;
  _3 ={v} ftmBase_10(D)->EXTTRIG;
  ftmBase_10(D)->EXTTRIG ={v} _3;
  ftmBase_10(D)->POL ={v} 0;
  ftmBase_10(D)->FMS ={v} 0;
  ftmBase_10(D)->FILTER ={v} 0;
  ftmBase_10(D)->QDCTRL ={v} 0;
  ftmBase_10(D)->CONF ={v} 0;
  ftmBase_10(D)->SYNCONF ={v} 0;
  ftmBase_10(D)->INVCTRL ={v} 0;
  ftmBase_10(D)->SWOCTRL ={v} 0;
  ftmBase_10(D)->PWMLOAD ={v} 0;
  ftmBase_10(D)->HCR ={v} 0;
  chnIndex_34 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) chnIndex_7;
  ftmBase_10(D)->CONTROLS[_4].CSC ={v} 0;
  _5 = (int) chnIndex_7;
  ftmBase_10(D)->CONTROLS[_5].CV ={v} 0;
  chnIndex.24_6 = chnIndex_7;
  chnIndex_37 = chnIndex.24_6 + 1;

  <bb 4> :
  # chnIndex_7 = PHI <chnIndex_34(2), chnIndex_37(3)>
  if (chnIndex_7 <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_UpdateWriteProtection (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  if (enable_8(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_10(D)->FMS;
  _2 = _1 | 64;
  ftmBase_10(D)->FMS ={v} _2;
  goto <bb 6>; [INV]

  <bb 4> :
  _3 ={v} ftmBase_10(D)->FMS;
  _4 = _3 & 64;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 ={v} ftmBase_10(D)->MODE;
  _6 = _5 | 4;
  ftmBase_10(D)->MODE ={v} _6;

  <bb 6> :
  return;

}


Ftm_Pwm_Ip_GetChannelMode (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint8 chPairId;
  uint8 mcombine;
  uint8 combine;
  uint8 retValue;
  Ftm_Pwm_Ip_ChannelModeType chMode;
  Ftm_Pwm_Ip_ChannelModeType D.7197;
  unsigned char D.7196;
  unsigned char D.7195;
  uint8 iftmp.23;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  unsigned char _17;
  <unnamed type> _18;
  unsigned char _19;
  unsigned char _20;
  unsigned char _21;
  int _22;
  uint8 iftmp.23_24;
  uint8 iftmp.23_31;
  uint8 iftmp.23_32;
  unsigned char _37;
  unsigned char _40;
  Ftm_Pwm_Ip_ChannelModeType _53;

  <bb 2> :
  chPairId_26 = channel_25(D) >> 1;
  _1 ={v} ftmBase_28(D)->COMBINE;
  _2 = (long unsigned int) chPairId_26;
  _3 = _2 * 8;
  _4 = 1 << _3;
  _5 = _1 & _4;
  _6 = (long unsigned int) chPairId_26;
  _7 = _6 * 8;
  _8 = _5 >> _7;
  combine_29 = (uint8) _8;
  _9 ={v} ftmBase_28(D)->COMBINE;
  _10 = (long unsigned int) chPairId_26;
  _11 = _10 * 8;
  _12 = 128 << _11;
  _13 = _9 & _12;
  _14 = (long unsigned int) chPairId_26;
  _15 = _14 * 8;
  _16 = _13 >> _15;
  mcombine_30 = (uint8) _16;
  if (mcombine_30 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.23_32 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.23_31 = 0;

  <bb 5> :
  # iftmp.23_24 = PHI <iftmp.23_32(3), iftmp.23_31(4)>
  mcombine_33 = iftmp.23_24;
  retValue_35 = Ftm_Pwm_Ip_GetChnEdgeLevel (ftmBase_28(D), channel_25(D));
  _17 = Ftm_Pwm_Ip_GetChnMode (ftmBase_28(D), channel_25(D));
  _37 = _17 << 2;
  retValue_38 = _37 | retValue_35;
  _18 = Ftm_Pwm_Ip_GetCpwms (ftmBase_28(D));
  _19 = (unsigned char) _18;
  _40 = _19 << 4;
  retValue_41 = _40 | retValue_38;
  _20 = combine_29 << 5;
  retValue_42 = retValue_41 | _20;
  _21 = mcombine_33 << 6;
  retValue_43 = retValue_42 | _21;
  _22 = (int) retValue_43;
  switch (_22) <default: <L11> [INV], case 9: <L4> [INV], case 10: <L3> [INV], case 17: <L6> [INV], case 18: <L5> [INV], case 33: <L8> [INV], case 34: <L7> [INV], case 97: <L10> [INV], case 98: <L9> [INV]>

  <bb 6> :
<L3>:
  chMode_50 = 10;
  goto <bb 15>; [INV]

  <bb 7> :
<L4>:
  chMode_51 = 9;
  goto <bb 15>; [INV]

  <bb 8> :
<L5>:
  chMode_48 = 18;
  goto <bb 15>; [INV]

  <bb 9> :
<L6>:
  chMode_49 = 17;
  goto <bb 15>; [INV]

  <bb 10> :
<L7>:
  chMode_46 = 34;
  goto <bb 15>; [INV]

  <bb 11> :
<L8>:
  chMode_47 = 33;
  goto <bb 15>; [INV]

  <bb 12> :
<L9>:
  chMode_44 = 98;
  goto <bb 15>; [INV]

  <bb 13> :
<L10>:
  chMode_45 = 97;
  goto <bb 15>; [INV]

  <bb 14> :
<L11>:
  chMode_52 = 255;

  <bb 15> :
  # chMode_23 = PHI <chMode_50(6), chMode_51(7), chMode_48(8), chMode_49(9), chMode_46(10), chMode_47(11), chMode_44(12), chMode_45(13), chMode_52(14)>
  _53 = chMode_23;

  <bb 16> :
<L13>:
  return _53;

}


Ftm_Pwm_Ip_GetDualChnDeadtimeCmd (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint8 detEnable;
  uint8 chPairId;
  boolean D.7499;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  boolean _14;

  <bb 2> :
  chPairId_10 = channel_9(D) >> 1;
  _1 ={v} ftmBase_12(D)->COMBINE;
  _2 = (long unsigned int) chPairId_10;
  _3 = _2 * 8;
  _4 = 16 << _3;
  _5 = _1 & _4;
  _6 = (long unsigned int) chPairId_10;
  _7 = _6 * 8;
  _8 = _5 >> _7;
  detEnable_13 = (uint8) _8;
  _14 = detEnable_13 == 16;

  <bb 3> :
<L0>:
  return _14;

}


Ftm_Pwm_Ip_GetDualChnCompCmd (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint8 comp;
  uint8 chPairId;
  boolean D.7497;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  boolean _14;

  <bb 2> :
  chPairId_10 = channel_9(D) >> 1;
  _1 ={v} ftmBase_12(D)->COMBINE;
  _2 = (long unsigned int) chPairId_10;
  _3 = _2 * 8;
  _4 = 2 << _3;
  _5 = _1 & _4;
  _6 = (long unsigned int) chPairId_10;
  _7 = _6 * 8;
  _8 = _5 >> _7;
  comp_13 = (uint8) _8;
  _14 = comp_13 == 2;

  <bb 3> :
<L0>:
  return _14;

}


Ftm_Pwm_Ip_GetPolInstance (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint16 D.7379;
  long unsigned int _1;
  uint16 _4;

  <bb 2> :
  _1 ={v} ftmBase_3(D)->POL;
  _4 = (uint16) _1;

  <bb 3> :
<L0>:
  return _4;

}


Ftm_Pwm_Ip_GetSoftwareOutputControl (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint16 D.7377;
  long unsigned int _1;
  uint16 _4;

  <bb 2> :
  _1 ={v} ftmBase_3(D)->SWOCTRL;
  _4 = (uint16) _1;

  <bb 3> :
<L0>:
  return _4;

}


Ftm_Pwm_Ip_SetHalfCycleCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  if (enable_6(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_8(D)->PWMLOAD;
  _2 = _1 | 256;
  ftmBase_8(D)->PWMLOAD ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 ={v} ftmBase_8(D)->PWMLOAD;
  _4 = _3 & 4294967039;
  ftmBase_8(D)->PWMLOAD ={v} _4;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetPwmLoadChnSelCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enable)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (enable_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->PWMLOAD;
  _2 = (int) channel_14(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  ftmBase_13(D)->PWMLOAD ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} ftmBase_13(D)->PWMLOAD;
  _6 = (int) channel_14(D);
  _7 = 1 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  ftmBase_13(D)->PWMLOAD ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SoftwareOutputControl (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint16 value)
{
  long unsigned int _1;

  <bb 2> :
  _1 = (long unsigned int) value_2(D);
  ftmBase_4(D)->SWOCTRL ={v} _1;
  return;

}


Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enable)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (enable_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->SWOCTRL;
  _2 = (int) channel_14(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  ftmBase_13(D)->SWOCTRL ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} ftmBase_13(D)->SWOCTRL;
  _6 = (int) channel_14(D);
  _7 = 1 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  ftmBase_13(D)->SWOCTRL ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetChnSoftwareCtrlVal (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enable)
{
  boolean statusPol;
  uint8 chPol;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned int _6;
  unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  unsigned int _11;
  unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;

  <bb 2> :
  _1 ={v} ftmBase_18(D)->POL;
  _2 = (long unsigned int) channel_19(D);
  _3 = _1 >> _2;
  _4 = (unsigned char) _3;
  chPol_20 = _4 & 1;
  statusPol_21 = chPol_20 != 0;
  if (enable_22(D) != statusPol_21)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 ={v} ftmBase_18(D)->SWOCTRL;
  _6 = (unsigned int) channel_19(D);
  _7 = _6 + 8;
  _8 = 1 << _7;
  _9 = _5 | _8;
  ftmBase_18(D)->SWOCTRL ={v} _9;
  goto <bb 5>; [INV]

  <bb 4> :
  _10 ={v} ftmBase_18(D)->SWOCTRL;
  _11 = (unsigned int) channel_19(D);
  _12 = _11 + 8;
  _13 = 1 << _12;
  _14 = ~_13;
  _15 = _10 & _14;
  ftmBase_18(D)->SWOCTRL ={v} _15;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.9;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.9_4;
  long unsigned int iftmp.9_8;
  long unsigned int iftmp.9_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294443007;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9_9 = 524288;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9_8 = 0;

  <bb 5> :
  # iftmp.9_4 = PHI <iftmp.9_9(3), iftmp.9_8(4)>
  _3 = iftmp.9_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.6;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.6_4;
  long unsigned int iftmp.6_8;
  long unsigned int iftmp.6_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294705151;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6_9 = 262144;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_8 = 0;

  <bb 5> :
  # iftmp.6_4 = PHI <iftmp.6_9(3), iftmp.6_8(4)>
  _3 = iftmp.6_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.11;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.11_4;
  long unsigned int iftmp.11_8;
  long unsigned int iftmp.11_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.11_9 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.11_8 = 0;

  <bb 5> :
  # iftmp.11_4 = PHI <iftmp.11_9(3), iftmp.11_8(4)>
  _3 = iftmp.11_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.13;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.13_4;
  long unsigned int iftmp.13_8;
  long unsigned int iftmp.13_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294901759;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.13_9 = 65536;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.13_8 = 0;

  <bb 5> :
  # iftmp.13_4 = PHI <iftmp.13_9(3), iftmp.13_8(4)>
  _3 = iftmp.13_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.8;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.8_4;
  long unsigned int iftmp.8_8;
  long unsigned int iftmp.8_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294963199;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8_9 = 4096;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_8 = 0;

  <bb 5> :
  # iftmp.8_4 = PHI <iftmp.8_9(3), iftmp.8_8(4)>
  _3 = iftmp.8_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.7;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.7_4;
  long unsigned int iftmp.7_8;
  long unsigned int iftmp.7_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294965247;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.7_9 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.7_8 = 0;

  <bb 5> :
  # iftmp.7_4 = PHI <iftmp.7_9(3), iftmp.7_8(4)>
  _3 = iftmp.7_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.5;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.5_4;
  long unsigned int iftmp.5_8;
  long unsigned int iftmp.5_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294966271;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_9 = 1024;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_8 = 0;

  <bb 5> :
  # iftmp.5_4 = PHI <iftmp.5_9(3), iftmp.5_8(4)>
  _3 = iftmp.5_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.10;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.10_4;
  long unsigned int iftmp.10_8;
  long unsigned int iftmp.10_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294966783;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.10_9 = 512;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.10_8 = 0;

  <bb 5> :
  # iftmp.10_4 = PHI <iftmp.10_9(3), iftmp.10_8(4)>
  _3 = iftmp.10_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.12;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.12_4;
  long unsigned int iftmp.12_8;
  long unsigned int iftmp.12_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967039;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.12_9 = 256;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.12_8 = 0;

  <bb 5> :
  # iftmp.12_4 = PHI <iftmp.12_9(3), iftmp.12_8(4)>
  _3 = iftmp.12_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetPwmSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean mode)
{
  long unsigned int iftmp.19;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.19_4;
  long unsigned int iftmp.19_8;
  long unsigned int iftmp.19_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967167;
  if (mode_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.19_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.19_8 = 0;

  <bb 5> :
  # iftmp.19_4 = PHI <iftmp.19_9(3), iftmp.19_8(4)>
  _3 = iftmp.19_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.16;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.16_4;
  long unsigned int iftmp.16_8;
  long unsigned int iftmp.16_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967263;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.16_9 = 32;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16_8 = 0;

  <bb 5> :
  # iftmp.16_4 = PHI <iftmp.16_9(3), iftmp.16_8(4)>
  _3 = iftmp.16_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.15;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.15_4;
  long unsigned int iftmp.15_8;
  long unsigned int iftmp.15_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967279;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15_9 = 16;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15_8 = 0;

  <bb 5> :
  # iftmp.15_4 = PHI <iftmp.15_9(3), iftmp.15_8(4)>
  _3 = iftmp.15_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.17;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.17_4;
  long unsigned int iftmp.17_8;
  long unsigned int iftmp.17_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967291;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.17_9 = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.17_8 = 0;

  <bb 5> :
  # iftmp.17_4 = PHI <iftmp.17_9(3), iftmp.17_8(4)>
  _3 = iftmp.17_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.20;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.20_4;
  long unsigned int iftmp.20_8;
  long unsigned int iftmp.20_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNCONF;
  _2 = _1 & 4294967294;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20_9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20_8 = 0;

  <bb 5> :
  # iftmp.20_4 = PHI <iftmp.20_9(3), iftmp.20_8(4)>
  _3 = iftmp.20_4 | _2;
  ftmBase_6(D)->SYNCONF ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetInitTriggerMode (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_InitTriggModeType initTrigMode)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->CONF;
  _2 = _1 & 4294965247;
  _3 = initTrigMode_8(D) << 11;
  _4 = _3 & 2048;
  _5 = _2 | _4;
  ftmBase_7(D)->CONF ={v} _5;
  return;

}


Ftm_Pwm_Ip_SetBdmMode (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_DebugModeType val)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->CONF;
  _2 = _1 & 4294967103;
  _3 = val_8(D) << 6;
  _4 = _3 & 255;
  _5 = _2 | _4;
  ftmBase_7(D)->CONF ={v} _5;
  return;

}


Ftm_Pwm_Ip_SetLoadFreq (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 val)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->CONF;
  _2 = _1 & 4294967264;
  _3 = (long unsigned int) val_8(D);
  _4 = _3 & 31;
  _5 = _2 | _4;
  ftmBase_7(D)->CONF ={v} _5;
  return;

}


Ftm_Pwm_Ip_GetChnOutputPolarity (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  Ftm_Pwm_Ip_PolarityType D.7052;
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  _Bool _5;
  Ftm_Pwm_Ip_PolarityType _9;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->POL;
  _2 = (int) channel_8(D);
  _3 = _1 >> _2;
  _4 = _3 & 1;
  _5 = _4 == 1;
  _9 = (Ftm_Pwm_Ip_PolarityType) _5;

  <bb 3> :
<L0>:
  return _9;

}


Ftm_Pwm_Ip_SetChnOutputPolarityCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, Ftm_Pwm_Ip_PolarityType polarity)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (polarity_11(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->POL;
  _2 = (int) channel_14(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = _1 & _4;
  ftmBase_13(D)->POL ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_13(D)->POL;
  _7 = (int) channel_14(D);
  _8 = 1 << _7;
  _9 = _6 | _8;
  ftmBase_13(D)->POL ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_EnableTriggerMask (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint32 triggerMask)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->EXTTRIG;
  _2 = ~triggerMask_7(D);
  _3 = _1 & _2;
  _4 = triggerMask_7(D) | _3;
  ftmBase_6(D)->EXTTRIG ={v} _4;
  return;

}


Ftm_Pwm_Ip_DisableTriggerMask (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint32 triggerMask)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 ={v} ftmBase_5(D)->EXTTRIG;
  _2 = ~triggerMask_6(D);
  _3 = _1 & _2;
  ftmBase_5(D)->EXTTRIG ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetInitTriggerCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.27;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.27_4;
  long unsigned int iftmp.27_8;
  long unsigned int iftmp.27_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->EXTTRIG;
  _2 = _1 & 4294967231;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.27_9 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.27_8 = 0;

  <bb 5> :
  # iftmp.27_4 = PHI <iftmp.27_9(3), iftmp.27_8(4)>
  _3 = iftmp.27_4 | _2;
  ftmBase_6(D)->EXTTRIG ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetExtDeadtimeValue (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 value)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} ftmBase_8(D)->DEADTIME;
  _2 = _1 & 4293984255;
  _3 = (long unsigned int) value_9(D);
  _4 = _3 << 16;
  _5 = _4 & 983040;
  _6 = _2 | _5;
  ftmBase_8(D)->DEADTIME ={v} _6;
  return;

}


Ftm_Pwm_Ip_GetDeadtimePrescaler (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint8 D.7023;
  long unsigned int _1;
  unsigned char _2;
  int _3;
  int _4;
  unsigned char _5;
  uint8 _8;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->DEADTIME;
  _2 = (unsigned char) _1;
  _3 = (int) _2;
  _4 = _3 >> 6;
  _5 = (unsigned char) _4;
  _8 = _5 & 3;

  <bb 3> :
<L0>:
  return _8;

}


Ftm_Pwm_Ip_SetDeadtimePrescaler (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_DeadtimePrescalerType divider)
{
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> :
  _1 ={v} ftmBase_9(D)->DEADTIME;
  _2 = _1 & 4294967103;
  _3 = (unsigned char) divider_10(D);
  _4 = (long unsigned int) _3;
  _5 = _4 << 6;
  _6 = _5 & 255;
  _7 = _2 | _6;
  ftmBase_9(D)->DEADTIME ={v} _7;
  return;

}


Ftm_Pwm_Ip_SetDeadtimeCount (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 count)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->DEADTIME;
  _2 = _1 & 4294967232;
  _3 = (long unsigned int) count_8(D);
  _4 = _3 & 63;
  _5 = _2 | _4;
  ftmBase_7(D)->DEADTIME ={v} _5;
  return;

}


Ftm_Pwm_Ip_GetDualChnMCombineCmd (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId)
{
  boolean D.7403;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  boolean _9;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->COMBINE;
  _2 = (long unsigned int) chPairId_8(D);
  _3 = _2 * 8;
  _4 = 128 << _3;
  _5 = _1 & _4;
  _9 = _5 != 0;

  <bb 3> :
<L0>:
  return _9;

}


Ftm_Pwm_Ip_SetDualChnMCombineCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 128 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 128 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetDualChnPwmSyncCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 32 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 32 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetDualChnDeadtimeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  unsigned int _2;
  unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned int _7;
  unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 16 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 16 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetDualChnCompCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (long unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 2 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (long unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 2 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_GetDualChnCombineCmd (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId)
{
  boolean D.7401;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  boolean _9;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->COMBINE;
  _2 = (long unsigned int) chPairId_8(D);
  _3 = _2 * 8;
  _4 = _1 >> _3;
  _5 = _4 & 1;
  _9 = _5 != 0;

  <bb 3> :
<L0>:
  return _9;

}


Ftm_Pwm_Ip_SetDualChnCombineCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 chPairId, boolean enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (enable_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_15(D)->COMBINE;
  _2 = (long unsigned int) chPairId_16(D);
  _3 = _2 * 8;
  _4 = 1 << _3;
  _5 = _1 | _4;
  ftmBase_15(D)->COMBINE ={v} _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 ={v} ftmBase_15(D)->COMBINE;
  _7 = (long unsigned int) chPairId_16(D);
  _8 = _7 * 8;
  _9 = 1 << _8;
  _10 = ~_9;
  _11 = _6 & _10;
  ftmBase_15(D)->COMBINE ={v} _11;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_ClearOutmaskReg (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint32 regVal)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 ={v} ftmBase_5(D)->OUTMASK;
  _2 = ~regVal_6(D);
  _3 = _1 & _2;
  ftmBase_5(D)->OUTMASK ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetOutmaskReg (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint32 regVal)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->OUTMASK;
  _2 = ~regVal_7(D);
  _3 = _1 & _2;
  _4 = regVal_7(D) | _3;
  ftmBase_6(D)->OUTMASK ={v} _4;
  return;

}


Ftm_Pwm_Ip_SetChnOutputMask (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enableMask)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (enableMask_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->OUTMASK;
  _2 = (int) channel_14(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  ftmBase_13(D)->OUTMASK ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} ftmBase_13(D)->OUTMASK;
  _6 = (int) channel_14(D);
  _7 = 1 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  ftmBase_13(D)->OUTMASK ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetChnOutputInitStateCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, Ftm_Pwm_Ip_OutputStateType state)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (state_11(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->OUTINIT;
  _2 = (int) channel_14(D);
  _3 = 1 << _2;
  _4 = _1 | _3;
  ftmBase_13(D)->OUTINIT ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} ftmBase_13(D)->OUTINIT;
  _6 = (int) channel_14(D);
  _7 = 1 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  ftmBase_13(D)->OUTINIT ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetSoftwareTriggerCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.3;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.3_4;
  long unsigned int iftmp.3_8;
  long unsigned int iftmp.3_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNC;
  _2 = _1 & 4294967167;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3_9 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_8 = 0;

  <bb 5> :
  # iftmp.3_4 = PHI <iftmp.3_9(3), iftmp.3_8(4)>
  _3 = iftmp.3_4 | _2;
  ftmBase_6(D)->SYNC ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 trigger_num, boolean enable)
{
  long unsigned int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;

  <bb 2> :
  if (enable_11(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} ftmBase_13(D)->SYNC;
  _2 = (int) trigger_num_14(D);
  _3 = 16 << _2;
  _4 = _1 | _3;
  ftmBase_13(D)->SYNC ={v} _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 ={v} ftmBase_13(D)->SYNC;
  _6 = (int) trigger_num_14(D);
  _7 = 16 << _6;
  _8 = ~_7;
  _9 = _5 & _8;
  ftmBase_13(D)->SYNC ={v} _9;

  <bb 5> :
  return;

}


Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.14;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.14_4;
  long unsigned int iftmp.14_8;
  long unsigned int iftmp.14_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNC;
  _2 = _1 & 4294967287;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.14_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14_8 = 0;

  <bb 5> :
  # iftmp.14_4 = PHI <iftmp.14_9(3), iftmp.14_8(4)>
  _3 = iftmp.14_4 | _2;
  ftmBase_6(D)->SYNC ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetMaxLoadingCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.21;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.21_4;
  long unsigned int iftmp.21_8;
  long unsigned int iftmp.21_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNC;
  _2 = _1 & 4294967293;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.21_9 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21_8 = 0;

  <bb 5> :
  # iftmp.21_4 = PHI <iftmp.21_9(3), iftmp.21_8(4)>
  _3 = iftmp.21_4 | _2;
  ftmBase_6(D)->SYNC ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetMinLoadingCmd (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.22;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.22_4;
  long unsigned int iftmp.22_8;
  long unsigned int iftmp.22_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SYNC;
  _2 = _1 & 4294967294;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.22_9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.22_8 = 0;

  <bb 5> :
  # iftmp.22_4 = PHI <iftmp.22_9(3), iftmp.22_8(4)>
  _3 = iftmp.22_4 | _2;
  ftmBase_6(D)->SYNC ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetPwmSyncMode (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.30;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.30_4;
  long unsigned int iftmp.30_8;
  long unsigned int iftmp.30_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->MODE;
  _2 = _1 & 4294967287;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.30_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.30_8 = 0;

  <bb 5> :
  # iftmp.30_4 = PHI <iftmp.30_9(3), iftmp.30_8(4)>
  _3 = iftmp.30_4 | _2;
  ftmBase_6(D)->MODE ={v} _3;
  return;

}


Ftm_Pwm_Ip_Enable (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean enable)
{
  long unsigned int iftmp.26;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.26_4;
  long unsigned int iftmp.26_8;
  long unsigned int iftmp.26_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->MODE;
  _2 = _1 & 4294967294;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.26_9 = 1;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.26_8 = 0;

  <bb 5> :
  # iftmp.26_4 = PHI <iftmp.26_9(3), iftmp.26_8(4)>
  _3 = iftmp.26_4 | _2;
  ftmBase_6(D)->MODE ={v} _3;
  return;

}


Ftm_Pwm_Ip_SetCounterInitVal (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint16 value)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->CNTIN;
  _2 = _1 & 4294901760;
  _3 = (long unsigned int) value_7(D);
  _4 = _2 | _3;
  ftmBase_6(D)->CNTIN ={v} _4;
  return;

}


Ftm_Pwm_Ip_GetChnCountVal (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint16 D.7019;
  int _1;
  long unsigned int _2;
  uint16 _6;

  <bb 2> :
  _1 = (int) channel_3(D);
  _2 ={v} ftmBase_5(D)->CONTROLS[_1].CV;
  _6 = (uint16) _2;

  <bb 3> :
<L0>:
  return _6;

}


Ftm_Pwm_Ip_SetChnCountVal (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, uint16 value)
{
  int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = (int) channel_3(D);
  _2 = (long unsigned int) value_4(D);
  ftmBase_6(D)->CONTROLS[_1].CV ={v} _2;
  return;

}


Ftm_Pwm_Ip_GetChOutputValue (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  boolean D.7417;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) channel_4(D);
  _2 ={v} ftmBase_6(D)->CONTROLS[_1].CSC;
  _3 = _2 & 1024;
  _7 = _3 != 0;

  <bb 3> :
<L0>:
  return _7;

}


Ftm_Pwm_Ip_ClearChnEventFlag (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = (int) channel_5(D);
  _2 ={v} ftmBase_7(D)->CONTROLS[_1].CSC;
  _3 = (int) channel_5(D);
  _4 = _2 & 4294967167;
  ftmBase_7(D)->CONTROLS[_3].CSC ={v} _4;
  return;

}


Ftm_Pwm_Ip_UpdateChnInt (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, boolean enable)
{
  long unsigned int iftmp.1;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  long unsigned int iftmp.1_6;
  long unsigned int iftmp.1_11;
  long unsigned int iftmp.1_12;

  <bb 2> :
  _1 = (int) channel_7(D);
  _2 ={v} ftmBase_9(D)->CONTROLS[_1].CSC;
  _3 = _2 & 4294967231;
  if (enable_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_12 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_11 = 0;

  <bb 5> :
  # iftmp.1_6 = PHI <iftmp.1_12(3), iftmp.1_11(4)>
  _4 = (int) channel_7(D);
  _5 = iftmp.1_6 | _3;
  ftmBase_9(D)->CONTROLS[_4].CSC ={v} _5;
  return;

}


Ftm_Pwm_Ip_GetChnMode (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint8 retValue;
  uint8 D.7203;
  unsigned char D.7202;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _14;
  uint8 _16;

  <bb 2> :
  _1 = (int) channel_10(D);
  _2 ={v} ftmBase_12(D)->CONTROLS[_1].CSC;
  _3 = _2 >> 4;
  _4 = (unsigned char) _3;
  retValue_13 = _4 & 1;
  _5 = (int) channel_10(D);
  _6 ={v} ftmBase_12(D)->CONTROLS[_5].CSC;
  _7 = _6 >> 5;
  _8 = (unsigned char) _7;
  _9 = _8 << 1;
  _14 = _9 & 2;
  retValue_15 = _14 | retValue_13;
  _16 = retValue_15;

  <bb 3> :
<L0>:
  return _16;

}


Ftm_Pwm_Ip_SetChnMSBAMode (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, Ftm_Pwm_Ip_ChannelModeType selection)
{
  uint32 selectionB;
  uint32 selectionA;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = selection_13(D) << 2;
  selectionA_14 = _1 & 16;
  _2 = selection_13(D) << 2;
  selectionB_15 = _2 & 32;
  _3 = (int) channel_16(D);
  _4 ={v} ftmBase_18(D)->CONTROLS[_3].CSC;
  _5 = _4 & 4294967279;
  _6 = (int) channel_16(D);
  _7 = selectionA_14 | _5;
  ftmBase_18(D)->CONTROLS[_6].CSC ={v} _7;
  _8 = (int) channel_16(D);
  _9 ={v} ftmBase_18(D)->CONTROLS[_8].CSC;
  _10 = _9 & 4294967263;
  _11 = (int) channel_16(D);
  _12 = selectionB_15 | _10;
  ftmBase_18(D)->CONTROLS[_11].CSC ={v} _12;
  return;

}


Ftm_Pwm_Ip_SetChnEdgeLevel (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel, Ftm_Pwm_Ip_ChannelModeType level)
{
  uint32 levelB;
  uint32 levelA;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = level_13(D) << 2;
  levelA_14 = _1 & 4;
  _2 = level_13(D) << 2;
  levelB_15 = _2 & 8;
  _3 = (int) channel_16(D);
  _4 ={v} ftmBase_18(D)->CONTROLS[_3].CSC;
  _5 = _4 & 4294967291;
  _6 = (int) channel_16(D);
  _7 = levelA_14 | _5;
  ftmBase_18(D)->CONTROLS[_6].CSC ={v} _7;
  _8 = (int) channel_16(D);
  _9 ={v} ftmBase_18(D)->CONTROLS[_8].CSC;
  _10 = _9 & 4294967287;
  _11 = (int) channel_16(D);
  _12 = levelB_15 | _10;
  ftmBase_18(D)->CONTROLS[_11].CSC ={v} _12;
  return;

}


Ftm_Pwm_Ip_GetChnEdgeLevel (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  uint8 retValue;
  uint8 D.7200;
  unsigned char D.7199;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _14;
  uint8 _16;

  <bb 2> :
  _1 = (int) channel_10(D);
  _2 ={v} ftmBase_12(D)->CONTROLS[_1].CSC;
  _3 = _2 >> 2;
  _4 = (unsigned char) _3;
  retValue_13 = _4 & 1;
  _5 = (int) channel_10(D);
  _6 ={v} ftmBase_12(D)->CONTROLS[_5].CSC;
  _7 = _6 >> 3;
  _8 = (unsigned char) _7;
  _9 = _8 << 1;
  _14 = _9 & 2;
  retValue_15 = _14 | retValue_13;
  _16 = retValue_15;

  <bb 3> :
<L0>:
  return _16;

}


Ftm_Pwm_Ip_SetMod (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint16 value)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->MOD;
  _2 = _1 & 4294901760;
  _3 = (long unsigned int) value_7(D);
  _4 = _2 | _3;
  ftmBase_6(D)->MOD ={v} _4;
  return;

}


Ftm_Pwm_Ip_SetCounter (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint16 value)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->CNT;
  _2 = _1 & 4294901760;
  _3 = (long unsigned int) value_7(D);
  _4 = _2 | _3;
  ftmBase_6(D)->CNT ={v} _4;
  return;

}


Ftm_Pwm_Ip_EnablePwmChannelOutputs (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, uint8 channel)
{
  unsigned int _1;
  unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 = (unsigned int) channel_6(D);
  _2 = _1 + 16;
  _3 = 1 << _2;
  _4 ={v} ftmBase_8(D)->SC;
  _5 = _3 | _4;
  ftmBase_8(D)->SC ={v} _5;
  return;

}


Ftm_Pwm_Ip_ClearTimerOverflow (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} ftmBase_4(D)->SC;
  _2 = _1 & 4294966783;
  ftmBase_4(D)->SC ={v} _2;
  return;

}


Ftm_Pwm_Ip_SetTimerOverflowInt (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean state)
{
  long unsigned int iftmp.0;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.0_4;
  long unsigned int iftmp.0_8;
  long unsigned int iftmp.0_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SC;
  _2 = _1 & 4294967039;
  if (state_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0_9 = 256;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_8 = 0;

  <bb 5> :
  # iftmp.0_4 = PHI <iftmp.0_9(3), iftmp.0_8(4)>
  _3 = iftmp.0_4 | _2;
  ftmBase_6(D)->SC ={v} _3;
  return;

}


Ftm_Pwm_Ip_GetCpwms (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  Ftm_Pwm_Ip_CounterModeType D.7205;
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  Ftm_Pwm_Ip_CounterModeType _6;

  <bb 2> :
  _1 ={v} ftmBase_5(D)->SC;
  _2 = _1 & 32;
  _3 = _2 != 0;
  _6 = (Ftm_Pwm_Ip_CounterModeType) _3;

  <bb 3> :
<L0>:
  return _6;

}


Ftm_Pwm_Ip_SetCpwms (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, boolean mode)
{
  long unsigned int iftmp.25;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.25_4;
  long unsigned int iftmp.25_8;
  long unsigned int iftmp.25_9;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SC;
  _2 = _1 & 4294967263;
  if (mode_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.25_9 = 32;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.25_8 = 0;

  <bb 5> :
  # iftmp.25_4 = PHI <iftmp.25_9(3), iftmp.25_8(4)>
  _3 = iftmp.25_4 | _2;
  ftmBase_6(D)->SC ={v} _3;
  return;

}


Ftm_Pwm_Ip_GetClockSource (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint8 D.7405;
  long unsigned int _1;
  long unsigned int _2;
  unsigned char _3;
  uint8 _6;

  <bb 2> :
  _1 ={v} ftmBase_5(D)->SC;
  _2 = _1 >> 3;
  _3 = (unsigned char) _2;
  _6 = _3 & 3;

  <bb 3> :
<L0>:
  return _6;

}


Ftm_Pwm_Ip_SetClockSource (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_ClkSourceType clockSrc)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 ={v} ftmBase_7(D)->SC;
  _2 = _1 & 4294967271;
  _3 = clockSrc_8(D) << 3;
  _4 = _3 & 24;
  _5 = _2 | _4;
  ftmBase_7(D)->SC ={v} _5;
  return;

}


Ftm_Pwm_Ip_GetClockPs (const struct Ftm_Pwm_Ip_HwAddrType * const ftmBase)
{
  uint8 D.7021;
  long unsigned int _1;
  unsigned char _2;
  uint8 _5;

  <bb 2> :
  _1 ={v} ftmBase_4(D)->SC;
  _2 = (unsigned char) _1;
  _5 = _2 & 7;

  <bb 3> :
<L0>:
  return _5;

}


Ftm_Pwm_Ip_SetClockPs (struct Ftm_Pwm_Ip_HwAddrType * const ftmBase, Ftm_Pwm_Ip_ClkPrescalerType ps)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 ={v} ftmBase_6(D)->SC;
  _2 = _1 & 4294967288;
  _3 = ps_7(D) & 7;
  _4 = _2 | _3;
  ftmBase_6(D)->SC ={v} _4;
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.2_1;

  <bb 2> :
  x.2_1 ={v} x;
  if (x.2_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


