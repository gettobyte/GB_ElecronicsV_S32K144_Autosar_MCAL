
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

functionWasCalled.6294/67 (functionWasCalled) @07456c18
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (write)
  Availability: available
  Varpool flags: initialized
clockNameTypes/66 (clockNameTypes) @0744b000
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Check_Gate_Clocks/29 (read)Check_Gate_Clocks/29 (read)Check_Pcfs_Clocks/30 (read)Check_Ircosc_Clocks/21 (read)Check_Pcfs_Clocks/30 (read)Check_Xosc_Clocks/22 (read)Check_Ircosc_Clocks/21 (read)Check_Pll_Clocks/23 (read)Check_Ext_Sig_Clocks/24 (read)Check_Ext_Sig_Clocks/24 (read)Check_Selector_Clocks/25 (read)Check_Divider_Clocks/26 (read)Check_Selector_Clocks/25 (read)Check_Divider_Trigger_Clocks/27 (read)Check_Divider_Clocks/26 (read)Check_Frac_Divider_Clocks/28 (read)Check_Cmu_Clocks/31 (read)Check_Cmu_Clocks/31 (read)
  Availability: not_available
  Varpool flags: read-only
OsIf_GetElapsed/65 (OsIf_GetElapsed) @07442a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockTimeoutExpired/19 
  Calls: 
OsIf_MicrosToTicks/64 (OsIf_MicrosToTicks) @074428c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockStartTimeout/18 
  Calls: 
OsIf_GetCounter/63 (OsIf_GetCounter) @074427e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ClockStartTimeout/18 
  Calls: 
ClockPowerModeChangeNotification/62 (ClockPowerModeChangeNotification) @074421c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_PowerModeChangeNotification/12 
  Calls: 
ClockInitializeObjects/61 (ClockInitializeObjects) @074420e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: UpdateDriverContext/20 Clock_Ip_PowerModeChangeNotification/12 
  Calls: 
HwPllName/60 (HwPllName) @07439cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/7 (read)Clock_Ip_GetPllStatus/7 (read)
  Availability: not_available
  Varpool flags: read-only
DisableSafeClock/59 (DisableSafeClock) @06ab70e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_InitClock/6 Clock_Ip_DistributePll/8 
  Calls: 
SpecificPeripheralClockInitialization/58 (SpecificPeripheralClockInitialization) @06ab7ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_InitClock/6 Clock_Ip_DistributePll/8 
  Calls: 
gateCallbacks/57 (gateCallbacks) @074397e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_EnableModuleClock/15 (read)Clock_Ip_DisableModuleClock/14 (read)CallEmptyCallbacks/32 (read)Clock_Ip_DistributePll/8 (read)CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
gateCallbackIndex/56 (gateCallbackIndex) @07439798
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableModuleClock/14 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_EnableModuleClock/15 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
selectorCallbacks/55 (selectorCallbacks) @074396c0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)Clock_Ip_DistributePll/8 (read)ResetClockConfiguration/33 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
selectorCallbackIndex/54 (selectorCallbackIndex) @07439678
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/8 (read)ResetClockConfiguration/33 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
sourceType_clockName/53 (sourceType_clockName) @07439630
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/8 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
fracDivCallbacks/52 (fracDivCallbacks) @07439558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)ResetClockConfiguration/33 (read)CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
fractional_dividerCallbackIndex/51 (fractional_dividerCallbackIndex) @07439510
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ResetClockConfiguration/33 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
pllCallbacks/50 (pllCallbacks) @07439288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)Clock_Ip_GetPllStatus/7 (read)ResetClockConfiguration/33 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
pllCallbackIndex/49 (pllCallbackIndex) @07439240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ResetClockConfiguration/33 (read)Clock_Ip_GetPllStatus/7 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
dividerCallbacks/48 (dividerCallbacks) @074390d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
dividerCallbackIndex/47 (dividerCallbackIndex) @07439090
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
dividerTriggerCallbacks/46 (dividerTriggerCallbacks) @07433f78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
dividertriggerCallbackIndex/45 (dividertriggerCallbackIndex) @07433f30
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
pcfsCallbacks/44 (pcfsCallbacks) @07433e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
pcfsCallbackIndex/43 (pcfsCallbackIndex) @07433e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
extOscCallbacks/42 (extOscCallbacks) @07433cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ResetClockConfiguration/33 (read)CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
xoscCallbackIndex/41 (xoscCallbackIndex) @07433ca8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ResetClockConfiguration/33 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
intOscCallbacks/40 (intOscCallbacks) @07433bd0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
ircoscCallbackIndex/39 (ircoscCallbackIndex) @07433b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
SpecificPlatformInitClock/38 (SpecificPlatformInitClock) @06ab7d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_InitClock/6 
  Calls: 
cmuCallbacks/37 (cmuCallbacks) @07433a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: CallEmptyCallbacks/32 (read)CallEmptyCallbacks/32 (read)Clock_Ip_ClearClockMonitorStatus/11 (read)Clock_Ip_GetClockMonitorStatus/10 (read)CallEmptyCallbacks/32 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableClockMonitor/9 (read)CallEmptyCallbacks/32 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
cmuCallbackIndex/36 (cmuCallbackIndex) @074339d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClearClockMonitorStatus/11 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_GetClockMonitorStatus/10 (read)Clock_Ip_DisableClockMonitor/9 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
clockFeatures/35 (clockFeatures) @07433990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/8 (read)Clock_Ip_EnableModuleClock/15 (read)Clock_Ip_DisableModuleClock/14 (read)ResetClockConfiguration/33 (read)ResetClockConfiguration/33 (read)ResetClockConfiguration/33 (read)Clock_Ip_GetPllStatus/7 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DisableClockMonitor/9 (read)Clock_Ip_GetClockMonitorStatus/10 (read)Clock_Ip_ClearClockMonitorStatus/11 (read)ResetClockConfiguration/33 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (read)
  Availability: not_available
  Varpool flags: read-only
CheckClockConfiguration/34 (CheckClockConfiguration) @06ab7540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: Check_Cmu_Clocks/31 Check_Pcfs_Clocks/30 Check_Gate_Clocks/29 Check_Frac_Divider_Clocks/28 Check_Divider_Trigger_Clocks/27 Check_Divider_Clocks/26 Check_Selector_Clocks/25 Check_Ext_Sig_Clocks/24 Check_Pll_Clocks/23 Check_Xosc_Clocks/22 Check_Ircosc_Clocks/21 
ResetClockConfiguration/33 (ResetClockConfiguration) @06ab72a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockFeatures/35 (read)fractional_dividerCallbackIndex/51 (read)fracDivCallbacks/52 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
CallEmptyCallbacks/32 (CallEmptyCallbacks) @06ab7000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: functionWasCalled.6294/67 (read)functionWasCalled.6294/67 (write)cmuCallbacks/37 (read)cmuCallbacks/37 (read)cmuCallbacks/37 (read)cmuCallbacks/37 (read)dividerCallbacks/48 (read)dividerTriggerCallbacks/46 (read)extOscCallbacks/42 (read)fracDivCallbacks/52 (read)fracDivCallbacks/52 (read)gateCallbacks/57 (read)gateCallbacks/57 (read)intOscCallbacks/40 (read)pllCallbacks/50 (read)pllCallbacks/50 (read)selectorCallbacks/55 (read)pcfsCallbacks/44 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: UpdateDriverContext/20 
  Calls: 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Check_Cmu_Clocks/31 (Check_Cmu_Clocks) @06aac9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Pcfs_Clocks/30 (Check_Pcfs_Clocks) @06aac0e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Gate_Clocks/29 (Check_Gate_Clocks) @06aacc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
Check_Frac_Divider_Clocks/28 (Check_Frac_Divider_Clocks) @06aac8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Divider_Trigger_Clocks/27 (Check_Divider_Trigger_Clocks) @06aac620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Divider_Clocks/26 (Check_Divider_Clocks) @06aac380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Selector_Clocks/25 (Check_Selector_Clocks) @06aac000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 
Check_Ext_Sig_Clocks/24 (Check_Ext_Sig_Clocks) @06aa27e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
Check_Pll_Clocks/23 (Check_Pll_Clocks) @06aa2000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Xosc_Clocks/22 (Check_Xosc_Clocks) @06aa2d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 
Check_Ircosc_Clocks/21 (Check_Ircosc_Clocks) @06aa2a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockNameTypes/66 (read)clockNameTypes/66 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: CheckClockConfiguration/34 
  Calls: DevAssert/0 DevAssert/0 DevAssert/0 
UpdateDriverContext/20 (UpdateDriverContext) @06aa2700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: clockObjectsAreInitialized/2 (read)clockObjectsAreInitialized/2 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/6 
  Calls: CallEmptyCallbacks/32 ClockInitializeObjects/61 
ClockTimeoutExpired/19 (ClockTimeoutExpired) @06aa2460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/65 
ClockStartTimeout/18 (ClockStartTimeout) @06aa21c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_MicrosToTicks/64 OsIf_GetCounter/63 
ReportClockErrors/17 (ReportClockErrors) @06a9dd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockNotificationsCallback/3 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
ClockNotificatonsEmptyCallback/16 (ClockNotificatonsEmptyCallback) @06a9d7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: clockNotificationsCallback/3 (addr)
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_EnableModuleClock/15 (Clock_Ip_EnableModuleClock) @06a9d2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DisableModuleClock/14 (Clock_Ip_DisableModuleClock) @06a9dee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_InstallNotificationsCallback/13 (Clock_Ip_InstallNotificationsCallback) @06a9dc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockNotificationsCallback/3 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 
Clock_Ip_PowerModeChangeNotification/12 (Clock_Ip_PowerModeChangeNotification) @06a9d9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockObjectsAreInitialized/2 (read)clockObjectsAreInitialized/2 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ClockPowerModeChangeNotification/62 ClockInitializeObjects/61 
Clock_Ip_ClearClockMonitorStatus/11 (Clock_Ip_ClearClockMonitorStatus) @06a9d700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_GetClockMonitorStatus/10 (Clock_Ip_GetClockMonitorStatus) @06a9d460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DisableClockMonitor/9 (Clock_Ip_DisableClockMonitor) @06a9d1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call
Clock_Ip_DistributePll/8 (Clock_Ip_DistributePll) @06a00e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)sourceType_clockName/53 (read)clockConfig/4 (read)clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockConfig/4 (read)clockConfig/4 (read)clockTreeIsConsumingPll/1 (read)clockConfig/4 (read)clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockConfig/4 (read)clockConfig/4 (read)clockConfig/4 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: DisableSafeClock/59 SpecificPeripheralClockInitialization/58 DevAssert/0 
   Indirect call
   Indirect call
   Indirect call
Clock_Ip_GetPllStatus/7 (Clock_Ip_GetPllStatus) @06a008c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: HwPllName/60 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)HwPllName/60 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: 
   Indirect call
Clock_Ip_InitClock/6 (Clock_Ip_InitClock) @06a00d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockConfig/4 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockConfig/4 (write)clockFeatures/35 (read)ircoscCallbackIndex/39 (read)intOscCallbacks/40 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)clockFeatures/35 (read)pcfsCallbackIndex/43 (read)pcfsCallbacks/44 (read)clockFeatures/35 (read)dividertriggerCallbackIndex/45 (read)dividerTriggerCallbacks/46 (read)clockFeatures/35 (read)dividerCallbackIndex/47 (read)dividerCallbacks/48 (read)clockFeatures/35 (read)dividertriggerCallbackIndex/45 (read)dividerTriggerCallbacks/46 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)clockFeatures/35 (read)xoscCallbackIndex/41 (read)extOscCallbacks/42 (read)clockFeatures/35 (read)pllCallbackIndex/49 (read)pllCallbacks/50 (read)clockFeatures/35 (read)fractional_dividerCallbackIndex/51 (read)fracDivCallbacks/52 (read)clockTreeIsConsumingPll/1 (write)sourceType_clockName/53 (read)clockFeatures/35 (read)selectorCallbackIndex/54 (read)selectorCallbacks/55 (read)clockTreeIsConsumingPll/1 (write)clockTreeIsConsumingPll/1 (read)clockFeatures/35 (read)gateCallbackIndex/56 (read)gateCallbacks/57 (read)clockFeatures/35 (read)cmuCallbackIndex/36 (read)cmuCallbacks/37 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/5 
  Calls: DisableSafeClock/59 SpecificPeripheralClockInitialization/58 UpdateDriverContext/20 ResetClockConfiguration/33 SpecificPlatformInitClock/38 DevAssert/0 CheckClockConfiguration/34 
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
   Indirect call
Clock_Ip_Init/5 (Clock_Ip_Init) @06a00a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: clockTreeIsConsumingPll/1 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_DistributePll/8 Clock_Ip_GetPllStatus/7 Clock_Ip_InitClock/6 DevAssert/0 
clockConfig/4 (clockConfig) @069ff360
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_DistributePll/8 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (write)
  Availability: available
  Varpool flags:
clockNotificationsCallback/3 (clockNotificationsCallback) @069ff318
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ClockNotificatonsEmptyCallback/16 (addr)
  Referring: Clock_Ip_InstallNotificationsCallback/13 (write)ReportClockErrors/17 (read)
  Availability: available
  Varpool flags: initialized
clockObjectsAreInitialized/2 (clockObjectsAreInitialized) @069ff288
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_PowerModeChangeNotification/12 (read)Clock_Ip_PowerModeChangeNotification/12 (write)UpdateDriverContext/20 (read)UpdateDriverContext/20 (write)
  Availability: available
  Varpool flags:
clockTreeIsConsumingPll/1 (clockTreeIsConsumingPll) @069ff1f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_DistributePll/8 (read)Clock_Ip_InitClock/6 (read)Clock_Ip_InitClock/6 (write)Clock_Ip_InitClock/6 (write)Clock_Ip_Init/5 (read)
  Availability: available
  Varpool flags:
DevAssert/0 (DevAssert) @06963380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Clock_Ip_Init/5 Clock_Ip_InitClock/6 Check_Cmu_Clocks/31 Check_Cmu_Clocks/31 Check_Pcfs_Clocks/30 Check_Pcfs_Clocks/30 Check_Gate_Clocks/29 Check_Gate_Clocks/29 Check_Gate_Clocks/29 Check_Frac_Divider_Clocks/28 Check_Divider_Trigger_Clocks/27 Check_Divider_Clocks/26 Check_Divider_Clocks/26 Check_Selector_Clocks/25 Check_Selector_Clocks/25 Check_Ext_Sig_Clocks/24 Check_Ext_Sig_Clocks/24 Check_Ext_Sig_Clocks/24 Check_Pll_Clocks/23 Check_Xosc_Clocks/22 Check_Ircosc_Clocks/21 Check_Ircosc_Clocks/21 Check_Ircosc_Clocks/21 Clock_Ip_InstallNotificationsCallback/13 Clock_Ip_DistributePll/8 
  Calls: 
CheckClockConfiguration (const struct Clock_Ip_ClockConfigType * config)
{
  <bb 2> :
  Check_Ircosc_Clocks (config_2(D));
  Check_Xosc_Clocks (config_2(D));
  Check_Pll_Clocks (config_2(D));
  Check_Ext_Sig_Clocks (config_2(D));
  Check_Selector_Clocks (config_2(D));
  Check_Divider_Clocks (config_2(D));
  Check_Divider_Trigger_Clocks (config_2(D));
  Check_Frac_Divider_Clocks (config_2(D));
  Check_Gate_Clocks (config_2(D));
  Check_Pcfs_Clocks (config_2(D));
  Check_Cmu_Clocks (config_2(D));
  return;

}


ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  uint32 callbackIndex;
  unsigned char _1;
  long unsigned int _2;
  <unnamed type> _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  void (*<T5b1>) (const struct Clock_Ip_SelectorConfigType *) _7;
  long unsigned int _8;
  const struct Clock_Ip_SelectorConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  <unnamed type> _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  void (*<T58d>) (const struct Clock_Ip_FracDivConfigType *) _16;
  long unsigned int _17;
  const struct Clock_Ip_FracDivConfigType * _18;
  unsigned char _19;
  long unsigned int _20;
  <unnamed type> _21;
  unsigned char _22;
  int _23;
  unsigned char _24;
  void (*<T59e>) (const struct Clock_Ip_PllConfigType *) _25;
  long unsigned int _26;
  const struct Clock_Ip_PllConfigType * _27;
  unsigned char _28;
  long unsigned int _29;
  <unnamed type> _30;
  unsigned char _31;
  int _32;
  unsigned char _33;
  void (*<T568>) (const struct Clock_Ip_XoscConfigType *) _34;
  long unsigned int _35;
  const struct Clock_Ip_XoscConfigType * _36;

  <bb 2> :
  _1 = config_46(D)->selectorsCount;
  i_47 = (uint32) _1;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = i_37 + 4294967295;
  _3 = config_46(D)->selectors[_2].name;
  _4 = clockFeatures[_3][1];
  _5 = (int) _4;
  _6 = selectorCallbackIndex[_5];
  callbackIndex_60 = (uint32) _6;
  _7 = selectorCallbacks[callbackIndex_60].Reset;
  _8 = i_37 + 4294967295;
  _9 = &config_46(D)->selectors[_8];
  _7 (_9);
  i_62 = i_37 + 4294967295;

  <bb 4> :
  # i_37 = PHI <i_47(2), i_62(3)>
  if (i_37 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _10 = config_46(D)->fracDivsCount;
  i_48 = (uint32) _10;
  goto <bb 7>; [INV]

  <bb 6> :
  _11 = i_38 + 4294967295;
  _12 = config_46(D)->fracDivs[_11].name;
  _13 = clockFeatures[_12][1];
  _14 = (int) _13;
  _15 = fractional_dividerCallbackIndex[_14];
  callbackIndex_57 = (uint32) _15;
  _16 = fracDivCallbacks[callbackIndex_57].Reset;
  _17 = i_38 + 4294967295;
  _18 = &config_46(D)->fracDivs[_17];
  _16 (_18);
  i_59 = i_38 + 4294967295;

  <bb 7> :
  # i_38 = PHI <i_48(5), i_59(6)>
  if (i_38 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _19 = config_46(D)->pllsCount;
  i_49 = (uint32) _19;
  goto <bb 10>; [INV]

  <bb 9> :
  _20 = i_39 + 4294967295;
  _21 = config_46(D)->plls[_20].name;
  _22 = clockFeatures[_21][1];
  _23 = (int) _22;
  _24 = pllCallbackIndex[_23];
  callbackIndex_54 = (uint32) _24;
  _25 = pllCallbacks[callbackIndex_54].Reset;
  _26 = i_39 + 4294967295;
  _27 = &config_46(D)->plls[_26];
  _25 (_27);
  i_56 = i_39 + 4294967295;

  <bb 10> :
  # i_39 = PHI <i_49(8), i_56(9)>
  if (i_39 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _28 = config_46(D)->xoscsCount;
  i_50 = (uint32) _28;
  goto <bb 13>; [INV]

  <bb 12> :
  _29 = i_40 + 4294967295;
  _30 = config_46(D)->xoscs[_29].name;
  _31 = clockFeatures[_30][1];
  _32 = (int) _31;
  _33 = xoscCallbackIndex[_32];
  callbackIndex_51 = (uint32) _33;
  _34 = extOscCallbacks[callbackIndex_51].Reset;
  _35 = i_40 + 4294967295;
  _36 = &config_46(D)->xoscs[_35];
  _34 (_36);
  i_53 = i_40 + 4294967295;

  <bb 13> :
  # i_40 = PHI <i_50(11), i_53(12)>
  if (i_40 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


CallEmptyCallbacks ()
{
  static boolean functionWasCalled = 0;
  _Bool functionWasCalled.22_1;
  _Bool _2;
  void (*<T5cd>) (const struct Clock_Ip_CmuConfigType *) _3;
  void (*<T55c>) (Clock_Ip_NameType) _4;
  void (*<T55c>) (Clock_Ip_NameType) _5;
  Clock_Ip_CmuStatusType (*<T5d3>) (Clock_Ip_NameType) _6;
  void (*<T576>) (const struct Clock_Ip_DividerConfigType *) _7;
  void (*<T581>) (const struct Clock_Ip_DividerTriggerConfigType *) _8;
  void (*<T568>) (const struct Clock_Ip_XoscConfigType *) _9;
  void (*<T58d>) (const struct Clock_Ip_FracDivConfigType *) _10;
  clock_dfs_status_t (*<T593>) (Clock_Ip_NameType) _11;
  void (*<T5bd>) (const struct Clock_Ip_GateConfigType *) _12;
  void (*<T5c2>) (Clock_Ip_NameType, boolean) _13;
  void (*<T559>) (const struct Clock_Ip_IrcoscConfigType *) _14;
  void (*<T59e>) (const struct Clock_Ip_PllConfigType *) _15;
  clock_pll_status_t (*<T5a4>) (Clock_Ip_NameType) _16;
  void (*<T5b1>) (const struct Clock_Ip_SelectorConfigType *) _17;
  void (*<T5df>) (const struct Clock_Ip_PcfsConfigType *) _18;

  <bb 2> :
  functionWasCalled.22_1 = functionWasCalled;
  _2 = ~functionWasCalled.22_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  functionWasCalled = 1;
  _3 = cmuCallbacks[0].Set;
  _3 (0B);
  _4 = cmuCallbacks[0].Disable;
  _4 (87);
  _5 = cmuCallbacks[0].Clear;
  _5 (87);
  _6 = cmuCallbacks[0].GetStatus;
  _6 (87);
  _7 = dividerCallbacks[0].Set;
  _7 (0B);
  _8 = dividerTriggerCallbacks[0].Configure;
  _8 (0B);
  _9 = extOscCallbacks[0].Reset;
  _9 (0B);
  _10 = fracDivCallbacks[0].Set;
  _10 (0B);
  _11 = fracDivCallbacks[0].Complete;
  _11 (87);
  _12 = gateCallbacks[0].Set;
  _12 (0B);
  _13 = gateCallbacks[0].Update;
  _13 (87, 0);
  _14 = intOscCallbacks[0].Set;
  _14 (0B);
  _15 = pllCallbacks[0].Set;
  _15 (0B);
  _16 = pllCallbacks[0].Complete;
  _16 (87);
  _17 = selectorCallbacks[0].Set;
  _17 (0B);
  _18 = pcfsCallbacks[0].Set;
  _18 (0B);

  <bb 4> :
  return;

}


Check_Cmu_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  <unnamed type> _13;
  long unsigned int _14;
  long unsigned int _15;
  _Bool _16;

  <bb 2> :
  _1 = config_22(D)->cmusCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_22(D)->cmusCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_23 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_22(D)->cmus[i_17].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 1024;
  _6 = _5 != 0;
  DevAssert (_6);
  i_25 = i_17 + 1;

  <bb 6> :
  # i_17 = PHI <i_23(4), i_25(5)>
  _7 = config_22(D)->cmusCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i_17 < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config_22(D)->cmusCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config_22(D)->cmus[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 1024;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Pcfs_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  <unnamed type> _13;
  long unsigned int _14;
  long unsigned int _15;
  _Bool _16;

  <bb 2> :
  _1 = config_22(D)->pcfsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_22(D)->pcfsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_23 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_22(D)->pcfs[i_17].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 512;
  _6 = _5 != 0;
  DevAssert (_6);
  i_25 = i_17 + 1;

  <bb 6> :
  # i_17 = PHI <i_23(4), i_25(5)>
  _7 = config_22(D)->pcfsCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i_17 < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config_22(D)->pcfsCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config_22(D)->pcfs[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 512;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Gate_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  <unnamed type> _5;
  _Bool _6;
  <unnamed type> _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  unsigned char _11;
  unsigned int _12;
  unsigned int _13;
  unsigned char _14;
  unsigned int _15;
  unsigned int _16;
  <unnamed type> _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;

  <bb 2> :
  _1 = config_26(D)->gatesCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_26(D)->gatesCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_27 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_26(D)->gates[i_21].name;
  _4 = i_21 + 1;
  _5 = config_26(D)->gates[_4].name;
  _6 = _3 < _5;
  DevAssert (_6);
  _7 = config_26(D)->gates[i_21].name;
  _8 = clockNameTypes[_7];
  _9 = _8 & 256;
  _10 = _9 != 0;
  DevAssert (_10);
  i_30 = i_21 + 1;

  <bb 6> :
  # i_21 = PHI <i_27(4), i_30(5)>
  _11 = config_26(D)->gatesCount;
  _12 = (unsigned int) _11;
  _13 = _12 + 4294967295;
  if (i_21 < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = config_26(D)->gatesCount;
  _15 = (unsigned int) _14;
  _16 = _15 + 4294967295;
  _17 = config_26(D)->gates[_16].name;
  _18 = clockNameTypes[_17];
  _19 = _18 & 256;
  _20 = _19 != 0;
  DevAssert (_20);

  <bb 8> :
  return;

}


Check_Frac_Divider_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  <unnamed type> _5;
  long unsigned int _6;
  long unsigned int _7;
  _Bool _8;

  <bb 2> :
  _1 = config_11(D)->fracDivsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config_11(D)->fracDivsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config_11(D)->fracDivs[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 64;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Divider_Trigger_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  <unnamed type> _5;
  long unsigned int _6;
  long unsigned int _7;
  _Bool _8;

  <bb 2> :
  _1 = config_11(D)->dividerTriggersCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config_11(D)->dividerTriggersCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config_11(D)->dividerTriggers[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 32;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Divider_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  <unnamed type> _13;
  long unsigned int _14;
  long unsigned int _15;
  _Bool _16;

  <bb 2> :
  _1 = config_22(D)->dividersCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_22(D)->dividersCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_23 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_22(D)->dividers[i_17].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 16;
  _6 = _5 != 0;
  DevAssert (_6);
  i_25 = i_17 + 1;

  <bb 6> :
  # i_17 = PHI <i_23(4), i_25(5)>
  _7 = config_22(D)->dividersCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i_17 < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config_22(D)->dividersCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config_22(D)->dividers[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 16;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Selector_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  long unsigned int _5;
  _Bool _6;
  unsigned char _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  <unnamed type> _13;
  long unsigned int _14;
  long unsigned int _15;
  _Bool _16;

  <bb 2> :
  _1 = config_22(D)->selectorsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_22(D)->selectorsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_23 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_22(D)->selectors[i_17].name;
  _4 = clockNameTypes[_3];
  _5 = _4 & 8;
  _6 = _5 != 0;
  DevAssert (_6);
  i_25 = i_17 + 1;

  <bb 6> :
  # i_17 = PHI <i_23(4), i_25(5)>
  _7 = config_22(D)->selectorsCount;
  _8 = (unsigned int) _7;
  _9 = _8 + 4294967295;
  if (i_17 < _9)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = config_22(D)->selectorsCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  _13 = config_22(D)->selectors[_12].name;
  _14 = clockNameTypes[_13];
  _15 = _14 & 8;
  _16 = _15 != 0;
  DevAssert (_16);

  <bb 8> :
  return;

}


Check_Ext_Sig_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  <unnamed type> _2;
  long unsigned int _3;
  <unnamed type> _4;
  _Bool _5;
  <unnamed type> _6;
  long unsigned int _7;
  long unsigned int _8;
  _Bool _9;
  unsigned char _10;
  unsigned int _11;
  unsigned int _12;
  unsigned char _13;
  unsigned int _14;
  unsigned int _15;
  <unnamed type> _16;
  long unsigned int _17;
  long unsigned int _18;
  _Bool _19;

  <bb 2> :
  _1 = config_24(D)->extClksCount;
  if (_1 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i_25 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _2 = config_24(D)->extClks[i_20].name;
  _3 = i_20 + 1;
  _4 = config_24(D)->extClks[_3].name;
  _5 = _2 < _4;
  DevAssert (_5);
  _6 = config_24(D)->extClks[i_20].name;
  _7 = clockNameTypes[_6];
  _8 = _7 & 128;
  _9 = _8 != 0;
  DevAssert (_9);
  i_28 = i_20 + 1;

  <bb 5> :
  # i_20 = PHI <i_25(3), i_28(4)>
  _10 = config_24(D)->extClksCount;
  _11 = (unsigned int) _10;
  _12 = _11 + 4294967295;
  if (i_20 < _12)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _13 = config_24(D)->extClksCount;
  _14 = (unsigned int) _13;
  _15 = _14 + 4294967295;
  _16 = config_24(D)->extClks[_15].name;
  _17 = clockNameTypes[_16];
  _18 = _17 & 128;
  _19 = _18 != 0;
  DevAssert (_19);
  return;

}


Check_Pll_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  <unnamed type> _5;
  long unsigned int _6;
  long unsigned int _7;
  _Bool _8;

  <bb 2> :
  _1 = config_11(D)->pllsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config_11(D)->pllsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config_11(D)->plls[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 4;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Xosc_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  <unnamed type> _5;
  long unsigned int _6;
  long unsigned int _7;
  _Bool _8;

  <bb 2> :
  _1 = config_11(D)->xoscsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = config_11(D)->xoscsCount;
  _3 = (unsigned int) _2;
  _4 = _3 + 4294967295;
  _5 = config_11(D)->xoscs[_4].name;
  _6 = clockNameTypes[_5];
  _7 = _6 & 2;
  _8 = _7 != 0;
  DevAssert (_8);

  <bb 4> :
  return;

}


Check_Ircosc_Clocks (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  unsigned char _1;
  unsigned char _2;
  <unnamed type> _3;
  long unsigned int _4;
  <unnamed type> _5;
  _Bool _6;
  <unnamed type> _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  unsigned char _11;
  unsigned int _12;
  unsigned int _13;
  unsigned char _14;
  unsigned int _15;
  unsigned int _16;
  <unnamed type> _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;

  <bb 2> :
  _1 = config_26(D)->ircoscsCount;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = config_26(D)->ircoscsCount;
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  i_27 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = config_26(D)->ircoscs[i_21].name;
  _4 = i_21 + 1;
  _5 = config_26(D)->ircoscs[_4].name;
  _6 = _3 < _5;
  DevAssert (_6);
  _7 = config_26(D)->ircoscs[i_21].name;
  _8 = clockNameTypes[_7];
  _9 = _8 & 1;
  _10 = _9 != 0;
  DevAssert (_10);
  i_30 = i_21 + 1;

  <bb 6> :
  # i_21 = PHI <i_27(4), i_30(5)>
  _11 = config_26(D)->ircoscsCount;
  _12 = (unsigned int) _11;
  _13 = _12 + 4294967295;
  if (i_21 < _13)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = config_26(D)->ircoscsCount;
  _15 = (unsigned int) _14;
  _16 = _15 + 4294967295;
  _17 = config_26(D)->ircoscs[_16].name;
  _18 = clockNameTypes[_17];
  _19 = _18 & 1;
  _20 = _19 != 0;
  DevAssert (_20);

  <bb 8> :
  return;

}


UpdateDriverContext (const struct Clock_Ip_ClockConfigType * config)
{
  _Bool clockObjectsAreInitialized.21_1;
  _Bool _2;

  <bb 2> :
  clockObjectsAreInitialized.21_1 = clockObjectsAreInitialized;
  _2 = ~clockObjectsAreInitialized.21_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ClockInitializeObjects ();
  clockObjectsAreInitialized = 1;

  <bb 4> :
  CallEmptyCallbacks ();
  return;

}


ClockTimeoutExpired (uint32 * startTimeInOut, uint32 * elapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean D.6354;
  long unsigned int D.6353;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _7;
  boolean _11;

  <bb 2> :
  _7 = OsIf_GetElapsed (startTimeInOut_5(D), 0);
  _1 = *elapsedTimeInOut_8(D);
  _2 = _7 + _1;
  *elapsedTimeInOut_8(D) = _2;
  _3 = *elapsedTimeInOut_8(D);
  _11 = TimeoutTicks_10(D) <= _3;

  <bb 3> :
<L0>:
  return _11;

}


ClockStartTimeout (uint32 * startTimeOut, uint32 * elapsedTimeOut, uint32 * timeoutTicksOut, uint32 timeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = OsIf_GetCounter (0);
  *startTimeOut_5(D) = _1;
  *elapsedTimeOut_7(D) = 0;
  _2 = OsIf_MicrosToTicks (timeoutUs_9(D), 0);
  *timeoutTicksOut_11(D) = _2;
  return;

}


ReportClockErrors (Clock_Ip_ClockNotificationType error, Clock_Ip_NameType clockName)
{
  void (*<T493>) (Clock_Ip_ClockNotificationType, Clock_Ip_NameType) clockNotificationsCallback.20_1;

  <bb 2> :
  clockNotificationsCallback.20_1 = clockNotificationsCallback;
  clockNotificationsCallback.20_1 (error_3(D), clockName_4(D));
  return;

}


ClockNotificatonsEmptyCallback (Clock_Ip_ClockNotificationType notification, Clock_Ip_NameType clockName)
{
  <bb 2> :
  return;

}


Clock_Ip_EnableModuleClock (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T5c2>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  _1 = clockFeatures[clockName_6(D)][1];
  _2 = (int) _1;
  _3 = gateCallbackIndex[_2];
  callbackIndex_7 = (uint32) _3;
  _4 = gateCallbacks[callbackIndex_7].Update;
  _4 (clockName_6(D), 0);
  return;

}


Clock_Ip_DisableModuleClock (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T5c2>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  _1 = clockFeatures[clockName_6(D)][1];
  _2 = (int) _1;
  _3 = gateCallbackIndex[_2];
  callbackIndex_7 = (uint32) _3;
  _4 = gateCallbacks[callbackIndex_7].Update;
  _4 (clockName_6(D), 1);
  return;

}


Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_ClockNotificationType, Clock_Ip_NameType) callback)
{
  _Bool _1;

  <bb 2> :
  _1 = callback_2(D) != 0B;
  DevAssert (_1);
  clockNotificationsCallback = callback_2(D);
  return;

}


Clock_Ip_PowerModeChangeNotification (power_modes_t powerMode, power_notification_t notification)
{
  _Bool clockObjectsAreInitialized.19_1;
  _Bool _2;

  <bb 2> :
  clockObjectsAreInitialized.19_1 = clockObjectsAreInitialized;
  _2 = ~clockObjectsAreInitialized.19_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ClockInitializeObjects ();
  clockObjectsAreInitialized = 1;

  <bb 4> :
  ClockPowerModeChangeNotification (powerMode_7(D), notification_8(D));
  return;

}


Clock_Ip_ClearClockMonitorStatus (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T55c>) (Clock_Ip_NameType) _4;

  <bb 2> :
  _1 = clockFeatures[clockName_6(D)][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex_7 = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex_7].Clear;
  _4 (clockName_6(D));
  return;

}


Clock_Ip_GetClockMonitorStatus (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  Clock_Ip_CmuStatusType D.6349;
  unsigned char _1;
  int _2;
  unsigned char _3;
  Clock_Ip_CmuStatusType (*<T5d3>) (Clock_Ip_NameType) _4;
  Clock_Ip_CmuStatusType _9;

  <bb 2> :
  _1 = clockFeatures[clockName_6(D)][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex_7 = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex_7].GetStatus;
  _9 = _4 (clockName_6(D));

  <bb 3> :
<L0>:
  return _9;

}


Clock_Ip_DisableClockMonitor (Clock_Ip_NameType clockName)
{
  uint32 callbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T55c>) (Clock_Ip_NameType) _4;

  <bb 2> :
  _1 = clockFeatures[clockName_6(D)][1];
  _2 = (int) _1;
  _3 = cmuCallbackIndex[_2];
  callbackIndex_7 = (uint32) _3;
  _4 = cmuCallbacks[callbackIndex_7].Disable;
  _4 (clockName_6(D));
  return;

}


Clock_Ip_DistributePll ()
{
  uint32 callbackIndex;
  uint32 i;
  const struct Clock_Ip_ClockConfigType * clockConfig.4_1;
  _Bool _2;
  const struct Clock_Ip_ClockConfigType * clockConfig.5_3;
  const struct Clock_Ip_ClockConfigType * clockConfig.6_4;
  <unnamed type> _5;
  <unnamed type> _6;
  const struct Clock_Ip_ClockConfigType * clockConfig.7_7;
  <unnamed type> _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  void (*<T5b1>) (const struct Clock_Ip_SelectorConfigType *) _12;
  const struct Clock_Ip_ClockConfigType * clockConfig.8_13;
  const struct Clock_Ip_SelectorConfigType * _14;
  const struct Clock_Ip_ClockConfigType * clockConfig.9_15;
  unsigned char _16;
  long unsigned int _17;
  _Bool clockTreeIsConsumingPll.10_18;
  const struct Clock_Ip_ClockConfigType * clockConfig.11_19;
  <unnamed type> _20;
  unsigned char _21;
  int _22;
  unsigned char _23;
  void (*<T5bd>) (const struct Clock_Ip_GateConfigType *) _24;
  const struct Clock_Ip_ClockConfigType * clockConfig.12_25;
  const struct Clock_Ip_GateConfigType * _26;
  const struct Clock_Ip_ClockConfigType * clockConfig.13_27;
  unsigned char _28;
  long unsigned int _29;
  const struct Clock_Ip_ClockConfigType * clockConfig.14_30;
  const struct Clock_IP_SpecificPeriphConfigType * _31;
  const struct Clock_Ip_ClockConfigType * clockConfig.15_32;
  <unnamed type> _33;
  unsigned char _34;
  int _35;
  unsigned char _36;
  void (*<T5cd>) (const struct Clock_Ip_CmuConfigType *) _37;
  const struct Clock_Ip_ClockConfigType * clockConfig.16_38;
  const struct Clock_Ip_CmuConfigType * _39;
  const struct Clock_Ip_ClockConfigType * clockConfig.17_40;
  unsigned char _41;
  long unsigned int _42;
  const struct Clock_Ip_ClockConfigType * clockConfig.18_43;

  <bb 2> :
  clockConfig.4_1 = clockConfig;
  _2 = clockConfig.4_1 != 0B;
  DevAssert (_2);
  clockConfig.5_3 = clockConfig;
  if (clockConfig.5_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  i_54 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  clockConfig.6_4 = clockConfig;
  _5 = clockConfig.6_4->selectors[i_44].value;
  _6 = sourceType_clockName[_5];
  if (_6 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  clockConfig.7_7 = clockConfig;
  _8 = clockConfig.7_7->selectors[i_44].name;
  _9 = clockFeatures[_8][1];
  _10 = (int) _9;
  _11 = selectorCallbackIndex[_10];
  callbackIndex_65 = (uint32) _11;
  _12 = selectorCallbacks[callbackIndex_65].Set;
  clockConfig.8_13 = clockConfig;
  _14 = &clockConfig.8_13->selectors[i_44];
  _12 (_14);

  <bb 6> :
  i_67 = i_44 + 1;

  <bb 7> :
  # i_44 = PHI <i_54(3), i_67(6)>
  clockConfig.9_15 = clockConfig;
  _16 = clockConfig.9_15->selectorsCount;
  _17 = (long unsigned int) _16;
  if (i_44 < _17)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  clockTreeIsConsumingPll.10_18 = clockTreeIsConsumingPll;
  if (clockTreeIsConsumingPll.10_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  i_55 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  clockConfig.11_19 = clockConfig;
  _20 = clockConfig.11_19->gates[i_45].name;
  _21 = clockFeatures[_20][1];
  _22 = (int) _21;
  _23 = gateCallbackIndex[_22];
  callbackIndex_62 = (uint32) _23;
  _24 = gateCallbacks[callbackIndex_62].Set;
  clockConfig.12_25 = clockConfig;
  _26 = &clockConfig.12_25->gates[i_45];
  _24 (_26);
  i_64 = i_45 + 1;

  <bb 11> :
  # i_45 = PHI <i_55(9), i_64(10)>
  clockConfig.13_27 = clockConfig;
  _28 = clockConfig.13_27->gatesCount;
  _29 = (long unsigned int) _28;
  if (i_45 < _29)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  clockConfig.14_30 = clockConfig;
  _31 = &clockConfig.14_30->specificPeriphalConfiguration;
  SpecificPeripheralClockInitialization (_31);
  i_57 = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  clockConfig.15_32 = clockConfig;
  _33 = clockConfig.15_32->cmus[i_46].name;
  _34 = clockFeatures[_33][1];
  _35 = (int) _34;
  _36 = cmuCallbackIndex[_35];
  callbackIndex_59 = (uint32) _36;
  _37 = cmuCallbacks[callbackIndex_59].Enable;
  clockConfig.16_38 = clockConfig;
  _39 = &clockConfig.16_38->cmus[i_46];
  _37 (_39);
  i_61 = i_46 + 1;

  <bb 14> :
  # i_46 = PHI <i_57(12), i_61(13)>
  clockConfig.17_40 = clockConfig;
  _41 = clockConfig.17_40->cmusCount;
  _42 = (long unsigned int) _41;
  if (i_46 < _42)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  clockConfig.18_43 = clockConfig;
  DisableSafeClock (clockConfig.18_43);

  <bb 16> :
  return;

}


Clock_Ip_GetPllStatus ()
{
  uint32 callbackIndex;
  uint32 i;
  clock_pll_status_t pllStatus;
  Clock_Ip_PllStatusType retValue;
  Clock_Ip_PllStatusType D.6341;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  clock_pll_status_t (*<T5a4>) (Clock_Ip_NameType) _5;
  <unnamed type> _6;
  Clock_Ip_PllStatusType _22;

  <bb 2> :
  retValue_13 = 2;
  i_14 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = HwPllName[i_10];
  _2 = clockFeatures[_1][1];
  _3 = (int) _2;
  _4 = pllCallbackIndex[_3];
  callbackIndex_16 = (uint32) _4;
  _5 = pllCallbacks[callbackIndex_16].Complete;
  _6 = HwPllName[i_10];
  pllStatus_18 = _5 (_6);
  if (pllStatus_18 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  retValue_21 = 1;
  goto <bb 9>; [INV]

  <bb 5> :
  if (pllStatus_18 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  retValue_19 = 0;

  <bb 7> :
  # retValue_7 = PHI <retValue_8(5), retValue_19(6)>
  i_20 = i_10 + 1;

  <bb 8> :
  # retValue_8 = PHI <retValue_13(2), retValue_7(7)>
  # i_10 = PHI <i_14(2), i_20(7)>
  if (i_10 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # retValue_9 = PHI <retValue_21(4), retValue_8(8)>
  _22 = retValue_9;

  <bb 10> :
<L7>:
  return _22;

}


Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * config)
{
  uint32 i;
  uint32 callbackIndex;
  _Bool _1;
  const struct Clock_Ip_ClockConfigType * clockConfig.2_2;
  <unnamed type> _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  void (*<T5cd>) (const struct Clock_Ip_CmuConfigType *) _7;
  const struct Clock_Ip_CmuConfigType * _8;
  unsigned char _9;
  long unsigned int _10;
  <unnamed type> _11;
  unsigned char _12;
  int _13;
  unsigned char _14;
  void (*<T559>) (const struct Clock_Ip_IrcoscConfigType *) _15;
  const struct Clock_Ip_IrcoscConfigType * _16;
  unsigned char _17;
  long unsigned int _18;
  <unnamed type> _19;
  unsigned char _20;
  int _21;
  unsigned char _22;
  void (*<T568>) (const struct Clock_Ip_XoscConfigType *) _23;
  const struct Clock_Ip_XoscConfigType * _24;
  unsigned char _25;
  long unsigned int _26;
  <unnamed type> _27;
  unsigned char _28;
  int _29;
  unsigned char _30;
  void (*<T5df>) (const struct Clock_Ip_PcfsConfigType *) _31;
  const struct Clock_Ip_PcfsConfigType * _32;
  unsigned char _33;
  long unsigned int _34;
  <unnamed type> _35;
  unsigned char _36;
  int _37;
  unsigned char _38;
  void (*<T581>) (const struct Clock_Ip_DividerTriggerConfigType *) _39;
  const struct Clock_Ip_DividerTriggerConfigType * _40;
  unsigned char _41;
  long unsigned int _42;
  <unnamed type> _43;
  unsigned char _44;
  int _45;
  unsigned char _46;
  void (*<T576>) (const struct Clock_Ip_DividerConfigType *) _47;
  const struct Clock_Ip_DividerConfigType * _48;
  unsigned char _49;
  long unsigned int _50;
  <unnamed type> _51;
  unsigned char _52;
  int _53;
  unsigned char _54;
  void (*<T581>) (const struct Clock_Ip_DividerTriggerConfigType *) _55;
  const struct Clock_Ip_DividerTriggerConfigType * _56;
  unsigned char _57;
  long unsigned int _58;
  <unnamed type> _59;
  unsigned char _60;
  int _61;
  unsigned char _62;
  void (*<T59e>) (const struct Clock_Ip_PllConfigType *) _63;
  const struct Clock_Ip_PllConfigType * _64;
  unsigned char _65;
  long unsigned int _66;
  <unnamed type> _67;
  unsigned char _68;
  int _69;
  unsigned char _70;
  void (*<T5cd>) (const struct Clock_Ip_CmuConfigType *) _71;
  const struct Clock_Ip_CmuConfigType * _72;
  unsigned char _73;
  long unsigned int _74;
  <unnamed type> _75;
  unsigned char _76;
  int _77;
  unsigned char _78;
  void (*<T568>) (const struct Clock_Ip_XoscConfigType *) _79;
  const struct Clock_Ip_XoscConfigType * _80;
  unsigned char _81;
  long unsigned int _82;
  <unnamed type> _83;
  unsigned char _84;
  int _85;
  unsigned char _86;
  void (*<T59e>) (const struct Clock_Ip_PllConfigType *) _87;
  const struct Clock_Ip_PllConfigType * _88;
  unsigned char _89;
  long unsigned int _90;
  <unnamed type> _91;
  unsigned char _92;
  int _93;
  unsigned char _94;
  void (*<T58d>) (const struct Clock_Ip_FracDivConfigType *) _95;
  const struct Clock_Ip_FracDivConfigType * _96;
  unsigned char _97;
  long unsigned int _98;
  <unnamed type> _99;
  <unnamed type> _100;
  <unnamed type> _101;
  unsigned char _102;
  int _103;
  unsigned char _104;
  void (*<T5b1>) (const struct Clock_Ip_SelectorConfigType *) _105;
  const struct Clock_Ip_SelectorConfigType * _106;
  unsigned char _107;
  long unsigned int _108;
  _Bool clockTreeIsConsumingPll.3_109;
  _Bool _110;
  <unnamed type> _111;
  unsigned char _112;
  int _113;
  unsigned char _114;
  void (*<T5bd>) (const struct Clock_Ip_GateConfigType *) _115;
  const struct Clock_Ip_GateConfigType * _116;
  unsigned char _117;
  long unsigned int _118;
  const struct Clock_IP_SpecificPeriphConfigType * _119;
  <unnamed type> _120;
  unsigned char _121;
  int _122;
  unsigned char _123;
  void (*<T5cd>) (const struct Clock_Ip_CmuConfigType *) _124;
  const struct Clock_Ip_CmuConfigType * _125;
  unsigned char _126;
  long unsigned int _127;

  <bb 2> :
  CheckClockConfiguration (config_162(D));
  _1 = config_162(D) != 0B;
  DevAssert (_1);
  clockConfig.2_2 = clockConfig;
  if (clockConfig.2_2 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  i_165 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = config_162(D)->cmus[i_128].name;
  _4 = clockFeatures[_3][1];
  _5 = (int) _4;
  _6 = cmuCallbackIndex[_5];
  callbackIndex_166 = (uint32) _6;
  _7 = cmuCallbacks[callbackIndex_166].Reset;
  _8 = &config_162(D)->cmus[i_128];
  _7 (_8);
  i_168 = i_128 + 1;

  <bb 5> :
  # i_128 = PHI <i_165(3), i_168(4)>
  _9 = config_162(D)->cmusCount;
  _10 = (long unsigned int) _9;
  if (i_128 < _10)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  clockConfig = config_162(D);
  SpecificPlatformInitClock (config_162(D));
  ResetClockConfiguration (config_162(D));
  i_172 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _11 = config_162(D)->ircoscs[i_129].name;
  _12 = clockFeatures[_11][1];
  _13 = (int) _12;
  _14 = ircoscCallbackIndex[_13];
  callbackIndex_230 = (uint32) _14;
  _15 = intOscCallbacks[callbackIndex_230].Set;
  _16 = &config_162(D)->ircoscs[i_129];
  _15 (_16);
  i_232 = i_129 + 1;

  <bb 8> :
  # i_129 = PHI <i_172(6), i_232(7)>
  _17 = config_162(D)->ircoscsCount;
  _18 = (long unsigned int) _17;
  if (i_129 < _18)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i_173 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  _19 = config_162(D)->xoscs[i_130].name;
  _20 = clockFeatures[_19][1];
  _21 = (int) _20;
  _22 = xoscCallbackIndex[_21];
  callbackIndex_227 = (uint32) _22;
  _23 = extOscCallbacks[callbackIndex_227].Set;
  _24 = &config_162(D)->xoscs[i_130];
  _23 (_24);
  i_229 = i_130 + 1;

  <bb 11> :
  # i_130 = PHI <i_173(9), i_229(10)>
  _25 = config_162(D)->xoscsCount;
  _26 = (long unsigned int) _25;
  if (i_130 < _26)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  UpdateDriverContext (config_162(D));
  i_175 = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  _27 = config_162(D)->pcfs[i_131].name;
  _28 = clockFeatures[_27][1];
  _29 = (int) _28;
  _30 = pcfsCallbackIndex[_29];
  callbackIndex_224 = (uint32) _30;
  _31 = pcfsCallbacks[callbackIndex_224].Set;
  _32 = &config_162(D)->pcfs[i_131];
  _31 (_32);
  i_226 = i_131 + 1;

  <bb 14> :
  # i_131 = PHI <i_175(12), i_226(13)>
  _33 = config_162(D)->pcfsCount;
  _34 = (long unsigned int) _33;
  if (i_131 < _34)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  i_176 = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _35 = config_162(D)->dividerTriggers[i_132].name;
  _36 = clockFeatures[_35][1];
  _37 = (int) _36;
  _38 = dividertriggerCallbackIndex[_37];
  callbackIndex_221 = (uint32) _38;
  _39 = dividerTriggerCallbacks[callbackIndex_221].Configure;
  _40 = &config_162(D)->dividerTriggers[i_132];
  _39 (_40);
  i_223 = i_132 + 1;

  <bb 17> :
  # i_132 = PHI <i_176(15), i_223(16)>
  _41 = config_162(D)->dividerTriggersCount;
  _42 = (long unsigned int) _41;
  if (i_132 < _42)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  i_177 = 0;
  goto <bb 20>; [INV]

  <bb 19> :
  _43 = config_162(D)->dividers[i_133].name;
  _44 = clockFeatures[_43][1];
  _45 = (int) _44;
  _46 = dividerCallbackIndex[_45];
  callbackIndex_218 = (uint32) _46;
  _47 = dividerCallbacks[callbackIndex_218].Set;
  _48 = &config_162(D)->dividers[i_133];
  _47 (_48);
  i_220 = i_133 + 1;

  <bb 20> :
  # i_133 = PHI <i_177(18), i_220(19)>
  _49 = config_162(D)->dividersCount;
  _50 = (long unsigned int) _49;
  if (i_133 < _50)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  i_178 = 0;
  goto <bb 23>; [INV]

  <bb 22> :
  _51 = config_162(D)->dividerTriggers[i_134].name;
  _52 = clockFeatures[_51][1];
  _53 = (int) _52;
  _54 = dividertriggerCallbackIndex[_53];
  callbackIndex_215 = (uint32) _54;
  _55 = dividerTriggerCallbacks[callbackIndex_215].TriggerUpdate;
  _56 = &config_162(D)->dividerTriggers[i_134];
  _55 (_56);
  i_217 = i_134 + 1;

  <bb 23> :
  # i_134 = PHI <i_178(21), i_217(22)>
  _57 = config_162(D)->dividerTriggersCount;
  _58 = (long unsigned int) _57;
  if (i_134 < _58)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  i_179 = 0;
  goto <bb 26>; [INV]

  <bb 25> :
  _59 = config_162(D)->plls[i_135].name;
  _60 = clockFeatures[_59][1];
  _61 = (int) _60;
  _62 = pllCallbackIndex[_61];
  callbackIndex_212 = (uint32) _62;
  _63 = pllCallbacks[callbackIndex_212].Set;
  _64 = &config_162(D)->plls[i_135];
  _63 (_64);
  i_214 = i_135 + 1;

  <bb 26> :
  # i_135 = PHI <i_179(24), i_214(25)>
  _65 = config_162(D)->pllsCount;
  _66 = (long unsigned int) _65;
  if (i_135 < _66)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  i_180 = 0;
  goto <bb 29>; [INV]

  <bb 28> :
  _67 = config_162(D)->cmus[i_136].name;
  _68 = clockFeatures[_67][1];
  _69 = (int) _68;
  _70 = cmuCallbackIndex[_69];
  callbackIndex_209 = (uint32) _70;
  _71 = cmuCallbacks[callbackIndex_209].Set;
  _72 = &config_162(D)->cmus[i_136];
  _71 (_72);
  i_211 = i_136 + 1;

  <bb 29> :
  # i_136 = PHI <i_180(27), i_211(28)>
  _73 = config_162(D)->cmusCount;
  _74 = (long unsigned int) _73;
  if (i_136 < _74)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  i_181 = 0;
  goto <bb 32>; [INV]

  <bb 31> :
  _75 = config_162(D)->xoscs[i_137].name;
  _76 = clockFeatures[_75][1];
  _77 = (int) _76;
  _78 = xoscCallbackIndex[_77];
  callbackIndex_206 = (uint32) _78;
  _79 = extOscCallbacks[callbackIndex_206].Complete;
  _80 = &config_162(D)->xoscs[i_137];
  _79 (_80);
  i_208 = i_137 + 1;

  <bb 32> :
  # i_137 = PHI <i_181(30), i_208(31)>
  _81 = config_162(D)->xoscsCount;
  _82 = (long unsigned int) _81;
  if (i_137 < _82)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  i_182 = 0;
  goto <bb 35>; [INV]

  <bb 34> :
  _83 = config_162(D)->plls[i_138].name;
  _84 = clockFeatures[_83][1];
  _85 = (int) _84;
  _86 = pllCallbackIndex[_85];
  callbackIndex_203 = (uint32) _86;
  _87 = pllCallbacks[callbackIndex_203].Enable;
  _88 = &config_162(D)->plls[i_138];
  _87 (_88);
  i_205 = i_138 + 1;

  <bb 35> :
  # i_138 = PHI <i_182(33), i_205(34)>
  _89 = config_162(D)->pllsCount;
  _90 = (long unsigned int) _89;
  if (i_138 < _90)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  i_183 = 0;
  goto <bb 38>; [INV]

  <bb 37> :
  _91 = config_162(D)->fracDivs[i_139].name;
  _92 = clockFeatures[_91][1];
  _93 = (int) _92;
  _94 = fractional_dividerCallbackIndex[_93];
  callbackIndex_200 = (uint32) _94;
  _95 = fracDivCallbacks[callbackIndex_200].Set;
  _96 = &config_162(D)->fracDivs[i_139];
  _95 (_96);
  i_202 = i_139 + 1;

  <bb 38> :
  # i_139 = PHI <i_183(36), i_202(37)>
  _97 = config_162(D)->fracDivsCount;
  _98 = (long unsigned int) _97;
  if (i_139 < _98)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  clockTreeIsConsumingPll = 0;
  i_185 = 0;
  goto <bb 44>; [INV]

  <bb 40> :
  _99 = config_162(D)->selectors[i_140].value;
  _100 = sourceType_clockName[_99];
  if (_100 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _101 = config_162(D)->selectors[i_140].name;
  _102 = clockFeatures[_101][1];
  _103 = (int) _102;
  _104 = selectorCallbackIndex[_103];
  callbackIndex_197 = (uint32) _104;
  _105 = selectorCallbacks[callbackIndex_197].Set;
  _106 = &config_162(D)->selectors[i_140];
  _105 (_106);
  goto <bb 43>; [INV]

  <bb 42> :
  clockTreeIsConsumingPll = 1;

  <bb 43> :
  i_199 = i_140 + 1;

  <bb 44> :
  # i_140 = PHI <i_185(39), i_199(43)>
  _107 = config_162(D)->selectorsCount;
  _108 = (long unsigned int) _107;
  if (i_140 < _108)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  clockTreeIsConsumingPll.3_109 = clockTreeIsConsumingPll;
  _110 = ~clockTreeIsConsumingPll.3_109;
  if (_110 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 46> :
  i_186 = 0;
  goto <bb 48>; [INV]

  <bb 47> :
  _111 = config_162(D)->gates[i_141].name;
  _112 = clockFeatures[_111][1];
  _113 = (int) _112;
  _114 = gateCallbackIndex[_113];
  callbackIndex_193 = (uint32) _114;
  _115 = gateCallbacks[callbackIndex_193].Set;
  _116 = &config_162(D)->gates[i_141];
  _115 (_116);
  i_195 = i_141 + 1;

  <bb 48> :
  # i_141 = PHI <i_186(46), i_195(47)>
  _117 = config_162(D)->gatesCount;
  _118 = (long unsigned int) _117;
  if (i_141 < _118)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  _119 = &config_162(D)->specificPeriphalConfiguration;
  SpecificPeripheralClockInitialization (_119);
  i_188 = 0;
  goto <bb 51>; [INV]

  <bb 50> :
  _120 = config_162(D)->cmus[i_142].name;
  _121 = clockFeatures[_120][1];
  _122 = (int) _121;
  _123 = cmuCallbackIndex[_122];
  callbackIndex_190 = (uint32) _123;
  _124 = cmuCallbacks[callbackIndex_190].Enable;
  _125 = &config_162(D)->cmus[i_142];
  _124 (_125);
  i_192 = i_142 + 1;

  <bb 51> :
  # i_142 = PHI <i_188(49), i_192(50)>
  _126 = config_162(D)->cmusCount;
  _127 = (long unsigned int) _126;
  if (i_142 < _127)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  DisableSafeClock (config_162(D));

  <bb 53> :
  return;

}


Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * config)
{
  Clock_Ip_PllStatusType pllStatus;
  Clock_Ip_StatusType clockStatus;
  Clock_Ip_StatusType D.6324;
  _Bool _1;
  _Bool clockTreeIsConsumingPll.0_2;
  Clock_Ip_StatusType _15;

  <bb 2> :
  clockStatus_5 = 1;
  _1 = config_6(D) != 0B;
  DevAssert (_1);
  Clock_Ip_InitClock (config_6(D));
  clockTreeIsConsumingPll.0_2 = clockTreeIsConsumingPll;
  if (clockTreeIsConsumingPll.0_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  pllStatus_12 = Clock_Ip_GetPllStatus ();
  if (pllStatus_12 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  Clock_Ip_DistributePll ();
  clockStatus_14 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  clockStatus_10 = 0;

  <bb 6> :
  # clockStatus_3 = PHI <clockStatus_14(4), clockStatus_10(5), clockStatus_5(3)>
  _15 = clockStatus_3;

  <bb 7> :
<L5>:
  return _15;

}


DevAssert (volatile boolean x)
{
  _Bool x.1_1;

  <bb 2> :
  x.1_1 ={v} x;
  if (x.1_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


