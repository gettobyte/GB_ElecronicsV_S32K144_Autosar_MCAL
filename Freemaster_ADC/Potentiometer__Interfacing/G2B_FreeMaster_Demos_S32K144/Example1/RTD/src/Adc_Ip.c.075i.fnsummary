Symbol table:

SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25/88 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25) @073f11c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearTrigErrReg/39 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25/87 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25) @073f10e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearTrigErrReg/39 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20/86 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20) @073e9ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableChannelNotification/38 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20/85 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20) @073e9e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableChannelNotification/38 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19/84 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19) @073e9c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableChannelNotification/37 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19/83 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19) @073e9b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableChannelNotification/37 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12/82 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12) @073e99a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12/81 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12) @073e98c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13/80 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13) @073e9700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13/79 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13) @073e9620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15/78 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15) @073e9540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15/77 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15) @073e9460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24/76 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24) @073e9380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24/75 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24) @073e92a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29) @06a58d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DoCalibration/35 Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29) @06a58c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DoCalibration/35 Adc_DoCalibration_SetParams/17 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18/72 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18) @06a58460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_StartConversion/30 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18/71 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18) @06a58380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_StartConversion/30 
  Calls: 
OsIf_GetElapsed/70 (OsIf_GetElapsed) @06a581c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17/69 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17) @06a580e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17/68 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17) @06a58000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetDisabledChannel/29 
  Calls: 
OsIf_GetCounter/67 (OsIf_GetCounter) @06a51ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
OsIf_MicrosToTicks/66 (OsIf_MicrosToTicks) @06a51e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_SetDisabledChannel/29 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21/65 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21) @06a51b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ConfigChannel/28 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21/64 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21) @06a51a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_ConfigChannel/28 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28/63 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28) @06a518c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28/62 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28) @06a517e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14/61 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14) @06a51700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14/60 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14) @06a51620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11/59 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11) @06a51540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11/58 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11) @06a51460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetClockMode/27 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10/57 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10) @06a512a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetResolution/26 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10/56 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10) @06a511c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetResolution/26 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30/55 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30) @06a51000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetContinuousMode/25 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30/54 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30) @06a1aee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetContinuousMode/25 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23/53 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23) @06a1ac40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetTriggerMode/24 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23/52 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23) @06a1ab60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetTriggerMode/24 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22/51 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22) @06a1a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableDma/23 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22/50 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22) @06a1a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_DisableDma/23 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26/49 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26) @06a1a700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableDma/22 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26/48 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26) @06a1a620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_EnableDma/22 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16/47 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16) @06a1a460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetSampleTime/21 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16/46 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16) @06a1a380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetSampleTime/21 
  Calls: 
SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27/45 (SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27) @06a1a1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetAveraging/20 
  Calls: 
SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27/44 (SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27) @06a1a0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Adc_Ip_SetAveraging/20 
  Calls: 
Adc_Ip_IRQHandler/43 (Adc_Ip_IRQHandler) @06a0a7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)AdcIpState/16 (read)AdcIpState/16 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetData/13 Adc_HwAcc_GetData/13 Adc_HwAcc_GetCOCO/12 Adc_HwAcc_GetAIEN/11 DevAssert/14 
   Indirect call
Adc_Ip_GetChanData/42 (Adc_Ip_GetChanData) @06a0a460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_GetDataAddress/41 (Adc_Ip_GetDataAddress) @06a0a1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_GetTrigErrReg/40 (Adc_Ip_GetTrigErrReg) @06a00ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 DevAssert/14 
Adc_Ip_ClearTrigErrReg/39 (Adc_Ip_ClearTrigErrReg) @06a008c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25/88 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25/87 DevAssert/14 DevAssert/14 
Adc_Ip_DisableChannelNotification/38 (Adc_Ip_DisableChannelNotification) @06a002a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20/86 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20/85 DevAssert/14 DevAssert/14 
Adc_Ip_EnableChannelNotification/37 (Adc_Ip_EnableChannelNotification) @06a00e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19/84 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19/83 DevAssert/14 DevAssert/14 
Adc_Ip_ClearLatchedTriggers/36 (Adc_Ip_ClearLatchedTriggers) @06a00b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12/82 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12/81 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 DevAssert/14 
Adc_Ip_DoCalibration/35 (Adc_Ip_DoCalibration) @06a007e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_DoCalibration_SetParams/17 OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 Adc_DoCalibration_SetParams/17 Adc_HwAcc_GetInputClock/3 Adc_HwAcc_GetClockDivide/2 Adc_HwAcc_GetTriggerMode/8 Adc_HwAcc_GetAverageSelect/6 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 
Adc_Ip_GetConvData/34 (Adc_Ip_GetConvData) @06a00460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetData/13 DevAssert/14 DevAssert/14 
Adc_Ip_GetConvCompleteFlag/33 (Adc_Ip_GetConvCompleteFlag) @06a001c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetCOCO/12 DevAssert/14 DevAssert/14 
Adc_Ip_GetChanInterrupt/32 (Adc_Ip_GetChanInterrupt) @069f9ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_HwAcc_GetAIEN/11 DevAssert/14 DevAssert/14 
Adc_Ip_GetConvActiveFlag/31 (Adc_Ip_GetConvActiveFlag) @069f99a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/14 
Adc_Ip_StartConversion/30 (Adc_Ip_StartConversion) @069f9380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18/72 Adc_HwAcc_SetChannel/9 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18/71 DevAssert/14 
Adc_Ip_SetDisabledChannel/29 (Adc_Ip_SetDisabledChannel) @069f9e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/70 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17/69 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17/68 OsIf_GetCounter/67 OsIf_MicrosToTicks/66 DevAssert/14 DevAssert/14 
Adc_Ip_ConfigChannel/28 (Adc_Ip_ConfigChannel) @069f9b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21/65 Adc_HwAcc_SetChannel/9 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21/64 DevAssert/14 DevAssert/14 
Adc_Ip_SetClockMode/27 (Adc_Ip_SetClockMode) @069f98c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28/63 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28/62 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14/61 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14/60 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11/59 Adc_HwAcc_SetClock/1 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11/58 DevAssert/14 DevAssert/14 
Adc_Ip_SetResolution/26 (Adc_Ip_SetResolution) @069f9620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10/57 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10/56 DevAssert/14 
Adc_Ip_SetContinuousMode/25 (Adc_Ip_SetContinuousMode) @069f92a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_Init/18 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30/55 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30/54 DevAssert/14 
Adc_Ip_SetTriggerMode/24 (Adc_Ip_SetTriggerMode) @069ece00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23/53 Adc_HwAcc_SetTriggerMode/7 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23/52 DevAssert/14 
Adc_Ip_DisableDma/23 (Adc_Ip_DisableDma) @069ec8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22/51 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22/50 DevAssert/14 
Adc_Ip_EnableDma/22 (Adc_Ip_EnableDma) @069ec000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26/49 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26/48 DevAssert/14 
Adc_Ip_SetSampleTime/21 (Adc_Ip_SetSampleTime) @069ecd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16/47 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16/46 DevAssert/14 
Adc_Ip_SetAveraging/20 (Adc_Ip_SetAveraging) @069eca80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27/45 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27/44 DevAssert/14 
Adc_Ip_DeInit/19 (Adc_Ip_DeInit) @069ec7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Adc_Ip_Init/18 DevAssert/14 
Adc_Ip_Init/18 (Adc_Ip_Init) @069ec540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: AdcBase/15 (read)AdcIpState/16 (write)AdcIpState/16 (write)AdcIpState/16 (write)
  Referring: 
  Availability: available
  Function flags: body
  Called by: Adc_Ip_DeInit/19 
  Calls: Adc_Ip_ConfigChannel/28 Adc_Ip_SetContinuousMode/25 Adc_HwAcc_SetUserGainAndOffset/10 Adc_HwAcc_SetSC2Reg/0 Adc_Ip_SetResolution/26 Adc_HwAcc_SetAveraging/5 Adc_HwAcc_SetSampleTime/4 Adc_HwAcc_SetClock/1 DevAssert/14 DevAssert/14 DevAssert/14 
Adc_DoCalibration_SetParams/17 (Adc_DoCalibration_SetParams) @068f6e00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 Adc_Ip_DoCalibration/35 
  Calls: SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13/80 Adc_HwAcc_SetClock/1 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13/79 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15/78 Adc_HwAcc_SetSampleTime/4 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15/77 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24/76 Adc_HwAcc_SetTriggerMode/7 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24/75 SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29/74 Adc_HwAcc_SetAveraging/5 SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29/73 
AdcIpState/16 (AdcIpState) @068f81f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Adc_Ip_Init/18 (write)Adc_Ip_Init/18 (write)Adc_Ip_GetChanData/42 (read)Adc_Ip_ConfigChannel/28 (write)Adc_Ip_DoCalibration/35 (read)Adc_Ip_Init/18 (write)Adc_Ip_DeInit/19 (write)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)Adc_Ip_IRQHandler/43 (read)
  Availability: available
  Varpool flags:
AdcBase/15 (AdcBase) @068f8168
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Adc_Ip_SetClockMode/27 (read)Adc_Ip_GetDataAddress/41 (read)Adc_Ip_GetChanData/42 (read)Adc_Ip_SetAveraging/20 (read)Adc_Ip_SetSampleTime/21 (read)Adc_Ip_EnableDma/22 (read)Adc_Ip_DisableDma/23 (read)Adc_Ip_SetTriggerMode/24 (read)Adc_Ip_SetContinuousMode/25 (read)Adc_Ip_SetResolution/26 (read)Adc_Ip_ConfigChannel/28 (read)Adc_Ip_Init/18 (read)Adc_Ip_SetDisabledChannel/29 (read)Adc_Ip_StartConversion/30 (read)Adc_Ip_GetConvActiveFlag/31 (read)Adc_Ip_GetChanInterrupt/32 (read)Adc_Ip_GetConvCompleteFlag/33 (read)Adc_Ip_GetConvData/34 (read)Adc_Ip_DoCalibration/35 (read)Adc_Ip_ClearLatchedTriggers/36 (read)Adc_Ip_EnableChannelNotification/37 (read)Adc_Ip_DisableChannelNotification/38 (read)Adc_Ip_ClearTrigErrReg/39 (read)Adc_Ip_GetTrigErrReg/40 (read)Adc_Ip_IRQHandler/43 (read)
  Availability: available
  Varpool flags: initialized read-only const-value-known
DevAssert/14 (DevAssert) @068f6460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetChanData/42 Adc_Ip_GetDataAddress/41 Adc_Ip_GetTrigErrReg/40 Adc_Ip_GetTrigErrReg/40 Adc_Ip_ClearTrigErrReg/39 Adc_Ip_ClearTrigErrReg/39 Adc_Ip_DisableChannelNotification/38 Adc_Ip_DisableChannelNotification/38 Adc_Ip_EnableChannelNotification/37 Adc_Ip_EnableChannelNotification/37 Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_ClearLatchedTriggers/36 Adc_Ip_DoCalibration/35 Adc_Ip_GetConvData/34 Adc_Ip_GetConvData/34 Adc_Ip_GetConvCompleteFlag/33 Adc_Ip_GetConvCompleteFlag/33 Adc_Ip_GetChanInterrupt/32 Adc_Ip_GetChanInterrupt/32 Adc_Ip_GetConvActiveFlag/31 Adc_Ip_StartConversion/30 Adc_Ip_SetDisabledChannel/29 Adc_Ip_SetDisabledChannel/29 Adc_Ip_DeInit/19 Adc_Ip_Init/18 Adc_Ip_Init/18 Adc_Ip_Init/18 Adc_Ip_ConfigChannel/28 Adc_Ip_ConfigChannel/28 Adc_Ip_SetClockMode/27 Adc_Ip_SetClockMode/27 Adc_Ip_SetResolution/26 Adc_Ip_SetContinuousMode/25 Adc_Ip_SetTriggerMode/24 Adc_Ip_DisableDma/23 Adc_Ip_EnableDma/22 Adc_Ip_SetSampleTime/21 Adc_Ip_SetAveraging/20 
  Calls: 
Adc_HwAcc_GetData/13 (Adc_HwAcc_GetData) @068de8c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_IRQHandler/43 Adc_Ip_GetConvData/34 
  Calls: 
Adc_HwAcc_GetCOCO/12 (Adc_HwAcc_GetCOCO) @068de620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetConvCompleteFlag/33 
  Calls: 
Adc_HwAcc_GetAIEN/11 (Adc_HwAcc_GetAIEN) @068de380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_IRQHandler/43 Adc_Ip_GetChanInterrupt/32 
  Calls: 
Adc_HwAcc_SetUserGainAndOffset/10 (Adc_HwAcc_SetUserGainAndOffset) @068de0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 
  Calls: 
Adc_HwAcc_SetChannel/9 (Adc_HwAcc_SetChannel) @068b0c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_StartConversion/30 Adc_Ip_ConfigChannel/28 
  Calls: 
Adc_HwAcc_GetTriggerMode/8 (Adc_HwAcc_GetTriggerMode) @068b07e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetTriggerMode/7 (Adc_HwAcc_SetTriggerMode) @068b0540
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_SetTriggerMode/24 Adc_DoCalibration_SetParams/17 
  Calls: 
Adc_HwAcc_GetAverageSelect/6 (Adc_HwAcc_GetAverageSelect) @068b01c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetAveraging/5 (Adc_HwAcc_SetAveraging) @068abee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 Adc_Ip_SetClockMode/27 Adc_Ip_SetAveraging/20 Adc_DoCalibration_SetParams/17 
  Calls: 
Adc_HwAcc_SetSampleTime/4 (Adc_HwAcc_SetSampleTime) @068aba80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 Adc_Ip_SetClockMode/27 Adc_Ip_SetSampleTime/21 Adc_DoCalibration_SetParams/17 
  Calls: 
Adc_HwAcc_GetInputClock/3 (Adc_HwAcc_GetInputClock) @068ab700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_GetClockDivide/2 (Adc_HwAcc_GetClockDivide) @068ab460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_DoCalibration/35 
  Calls: 
Adc_HwAcc_SetClock/1 (Adc_HwAcc_SetClock) @068ab1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 Adc_Ip_SetClockMode/27 Adc_DoCalibration_SetParams/17 
  Calls: 
Adc_HwAcc_SetSC2Reg/0 (Adc_HwAcc_SetSC2Reg) @068a7d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Adc_Ip_Init/18 
  Calls: 
Adc_Ip_IRQHandler (const uint32 Instance)
{
  boolean ChanCocoFlag;
  boolean ChanIntFlag;
  uint8 ControlChanIdx;
  uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  void (*<T4d9>) (const uint8) _3;
  int _4;
  void (*<T4d9>) (const uint8) _5;
  int _6;
  <unnamed type> _7;
  unsigned char ControlChanIdx.12_8;
  unsigned char ControlChanIdx.13_9;

  <bb 2> :
  _1 = Instance_16(D) <= 1;
  DevAssert (_1);
  Base_19 = AdcBase[Instance_16(D)];
  ChanIntFlag_20 = 0;
  ChanCocoFlag_21 = 0;
  _2 = AdcIpState[Instance_16(D)].Init;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  _3 = AdcIpState[Instance_16(D)].ConversionCompleteNotification;
  if (_3 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  ControlChanIdx_22 = 0;
  goto <bb 12>; [INV]

  <bb 5> :
  _4 = (int) ControlChanIdx_10;
  Sc1Reg_23 ={v} Base_19->SC1[_4];
  ChanIntFlag_25 = Adc_HwAcc_GetAIEN (Sc1Reg_23);
  ChanCocoFlag_27 = Adc_HwAcc_GetCOCO (Sc1Reg_23);
  if (ChanIntFlag_25 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (ChanCocoFlag_27 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _5 = AdcIpState[Instance_16(D)].ConversionCompleteNotification;
  _5 (ControlChanIdx_10);
  goto <bb 11>; [INV]

  <bb 8> :
  _6 = (int) ControlChanIdx_10;
  _7 = AdcIpState[Instance_16(D)].ChannelConfig[_6];
  if (_7 == 31)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (ChanCocoFlag_27 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_HwAcc_GetData (Base_19, ControlChanIdx_10);

  <bb 11> :
  ControlChanIdx.12_8 = ControlChanIdx_10;
  ControlChanIdx_30 = ControlChanIdx.12_8 + 1;

  <bb 12> :
  # ControlChanIdx_10 = PHI <ControlChanIdx_22(4), ControlChanIdx_30(11)>
  if (ControlChanIdx_10 <= 15)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  goto <bb 17>; [INV]

  <bb 14> :
  ControlChanIdx_31 = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  Adc_HwAcc_GetData (Base_19, ControlChanIdx_11);
  ControlChanIdx.13_9 = ControlChanIdx_11;
  ControlChanIdx_33 = ControlChanIdx.13_9 + 1;

  <bb 16> :
  # ControlChanIdx_11 = PHI <ControlChanIdx_31(14), ControlChanIdx_33(15)>
  if (ControlChanIdx_11 <= 15)
    goto <bb 15>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  return;

}


Adc_Ip_GetChanData (const uint32 Instance, const Adc_Ip_InputChannelType Channel, uint16 * const Result)
{
  boolean Found;
  uint8 ControlChanIdx;
  uint16 Temp;
  Adc_Ip_StatusType Status;
  const struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6422;
  _Bool _1;
  int _2;
  <unnamed type> _3;
  unsigned char ControlChanIdx.11_4;
  int _5;
  long unsigned int _6;
  Adc_Ip_StatusType _27;

  <bb 2> :
  _1 = Instance_11(D) <= 1;
  DevAssert (_1);
  Base_14 = AdcBase[Instance_11(D)];
  Status_15 = 0;
  Temp_16 = 0;
  Found_17 = 0;
  ControlChanIdx_18 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) ControlChanIdx_9;
  _3 = AdcIpState[Instance_11(D)].ChannelConfig[_2];
  if (Channel_19(D) == _3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Found_21 = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  ControlChanIdx.11_4 = ControlChanIdx_9;
  ControlChanIdx_20 = ControlChanIdx.11_4 + 1;

  <bb 6> :
  # ControlChanIdx_9 = PHI <ControlChanIdx_18(2), ControlChanIdx_20(5)>
  if (ControlChanIdx_9 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # Found_10 = PHI <Found_21(4), Found_17(6)>
  if (Found_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = (int) ControlChanIdx_9;
  _6 ={v} Base_14->R[_5];
  Temp_23 = (uint16) _6;
  Temp_24 = Temp_23 & 4095;
  goto <bb 10>; [INV]

  <bb 9> :
  Status_22 = 1;

  <bb 10> :
  # Status_7 = PHI <Status_15(8), Status_22(9)>
  # Temp_8 = PHI <Temp_24(8), Temp_16(9)>
  *Result_25(D) = Temp_8;
  _27 = Status_7;

  <bb 11> :
<L8>:
  return _27;

}


Adc_Ip_GetDataAddress (const uint32 Instance, const uint8 Index)
{
  uint32 D.6415;
  _Bool _1;
  struct ADC_Type * _2;
  int _3;
  const uint32_t * _4;
  uint32 _9;

  <bb 2> :
  _1 = Instance_5(D) <= 1;
  DevAssert (_1);
  _2 = AdcBase[Instance_5(D)];
  _3 = (int) Index_8(D);
  _4 = &_2->R[_3];
  _9 = (uint32) _4;

  <bb 3> :
<L0>:
  return _9;

}


Adc_Ip_GetTrigErrReg (const uint32 Instance)
{
  const struct ADC_Type * const Base;
  uint32 D.6413;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 _10;

  <bb 2> :
  _1 = Instance_5(D) <= 1;
  DevAssert (_1);
  _2 = Instance_5(D) != 0;
  DevAssert (_2);
  Base_9 = AdcBase[Instance_5(D)];
  _3 ={v} Base_9->SC2;
  _4 = _3 >> 24;
  _10 = _4 & 15;

  <bb 3> :
<L0>:
  return _10;

}


Adc_Ip_ClearTrigErrReg (const uint32 Instance)
{
  struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = Instance_5(D) <= 1;
  DevAssert (_1);
  _2 = Instance_5(D) != 0;
  DevAssert (_2);
  Base_9 = AdcBase[Instance_5(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25 ();
  _3 ={v} Base_9->SC2;
  _4 = _3 | 251658240;
  Base_9->SC2 ={v} _4;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25 ();
  return;

}


Adc_Ip_DisableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = Instance_7(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_10(D) <= 15;
  DevAssert (_2);
  Base_12 = AdcBase[Instance_7(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20 ();
  _3 = (int) ControlChanIdx_10(D);
  _4 ={v} Base_12->SC1[_3];
  _5 = (int) ControlChanIdx_10(D);
  _6 = _4 & 4294967231;
  Base_12->SC1[_5] ={v} _6;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20 ();
  return;

}


Adc_Ip_EnableChannelNotification (const uint32 Instance, const uint8 ControlChanIdx)
{
  struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = Instance_7(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_10(D) <= 15;
  DevAssert (_2);
  Base_12 = AdcBase[Instance_7(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19 ();
  _3 = (int) ControlChanIdx_10(D);
  _4 ={v} Base_12->SC1[_3];
  _5 = (int) ControlChanIdx_10(D);
  _6 = _4 | 64;
  Base_12->SC1[_5] ={v} _6;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19 ();
  return;

}


Adc_Ip_ClearLatchedTriggers (const uint32 Instance)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6410;
  long unsigned int D.6406;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _26;
  Adc_Ip_StatusType _29;

  <bb 2> :
  _1 = Instance_11(D) <= 1;
  DevAssert (_1);
  _2 = Instance_11(D) != 0;
  DevAssert (_2);
  Base_15 = AdcBase[Instance_11(D)];
  Status_16 = 0;
  TimeoutTicks_18 = OsIf_MicrosToTicks (10000, 0);
  _3 = OsIf_GetCounter (0);
  CurrentTicks = _3;
  ElapsedTicks_21 = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12 ();
  _4 ={v} Base_15->CFG1;
  _5 = _4 | 256;
  Base_15->CFG1 ={v} _5;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12 ();
  goto <bb 4>; [INV]

  <bb 3> :
  _26 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_27 = _26 + ElapsedTicks_9;

  <bb 4> :
  # ElapsedTicks_9 = PHI <ElapsedTicks_21(2), ElapsedTicks_27(3)>
  _6 ={v} Base_15->SC2;
  _7 = _6 & 983040;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks_9 < TimeoutTicks_18)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks_9 >= TimeoutTicks_18)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status_28 = 2;

  <bb 8> :
  # Status_8 = PHI <Status_16(6), Status_28(7)>
  _29 = Status_8;
  CurrentTicks ={v} {CLOBBER};

  <bb 9> :
<L7>:
  return _29;

}


Adc_Ip_DoCalibration (const uint32 Instance)
{
  struct Adc_Ip_ClockConfigType CalClockConfig;
  struct Adc_Ip_ClockConfigType PreClockConfig;
  uint32 Reg;
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_TrigType TriggerMode;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6393;
  long unsigned int vol.10;
  long unsigned int D.6388;
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  int _5;
  _Bool _6;
  <unnamed type> _7;
  unsigned char _8;
  long unsigned int _9;
  <unnamed type> _10;
  <unnamed type> _11;
  <unnamed type> _12;
  <unnamed type> _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _62;
  long unsigned int vol.10_66;
  Adc_Ip_StatusType _67;

  <bb 2> :
  _1 = Instance_19(D) <= 1;
  DevAssert (_1);
  Base_22 = AdcBase[Instance_19(D)];
  Status_23 = 0;
  TimeoutTicks_25 = OsIf_MicrosToTicks (10000, 0);
  _2 = OsIf_GetCounter (0);
  CurrentTicks = _2;
  ElapsedTicks_28 = 0;
  Reg_29 ={v} Base_22->SC3;
  _3 = Reg_29 >> 2;
  _4 = (int) _3;
  _5 = _4 & 1;
  _6 = _5 != 0;
  PreClockConfig.AvgEn = _6;
  _7 = Adc_HwAcc_GetAverageSelect (Reg_29);
  PreClockConfig.AvgSel = _7;
  Reg_33 ={v} Base_22->CFG2;
  _8 = (unsigned char) Reg_33;
  PreClockConfig.SampleTime = _8;
  _9 ={v} Base_22->SC2;
  TriggerMode_36 = Adc_HwAcc_GetTriggerMode (_9);
  Reg_37 ={v} Base_22->CFG1;
  _10 = Adc_HwAcc_GetClockDivide (Reg_37);
  PreClockConfig.ClockDivide = _10;
  _11 = Adc_HwAcc_GetInputClock (Reg_37);
  PreClockConfig.InputClock = _11;
  CalClockConfig.AvgEn = 1;
  CalClockConfig.AvgSel = 3;
  CalClockConfig.SampleTime = 12;
  _12 = AdcIpState[Instance_19(D)].CalibrationClockDivide;
  CalClockConfig.ClockDivide = _12;
  _13 = PreClockConfig.InputClock;
  CalClockConfig.InputClock = _13;
  Adc_DoCalibration_SetParams (Base_22, &CalClockConfig, 0);
  Base_22->CLPS ={v} 0;
  Base_22->CLP3 ={v} 0;
  Base_22->CLP2 ={v} 0;
  Base_22->CLP1 ={v} 0;
  Base_22->CLP0 ={v} 0;
  Base_22->CLPX ={v} 0;
  Base_22->CLP9 ={v} 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  Reg_56 ={v} Base_22->SC3;
  Reg_57 = Reg_56 & 4294967167;
  Reg_58 = Reg_57 | 128;
  Base_22->SC3 ={v} Reg_58;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  goto <bb 4>; [INV]

  <bb 3> :
  _62 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_63 = _62 + ElapsedTicks_17;

  <bb 4> :
  # ElapsedTicks_17 = PHI <ElapsedTicks_28(2), ElapsedTicks_63(3)>
  _14 ={v} Base_22->SC3;
  _15 = _14 & 128;
  if (_15 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  if (ElapsedTicks_17 < TimeoutTicks_25)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (ElapsedTicks_17 >= TimeoutTicks_25)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status_64 = 2;

  <bb 8> :
  # Status_16 = PHI <Status_23(6), Status_64(7)>
  Adc_DoCalibration_SetParams (Base_22, &PreClockConfig, TriggerMode_36);
  vol.10_66 ={v} Base_22->R[0];
  _67 = Status_16;
  CurrentTicks ={v} {CLOBBER};
  PreClockConfig ={v} {CLOBBER};
  CalClockConfig ={v} {CLOBBER};

  <bb 9> :
<L7>:
  return _67;

}


Adc_Ip_GetConvData (const uint32 Instance, const uint8 ControlChanIdx)
{
  const struct ADC_Type * const Base;
  uint16 D.6384;
  _Bool _1;
  _Bool _2;
  uint16 _10;

  <bb 2> :
  _1 = Instance_3(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_6(D) <= 15;
  DevAssert (_2);
  Base_8 = AdcBase[Instance_3(D)];
  _10 = Adc_HwAcc_GetData (Base_8, ControlChanIdx_6(D));

  <bb 3> :
<L0>:
  return _10;

}


Adc_Ip_GetConvCompleteFlag (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6380;
  _Bool _1;
  _Bool _2;
  int _3;
  boolean _12;

  <bb 2> :
  _1 = Instance_4(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_7(D) <= 15;
  DevAssert (_2);
  Base_9 = AdcBase[Instance_4(D)];
  _3 = (int) ControlChanIdx_7(D);
  Sc1Reg_10 ={v} Base_9->SC1[_3];
  _12 = Adc_HwAcc_GetCOCO (Sc1Reg_10);

  <bb 3> :
<L0>:
  return _12;

}


Adc_Ip_GetChanInterrupt (const uint32 Instance, const uint8 ControlChanIdx)
{
  const uint32 Sc1Reg;
  const struct ADC_Type * const Base;
  boolean D.6376;
  _Bool _1;
  _Bool _2;
  int _3;
  boolean _12;

  <bb 2> :
  _1 = Instance_4(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_7(D) <= 15;
  DevAssert (_2);
  Base_9 = AdcBase[Instance_4(D)];
  _3 = (int) ControlChanIdx_7(D);
  Sc1Reg_10 ={v} Base_9->SC1[_3];
  _12 = Adc_HwAcc_GetAIEN (Sc1Reg_10);

  <bb 3> :
<L0>:
  return _12;

}


Adc_Ip_GetConvActiveFlag (const uint32 Instance)
{
  uint32 Sc2Reg;
  const struct ADC_Type * const Base;
  boolean D.6374;
  _Bool _1;
  long unsigned int _2;
  boolean _9;

  <bb 2> :
  _1 = Instance_3(D) <= 1;
  DevAssert (_1);
  Base_6 = AdcBase[Instance_3(D)];
  Sc2Reg_7 ={v} Base_6->SC2;
  _2 = Sc2Reg_7 >> 7;
  Sc2Reg_8 = _2 & 1;
  _9 = Sc2Reg_8 != 0;

  <bb 3> :
<L0>:
  return _9;

}


Adc_Ip_StartConversion (const uint32 Instance, Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  struct ADC_Type * const Base;
  _Bool _1;

  <bb 2> :
  _1 = Instance_2(D) <= 1;
  DevAssert (_1);
  Base_5 = AdcBase[Instance_2(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18 ();
  Adc_HwAcc_SetChannel (Base_5, 0, InputChannel_7(D), InterruptEnable_8(D));
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18 ();
  return;

}


Adc_Ip_SetDisabledChannel (const uint32 Instance, const uint8 ControlChanIdx, const boolean WithTimeout)
{
  uint32 ElapsedTicks;
  uint32 CurrentTicks;
  uint32 TimeoutTicks;
  Adc_Ip_StatusType Status;
  struct ADC_Type * const Base;
  Adc_Ip_StatusType D.6371;
  long unsigned int D.6367;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _32;
  Adc_Ip_StatusType _35;

  <bb 2> :
  _1 = Instance_15(D) <= 1;
  DevAssert (_1);
  _2 = ControlChanIdx_18(D) <= 15;
  DevAssert (_2);
  Base_20 = AdcBase[Instance_15(D)];
  Status_21 = 0;
  TimeoutTicks_23 = OsIf_MicrosToTicks (10000, 0);
  _3 = OsIf_GetCounter (0);
  CurrentTicks = _3;
  ElapsedTicks_26 = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17 ();
  _4 = (int) ControlChanIdx_18(D);
  _5 ={v} Base_20->SC1[_4];
  _6 = (int) ControlChanIdx_18(D);
  _7 = _5 | 31;
  Base_20->SC1[_6] ={v} _7;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17 ();
  if (WithTimeout_30(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 5>; [INV]

  <bb 4> :
  _32 = OsIf_GetElapsed (&CurrentTicks, 0);
  ElapsedTicks_33 = _32 + ElapsedTicks_12;

  <bb 5> :
  # ElapsedTicks_12 = PHI <ElapsedTicks_26(3), ElapsedTicks_33(4)>
  _8 = (int) ControlChanIdx_18(D);
  _9 ={v} Base_20->SC1[_8];
  _10 = _9 & 31;
  if (_10 != 31)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (ElapsedTicks_12 < TimeoutTicks_23)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (ElapsedTicks_12 >= TimeoutTicks_23)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Status_34 = 2;

  <bb 9> :
  # Status_11 = PHI <Status_21(2), Status_21(7), Status_34(8)>
  _35 = Status_11;
  CurrentTicks ={v} {CLOBBER};

  <bb 10> :
<L9>:
  return _35;

}


Adc_Ip_ConfigChannel (const uint32 Instance, const struct Adc_Ip_ChanConfigType * const ChanConfig)
{
  Adc_Ip_InputChannelType InputChanDemapped;
  struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  unsigned char _5;
  int _6;
  <unnamed type> _7;

  <bb 2> :
  _1 = Instance_8(D) <= 1;
  DevAssert (_1);
  _2 = ChanConfig_11(D) != 0B;
  DevAssert (_2);
  Base_13 = AdcBase[Instance_8(D)];
  InputChanDemapped_14 = ChanConfig_11(D)->Channel;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _3 = ChanConfig_11(D)->ChnIdx;
  _4 = ChanConfig_11(D)->InterruptEnable;
  Adc_HwAcc_SetChannel (Base_13, _3, InputChanDemapped_14, _4);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21 ();
  _5 = ChanConfig_11(D)->ChnIdx;
  _6 = (int) _5;
  _7 = ChanConfig_11(D)->Channel;
  AdcIpState[Instance_8(D)].ChannelConfig[_6] = _7;
  return;

}


Adc_Ip_SetClockMode (const uint32 Instance, const struct Adc_Ip_ClockConfigType * const Config)
{
  struct ADC_Type * const Base;
  _Bool _1;
  _Bool _2;
  <unnamed type> _3;
  <unnamed type> _4;
  unsigned char _5;
  _Bool _6;
  <unnamed type> _7;

  <bb 2> :
  _1 = Instance_8(D) <= 1;
  DevAssert (_1);
  _2 = Config_11(D) != 0B;
  DevAssert (_2);
  Base_13 = AdcBase[Instance_8(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11 ();
  _3 = Config_11(D)->ClockDivide;
  _4 = Config_11(D)->InputClock;
  Adc_HwAcc_SetClock (Base_13, _3, _4);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14 ();
  _5 = Config_11(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_13, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28 ();
  _6 = Config_11(D)->AvgEn;
  _7 = Config_11(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_13, _6, _7);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28 ();
  return;

}


Adc_Ip_SetResolution (const uint32 Instance, const Adc_Ip_ResolutionType Resolution)
{
  uint32 Cfg1Reg;
  struct ADC_Type * const Base;
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = Instance_4(D) <= 1;
  DevAssert (_1);
  Base_7 = AdcBase[Instance_4(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10 ();
  Cfg1Reg_9 ={v} Base_7->CFG1;
  Cfg1Reg_10 = Cfg1Reg_9 & 4294967283;
  _2 = Resolution_11(D) << 2;
  _3 = _2 & 12;
  Cfg1Reg_12 = Cfg1Reg_10 | _3;
  Base_7->CFG1 ={v} Cfg1Reg_12;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10 ();
  return;

}


Adc_Ip_SetContinuousMode (const uint32 Instance, const boolean ContinuousModeEnable)
{
  uint32 Sc3Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.8;
  _Bool _1;
  long unsigned int iftmp.8_2;
  long unsigned int iftmp.8_11;
  long unsigned int iftmp.8_12;

  <bb 2> :
  _1 = Instance_3(D) <= 1;
  DevAssert (_1);
  Base_6 = AdcBase[Instance_3(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30 ();
  Sc3Reg_8 ={v} Base_6->SC3;
  Sc3Reg_9 = Sc3Reg_8 & 4294967287;
  if (ContinuousModeEnable_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.8_12 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.8_11 = 0;

  <bb 5> :
  # iftmp.8_2 = PHI <iftmp.8_12(3), iftmp.8_11(4)>
  Sc3Reg_13 = iftmp.8_2 | Sc3Reg_9;
  Base_6->SC3 ={v} Sc3Reg_13;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30 ();
  return;

}


Adc_Ip_SetTriggerMode (const uint32 Instance, const Adc_Ip_TrigType TriggerMode)
{
  struct ADC_Type * const Base;
  _Bool _1;

  <bb 2> :
  _1 = Instance_2(D) <= 1;
  DevAssert (_1);
  Base_5 = AdcBase[Instance_2(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23 ();
  Adc_HwAcc_SetTriggerMode (Base_5, TriggerMode_7(D));
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23 ();
  return;

}


Adc_Ip_DisableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = Instance_4(D) <= 1;
  DevAssert (_1);
  Base_7 = AdcBase[Instance_4(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22 ();
  _2 ={v} Base_7->SC2;
  _3 = _2 & 4294967291;
  Base_7->SC2 ={v} _3;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22 ();
  return;

}


Adc_Ip_EnableDma (const uint32 Instance)
{
  struct ADC_Type * const Base;
  _Bool _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = Instance_4(D) <= 1;
  DevAssert (_1);
  Base_7 = AdcBase[Instance_4(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26 ();
  _2 ={v} Base_7->SC2;
  _3 = _2 | 4;
  Base_7->SC2 ={v} _3;
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26 ();
  return;

}


Adc_Ip_SetSampleTime (const uint32 Instance, const uint8 SampleTime)
{
  struct ADC_Type * const Base;
  _Bool _1;

  <bb 2> :
  _1 = Instance_2(D) <= 1;
  DevAssert (_1);
  Base_5 = AdcBase[Instance_2(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16 ();
  Adc_HwAcc_SetSampleTime (Base_5, SampleTime_7(D));
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16 ();
  return;

}


Adc_Ip_SetAveraging (const uint32 Instance, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  struct ADC_Type * const Base;
  _Bool _1;

  <bb 2> :
  _1 = Instance_2(D) <= 1;
  DevAssert (_1);
  Base_5 = AdcBase[Instance_2(D)];
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27 ();
  Adc_HwAcc_SetAveraging (Base_5, AvgEn_7(D), AvgSel_8(D));
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27 ();
  return;

}


Adc_Ip_DeInit (const uint32 Instance)
{
  uint8 Index;
  struct Adc_Ip_ChanConfigType ChannelConfigs[16];
  struct Adc_Ip_ConfigType DefaultConfig;
  _Bool _1;
  int _2;
  int _3;
  int _4;
  unsigned char Index.7_5;

  <bb 2> :
  _1 = Instance_8(D) <= 1;
  DevAssert (_1);
  DefaultConfig.ClockDivide = 0;
  DefaultConfig.CalibrationClockDivide = 3;
  DefaultConfig.InputClock = 0;
  DefaultConfig.SampleTime = 12;
  DefaultConfig.AvgEn = 0;
  DefaultConfig.AvgSel = 0;
  DefaultConfig.Resolution = 0;
  DefaultConfig.TriggerMode = 0;
  DefaultConfig.DmaEnable = 0;
  DefaultConfig.VoltageRef = 0;
  DefaultConfig.ContinuousConvEnable = 0;
  DefaultConfig.CompareEnable = 0;
  DefaultConfig.CompareGreaterThanEnable = 0;
  DefaultConfig.CompareRangeFuncEnable = 0;
  DefaultConfig.CompVal1 = 0;
  DefaultConfig.CompVal2 = 0;
  DefaultConfig.UsrGain = 4;
  DefaultConfig.UsrOffset = 0;
  DefaultConfig.NumChannels = 16;
  Index_30 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = (int) Index_6;
  ChannelConfigs[_2].ChnIdx = Index_6;
  _3 = (int) Index_6;
  ChannelConfigs[_3].Channel = 31;
  _4 = (int) Index_6;
  ChannelConfigs[_4].InterruptEnable = 0;
  Index.7_5 = Index_6;
  Index_40 = Index.7_5 + 1;

  <bb 4> :
  # Index_6 = PHI <Index_30(2), Index_40(3)>
  if (Index_6 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  DefaultConfig.ChannelConfigs = &ChannelConfigs;
  DefaultConfig.ConversionCompleteNotification = 0B;
  Adc_Ip_Init (Instance_8(D), &DefaultConfig);
  AdcIpState[Instance_8(D)].Init = 0;
  DefaultConfig ={v} {CLOBBER};
  ChannelConfigs ={v} {CLOBBER};
  return;

}


Adc_Ip_Init (const uint32 Instance, const struct Adc_Ip_ConfigType * const Config)
{
  uint8 Index;
  uint32 SC2ClearMask;
  uint32 SC2Reg;
  struct ADC_Type * const Base;
  long unsigned int iftmp.2;
  long unsigned int iftmp.1;
  long unsigned int iftmp.0;
  _Bool _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  <unnamed type> _5;
  <unnamed type> _6;
  unsigned char _7;
  _Bool _8;
  <unnamed type> _9;
  <unnamed type> _10;
  <unnamed type> _11;
  long unsigned int _12;
  long unsigned int _13;
  _Bool _14;
  <unnamed type> _15;
  long unsigned int _16;
  _Bool _17;
  _Bool _18;
  _Bool _19;
  short unsigned int _20;
  long unsigned int _21;
  short unsigned int _22;
  long unsigned int _23;
  short unsigned int _24;
  short unsigned int _25;
  _Bool _26;
  const struct Adc_Ip_ChanConfigType * _27;
  const struct Adc_Ip_ChanConfigType * _28;
  unsigned int _29;
  unsigned int _30;
  const struct Adc_Ip_ChanConfigType * _31;
  unsigned char Index.3_32;
  unsigned char _33;
  void (*<T4d9>) (const uint8) _34;
  <unnamed type> _35;
  long unsigned int iftmp.0_39;
  long unsigned int iftmp.1_40;
  long unsigned int iftmp.2_41;
  long unsigned int iftmp.0_64;
  long unsigned int iftmp.0_65;
  long unsigned int iftmp.1_67;
  long unsigned int iftmp.1_68;
  long unsigned int iftmp.2_70;
  long unsigned int iftmp.2_71;

  <bb 2> :
  _1 = Instance_44(D) <= 1;
  DevAssert (_1);
  _2 = Config_47(D) != 0B;
  DevAssert (_2);
  _3 = Config_47(D)->NumChannels;
  _4 = _3 <= 16;
  DevAssert (_4);
  Base_50 = AdcBase[Instance_44(D)];
  SC2Reg_51 = 0;
  SC2ClearMask_52 = 0;
  _5 = Config_47(D)->ClockDivide;
  _6 = Config_47(D)->InputClock;
  Adc_HwAcc_SetClock (Base_50, _5, _6);
  _7 = Config_47(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_50, _7);
  _8 = Config_47(D)->AvgEn;
  _9 = Config_47(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_50, _8, _9);
  _10 = Config_47(D)->Resolution;
  Adc_Ip_SetResolution (Instance_44(D), _10);
  SC2ClearMask_57 = SC2ClearMask_52 | 64;
  _11 = Config_47(D)->TriggerMode;
  _12 = _11 << 6;
  _13 = _12 & 64;
  SC2Reg_58 = SC2Reg_51 | _13;
  _14 = Config_47(D)->DmaEnable;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SC2Reg_60 = SC2Reg_58 | 4;
  goto <bb 5>; [INV]

  <bb 4> :
  SC2ClearMask_59 = SC2ClearMask_57 | 4;

  <bb 5> :
  # SC2Reg_36 = PHI <SC2Reg_60(3), SC2Reg_58(4)>
  # SC2ClearMask_37 = PHI <SC2ClearMask_57(3), SC2ClearMask_59(4)>
  SC2ClearMask_61 = SC2ClearMask_37 | 3;
  _15 = Config_47(D)->VoltageRef;
  _16 = _15 & 3;
  SC2Reg_62 = SC2Reg_36 | _16;
  SC2ClearMask_63 = SC2ClearMask_61 | 56;
  _17 = Config_47(D)->CompareEnable;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.0_65 = 32;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.0_64 = 0;

  <bb 8> :
  # iftmp.0_39 = PHI <iftmp.0_65(6), iftmp.0_64(7)>
  SC2Reg_66 = iftmp.0_39 | SC2Reg_62;
  _18 = Config_47(D)->CompareGreaterThanEnable;
  if (_18 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1_68 = 16;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.1_67 = 0;

  <bb 11> :
  # iftmp.1_40 = PHI <iftmp.1_68(9), iftmp.1_67(10)>
  SC2Reg_69 = iftmp.1_40 | SC2Reg_66;
  _19 = Config_47(D)->CompareRangeFuncEnable;
  if (_19 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.2_71 = 8;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2_70 = 0;

  <bb 14> :
  # iftmp.2_41 = PHI <iftmp.2_71(12), iftmp.2_70(13)>
  SC2Reg_72 = iftmp.2_41 | SC2Reg_69;
  _20 = Config_47(D)->CompVal1;
  _21 = (long unsigned int) _20;
  Base_50->CV[0] ={v} _21;
  _22 = Config_47(D)->CompVal2;
  _23 = (long unsigned int) _22;
  Base_50->CV[1] ={v} _23;
  Adc_HwAcc_SetSC2Reg (Base_50, SC2ClearMask_63, SC2Reg_72);
  _24 = Config_47(D)->UsrGain;
  _25 = Config_47(D)->UsrOffset;
  Adc_HwAcc_SetUserGainAndOffset (Base_50, _24, _25);
  _26 = Config_47(D)->ContinuousConvEnable;
  Adc_Ip_SetContinuousMode (Instance_44(D), _26);
  _27 = Config_47(D)->ChannelConfigs;
  if (_27 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  Index_78 = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _28 = Config_47(D)->ChannelConfigs;
  _29 = (unsigned int) Index_38;
  _30 = _29 * 12;
  _31 = _28 + _30;
  Adc_Ip_ConfigChannel (Instance_44(D), _31);
  Index.3_32 = Index_38;
  Index_80 = Index.3_32 + 1;

  <bb 17> :
  # Index_38 = PHI <Index_78(15), Index_80(16)>
  _33 = Config_47(D)->NumChannels;
  if (Index_38 < _33)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _34 = Config_47(D)->ConversionCompleteNotification;
  AdcIpState[Instance_44(D)].ConversionCompleteNotification = _34;
  _35 = Config_47(D)->CalibrationClockDivide;
  AdcIpState[Instance_44(D)].CalibrationClockDivide = _35;
  AdcIpState[Instance_44(D)].Init = 1;
  return;

}


Adc_DoCalibration_SetParams (struct ADC_Type * const Base, const struct Adc_Ip_ClockConfigType * const Config, const Adc_Ip_TrigType TriggerMode)
{
  _Bool _1;
  <unnamed type> _2;
  unsigned char _3;
  <unnamed type> _4;
  <unnamed type> _5;

  <bb 2> :
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29 ();
  _1 = Config_8(D)->AvgEn;
  _2 = Config_8(D)->AvgSel;
  Adc_HwAcc_SetAveraging (Base_9(D), _1, _2);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24 ();
  Adc_HwAcc_SetTriggerMode (Base_9(D), TriggerMode_13(D));
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15 ();
  _3 = Config_8(D)->SampleTime;
  Adc_HwAcc_SetSampleTime (Base_9(D), _3);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13 ();
  _4 = Config_8(D)->ClockDivide;
  _5 = Config_8(D)->InputClock;
  Adc_HwAcc_SetClock (Base_9(D), _4, _5);
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13 ();
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.4_1;

  <bb 2> :
  x.4_1 ={v} x;
  if (x.4_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


Adc_HwAcc_GetData (const struct ADC_Type * const Base, const uint8 ChnIdx)
{
  uint16 Result;
  uint16 D.6386;
  int _1;
  long unsigned int _2;
  uint16 _8;

  <bb 2> :
  _1 = (int) ChnIdx_3(D);
  _2 ={v} Base_5(D)->R[_1];
  Result_6 = (uint16) _2;
  Result_7 = Result_6 & 4095;
  _8 = Result_7;

  <bb 3> :
<L0>:
  return _8;

}


Adc_HwAcc_GetCOCO (const uint32 Reg)
{
  boolean D.6382;
  long unsigned int _1;
  int _2;
  int _3;
  boolean _5;

  <bb 2> :
  _1 = Reg_4(D) >> 7;
  _2 = (int) _1;
  _3 = _2 & 1;
  _5 = _3 != 0;

  <bb 3> :
<L0>:
  return _5;

}


Adc_HwAcc_GetAIEN (const uint32 Reg)
{
  boolean D.6378;
  long unsigned int _1;
  int _2;
  int _3;
  boolean _5;

  <bb 2> :
  _1 = Reg_4(D) >> 6;
  _2 = (int) _1;
  _3 = _2 & 1;
  _5 = _3 != 0;

  <bb 3> :
<L0>:
  return _5;

}


Adc_HwAcc_SetUserGainAndOffset (struct ADC_Type * const Base, const uint16 UsrGain, const uint16 UsrOffset)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  _1 = (long unsigned int) UsrOffset_5(D);
  _2 = _1 & 255;
  Base_7(D)->USR_OFS ={v} _2;
  _3 = (long unsigned int) UsrGain_9(D);
  _4 = _3 & 1023;
  Base_7(D)->UG ={v} _4;
  return;

}


Adc_HwAcc_SetChannel (struct ADC_Type * const Base, const uint8 ChnIdx, const Adc_Ip_InputChannelType InputChannel, const boolean InterruptEnable)
{
  uint32 Sc1Reg;
  long unsigned int iftmp.9;
  int _1;
  long unsigned int _2;
  int _3;
  long unsigned int iftmp.9_4;
  long unsigned int iftmp.9_13;
  long unsigned int iftmp.9_14;

  <bb 2> :
  _1 = (int) ChnIdx_5(D);
  Sc1Reg_8 ={v} Base_7(D)->SC1[_1];
  Sc1Reg_9 = Sc1Reg_8 & 4294967200;
  _2 = InputChannel_10(D) & 31;
  Sc1Reg_11 = Sc1Reg_9 | _2;
  if (InterruptEnable_12(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.9_14 = 64;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.9_13 = 0;

  <bb 5> :
  # iftmp.9_4 = PHI <iftmp.9_14(3), iftmp.9_13(4)>
  Sc1Reg_15 = iftmp.9_4 | Sc1Reg_11;
  _3 = (int) ChnIdx_5(D);
  Base_7(D)->SC1[_3] ={v} Sc1Reg_15;
  return;

}


Adc_HwAcc_GetTriggerMode (const uint32 Reg)
{
  Adc_Ip_TrigType ReturnValue;
  Adc_Ip_TrigType D.6400;
  long unsigned int _1;
  Adc_Ip_TrigType _6;

  <bb 2> :
  ReturnValue_3 = 0;
  _1 = Reg_4(D) & 64;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue_5 = 1;

  <bb 4> :
  # ReturnValue_2 = PHI <ReturnValue_3(2), ReturnValue_5(3)>
  _6 = ReturnValue_2;

  <bb 5> :
<L2>:
  return _6;

}


Adc_HwAcc_SetTriggerMode (struct ADC_Type * const Base, const Adc_Ip_TrigType TriggerMode)
{
  uint32 Sc2Reg;
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  Sc2Reg_5 ={v} Base_4(D)->SC2;
  Sc2Reg_6 = Sc2Reg_5 & 4294967231;
  _1 = TriggerMode_7(D) << 6;
  _2 = _1 & 64;
  Sc2Reg_8 = Sc2Reg_6 | _2;
  Base_4(D)->SC2 ={v} Sc2Reg_8;
  return;

}


Adc_HwAcc_GetAverageSelect (const uint32 Reg)
{
  Adc_Ip_AvgSelectType ReturnValue;
  Adc_Ip_AvgSelectType D.6396;
  long unsigned int _1;
  Adc_Ip_AvgSelectType _8;

  <bb 2> :
  ReturnValue_3 = 0;
  _1 = Reg_4(D) & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue_7 = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue_6 = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue_5 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # ReturnValue_2 = PHI <ReturnValue_7(3), ReturnValue_6(4), ReturnValue_5(5), ReturnValue_3(6)>
  _8 = ReturnValue_2;

  <bb 8> :
<L5>:
  return _8;

}


Adc_HwAcc_SetAveraging (struct ADC_Type * const Base, const boolean AvgEn, const Adc_Ip_AvgSelectType AvgSel)
{
  uint32 Sc3Reg;
  long unsigned int iftmp.6;
  long unsigned int _1;
  long unsigned int iftmp.6_2;
  long unsigned int iftmp.6_8;
  long unsigned int iftmp.6_9;

  <bb 2> :
  Sc3Reg_5 ={v} Base_4(D)->SC3;
  Sc3Reg_6 = Sc3Reg_5 & 4294967288;
  if (AvgEn_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6_9 = 4;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_8 = 0;

  <bb 5> :
  # iftmp.6_2 = PHI <iftmp.6_9(3), iftmp.6_8(4)>
  Sc3Reg_10 = iftmp.6_2 | Sc3Reg_6;
  _1 = AvgSel_11(D) & 3;
  Sc3Reg_12 = Sc3Reg_10 | _1;
  Base_4(D)->SC3 ={v} Sc3Reg_12;
  return;

}


Adc_HwAcc_SetSampleTime (struct ADC_Type * const Base, const uint8 SampleTime)
{
  uint32 Cfg2Reg;
  uint8 ClippedSampleTime;
  unsigned char iftmp.5;
  long unsigned int _1;
  unsigned char iftmp.5_2;
  unsigned char iftmp.5_4;
  unsigned char iftmp.5_5;

  <bb 2> :
  if (SampleTime_3(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.5_5 = SampleTime_3(D);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.5_4 = 1;

  <bb 5> :
  # iftmp.5_2 = PHI <iftmp.5_5(3), iftmp.5_4(4)>
  ClippedSampleTime_6 = iftmp.5_2;
  Cfg2Reg_9 ={v} Base_8(D)->CFG2;
  Cfg2Reg_10 = Cfg2Reg_9 & 4294967040;
  _1 = (long unsigned int) ClippedSampleTime_6;
  Cfg2Reg_11 = Cfg2Reg_10 | _1;
  Base_8(D)->CFG2 ={v} Cfg2Reg_11;
  return;

}


Adc_HwAcc_GetInputClock (const uint32 Reg)
{
  Adc_Ip_ClkSourceType ReturnValue;
  Adc_Ip_ClkSourceType D.6404;
  long unsigned int _1;
  Adc_Ip_ClkSourceType _8;

  <bb 2> :
  ReturnValue_3 = 0;
  _1 = Reg_4(D) & 3;
  switch (_1) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue_7 = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue_6 = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue_5 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # ReturnValue_2 = PHI <ReturnValue_7(3), ReturnValue_6(4), ReturnValue_5(5), ReturnValue_3(6)>
  _8 = ReturnValue_2;

  <bb 8> :
<L5>:
  return _8;

}


Adc_HwAcc_GetClockDivide (const uint32 Reg)
{
  Adc_Ip_ClockSelType ReturnValue;
  Adc_Ip_ClockSelType D.6402;
  long unsigned int _1;
  long unsigned int _2;
  Adc_Ip_ClockSelType _9;

  <bb 2> :
  ReturnValue_4 = 0;
  _1 = Reg_5(D) >> 5;
  _2 = _1 & 3;
  switch (_2) <default: <L3> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  ReturnValue_8 = 1;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  ReturnValue_7 = 2;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  ReturnValue_6 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  # ReturnValue_3 = PHI <ReturnValue_8(3), ReturnValue_7(4), ReturnValue_6(5), ReturnValue_4(6)>
  _9 = ReturnValue_3;

  <bb 8> :
<L5>:
  return _9;

}


Adc_HwAcc_SetClock (struct ADC_Type * const Base, const Adc_Ip_ClockSelType ClockDivide, const Adc_Ip_ClkSourceType InputClock)
{
  uint32 Cfg1Reg;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  Cfg1Reg_6 ={v} Base_5(D)->CFG1;
  Cfg1Reg_7 = Cfg1Reg_6 & 4294967196;
  _1 = ClockDivide_8(D) << 5;
  _2 = _1 & 96;
  Cfg1Reg_9 = Cfg1Reg_7 | _2;
  _3 = InputClock_10(D) & 3;
  Cfg1Reg_11 = Cfg1Reg_9 | _3;
  Base_5(D)->CFG1 ={v} Cfg1Reg_11;
  return;

}


Adc_HwAcc_SetSC2Reg (struct ADC_Type * const Base, const uint32 ClearMask, const uint32 Value)
{
  uint32 Sc2Reg;
  long unsigned int _1;

  <bb 2> :
  Sc2Reg_4 ={v} Base_3(D)->SC2;
  _1 = ~ClearMask_5(D);
  Sc2Reg_6 = Sc2Reg_4 & _1;
  Sc2Reg_8 = Sc2Reg_6 | Value_7(D);
  Base_3(D)->SC2 ={v} Sc2Reg_8;
  return;

}


